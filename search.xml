<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>DRF下的JWT</title>
    <url>/DRF/20191106-Django-REST-Framework-5.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>在前后端分离项目中我们常使用JWT来保存用户的登录信息，本篇介绍JWT原理以及在django-restframewrok下使用JWT</p></blockquote><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>在用户注册或登录后，我们想记录用户的登录状态，或者为用户创建身份认证的凭证。我们不再使用Session认证机制，而使用Json Web Token认证机制。</p><blockquote><p>Json web token (JWT), 是为了在网络应用环境间传递声明而执行的一种基于JSON的开放标准（(RFC 7519)。该token被设计为紧凑且安全的，特别适用于<strong>分布式站点的单点登录（SSO）场景</strong>。JWT的声明一般被用来在身份提供者和服务提供者间传递被认证的用户身份信息，以便于从资源服务器获取资源，也可以增加一些额外的其它业务逻辑所必须的声明信息，该token也可直接被用于<strong>认证</strong>，也可被<strong>加密</strong>。</p></blockquote><p>单点登录：对于分布式服务器来说，我们登陆一次后，其它服务器也可以登录。</p><p>所以，从这一点开始反思 <code>session</code> ，如果使用 <code>session</code> 的话，我们必须得有一个公共的资源，能够让这些服务器都访问的到。例如，这些服务器共用一个数据库服务器，这样也就可以实现了单点登录。从这个角度考虑的话，JWT 就要简单很多了！</p><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p>JWT就一段字符串，由三段信息构成的，将这三段信息文本用<code>.</code>链接一起就构成了Jwt字符串。就像这样:</p><figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">eyJ<span class="number">0</span>eXAiOiJKV<span class="number">1</span>QiLCJhbGciOiJIUzI<span class="number">1</span><span class="symbol">NiJ9</span>.eyJzdWIiOiIxMj<span class="name">M0</span><span class="symbol">NTY3</span>ODkwIiwibmFtZSI<span class="number">6</span>Ikpva<span class="name">G4</span>gR<span class="name">G9</span>lIiwiYWRtaW<span class="number">4</span>iO<span class="symbol">nRydWV9</span>.TJVA<span class="number">95</span><span class="keyword">Or</span><span class="name">M7</span>E<span class="number">2</span>cBab<span class="number">30</span>RMHrHDcEfxjoYZgeFO<span class="symbol">NFh7</span>HgQ</span><br></pre></td></tr></table></figure><p>第一部分我们称它为头部（header),第二部分我们称其为载荷（payload, 类似于飞机上承载的物品)，第三部分是签证（signature).</p><h3 id="header"><a href="#header" class="headerlink" title="header"></a>header</h3><p>jwt的头部承载两部分信息：</p><ul><li>声明类型，这里是jwt</li><li>声明加密的算法 通常直接使用 HMAC SHA256</li></ul><p>完整的头部就像下面这样的JSON：</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  'typ': 'JWT',</span><br><span class="line">  'alg': 'HS256'</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后将头部进行base64加密（该加密是可以对称解密的),构成了第一部分.</p><figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">eyJ<span class="number">0</span>eXAiOiJKV<span class="number">1</span>QiLCJhbGciOiJIUzI<span class="number">1</span><span class="symbol">NiJ9</span></span><br></pre></td></tr></table></figure><h3 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h3><p>载荷就是存放有效信息的地方。这个名字像是特指飞机上承载的货品，这些有效信息包含三个部分</p><ul><li>标准中注册的声明</li><li>公共的声明</li><li>私有的声明</li></ul><p><strong>标准中注册的声明</strong> (建议但不强制使用) ：</p><ul><li><strong>iss</strong>: jwt签发者</li><li><strong>sub</strong>: jwt所面向的用户</li><li><strong>aud</strong>: 接收jwt的一方</li><li><strong>exp</strong>: jwt的过期时间，这个过期时间必须要大于签发时间</li><li><strong>nbf</strong>: 定义在什么时间之前，该jwt都是不可用的.</li><li><strong>iat</strong>: jwt的签发时间</li><li><strong>jti</strong>: jwt的唯一身份标识，主要用来作为一次性token,从而回避重放攻击。</li></ul><p><strong>公共的声明</strong> ： 公共的声明可以添加任何的信息，一般添加用户的相关信息或其他业务需要的必要信息.但不建议添加敏感信息，因为该部分在客户端可解密.</p><p><strong>私有的声明</strong> ： 私有声明是提供者和消费者所共同定义的声明，一般不建议存放敏感信息，因为base64是对称解密的，意味着该部分信息可以归类为明文信息。</p><p>定义一个payload:</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"sub"</span>: <span class="string">"1234567890"</span>,</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"John Doe"</span>,</span><br><span class="line">  <span class="attr">"admin"</span>: <span class="number">231</span>sldsad2131</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后将其进行base64.b64encode() 加密，得到JWT的第二部分。</p><figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">eyJzdWIiOiIxMj<span class="name">M0</span><span class="symbol">NTY3</span>ODkwIiwibmFtZSI<span class="number">6</span>Ikpva<span class="name">G4</span>gR<span class="name">G9</span>lIiwiYWRtaW<span class="number">4</span>iO<span class="symbol">nRydWV9</span></span><br></pre></td></tr></table></figure><h3 id="signature"><a href="#signature" class="headerlink" title="signature"></a>signature</h3><p>JWT的第三部分是一个防止客户端篡改信息的签证信息，这个签证信息由三个小部分组成：</p><ul><li>header (base64后的)</li><li>payload (base64后的)</li><li>secret[秘钥]</li></ul><p>这个部分需要base64加密后的header和base64加密后的payload使用<code>.</code>连接组成的字符串，然后通过header中声明的加密方式进行加盐<code>secret</code>组合加密，然后就构成了jwt的第三部分。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// javascript</span></span><br><span class="line"><span class="keyword">var</span> encodedString = base64UrlEncode(header) + <span class="string">'.'</span> + base64UrlEncode(payload);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> signature = HMACSHA256(encodedString, <span class="string">'secret'</span>); <span class="comment">// TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ</span></span><br></pre></td></tr></table></figure><p>将这三部分用<code>.</code>连接成一个完整的字符串,构成了最终的jwt:</p><figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">eyJhbGciOiJIUzI<span class="number">1</span><span class="symbol">NiIsInR5</span>cCI<span class="number">6</span>IkpX<span class="attr">VCJ9</span>.eyJzdWIiOiIxMj<span class="name">M0</span><span class="symbol">NTY3</span>ODkwIiwibmFtZSI<span class="number">6</span>Ikpva<span class="name">G4</span>gR<span class="name">G9</span>lIiwiYWRtaW<span class="number">4</span>iO<span class="symbol">nRydWV9</span>.TJVA<span class="number">95</span><span class="keyword">Or</span><span class="name">M7</span>E<span class="number">2</span>cBab<span class="number">30</span>RMHrHDcEfxjoYZgeFO<span class="symbol">NFh7</span>HgQ</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ol><li><strong>secret是保存在服务器端的，jwt的签发生成也是在服务器端的。</strong></li><li><strong>secret就是用来进行jwt的签发和jwt的验证，所以，它就是你服务端的私钥，在任何场景都不应该流露出去。一旦客户端得知这个secret, 那就意味着客户端是可以自我签发jwt了。</strong></li></ol><p>ps：如果</p><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p><img src="/DRF/20191106-Django-REST-Framework-5/JWT%E7%9A%84%E6%B5%81%E7%A8%8B.png" alt="JWT的流程"></p><p>jwt的优势：</p><ol><li>天生适用于SSO单点登录</li><li>服务端只需要存储秘钥，不需要分别存放用户的jwt信息，降低了服务器的存储压力</li><li>比cookie更加安全可靠。</li><li>还可以用于提供数据加密传输的功能</li></ol><p>jwt的缺点：</p><ol><li>jwt存放在客户端的，所以一旦签发以后，我们服务端是无法控制或提前回收.</li><li>增加客户端的技术难度</li></ol><h1 id="DRF框架下使用JWT"><a href="#DRF框架下使用JWT" class="headerlink" title="DRF框架下使用JWT"></a>DRF框架下使用JWT</h1><p><strong>关于签发和核验JWT，我们可以使用Django REST framework JWT扩展来完成。</strong></p><p>推荐阅读：<a href="http://jpadilla.github.io/django-rest-framework-jwt/" target="_blank" rel="noopener">官方文档</a></p><h2 id="安装配置JWT"><a href="#安装配置JWT" class="headerlink" title="安装配置JWT"></a>安装配置JWT</h2><p>安装</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install djangorestframework-jwt</span><br></pre></td></tr></table></figure><p>配置</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">'DEFAULT_AUTHENTICATION_CLASSES'</span>: (</span><br><span class="line">        <span class="string">'rest_framework_jwt.authentication.JSONWebTokenAuthentication'</span>,</span><br><span class="line">        <span class="string">'rest_framework.authentication.SessionAuthentication'</span>,</span><br><span class="line">        <span class="string">'rest_framework.authentication.BasicAuthentication'</span>,</span><br><span class="line">    ),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">JWT_AUTH = &#123;</span><br><span class="line">    <span class="string">'JWT_EXPIRATION_DELTA'</span>: datetime.timedelta(days=<span class="number">1</span>),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>JWT_EXPIRATION_DELTA 指明token的有效期</li></ul><h2 id="生成jwt"><a href="#生成jwt" class="headerlink" title="生成jwt"></a>生成jwt</h2><p>Django REST framework JWT 扩展的说明文档中提供了手动签发JWT的方法</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework_jwt.settings <span class="keyword">import</span> api_settings</span><br><span class="line"></span><br><span class="line">jwt_payload_handler = api_settings.JWT_PAYLOAD_HANDLER</span><br><span class="line">jwt_encode_handler = api_settings.JWT_ENCODE_HANDLER</span><br><span class="line"></span><br><span class="line">payload = jwt_payload_handler(user)</span><br><span class="line">token = jwt_encode_handler(payload)</span><br></pre></td></tr></table></figure><p>在用户注册或登录成功后，在序列化器中返回用户信息以后同时返回token即可。</p><h2 id="后端实现登陆认证接口"><a href="#后端实现登陆认证接口" class="headerlink" title="后端实现登陆认证接口"></a>后端实现登陆认证接口</h2><p>Django REST framework JWT提供了登录获取token的视图，可以直接使用</p><p>在子应用路由urls.py中</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework_jwt.views <span class="keyword">import</span> obtain_jwt_token</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">"login/"</span>, obtain_jwt_token),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在主路由中，引入当前子应用的路由文件</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">		...</span><br><span class="line">    path(<span class="string">'users/'</span>, include(<span class="string">"users.urls"</span>)),</span><br><span class="line">    <span class="comment"># include 的值必须是 模块名.urls 格式,字符串中间只能出现一个圆点</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>DRF</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>RESTful</tag>
        <tag>Django</tag>
        <tag>DRF</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue+DRF练习</title>
    <url>/DRF/20191103-Django-REST-Framework-4.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>使用Vue与DRF做一个简单的前后端分离练习。</p></blockquote><a id="more"></a><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><ol><li><p>使用vue-cli部署一个前端项目，并且使用axios请求上接口drf中提供的省份信息接口数据。</p><p>要求：</p><ol><li>能实现前端增删查改省份信息的功能</li></ol><p>​ 其中查询数据的时候，显示为案例中的表格格式。</p><p>​ 注意,在drf中可以通过自定义请求头,实现cors,解决axios跨域问题。</p><table><thead><tr><th>国家编号 (id)</th><th>省份 (name)</th><th>占地面积 （area）</th><th>人口 （population/亿）</th><th>国民生产总值 （gdp/万亿）</th></tr></thead><tbody><tr><td>1</td><td>广东</td><td>17.98</td><td>1.12</td><td>9.73</td></tr><tr><td>2</td><td>江苏</td><td>10.26</td><td>0.80</td><td>9.26</td></tr><tr><td>3</td><td>山东</td><td>15.7</td><td>1.00</td><td>7.65</td></tr><tr><td>4</td><td>浙江</td><td>10.18</td><td>0.57</td><td>5.62</td></tr><tr><td>5</td><td>河南</td><td>16.7</td><td>0.96</td><td>4.8</td></tr><tr><td>6</td><td>四川</td><td>48.5</td><td>0.83</td><td>4.07</td></tr><tr><td>7</td><td>湖北</td><td>18.59</td><td>0.59</td><td>3.94</td></tr><tr><td>8</td><td>湖南</td><td>21.18</td><td>0.69</td><td>3.64</td></tr><tr><td>9</td><td>河北</td><td>19</td><td>0.75</td><td>3.6</td></tr><tr><td>10</td><td>福建</td><td>12.14</td><td>0.39</td><td>3.58</td></tr></tbody></table></li></ol><ol start="2"><li>实现点击gdp表头信息,能够进行倒叙排序</li></ol><h1 id="DRF"><a href="#DRF" class="headerlink" title="DRF"></a>DRF</h1><h2 id="解决跨域问题"><a href="#解决跨域问题" class="headerlink" title="解决跨域问题"></a>解决跨域问题</h2><p>使用 <code>django-cors-headers</code> 来解决跨域</p><p>安装：</p><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">pip <span class="keyword">install</span> django-cors-headers</span><br></pre></td></tr></table></figure><p>修改配置：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># settings.py</span></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">'rest_framework'</span>,</span><br><span class="line">    + <span class="string">'corsheaders'</span>,</span><br><span class="line">    <span class="string">'province'</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置跨域白名单</span></span><br><span class="line">+ CORS_ORIGIN_WHITELIST = [</span><br><span class="line">    <span class="string">"http://localhost:8081"</span>,</span><br><span class="line">	]</span><br><span class="line"></span><br><span class="line">MIDDLEWARE = [</span><br><span class="line">    + <span class="string">'corsheaders.middleware.CorsMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.security.SecurityMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions.middleware.SessionMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.common.CommonMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.csrf.CsrfViewMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth.middleware.AuthenticationMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages.middleware.MessageMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.clickjacking.XFrameOptionsMiddleware'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>推荐阅读： <a href="https://pypi.org/project/django-cors-headers/" target="_blank" rel="noopener">https://pypi.org/project/django-cors-headers/</a></p><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><h1 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h1><h2 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h2><p>对于 axios 设置为 <code>Vue.prototype</code> 的属性，这样可以在其它地方引用。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.js </span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">"axios"</span>;</span><br><span class="line">Vue.prototype.$axios = axios</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// Home.vue</span><br><span class="line">// 使用 this.$axios 来使用 axios 发送 Ajax 请求</span><br><span class="line"></span><br><span class="line">this.$axios.get(&quot;http://127.0.0.1:8000/province/&quot;, &#123;</span><br><span class="line">                    params: &#123;&quot;ordering&quot;: &apos;gdp&apos;&#125;</span><br><span class="line">                &#125;).then(response =&gt; &#123;</span><br><span class="line">                    this.province = response.data;</span><br><span class="line"></span><br><span class="line">                &#125;).catch(error =&gt; &#123;</span><br><span class="line">                    console.log(error);</span><br><span class="line">                    console.log(error.response);</span><br><span class="line">                &#125;)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>DRF</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>RESTful</tag>
        <tag>Django</tag>
        <tag>DRF</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS部署Django项目</title>
    <url>/Linux/20191102-CentOS-load-Django.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>本篇介绍在CentOS中部署一个前后端不分离的Django项目。</p></blockquote><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>对于前后端不分离项目，参考下图：</p><p><img src="/Linux/20191102-CentOS-load-Django/django-behind-uwsgi-nginx.png" alt="django-behind-uwsgi-nginx"></p><h1 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h1><p><strong>mariadb数据库相关</strong></p><ol><li><p>yum安装mariadb</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">yum install  mariadb-server  mariadb -y</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>启动数据库</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">systemctl start mariadb</span><br><span class="line"></span><br><span class="line">补充：</span><br><span class="line">	启动/停止/状态/重启 数据库</span><br><span class="line">		systemctl  start/stop/status/restart mariadb </span><br><span class="line">    查看端口：</span><br><span class="line">    	netstat -ltunp</span><br><span class="line">    查看端口状态：</span><br><span class="line">    	netstat -tunlp | grep <span class="number">3306</span></span><br><span class="line">    改变密码：</span><br><span class="line">    	set password=password(<span class="string">'123456'</span>);</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>导出windows的数据库，传给Linux</p><p>Windows中：</p><ul><li><p>导出数据命令：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">导出指定数据库的数据到 数据库名.sql 中：</span><br><span class="line">	mysqldump -uroot -p 数据库名 &gt; 数据库名.sql    </span><br><span class="line">ps：使用cmd，使用powershell 会出错哦。。。</span><br></pre></td></tr></table></figure></li><li><p>传输到Linux中：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">对于小文件使用 lrzsz 工具就可以，直接将文件拖到xshell中，或者使用rz</span><br></pre></td></tr></table></figure></li><li><p>在Linux中导入数据：</p><ul><li><p>方式一：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 创建一个数据库</span><br><span class="line">	create database 数据库名</span><br><span class="line"><span class="number">2.</span> 执行导入数据的命令</span><br><span class="line">	mysql -uroot -p 数据库名 &lt; 数据库名.sql</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ol><pre><code>- 方式二：

  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">登录数据库之后，用命令导入数据</span><br><span class="line"><span class="number">1.</span> 创建一个数据库</span><br><span class="line">	create database 数据库名</span><br><span class="line"><span class="number">2.</span> 使用该数据库</span><br><span class="line">	use database 数据库名</span><br><span class="line"><span class="number">3.</span> 读取SQL文件，写入数据</span><br><span class="line">	mareiadb&gt;    source 数据库名.sql;</span><br></pre></td></tr></table></figure></code></pre><h1 id="第二部"><a href="#第二部" class="headerlink" title="第二部"></a>第二部</h1><p><strong>准备python3环境，以及虚拟环境</strong></p><ol><li>下载并编译 python3：</li></ol><ul><li>详见博客</li></ul><ol start="2"><li>使用virtualenvwrapper工具 来管理虚拟环境</li></ol><ul><li>待补充！！！</li></ul><ol start="3"><li><p>使用mkvirtualenv命令，创建新的虚拟环境，用于启动crm</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">创建：</span><br><span class="line">	mkvirtualenv  虚拟环境名称</span><br><span class="line"></span><br><span class="line">补充：	</span><br><span class="line">    mkvirtualenv  虚拟环境名          <span class="comment">#创建虚拟环境 </span></span><br><span class="line">    lsvirtualenv                 <span class="comment">#列出虚拟环境的名字 </span></span><br><span class="line">    workon   虚拟环境名字         <span class="comment">#激活或切换虚拟环境  </span></span><br><span class="line">    lssitepackages               <span class="comment">#列出虚拟环境中的模块信息，其实就是 </span></span><br><span class="line">    cdvirtualenv                 <span class="comment">#进入虚拟环境家目录 </span></span><br><span class="line">    cdsitepackages              <span class="comment">#进入虚拟环境第三方模块目录</span></span><br></pre></td></tr></table></figure></li><li><p>拷贝 django 代码，到Linux机器</p></li><li><p>解决 django 项目运行所需要的环境依赖，django等模块，以及pymysql</p><p>方式一：</p><ul><li>直接运行，根据报错逐个安装。</li></ul><p>方式二：</p><ul><li>从windows的项目中导出所需要的模块</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip freeze &gt; requirements.txt  <span class="comment"># requirements.txt文件是python程序员都认识的模块依赖文件</span></span><br></pre></td></tr></table></figure><ul><li>在Linux中使用 <code>-r</code> 参数，来指定依赖文件</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install -r requirements.txt  <span class="comment">#指定依赖文件安装，读取文件中所有的模块信息</span></span><br></pre></td></tr></table></figure></li></ol><p>出现的问题：ERROR: Command errored out with exit status 1: python setup.py egg_info Check the logs for full command output.</p><p>解决办法：</p><p>升级工具并没有起作用，发现是以前的一些无关模块，就直接删除了。</p><h1 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h1><p><strong>uWSGI相关</strong></p><ol><li><p>通过 pip 安装</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip3 install -i https://pypi.douban.com/simple   uwsgi</span><br></pre></td></tr></table></figure></li><li><p>通过uwsgi命令去启动django</p><p>启动方式1（只是练习用）：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">通过命令和参数形式</span><br><span class="line">语法是：</span><br><span class="line">	uwsgi  --http :<span class="number">8000</span>  --module  项目名.wsgi  </span><br><span class="line">		--http指定http协议启动socket服务端，可以通过浏览器直接访问</span><br><span class="line">        --module  是找到crm项目第二级目录下的wsgi.py 文件</span><br></pre></td></tr></table></figure><p>启动方式2：</p><p>通过配置文件方式启动，线上是这么使用的<br>uwsig的配置文件 uwsgi.ini</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 创建配置文件</span><br><span class="line">	touch  uwsgi.ini </span><br><span class="line"><span class="number">2.</span>写入如下内容 （uwsgi.ini内容如下）</span><br><span class="line">    [uwsgi]</span><br><span class="line">    <span class="comment"># Django-related settings</span></span><br><span class="line">    <span class="comment"># the base directory (full path)</span></span><br><span class="line">    <span class="comment"># 填写django项目的绝对路径，第一层 </span></span><br><span class="line">    chdir           = /opt/.../django项目名</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Django's wsgi file </span></span><br><span class="line">    <span class="comment">#填写crm项目第二层目录中的wsgi文件 </span></span><br><span class="line">    module          = 项目名.wsgi</span><br><span class="line"></span><br><span class="line">    <span class="comment"># the virtualenv (full path)</span></span><br><span class="line">    <span class="comment">#填写解释器的安装绝对路径（虚拟环境）</span></span><br><span class="line">    home            = /root/Envs/虚拟环境名称</span><br><span class="line"></span><br><span class="line">    <span class="comment"># process-related settings</span></span><br><span class="line">    <span class="comment"># master</span></span><br><span class="line">    master          = true</span><br><span class="line">    <span class="comment"># maximum number of worker processes</span></span><br><span class="line">    <span class="comment">#指定uwsgi的多进程数量，指定为cpu的核数即可（填cpu的4倍数量）</span></span><br><span class="line">    processes       = <span class="number">4</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># the socket (use the full path to be safe</span></span><br><span class="line">    <span class="comment">#指定crm启动的协议，当你和nginx结合进行反向代理，就用unix-socket协议 ，这种方式无法直接访问，只能通过nginx反代</span></span><br><span class="line">    socket          = <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">8000</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#指定http协议启动，不安全，没有意义，只是自己调试使用</span></span><br><span class="line">    <span class="comment">#http =  0.0.0.0:8000</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># ... with appropriate permissions - may be needed</span></span><br><span class="line">    <span class="comment"># chmod-socket    = 664</span></span><br><span class="line">    <span class="comment"># clear environment on exit</span></span><br><span class="line">    vacuum          = true    </span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="number">3.</span>指定uwsgi.ini配置文件启动 </span><br><span class="line">uwsgi  --ini  uwsgi.ini   <span class="comment"># 参数 --ini是指定文件的意思</span></span><br></pre></td></tr></table></figure></li><li><p>收集django的所有静态文件，丢给nginx去处理</p><p>打开 django的settings.py，修改为如下行</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">+ STATIC_ROOT=<span class="string">'/opt/项目目录.../项目名static/'</span>        <span class="comment">#加上这个参数就行了 </span></span><br><span class="line">STATIC_URL = <span class="string">'/static/'</span></span><br><span class="line">STATICFILES_DIRS = [</span><br><span class="line">os.path.join(BASE_DIR, <span class="string">'static'</span>)</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>通过命令收集django的所有静态文件</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python3  manage.py collectstatic</span><br></pre></td></tr></table></figure></li></ol><h1 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h1><p><strong>使用nginx做反向代理</strong></p><ol><li><p>安装nginx</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">yum install -y nginx</span><br></pre></td></tr></table></figure></li><li><p>修改配置文件 nginx.conf</p></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">注意: server&#123;&#125;多虚拟主机是自上而下的加载顺序</span><br><span class="line">因此修改第一个server&#123;&#125;虚拟主机，修改为如下反代的写法，</span><br><span class="line">且添加nginx处理django的静态文件方式</span><br><span class="line">	server &#123;</span><br><span class="line">	<span class="comment">#nginx监听的地址 </span></span><br><span class="line">	listen       <span class="number">80</span>;</span><br><span class="line">	<span class="comment">#定义网站的域名   _; 表示暂无</span></span><br><span class="line">	server_name  _; </span><br><span class="line"></span><br><span class="line">	<span class="comment">#charset koi8-r;</span></span><br><span class="line">	<span class="comment">#nginx的url匹配 , /这个斜杠就代表这样的请求：  192.168.13.117:85/  </span></span><br><span class="line">	 </span><br><span class="line">	<span class="comment">#这个是最低级匹配，所有的请求都会进入location，进行处理</span></span><br><span class="line">	<span class="comment">#好比 http://192.168.13.117/crm/login/</span></span><br><span class="line">	location / &#123;</span><br><span class="line">		<span class="comment">#基于uwsgi协议的请求转发，给后端django的启动地址</span></span><br><span class="line">		uwsgi_pass django项目所在的服务器IP:<span class="number">8000</span>;    <span class="comment">#这个是请求转发</span></span><br><span class="line">		include  uwsgi_params;      <span class="comment">#这个是添加一个文件，添加请起头信息的</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">#我现在想处理这样的请求http://192.168.13.117/static/css/reset.css          </span></span><br><span class="line">	<span class="comment">#当以后请求是从static开始，我就让他去这个目录去找</span></span><br><span class="line">	<span class="comment">#不加斜杠</span></span><br><span class="line">	location  /static  &#123;</span><br><span class="line">			alias  /opt/crms23/crmstatic;                                     </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">补充：</span><br><span class="line">	nginx 的语法检测</span><br><span class="line">		nginx -t</span><br><span class="line">    平滑重启</span><br><span class="line">		nginx -s reload</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>django</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Django Rest Framework</title>
    <url>/DRF/20191029-Django-REST-Framework-1.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>Django Rest_Framework是一个建立在Django基础之上的Web 应用开发框架，帮助我们快速的开发REST API接口应用。</p></blockquote><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><blockquote><p>Django REST framework是一个建立在Django基础之上的Web 应用开发框架，可以快速的开发REST API接口应用。在REST framework中，提供了<strong>序列化器</strong> Serialzier 的定义，可以帮助我们简化序列化与反序列化的过程，不仅如此，还提供丰富的类视图、扩展类、视图集来简化视图的编写工作。REST framework还提供了认证、权限、限流、过滤、分页、接口文档等功能支持。REST framework提供了一个API 的Web可视化界面来方便查看测试接口。</p></blockquote><p>中文文档：<a href="https://q1mi.github.io/Django-REST-framework-documentation/#django-rest-framework" target="_blank" rel="noopener">https://q1mi.github.io/Django-REST-framework-documentation/#django-rest-framework</a></p><p>github: <a href="https://github.com/encode/django-rest-framework/tree/master" target="_blank" rel="noopener">https://github.com/encode/django-rest-framework/tree/master</a></p><p>DRF的核心思想：缩减编写API接口的代码！</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>提供了定义序列化器Serializer的方法，可以快速根据 Django ORM 或者其它库自动序列化/反序列化；</li><li>提供了丰富的类视图、Mixin扩展类，简化视图的编写；</li><li>丰富的定制层级：函数视图、类视图、视图集合到自动生成 API，满足各种需要；</li><li>多种身份认证和权限认证方式的支持；[jwt]</li><li>内置了限流系统；</li><li>直观的 API web 界面；</li><li>可扩展性，插件丰富</li></ul><h1 id="环境安装与配置"><a href="#环境安装与配置" class="headerlink" title="环境安装与配置"></a>环境安装与配置</h1><p>DRF需要以下依赖：</p><ul><li>Python (2.7, 3.2, 3.3, 3.4, 3.5, 3.6)</li><li>Django (1.10, 1.11, 2.0)</li></ul><p><strong>DRF是以Django扩展应用的方式提供的，所以我们可以直接利用已有的Django环境而无需从新创建。（若没有Django环境，需要先创建环境安装Django）</strong></p><h2 id="安装DRF"><a href="#安装DRF" class="headerlink" title="安装DRF"></a>安装DRF</h2><p>前提是已经安装了django，建议安装在虚拟环境</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mkvirtualenv drfdemo -p python3</span></span><br><span class="line">	<span class="comment"># 执行上面的命令会在当前路径下创建虚拟环境，ubuntu下可以输入ll查看。</span></span><br><span class="line">    <span class="comment"># 如果想再次启动虚拟环境，可进入虚拟环境的bin目录，使用 source activate 进入虚拟环境。</span></span><br><span class="line"><span class="comment"># pip install django</span></span><br><span class="line"></span><br><span class="line">pip install djangorestframework</span><br><span class="line">pip install pymysql</span><br><span class="line">	<span class="comment"># pymysql为操作数据库模块</span></span><br></pre></td></tr></table></figure><p>Tips：windows复制的内容，在Linux中可以使用shift + insert的快捷方式进行粘贴。</p><h3 id="创建django项目"><a href="#创建django项目" class="headerlink" title="创建django项目"></a>创建django项目</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cd ~/Desktop</span><br><span class="line">django-admin startproject drfdemo</span><br></pre></td></tr></table></figure><p>Tips：如果是在虚拟环境下安装的DRF，则这里使用虚拟环境的python创建项目。</p><p>使用pycharm打开项目，设置虚拟环境的解析器，并修改manage.py中的后缀参数。</p><p><img src="/DRF/20191029-Django-REST-Framework-1/%E4%BF%AE%E6%94%B9%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC.png" alt="修改启动脚本"></p><h2 id="注册rest-framework"><a href="#注册rest-framework" class="headerlink" title="注册rest_framework"></a>注册rest_framework</h2><p>在<strong>settings.py</strong>的<strong>INSTALLED_APPS</strong>中添加<code>&#39;rest_framework&#39;</code>。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">'rest_framework'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>接下来就可以使用DRF提供的功能进行api接口开发了。在项目中如果使用rest_framework框架实现API接口，主要有以下三个步骤：</p><ul><li>将请求的数据（如JSON格式）转换为模型类对象</li><li>操作数据库</li><li>将模型类对象转换为响应的数据（如JSON格式）</li></ul><h1 id="快速实现"><a href="#快速实现" class="headerlink" title="快速实现"></a>快速实现</h1><p>体验 DRF 的优雅！</p><h3 id="基本准备（同Django）"><a href="#基本准备（同Django）" class="headerlink" title="基本准备（同Django）"></a>基本准备（同Django）</h3><p>① 创建 students 子应用，并注册</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python manage.py startapp students</span><br></pre></td></tr></table></figure><p>做法同注册rest_framework，写在它的下面：</p><figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS = <span class="meta">[</span></span><br><span class="line">    <span class="params">...</span></span><br><span class="line">    <span class="string">'rest_framework'</span>,</span><br><span class="line">    </span><br><span class="line">    <span class="string">'students'</span>,    </span><br><span class="line"><span class="meta">]</span></span><br></pre></td></tr></table></figure><p>Tips：内置的APP与我们编写的APP中间空一行，便于区分</p><p>② 定义models</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="comment"># 模型字段</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">100</span>,verbose_name=<span class="string">"姓名"</span>)</span><br><span class="line">    sex = models.BooleanField(default=<span class="number">1</span>,verbose_name=<span class="string">"性别"</span>)</span><br><span class="line">    age = models.IntegerField(verbose_name=<span class="string">"年龄"</span>)</span><br><span class="line">    class_num = models.CharField(max_length=<span class="number">5</span>,verbose_name=<span class="string">"班级编号"</span>)</span><br><span class="line">    description = models.TextField(max_length=<span class="number">1000</span>,verbose_name=<span class="string">"详情描述"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table=<span class="string">"tb_student"</span></span><br><span class="line">        verbose_name = <span class="string">"学生"</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br></pre></td></tr></table></figure><p>③ 在MySQL数据库中创建库，并修改 <code>settings.py</code> 的配置</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> students <span class="keyword">charset</span>=utf8mb4;</span><br></pre></td></tr></table></figure><p>修改 <code>settings.py</code> 的 <code>DATABASES</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="comment"># 'default': &#123;</span></span><br><span class="line">    <span class="comment">#     'ENGINE': 'django.db.backends.sqlite3',</span></span><br><span class="line">    <span class="comment">#     'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),</span></span><br><span class="line">    <span class="comment"># &#125;,</span></span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.mysql'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">"students"</span>,</span><br><span class="line">        <span class="string">"HOST"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">        <span class="string">"PORT"</span>: <span class="number">3306</span>,</span><br><span class="line">        <span class="string">"USER"</span>: <span class="string">"root"</span>,</span><br><span class="line">        <span class="string">"PASSWORD"</span>:<span class="string">"123"</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>④ 使用pymysql模块</p><p>在settings.py的同级目录中的 <code>__init__.py</code> 中写入如下内容：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line">pymysql.install_as_MySQLdb()</span><br></pre></td></tr></table></figure><p>⑤ Terminal下执行数据库迁移</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python manage.py makemigrations</span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure><p>执行数据库迁移时可能出现如下错误：</p><p>第一个错误：</p><p><img src="/DRF/20191029-Django-REST-Framework-1/%E7%AC%AC%E4%B8%80%E4%B8%AA%E9%94%99%E8%AF%AF.png" alt="第一个错误"></p><p>解决方案：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">注释掉 backends/mysql/base.py中的<span class="number">35</span>和<span class="number">36</span>行代码。</span><br></pre></td></tr></table></figure><p>第二个错误：</p><p><img src="/DRF/20191029-Django-REST-Framework-1/%E7%AC%AC%E4%BA%8C%E4%B8%AA%E9%94%99%E8%AF%AF.png" alt="第二个错误"></p><p>解决方案：</p><p>backends/mysql/operations.py146行里面新增一行代码：</p><p><img src="/DRF/20191029-Django-REST-Framework-1/%E8%A7%A3%E5%86%B3%E7%AC%AC%E4%BA%8C%E4%B8%AA%E9%94%99%E8%AF%AF%E7%9A%84%E5%8A%9E%E6%B3%95.png" alt="解决第二个错误的办法"></p><p>补充：我们需要注释掉关于CSRF的中间件，因为是前后端分离，所以不再需要这个中间件了。</p><h3 id="使用DRF"><a href="#使用DRF" class="headerlink" title="使用DRF"></a>使用DRF</h3><h4 id="创建序列化器"><a href="#创建序列化器" class="headerlink" title="创建序列化器"></a>创建序列化器</h4><p>在students应用目录中新建serializers.py用于保存该应用的序列化器。</p><p>创建一个StudentModelSerializer用于序列化与反序列化。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建序列化器类，将在试图中被调用</span></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Student</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentModelSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Student</span><br><span class="line">        fields = <span class="string">"__all__"</span></span><br></pre></td></tr></table></figure><ul><li><strong>model</strong> 指明该序列化器处理的数据字段从模型类Student参考生成</li><li><strong>fields</strong> 指明该序列化器包含模型类中的哪些字段，’<code>__all__</code>‘指明包含所有字段</li></ul><h4 id="编写视图"><a href="#编写视图" class="headerlink" title="编写视图"></a>编写视图</h4><p>在students应用的views.py中创建视图StudentViewSet，这是一个视图集合。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ModelViewSet</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Student</span><br><span class="line"><span class="keyword">from</span> .serializers <span class="keyword">import</span> StudentModelSerializer</span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentViewSet</span><span class="params">(ModelViewSet)</span>:</span></span><br><span class="line">    queryset = Student.objects.all()</span><br><span class="line">    serializer_class = StudentModelSerializer</span><br></pre></td></tr></table></figure><ul><li><strong>queryset</strong> 指明该视图集在查询数据时使用的查询集</li><li><strong>serializer_class</strong> 指明该视图在进行序列化或反序列化时使用的序列化器</li></ul><h4 id="定义路由"><a href="#定义路由" class="headerlink" title="定义路由"></a>定义路由</h4><p>在students应用的urls.py中定义路由信息。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"><span class="keyword">from</span> rest_framework.routers <span class="keyword">import</span> DefaultRouter</span><br><span class="line"></span><br><span class="line"><span class="comment"># 路由列表</span></span><br><span class="line">urlpatterns = []</span><br><span class="line"></span><br><span class="line">router = DefaultRouter()  <span class="comment"># 可以处理视图的路由器</span></span><br><span class="line">router.register(<span class="string">'students'</span>, views.StudentViewSet)  <span class="comment"># 向路由器中注册视图集</span></span><br><span class="line"></span><br><span class="line">urlpatterns += router.urls  <span class="comment"># 将路由器中的所以路由信息追到到django的路由列表中</span></span><br></pre></td></tr></table></figure><p>最后把students子应用中的路由文件加载到总路由文件中.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path,include</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">""</span>,include(<span class="string">"students.urls"</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h3><p>运行当前程序（与运行Django一样）</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python manage.py runserver</span><br></pre></td></tr></table></figure><p>在浏览器中输入网址127.0.0.1:8000，可以看到DRF提供的API Web浏览页面：</p><p><img src="/DRF/20191029-Django-REST-Framework-1/DRF%E6%8F%90%E4%BE%9B%E7%9A%84%E9%A1%B5%E9%9D%A2.png" alt="DRF提供的页面"></p><ol><li>点击链接 <code>http://127.0.0.1:8000/students/</code> 可以访问<strong>获取所有数据的接口</strong>（查询所有学生），呈现如下页面：</li></ol><p><img src="/DRF/20191029-Django-REST-Framework-1/%E6%89%80%E6%9C%89%E5%AD%A6%E7%94%9F%E7%9A%84%E4%BF%A1%E6%81%AF.png" alt="DRF提供的页面"></p><p>填写表单中的内容，点击POST（增），即可创建一个成员，然后返回如下页面:</p><p><img src="/DRF/20191029-Django-REST-Framework-1/%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%88%90%E5%91%98%E5%90%8E.png" alt="DRF提供的页面"></p><p>再次编辑表单中的内容，可修改当前成员的信息。</p><p>地址栏输入 <code>http://127.0.0.1:8000/students/2/</code> 即可查看单个成员：</p><p><img src="/DRF/20191029-Django-REST-Framework-1/%E6%9F%A5%E7%9C%8B%E5%8D%95%E4%B8%AA%E6%88%90%E5%91%98.png" alt="DRF提供的页面"></p><p>对于这个成员，使用PUT可以修改成员的内容，使用DELETE可以删除该成员。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在DRF的帮助下，我们可以编写更短的代码来实现 RESTful API接口。在这里序列化器起很大的作用，它就像Django中的ModelForm来帮我们做更多额外的工作。</p>]]></content>
      <categories>
        <category>DRF</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>RESTful</tag>
        <tag>Django</tag>
        <tag>DRF</tag>
      </tags>
  </entry>
  <entry>
    <title>DRF-视图</title>
    <url>/DRF/20191029-Django-REST-Framework-3.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>本篇介绍DRF在视图层面为我们做的事情。</p></blockquote><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>DRF除了在数据序列化部分简写代码以外，还在视图中提供了简写操作。所以在django原有的django.views.View类基础上，drf封装了多个子类出来提供给我们使用。</p><p>Django REST framwork 提供的视图的主要作用：</p><ul><li>控制序列化器的执行（检验、保存、转换数据）</li><li>控制数据库查询的执行</li><li>调用请求类和响应类（这两个类也是由DRF帮我们再次扩展了一些功能类）</li></ul><p><img src="/DRF/20191029-Django-REST-Framework-3/%E8%A7%86%E5%9B%BE%E6%A1%86%E6%9E%B6.png" alt="视图框架"></p><h1 id="始于请求与响应"><a href="#始于请求与响应" class="headerlink" title="始于请求与响应"></a>始于请求与响应</h1><h2 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h2><p>变化：REST framework 传入视图的<code>request</code>对象不再是Django默认的<code>HttpRequest</code>对象，而是REST framework提供的扩展了<code>HttpRequest</code>类的<strong><code>Request</code></strong>类的对象：</p><ul><li><code>request对象</code>(<code>HttpRequest</code>类) —&gt; <code>request对象</code>(<code>Request类</code>)</li></ul><p>原因：REST framework 提供了<strong>Parser</strong>解析器类，在接收到request请求后会自动根据<code>Content-Type</code>指明的请求数据类型（如JSON、表单等）将请求数据进行parse解析，解析为类字典（<code>QueryDict</code>）对象保存到<strong>Request</strong>对象中。</p><ul><li><p><strong>Request对象的数据是自动根据前端发送数据的格式进行解析之后的结果。</strong></p></li><li><p>无论前端发送的哪种格式的数据，我们都可以以统一的方式读取数据。</p></li></ul><h3 id="常用属性"><a href="#常用属性" class="headerlink" title="常用属性"></a>常用属性</h3><h4 id="request-data"><a href="#request-data" class="headerlink" title="request.data"></a><code>request.data</code></h4><p><code>request.data</code> 返回解析之后的请求体数据。类似于Django中标准的<code>request.POST</code>和 <code>request.FILES</code>属性，但提供如下特性：</p><ul><li>包含了解析之后的文件和非文件数据</li><li>包含了对POST、PUT、PATCH请求方式解析后的数据</li><li>利用了REST framework的parsers解析器，不仅支持表单类型数据，也支持JSON数据</li></ul><h4 id="request-query-params"><a href="#request-query-params" class="headerlink" title="request.query_params"></a><code>request.query_params</code></h4><p><code>request.query_params</code>与Django标准的<code>request.GET</code>相同，表示的是URL上携带的参数。只是更换了更正确的名称而已。</p><h2 id="Response"><a href="#Response" class="headerlink" title="Response"></a>Response</h2><p>变化：REST framework提供了一个响应类<code>Response</code>，使用该类构造响应对象时，响应的具体<strong>数据内容会被转换</strong>（render渲染器对象）成符合前端需求的类型。</p><p>​ REST framework提供了<code>Render</code> 渲染器，用来根据请求头中的<code>Accept</code>（接收数据类型声明）来自动转换响应数据到对应格式。如果前端请求中未进行Accept声明，则会采用默认方式处理响应数据，我们可以通过配置来修改默认响应格式。</p><p>原因：找到DRF的settings文件，我们发现按照下列字典中的设置，这也是根据</p><p><code>restframework/settings.py</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">'DEFAULT_RENDERER_CLASSES'</span>: (  <span class="comment"># 默认响应渲染类</span></span><br><span class="line">        <span class="string">'rest_framework.renderers.JSONRenderer'</span>,  <span class="comment"># json渲染器</span></span><br><span class="line">        <span class="string">'rest_framework.renderers.BrowsableAPIRenderer'</span>,  <span class="comment"># 浏览API渲染器</span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="构造方式"><a href="#构造方式" class="headerlink" title="构造方式"></a>构造方式</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Response(data, status=<span class="literal">None</span>, template_name=<span class="literal">None</span>, headers=<span class="literal">None</span>, content_type=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><p><code>data</code>数据不要是render处理之后的数据，只需传递python的内建类型数据即可，REST framework会使用<code>renderer</code>渲染器处理<code>data</code>。</p><p><code>data</code>不能是复杂结构的数据，如Django的模型类对象，对于这样的数据我们可以使用<code>Serializer</code>序列化器序列化处理后（转为了Python字典类型）再传递给<code>data</code>参数。</p><p>参数说明：</p><ul><li><code>data</code>: 为响应准备的序列化处理后的数据；</li><li><code>status</code>: 状态码，默认200；</li><li><code>template_name</code>: 模板名称，如果使用<code>HTMLRenderer</code> 时需指明；</li><li><code>headers</code>: 用于存放响应头信息的字典；</li><li><code>content_type</code>: 响应数据的Content-Type，通常此参数无需传递，REST framework会根据前端所需类型数据来设置该参数。</li></ul><h3 id="常用属性-1"><a href="#常用属性-1" class="headerlink" title="常用属性"></a>常用属性</h3><h4 id="response-data"><a href="#response-data" class="headerlink" title="response.data"></a><code>response.data</code></h4><p>传给response对象的序列化后，但尚未render处理的数据</p><h4 id="response-status-code"><a href="#response-status-code" class="headerlink" title="response.status_code"></a><code>response.status_code</code></h4><p>状态码的数字</p><h4 id="response-content"><a href="#response-content" class="headerlink" title="response.content"></a><code>response.content</code></h4><p>经过render处理后的响应数据</p><h3 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h3><p>为了方便设置状态码，REST framewrok在<code>rest_framework.status</code>模块中提供了常用状态码常量。</p><h4 id="信息告知-1xx"><a href="#信息告知-1xx" class="headerlink" title="信息告知 - 1xx"></a>信息告知 - 1xx</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">HTTP_100_CONTINUE</span><br><span class="line">HTTP_101_SWITCHING_PROTOCOLS</span><br></pre></td></tr></table></figure><h4 id="成功-2xx"><a href="#成功-2xx" class="headerlink" title="成功 - 2xx"></a>成功 - 2xx</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">HTTP_200_OK</span><br><span class="line">HTTP_201_CREATED</span><br><span class="line">HTTP_202_ACCEPTED</span><br><span class="line">HTTP_203_NON_AUTHORITATIVE_INFORMATION</span><br><span class="line">HTTP_204_NO_CONTENT</span><br><span class="line">HTTP_205_RESET_CONTENT</span><br><span class="line">HTTP_206_PARTIAL_CONTENT</span><br><span class="line">HTTP_207_MULTI_STATUS</span><br></pre></td></tr></table></figure><h4 id="重定向-3xx"><a href="#重定向-3xx" class="headerlink" title="重定向 - 3xx"></a>重定向 - 3xx</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">HTTP_300_MULTIPLE_CHOICES</span><br><span class="line">HTTP_301_MOVED_PERMANENTLY</span><br><span class="line">HTTP_302_FOUND</span><br><span class="line">HTTP_303_SEE_OTHER</span><br><span class="line">HTTP_304_NOT_MODIFIED</span><br><span class="line">HTTP_305_USE_PROXY</span><br><span class="line">HTTP_306_RESERVED</span><br><span class="line">HTTP_307_TEMPORARY_REDIRECT</span><br></pre></td></tr></table></figure><h4 id="客户端错误-4xx"><a href="#客户端错误-4xx" class="headerlink" title="客户端错误 - 4xx"></a>客户端错误 - 4xx</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">HTTP_400_BAD_REQUEST</span><br><span class="line">HTTP_401_UNAUTHORIZED</span><br><span class="line">HTTP_402_PAYMENT_REQUIRED</span><br><span class="line">HTTP_403_FORBIDDEN</span><br><span class="line">HTTP_404_NOT_FOUND</span><br><span class="line">HTTP_405_METHOD_NOT_ALLOWED</span><br><span class="line">HTTP_406_NOT_ACCEPTABLE</span><br><span class="line">HTTP_407_PROXY_AUTHENTICATION_REQUIRED</span><br><span class="line">HTTP_408_REQUEST_TIMEOUT</span><br><span class="line">HTTP_409_CONFLICT</span><br><span class="line">HTTP_410_GONE</span><br><span class="line">HTTP_411_LENGTH_REQUIRED</span><br><span class="line">HTTP_412_PRECONDITION_FAILED</span><br><span class="line">HTTP_413_REQUEST_ENTITY_TOO_LARGE</span><br><span class="line">HTTP_414_REQUEST_URI_TOO_LONG</span><br><span class="line">HTTP_415_UNSUPPORTED_MEDIA_TYPE</span><br><span class="line">HTTP_416_REQUESTED_RANGE_NOT_SATISFIABLE</span><br><span class="line">HTTP_417_EXPECTATION_FAILED</span><br><span class="line">HTTP_422_UNPROCESSABLE_ENTITY</span><br><span class="line">HTTP_423_LOCKED</span><br><span class="line">HTTP_424_FAILED_DEPENDENCY</span><br><span class="line">HTTP_428_PRECONDITION_REQUIRED</span><br><span class="line">HTTP_429_TOO_MANY_REQUESTS</span><br><span class="line">HTTP_431_REQUEST_HEADER_FIELDS_TOO_LARGE</span><br><span class="line">HTTP_451_UNAVAILABLE_FOR_LEGAL_REASONS</span><br></pre></td></tr></table></figure><h4 id="服务器错误-5xx"><a href="#服务器错误-5xx" class="headerlink" title="服务器错误 - 5xx"></a>服务器错误 - 5xx</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">HTTP_500_INTERNAL_SERVER_ERROR</span><br><span class="line">HTTP_501_NOT_IMPLEMENTED</span><br><span class="line">HTTP_502_BAD_GATEWAY</span><br><span class="line">HTTP_503_SERVICE_UNAVAILABLE</span><br><span class="line">HTTP_504_GATEWAY_TIMEOUT</span><br><span class="line">HTTP_505_HTTP_VERSION_NOT_SUPPORTED</span><br><span class="line">HTTP_507_INSUFFICIENT_STORAGE</span><br><span class="line">HTTP_511_NETWORK_AUTHENTICATION_REQUIRED</span><br></pre></td></tr></table></figure><h1 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h1><p>REST framework 提供了众多的通用视图基类与扩展类，以简化视图的编写。</p><h2 id="2个视图基类"><a href="#2个视图基类" class="headerlink" title="2个视图基类"></a>2个视图基类</h2><h3 id="APIView"><a href="#APIView" class="headerlink" title="APIView"></a>APIView</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rest_framework.views.APIView</span><br></pre></td></tr></table></figure><p><code>APIView</code>是REST framework提供的所有视图的基类，继承自Django的<code>View</code>父类。</p><p><code>APIView</code>与<code>View</code>的不同之处在于：</p><ul><li>传入到视图方法中的是REST framework的<code>Request</code>对象，而不是Django的<code>HttpRequeset</code>对象；</li><li>视图方法可以返回REST framework的<code>Response</code>对象，视图会为响应数据设置（render）符合前端要求的格式；</li><li>任何<code>APIException</code>异常都会被捕获到，并且处理成合适的响应信息；</li><li>在进行dispatch()分发前，会对请求进行身份认证、权限检查、流量控制。</li></ul><p>支持定义的属性</p><ul><li><strong>authentication_classes</strong> 列表或元祖，身份认证类</li><li><strong>permissoin_classes</strong> 列表或元祖，权限检查类</li><li><strong>throttle_classes</strong> 列表或元祖，流量控制类</li></ul><p>在<code>APIView</code>中仍以常规的类视图定义方法来实现get() 、post() 或者其他请求方式的方法。</p><p>增删查改</p><h3 id="GenericAPIView"><a href="#GenericAPIView" class="headerlink" title="GenericAPIView"></a>GenericAPIView</h3><p>（通用视图类）</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rest_framework.generics.GenericAPIView</span><br></pre></td></tr></table></figure><p>​ 使用ViewSet通常并不方便，因为list、retrieve、create、update、destory等方法都需要自己编写，而这些方法与前面讲过的Mixin扩展类提供的方法同名，所以我们可以通过继承Mixin扩展类来复用这些方法而无需自己编写。但是Mixin扩展类依赖与<code>GenericAPIView</code>，所以还需要继承<code>GenericAPIView</code>。</p><p><strong>GenericViewSet</strong>就帮助我们完成了这样的继承工作，继承自<code>GenericAPIView</code>与<code>ViewSetMixin</code>，在实现了调用as_view()时传入字典（如<code>{&#39;get&#39;:&#39;list&#39;}</code>）的映射处理工作的同时，还提供了<code>GenericAPIView</code>提供的基础方法，可以直接搭配Mixin扩展类使用。</p><p>举例：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> GenericViewSet</span><br><span class="line"><span class="keyword">from</span> rest_framework.mixins <span class="keyword">import</span> ListModelMixin,CreateModelMixin,RetrieveModelMixin,UpdateModelMixin,DestroyModelMixin</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student4ViewSet</span><span class="params">(ListModelMixin)</span>:</span></span><br><span class="line">    queryset = Student.objects.all()</span><br><span class="line">    serializer_class = StudentModelSerializer</span><br></pre></td></tr></table></figure><p>url的定义</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">"students7/"</span>, views.Student4ViewSet.as_view(&#123;<span class="string">"get"</span>: <span class="string">"list"</span>, <span class="string">"post"</span>: <span class="string">"create"</span>&#125;)),</span><br><span class="line">    re_path(<span class="string">"students7/(?P&lt;pk&gt;\d+)/"</span>, views.Student4ViewSet.as_view(&#123;<span class="string">"get"</span>: <span class="string">"retrieve"</span>,<span class="string">"put"</span>:<span class="string">"update"</span>,<span class="string">"delete"</span>:<span class="string">"destroy"</span>&#125;)),</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="ModelViewSet"><a href="#ModelViewSet" class="headerlink" title="ModelViewSet"></a>ModelViewSet</h3><p>继承自<code>GenericViewSet</code>，同时包括了ListModelMixin、RetrieveModelMixin、CreateModelMixin、UpdateModelMixin、DestoryModelMixin。</p><h3 id="ReadOnlyModelViewSet"><a href="#ReadOnlyModelViewSet" class="headerlink" title="ReadOnlyModelViewSet"></a>ReadOnlyModelViewSet</h3><p>继承自<code>GenericViewSet</code>，同时包括了ListModelMixin、RetrieveModelMixin。</p><h2 id="视图集中定义附加action动作"><a href="#视图集中定义附加action动作" class="headerlink" title="视图集中定义附加action动作"></a>视图集中定义附加action动作</h2><p>在视图集中，除了上述默认的方法动作外，还可以添加自定义动作。</p><p>举例：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ModelViewSet,ReadOnlyModelViewSet</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentModelViewSet</span><span class="params">(ModelViewSet)</span>:</span></span><br><span class="line">    queryset = Student.objects.all()</span><br><span class="line">    serializer_class = StudentModelSerializer</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="string">"""学生登录功能"""</span></span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">"message"</span>:<span class="string">"登录成功"</span>&#125;)</span><br></pre></td></tr></table></figure><p>url的定义</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">"students8/"</span>, views.StudentModelViewSet.as_view(&#123;<span class="string">"get"</span>: <span class="string">"list"</span>, <span class="string">"post"</span>: <span class="string">"create"</span>&#125;)),</span><br><span class="line">    re_path(<span class="string">"students8/(?P&lt;pk&gt;\d+)/"</span>,</span><br><span class="line">            views.StudentModelViewSet.as_view(&#123;<span class="string">"get"</span>: <span class="string">"retrieve"</span>, <span class="string">"put"</span>: <span class="string">"update"</span>, <span class="string">"delete"</span>: <span class="string">"destroy"</span>&#125;)),</span><br><span class="line"></span><br><span class="line">    path(<span class="string">"stu/login/"</span>,views.StudentModelViewSet.as_view(&#123;<span class="string">"get"</span>:<span class="string">"login"</span>&#125;))</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="action属性"><a href="#action属性" class="headerlink" title="action属性"></a>action属性</h2><p>在视图集中，我们可以通过action对象属性来获取当前请求视图集时的action动作是哪个。</p><p>例如：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ModelViewSet</span><br><span class="line"><span class="keyword">from</span> students.models <span class="keyword">import</span> Student</span><br><span class="line"><span class="keyword">from</span> .serializers <span class="keyword">import</span> StudentModelSerializer</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentModelViewSet</span><span class="params">(ModelViewSet)</span>:</span></span><br><span class="line">    queryset = Student.objects.all()</span><br><span class="line">    serializer_class = StudentModelSerializer</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_new_5</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="string">"""获取最近添加的5个学生信息"""</span></span><br><span class="line">        <span class="comment"># 操作数据库</span></span><br><span class="line">        print(self.action) <span class="comment"># 获取本次请求的视图方法名</span></span><br><span class="line">                </span><br><span class="line"><span class="comment"># 通过路由访问到当前方法中.可以看到本次的action就是请求的方法名</span></span><br></pre></td></tr></table></figure><p>完整代码如下：</p><p>views.py</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> View</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Student</span><br><span class="line"><span class="keyword">from</span> .serializers <span class="keyword">import</span> StudentModelSerializer</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> JsonResponse</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json  <span class="comment"># 只有原始的View才需要手动操作</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentView1</span><span class="params">(View)</span>:</span></span><br><span class="line">    <span class="string">'''Django.view.View 原生写法'''</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, pk=None)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> pk:</span><br><span class="line">            <span class="string">'''查询所有成员'''</span></span><br><span class="line">            student_list = Student.objects.all()</span><br><span class="line">            print(student_list)</span><br><span class="line">            serializer = StudentModelSerializer(instance=student_list, many=<span class="literal">True</span>)</span><br><span class="line">            <span class="comment"># print(serializer.data)</span></span><br><span class="line">            <span class="keyword">return</span> JsonResponse(serializer.data, safe=<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="string">'''查询单个成员'''</span></span><br><span class="line">            print(pk)</span><br><span class="line">            instance = Student.objects.get(pk=pk)</span><br><span class="line">            serializer = StudentModelSerializer(instance=instance)</span><br><span class="line">            <span class="keyword">return</span> JsonResponse(serializer.data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="string">'''增加成员'''</span></span><br><span class="line">        data_bytes = request.body</span><br><span class="line">        data = json.loads(data_bytes)</span><br><span class="line">        print(data)  <span class="comment"># 列表中包含字典，这样可以是一个成员，也可以是多个成员</span></span><br><span class="line">        serializer = StudentModelSerializer(data=data, many=<span class="literal">True</span>)</span><br><span class="line">        serializer.is_valid(raise_exception=<span class="literal">True</span>)</span><br><span class="line">        <span class="comment"># 原来保存成员的方法，有了序列器，只需要使用 save方法即可</span></span><br><span class="line">        <span class="comment"># print(serializer.validated_data)</span></span><br><span class="line">        <span class="comment"># instance_list = []</span></span><br><span class="line">        <span class="comment"># for member in serializer.validated_data:</span></span><br><span class="line">        <span class="comment">#     Student.objects.create(**member)</span></span><br><span class="line">        serializer.save()</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(serializer.data, safe=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self, request, pk=None)</span>:</span></span><br><span class="line">        <span class="string">'''删除一个成员'''</span></span><br><span class="line">        instance = Student.objects.get(pk=pk)</span><br><span class="line">        instance.delete()</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(&#123;<span class="string">"message"</span>: <span class="string">'ok'</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self, request, pk=None)</span>:</span></span><br><span class="line">        <span class="string">'''更改一个成员'''</span></span><br><span class="line">        instance_old = Student.objects.get(pk=pk)</span><br><span class="line">        instance_new = json.loads(request.body)</span><br><span class="line">        serializer = StudentModelSerializer(instance=instance_old, data=instance_new, partial=<span class="literal">True</span>)</span><br><span class="line">        serializer.is_valid(raise_exception=<span class="literal">True</span>)</span><br><span class="line">        serializer.save()</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(serializer.data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework.request <span class="keyword">import</span> Request</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> status</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentView2</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="comment"># queryset = Student.objects.all()</span></span><br><span class="line"></span><br><span class="line">    <span class="string">'''APIView写法'''</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, pk=None)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> pk:</span><br><span class="line">            <span class="string">'''查询所有成员'''</span></span><br><span class="line">            print(request)  <span class="comment"># rest_framework.request.Request</span></span><br><span class="line">            print(request._request)  <span class="comment"># django原来提供的request</span></span><br><span class="line"></span><br><span class="line">            student_list = Student.objects.all()</span><br><span class="line">            serializer = StudentModelSerializer(instance=student_list, many=<span class="literal">True</span>)</span><br><span class="line">            <span class="comment"># return JsonResponse(serializer.data,safe=False)   # DRF的Response对象会进行序列化，而且不需要写safe了</span></span><br><span class="line">            <span class="keyword">return</span> Response(serializer.data, status.HTTP_200_OK)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="string">'''查询单个成员'''</span></span><br><span class="line">            instance = Student.objects.get(pk=pk)</span><br><span class="line">            serializer = StudentModelSerializer(instance=instance)</span><br><span class="line">            <span class="comment"># return JsonResponse(serializer.data)</span></span><br><span class="line">            <span class="keyword">return</span> Response(serializer.data, status.HTTP_200_OK)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="string">'''增加成员'''</span></span><br><span class="line">        <span class="comment"># data_bytes = request.body</span></span><br><span class="line">        <span class="comment"># data = json.loads(data_bytes)</span></span><br><span class="line">        <span class="comment"># print(data)         # 列表中包含字典，这样可以是一个成员，也可以是多个成员</span></span><br><span class="line">        data = request.data  <span class="comment"># 可以使用DRF的Request对象，可以帮你反序列化</span></span><br><span class="line">        serializer = StudentModelSerializer(data=data, many=<span class="literal">True</span>)</span><br><span class="line">        serializer.is_valid(raise_exception=<span class="literal">True</span>)</span><br><span class="line">        serializer.save()</span><br><span class="line">        <span class="comment"># return JsonResponse(serializer.data,safe=False)</span></span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data, status.HTTP_201_CREATED)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self, request, pk=None)</span>:</span></span><br><span class="line">        <span class="string">'''删除一个成员'''</span></span><br><span class="line">        instance = Student.objects.get(pk=pk)</span><br><span class="line">        instance.delete()</span><br><span class="line">        <span class="comment"># return JsonResponse(&#123;"message":'ok'&#125;)</span></span><br><span class="line">        <span class="keyword">return</span> Response(status=status.HTTP_204_NO_CONTENT)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self, request, pk=None)</span>:</span></span><br><span class="line">        <span class="string">'''更改一个成员'''</span></span><br><span class="line">        instance_old = Student.objects.get(pk=pk)</span><br><span class="line">        instance_new = json.loads(request.body)</span><br><span class="line">        serializer = StudentModelSerializer(instance=instance_old, data=instance_new, partial=<span class="literal">True</span>)</span><br><span class="line">        serializer.is_valid(raise_exception=<span class="literal">True</span>)</span><br><span class="line">        serializer.save()</span><br><span class="line">        <span class="comment"># return JsonResponse(serializer.data)</span></span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data, status.HTTP_200_OK)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework.generics <span class="keyword">import</span> GenericAPIView</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentView3</span><span class="params">(GenericAPIView)</span>:</span></span><br><span class="line">    queryset = Student.objects.all()</span><br><span class="line">    serializer_class = StudentModelSerializer</span><br><span class="line"></span><br><span class="line">    <span class="string">'''GenericAPIView的写法'''</span></span><br><span class="line">    <span class="string">'''它将ＯＲＭ剥离出来，变得更加通用'''</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, pk=None)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> pk:</span><br><span class="line">            <span class="string">'''查询所有成员'''</span></span><br><span class="line">            <span class="comment"># student_list = Student.objects.all()</span></span><br><span class="line">            <span class="comment"># serializer = StudentModelSerializer(instance=student_list,many=True)</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 　写法一：</span></span><br><span class="line">            <span class="comment"># serializer = self.serializer_class(instance=self.get_queryset(),many=True)</span></span><br><span class="line">            <span class="comment"># 写法二：</span></span><br><span class="line">            serializer = self.get_serializer(instance=self.get_queryset(), many=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># return JsonResponse(serializer.data,safe=False)   # DRF的Response对象会进行序列化，而且不需要写safe了</span></span><br><span class="line">            <span class="keyword">return</span> Response(serializer.data, status.HTTP_200_OK)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="string">'''查询单个成员'''</span></span><br><span class="line">            <span class="comment"># instance = Student.objects.get(pk=pk)</span></span><br><span class="line">            <span class="comment"># serializer = StudentModelSerializer(instance=instance)</span></span><br><span class="line"></span><br><span class="line">            serializer = self.get_serializer(instance=self.get_object())</span><br><span class="line">            <span class="comment"># return JsonResponse(serializer.data)</span></span><br><span class="line">            <span class="keyword">return</span> Response(serializer.data, status.HTTP_200_OK)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="string">'''增加成员'''</span></span><br><span class="line">        <span class="comment"># # data_bytes = request.body</span></span><br><span class="line">        <span class="comment"># # data = json.loads(data_bytes)</span></span><br><span class="line">        <span class="comment"># # print(data)         # 列表中包含字典，这样可以是一个成员，也可以是多个成员</span></span><br><span class="line">        <span class="comment"># data = request.data     # 可以使用DRF的Request对象，可以帮你反序列化</span></span><br><span class="line">        <span class="comment"># serializer = StudentModelSerializer(data=data,many=True)</span></span><br><span class="line">        <span class="comment"># serializer.is_valid(raise_exception=True)</span></span><br><span class="line">        <span class="comment"># serializer.save()</span></span><br><span class="line">        serializer = self.get_serializer(data=request.data, many=<span class="literal">True</span>)</span><br><span class="line">        serializer.is_valid(raise_exception=<span class="literal">True</span>)</span><br><span class="line">        serializer.save()</span><br><span class="line">        <span class="comment"># return JsonResponse(serializer.data,safe=False)</span></span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data, status.HTTP_201_CREATED)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self, request, pk=None)</span>:</span></span><br><span class="line">        <span class="string">'''删除一个成员'''</span></span><br><span class="line">        <span class="comment"># instance = Student.objects.get(pk=pk)</span></span><br><span class="line">        <span class="comment"># instance.delete()</span></span><br><span class="line">        instance = self.get_object()</span><br><span class="line">        instance.delete()</span><br><span class="line">        <span class="comment"># return JsonResponse(&#123;"message":'ok'&#125;)</span></span><br><span class="line">        <span class="keyword">return</span> Response(status=status.HTTP_200_OK)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self, request, pk=None)</span>:</span></span><br><span class="line">        <span class="string">'''更改一个成员'''</span></span><br><span class="line">        <span class="comment"># instance_old = Student.objects.get(pk=pk)</span></span><br><span class="line">        <span class="comment"># instance_new = json.loads(request.body)</span></span><br><span class="line">        <span class="comment"># serializer = StudentModelSerializer(instance=instance_old,data=instance_new,partial=True)</span></span><br><span class="line">        serializer = self.get_serializer(instance=self.get_object(), data=request.data, partial=<span class="literal">True</span>)</span><br><span class="line">        serializer.is_valid(raise_exception=<span class="literal">True</span>)</span><br><span class="line">        serializer.save()</span><br><span class="line">        <span class="comment"># return JsonResponse(serializer.data)</span></span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data, status.HTTP_200_OK)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework.generics <span class="keyword">import</span> GenericAPIView</span><br><span class="line"><span class="keyword">from</span> rest_framework.mixins <span class="keyword">import</span> ListModelMixin, CreateModelMixin, RetrieveModelMixin, DestroyModelMixin, \</span><br><span class="line">    UpdateModelMixin</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentView4</span><span class="params">(GenericAPIView, ListModelMixin, CreateModelMixin, RetrieveModelMixin, DestroyModelMixin,</span></span></span><br><span class="line"><span class="class"><span class="params">                   UpdateModelMixin)</span>:</span></span><br><span class="line">    queryset = Student.objects.all()</span><br><span class="line">    serializer_class = StudentModelSerializer</span><br><span class="line"></span><br><span class="line">    <span class="string">'''GenericAPIView的写法'''</span></span><br><span class="line">    <span class="string">'''它将ＯＲＭ剥离出来，变得更加通用'''</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, pk=None)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> pk:</span><br><span class="line">            <span class="string">'''查询所有成员'''</span></span><br><span class="line">            <span class="comment"># # # student_list = Student.objects.all()</span></span><br><span class="line">            <span class="comment"># # # serializer = StudentModelSerializer(instance=student_list,many=True)</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># #　写法一：</span></span><br><span class="line">            <span class="comment"># # serializer = self.serializer_class(instance=self.get_queryset(),many=True)</span></span><br><span class="line">            <span class="comment"># # 写法二：</span></span><br><span class="line">            <span class="comment"># serializer = self.get_serializer(instance=self.get_queryset(),many=True)</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># # # return JsonResponse(serializer.data,safe=False)   # DRF的Response对象会进行序列化，而且不需要写safe了</span></span><br><span class="line">            <span class="comment"># return Response(serializer.data, status.HTTP_200_OK)</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> self.list(request)  <span class="comment"># ListModelMixin</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="string">'''查询单个成员'''</span></span><br><span class="line">            <span class="comment"># # instance = Student.objects.get(pk=pk)</span></span><br><span class="line">            <span class="comment"># # serializer = StudentModelSerializer(instance=instance)</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># serializer = self.get_serializer(instance=self.get_object())</span></span><br><span class="line">            <span class="comment"># #　return JsonResponse(serializer.data)</span></span><br><span class="line">            <span class="comment"># return Response(serializer.data, status.HTTP_200_OK)</span></span><br><span class="line">            <span class="keyword">return</span> self.retrieve(request)  <span class="comment"># RetrieveModelMixin</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="string">'''增加成员'''</span></span><br><span class="line">        <span class="comment"># # # data_bytes = request.body</span></span><br><span class="line">        <span class="comment"># # # data = json.loads(data_bytes)</span></span><br><span class="line">        <span class="comment"># # # print(data)         # 列表中包含字典，这样可以是一个成员，也可以是多个成员</span></span><br><span class="line">        <span class="comment"># # data = request.data     # 可以使用DRF的Request对象，可以帮你反序列化</span></span><br><span class="line">        <span class="comment"># # serializer = StudentModelSerializer(data=data,many=True)</span></span><br><span class="line">        <span class="comment"># # serializer.is_valid(raise_exception=True)</span></span><br><span class="line">        <span class="comment"># # serializer.save()</span></span><br><span class="line">        <span class="comment"># serializer = self.get_serializer(data=request.data, many=True)</span></span><br><span class="line">        <span class="comment"># serializer.is_valid(raise_exception=True)</span></span><br><span class="line">        <span class="comment"># serializer.save()</span></span><br><span class="line">        <span class="comment"># # return JsonResponse(serializer.data,safe=False)</span></span><br><span class="line">        <span class="comment"># return Response(serializer.data, status.HTTP_201_CREATED)</span></span><br><span class="line">        <span class="keyword">return</span> self.create(request)  <span class="comment"># CreateModelMixin</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self, request, pk=None)</span>:</span></span><br><span class="line">        <span class="string">'''删除一个成员'''</span></span><br><span class="line">        <span class="comment"># # instance = Student.objects.get(pk=pk)</span></span><br><span class="line">        <span class="comment"># # instance.delete()</span></span><br><span class="line">        <span class="comment"># instance = self.get_object()</span></span><br><span class="line">        <span class="comment"># instance.delete()</span></span><br><span class="line">        <span class="comment"># # return JsonResponse(&#123;"message":'ok'&#125;)</span></span><br><span class="line">        <span class="comment"># return Response(status=status.HTTP_200_OK)</span></span><br><span class="line">        <span class="keyword">return</span> self.destroy(request)  <span class="comment"># DestroyModelMixin</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self, request, pk=None)</span>:</span></span><br><span class="line">        <span class="string">'''更改一个成员'''</span></span><br><span class="line">        <span class="comment"># # instance_old = Student.objects.get(pk=pk)</span></span><br><span class="line">        <span class="comment"># # instance_new = json.loads(request.body)</span></span><br><span class="line">        <span class="comment"># # serializer = StudentModelSerializer(instance=instance_old,data=instance_new,partial=True)</span></span><br><span class="line">        <span class="comment"># serializer = self.get_serializer(instance=self.get_object(), data=request.data, partial=True)</span></span><br><span class="line">        <span class="comment"># serializer.is_valid(raise_exception=True)</span></span><br><span class="line">        <span class="comment"># serializer.save()</span></span><br><span class="line">        <span class="comment"># # return JsonResponse(serializer.data)</span></span><br><span class="line">        <span class="comment"># return Response(serializer.data, status.HTTP_200_OK)</span></span><br><span class="line">        <span class="keyword">return</span> self.update(request)  <span class="comment"># UpdateModelMixin</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework.generics <span class="keyword">import</span> ListAPIView, RetrieveAPIView</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentView5</span><span class="params">(ListAPIView)</span>:</span></span><br><span class="line">    queryset = Student.objects.all()</span><br><span class="line">    serializer_class = StudentModelSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentView6</span><span class="params">(RetrieveAPIView)</span>:</span></span><br><span class="line">    queryset = Student.objects.all()</span><br><span class="line">    serializer_class = StudentModelSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 存在的问题，　get，retrieve 方法中获取多条数据与获取单个方法可能会出现问题，后面的覆盖前面的。</span></span><br><span class="line"><span class="comment"># 同名方法会影响　有pk 没有ｐｋ，如果用不同名字的方法就可以解决了</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ViewSet</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentView7</span><span class="params">(ViewSet)</span>:</span></span><br><span class="line">    queryset = Student.objects.all()</span><br><span class="line">    serializer_class = StudentModelSerializer</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_one</span><span class="params">(self, request, pk)</span>:</span></span><br><span class="line">        student = Student.objects.get(pk=pk)</span><br><span class="line">        serializer = self.serializer_class(instance=student)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data, status.HTTP_200_OK)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">top_3</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        student_list = Student.objects.all()</span><br><span class="line">        serializer = self.serializer_class(instance=student_list, many=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data[:<span class="number">3</span>], status.HTTP_200_OK)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_all</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        student_list = Student.objects.all()</span><br><span class="line">        serializer = self.serializer_class(instance=student_list, many=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data, status.HTTP_200_OK)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self, request, pk)</span>:</span></span><br><span class="line">        student = Student.objects.get(pk=pk)</span><br><span class="line">        student.delete()</span><br><span class="line">        <span class="keyword">return</span> Response(status=status.HTTP_204_NO_CONTENT)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update_one</span><span class="params">(self, request, pk)</span>:</span></span><br><span class="line">        student = Student.objects.get(pk=pk)</span><br><span class="line">        serializer = self.serializer_class(instance=student, data=request.data, partial=<span class="literal">True</span>)</span><br><span class="line">        serializer.is_valid(raise_exception=<span class="literal">True</span>)</span><br><span class="line">        serializer.save()</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data, status.HTTP_200_OK)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create_one</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        serializer = self.serializer_class(data=request.data)</span><br><span class="line">        serializer.is_valid(raise_exception=<span class="literal">True</span>)</span><br><span class="line">        serializer.save()</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data, status.HTTP_201_CREATED)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将上面变得更通用吧,使用get_object,就不用针对某个模型手动查询了。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> GenericViewSet</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentView8</span><span class="params">(GenericViewSet)</span>:</span></span><br><span class="line">    queryset = Student.objects.all()</span><br><span class="line">    serializer_class = StudentModelSerializer</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_one</span><span class="params">(self, request, pk)</span>:</span></span><br><span class="line">        <span class="comment"># student = Student.objects.get(pk=pk)</span></span><br><span class="line">        <span class="comment"># serializer = self.serializer_class(instance=student)</span></span><br><span class="line">        serializer = self.get_serializer(instance=self.get_object())</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data, status.HTTP_200_OK)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">top_3</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        serializer = self.get_serializer(instance=self.get_queryset(), many=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data[:<span class="number">3</span>], status.HTTP_200_OK)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_all</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="comment"># student_list = Student.objects.all()</span></span><br><span class="line">        <span class="comment"># serializer = self.serializer_class(instance=student_list,many=True)</span></span><br><span class="line">        serializer = self.get_serializer(instance=self.get_queryset(), many=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data, status.HTTP_200_OK)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self, request, pk)</span>:</span></span><br><span class="line">        <span class="comment"># student = Student.objects.get(pk=pk)</span></span><br><span class="line">        student = self.get_object()</span><br><span class="line">        student.delete()</span><br><span class="line">        <span class="keyword">return</span> Response(status=status.HTTP_204_NO_CONTENT)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update_one</span><span class="params">(self, request, pk)</span>:</span></span><br><span class="line">        <span class="comment"># student = Student.objects.get(pk=pk)</span></span><br><span class="line">        <span class="comment"># serializer = self.serializer_class(instance=student,data=request.data,partial=True)</span></span><br><span class="line">        serializer = self.get_serializer(instance=self.get_object(), data=request.data, partial=<span class="literal">True</span>)</span><br><span class="line">        serializer.is_valid(raise_exception=<span class="literal">True</span>)</span><br><span class="line">        serializer.save()</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data, status.HTTP_200_OK)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create_one</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="comment"># serializer = self.serializer_class(data=request.data)</span></span><br><span class="line">        serializer = self.get_serializer(data=request.data)</span><br><span class="line">        serializer.is_valid(raise_exception=<span class="literal">True</span>)</span><br><span class="line">        serializer.save()</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data, status.HTTP_201_CREATED)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"> 再次简化代码</span></span><br><span class="line"><span class="string"> GenericViewSet 和　视图　mixins　配合</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.mixins <span class="keyword">import</span> ListModelMixin, RetrieveModelMixin, CreateModelMixin, DestroyModelMixin, \</span><br><span class="line">    UpdateModelMixin</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentView9</span><span class="params">(GenericViewSet, ListModelMixin)</span>:</span></span><br><span class="line">    queryset = Student.objects.all()</span><br><span class="line">    serializer_class = StudentModelSerializer</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">top_3</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        serializer = self.get_serializer(instance=self.get_queryset(), many=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data[:<span class="number">3</span>], status.HTTP_200_OK)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">只读视图集　ReadOnlyModelViewSet,只能查看所有成员或者查看一个成员</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ReadOnlyModelViewSet</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentView10</span><span class="params">(ReadOnlyModelViewSet)</span>:</span></span><br><span class="line">    queryset = Student.objects.all()</span><br><span class="line">    serializer_class = StudentModelSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''ａｃｔｉｏｎ动作属性'''</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.decorators <span class="keyword">import</span> action</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentView11</span><span class="params">(ViewSet)</span>:</span></span><br><span class="line">    queryset = Student.objects.all()</span><br><span class="line">    serializer_class = StudentModelSerializer</span><br><span class="line"></span><br><span class="line"><span class="meta">    @action(methods=['get'], detail=True)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_one</span><span class="params">(self, request, pk)</span>:</span></span><br><span class="line">        print(self.action)</span><br><span class="line">        student = Student.objects.get(pk=pk)</span><br><span class="line">        serializer = self.serializer_class(instance=student)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data, status.HTTP_200_OK)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">top_3</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        student_list = Student.objects.all()</span><br><span class="line">        serializer = self.serializer_class(instance=student_list, many=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data[:<span class="number">3</span>], status.HTTP_200_OK)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @action(methods=['get'], detail=False)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_all</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        print(self.action)</span><br><span class="line">        student_list = Student.objects.all()</span><br><span class="line">        serializer = self.serializer_class(instance=student_list, many=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data, status.HTTP_200_OK)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @action(methods=['delete'], detail=True)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self, request, pk)</span>:</span></span><br><span class="line">        print(self.action)</span><br><span class="line">        student = Student.objects.get(pk=pk)</span><br><span class="line">        student.delete()</span><br><span class="line">        <span class="keyword">return</span> Response(status=status.HTTP_204_NO_CONTENT)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @action(methods=['put'], detail=True)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update_one</span><span class="params">(self, request, pk)</span>:</span></span><br><span class="line">        print(self.action)</span><br><span class="line">        student = Student.objects.get(pk=pk)</span><br><span class="line">        serializer = self.serializer_class(instance=student, data=request.data, partial=<span class="literal">True</span>)</span><br><span class="line">        serializer.is_valid(raise_exception=<span class="literal">True</span>)</span><br><span class="line">        serializer.save()</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data, status.HTTP_200_OK)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @action(methods=['post'], detail=False)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create_one</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        print(self.action)</span><br><span class="line">        serializer = self.serializer_class(data=request.data)</span><br><span class="line">        serializer.is_valid(raise_exception=<span class="literal">True</span>)</span><br><span class="line">        serializer.save()</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data, status.HTTP_201_CREATED)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ModelViewSet</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentView12</span><span class="params">(ModelViewSet)</span>:</span></span><br><span class="line">    queryset = Student.objects.all()</span><br><span class="line">    serializer_class = StudentModelSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''添加权限'''</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.authentication <span class="keyword">import</span> SessionAuthentication, BasicAuthentication</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentView13</span><span class="params">(ReadOnlyModelViewSet)</span>:</span></span><br><span class="line">    queryset = Student.objects.all()</span><br><span class="line">    serializer_class = StudentModelSerializer</span><br><span class="line">    <span class="comment"># authentication_classes = [SessionAuthentication, BasicAuthentication]</span></span><br></pre></td></tr></table></figure><p>urls.py</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, re_path</span><br><span class="line"><span class="keyword">from</span> .views <span class="keyword">import</span> StudentView1, StudentView2, StudentView3, StudentView4, StudentView5, StudentView6, StudentView7, \</span><br><span class="line">    StudentView8, StudentView9, StudentView10, StudentView11,StudentView12,StudentView13</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># django 原生　Ｖｉｅｗ</span></span><br><span class="line">    re_path(<span class="string">'students1/(?P&lt;pk&gt;\d+)'</span>, StudentView1.as_view()),</span><br><span class="line">    path(<span class="string">'students1/'</span>, StudentView1.as_view()),</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用APIView</span></span><br><span class="line">    re_path(<span class="string">'students2/(?P&lt;pk&gt;\d+)'</span>, StudentView2.as_view()),</span><br><span class="line">    path(<span class="string">'students2/'</span>, StudentView2.as_view()),</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用GenericAPIView</span></span><br><span class="line">    re_path(<span class="string">'students3/(?P&lt;pk&gt;\d+)'</span>, StudentView3.as_view()),</span><br><span class="line">    path(<span class="string">'students3/'</span>, StudentView3.as_view()),</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用GenericAPIView, ListModelMixin, CreateModelMixin, RetrieveModelMixin等</span></span><br><span class="line">    re_path(<span class="string">'students4/(?P&lt;pk&gt;\d+)'</span>, StudentView4.as_view()),</span><br><span class="line">    path(<span class="string">'students4/'</span>, StudentView4.as_view()),</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用ListAPIView,RetrieveAPIView等来进行简化，但是得写多个类</span></span><br><span class="line">    path(<span class="string">'students5/'</span>, StudentView5.as_view()),</span><br><span class="line">    re_path(<span class="string">'students6/(?P&lt;pk&gt;\d+)'</span>, StudentView6.as_view()),</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用ViewSet，为了将分开写的类进行合并,使用动作（action）参数，可以更加丰富</span></span><br><span class="line">    path(<span class="string">'students7/'</span>, StudentView7.as_view(&#123;<span class="string">'get'</span>: <span class="string">'get_all'</span>, <span class="string">'post'</span>: <span class="string">'create_one'</span>&#125;)),</span><br><span class="line">    path(<span class="string">'students7/top_3'</span>, StudentView7.as_view(&#123;<span class="string">'get'</span>: <span class="string">'top_3'</span>&#125;)),</span><br><span class="line">    re_path(<span class="string">'students7/(?P&lt;pk&gt;\d+)'</span>, StudentView7.as_view(&#123;<span class="string">'get'</span>: <span class="string">'get_one'</span>, <span class="string">'delete'</span>: <span class="string">'delete'</span>, <span class="string">'put'</span>: <span class="string">'update_one'</span>&#125;)),</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用　GenericViewSet来让代码变得更加通用</span></span><br><span class="line">    path(<span class="string">'students8/'</span>, StudentView8.as_view(&#123;<span class="string">'get'</span>: <span class="string">'get_all'</span>, <span class="string">'post'</span>: <span class="string">'create_one'</span>&#125;)),</span><br><span class="line">    path(<span class="string">'students8/top_3'</span>, StudentView8.as_view(&#123;<span class="string">'get'</span>: <span class="string">'top_3'</span>&#125;)),</span><br><span class="line">    re_path(<span class="string">'students8/(?P&lt;pk&gt;\d+)'</span>, StudentView8.as_view(&#123;<span class="string">'get'</span>: <span class="string">'get_one'</span>, <span class="string">'delete'</span>: <span class="string">'delete'</span>, <span class="string">'put'</span>: <span class="string">'update_one'</span>&#125;)),</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Mixin的源代码中，帮我们实现了相应的方法，但是多继承中，由于请求的方法一样会导致冲突，如查询一个与查询所有。</span></span><br><span class="line">    <span class="comment"># 解决这个问题的方法就是，使用动作（action）参数，更加细粒度的设置ｇｅｔ请求对应的视图。</span></span><br><span class="line">    <span class="comment"># 但是这样的话，路由就写的长了，那我们继续改进</span></span><br><span class="line">    path(<span class="string">'students9/'</span>, StudentView9.as_view(&#123;<span class="string">'get'</span>: <span class="string">'list'</span>, <span class="string">'post'</span>: <span class="string">'create'</span>&#125;)),</span><br><span class="line">    path(<span class="string">'students9/top_3'</span>, StudentView9.as_view(&#123;<span class="string">'get'</span>: <span class="string">'top_3'</span>&#125;)),</span><br><span class="line">    re_path(<span class="string">'students9/(?P&lt;pk&gt;\d+)'</span>, StudentView9.as_view(&#123;<span class="string">'get'</span>: <span class="string">'retrieve'</span>, <span class="string">'delete'</span>: <span class="string">'destroy'</span>, <span class="string">'put'</span>: <span class="string">'update'</span>&#125;)),</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 只读视图集　ReadOnlyModelViewSet ，要求必须写入 动作（action）参数</span></span><br><span class="line">    path(<span class="string">'students10/'</span>, StudentView10.as_view(&#123;<span class="string">'get'</span>: <span class="string">'list'</span>&#125;)),</span><br><span class="line">    re_path(<span class="string">'students10/(?P&lt;pk&gt;\d+)'</span>, StudentView10.as_view(&#123;<span class="string">'get'</span>: <span class="string">'retrieve'</span>&#125;)),</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 添加权限</span></span><br><span class="line">    path(<span class="string">'students13/'</span>, StudentView13.as_view(&#123;<span class="string">'get'</span>: <span class="string">'list'</span>&#125;)),</span><br><span class="line">    re_path(<span class="string">'students13/(?P&lt;pk&gt;\d+)'</span>, StudentView13.as_view(&#123;<span class="string">'get'</span>: <span class="string">'retrieve'</span>&#125;)),</span><br><span class="line"></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用了ａｃｔｉｏｎ装饰器和路由类生成路由，达到简写的目的</span></span><br><span class="line"><span class="comment"># SimpleRouter 和 DefaultRouter  作用：为视图集生成url路由</span></span><br><span class="line"><span class="keyword">from</span> student.views <span class="keyword">import</span> StudentView11</span><br><span class="line"><span class="keyword">from</span> rest_framework.routers <span class="keyword">import</span> DefaultRouter</span><br><span class="line">router = DefaultRouter()</span><br><span class="line"><span class="comment"># 注册视图集，生成视图集对应的路由</span></span><br><span class="line"><span class="comment"># router.register("路由前缀","视图集类","可选参数：路由别名前缀")</span></span><br><span class="line"></span><br><span class="line">router.register(<span class="string">'students11'</span>,StudentView11,<span class="string">"student11"</span>)</span><br><span class="line"><span class="comment"># http://127.0.0.1:8000/students11/5/get_one  输入这样的ｕｒｌ可以查询。</span></span><br><span class="line"><span class="comment"># print(router.urls)</span></span><br><span class="line">urlpatterns += router.urls</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>DRF</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>RESTful</tag>
        <tag>Django</tag>
        <tag>DRF</tag>
      </tags>
  </entry>
  <entry>
    <title>DRF-序列化器</title>
    <url>/DRF/20191028-Django-REST-Framework-2.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>RESTful API开发中对于数据需要做序列化与反序列化，DRF中的序列化工具对数据对象进行转换并自动进行校验。</p></blockquote><a id="more"></a><h2 id="序列化与反序列化"><a href="#序列化与反序列化" class="headerlink" title="序列化与反序列化"></a>序列化与反序列化</h2><ul><li><p>API接口开发，最核心最常见的一个过程就是序列化，所谓序列化就是把<strong>数据转换格式</strong>，序列化可以分两个阶段：</p></li><li><p><strong>序列化</strong>： 把我们识别的数据转换成指定的格式提供给别人。</p><p>例如：我们在django中获取到的数据默认是模型对象，但是模型对象数据无法直接提供给前端或别的平台使用，所以我们需要把数据进行序列化，变成字符串或者json数据，提供给别人。</p></li><li><p><strong>反序列化</strong>：把别人提供的数据转换/还原成我们需要的格式。</p><p>例如：前端js提供过来的json数据，对于python而言就是字符串，我们需要进行反序列化换成模型类对象，这样我们才能把数据保存到数据库中。</p></li></ul><h2 id="创建序列化器类"><a href="#创建序列化器类" class="headerlink" title="创建序列化器类"></a>创建序列化器类</h2><p>例如，在django项目中创建学生子应用。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python manage.py startapp students</span><br></pre></td></tr></table></figure><p>在syudents应用目录中新建serializers.py用于保存该应用的序列化器。</p><p>创建一个StudentModelSerializer用于序列化与反序列化。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建序列化器类，回头会在试图中被调用</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentModelSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Student</span><br><span class="line">        fields = <span class="string">"__all__"</span></span><br></pre></td></tr></table></figure><ul><li><strong>model</strong> 指明该序列化器处理的数据字段从模型类BookInfo参考生成</li><li><strong>fields</strong> 指明该序列化器包含模型类中的哪些字段，’<strong>all</strong>‘指明包含所有字段</li></ul><h3 id="常用字段类型"><a href="#常用字段类型" class="headerlink" title="常用字段类型"></a>常用字段类型</h3><table><thead><tr><th>字段</th><th>字段构造方式</th></tr></thead><tbody><tr><td><strong>BooleanField</strong></td><td>BooleanField()</td></tr><tr><td><strong>NullBooleanField</strong></td><td>NullBooleanField()</td></tr><tr><td><strong>CharField</strong></td><td>CharField(max_length=None, min_length=None, allow_blank=False, trim_whitespace=True)</td></tr><tr><td><strong>EmailField</strong></td><td>EmailField(max_length=None, min_length=None, allow_blank=False)</td></tr><tr><td><strong>RegexField</strong></td><td>RegexField(regex, max_length=None, min_length=None, allow_blank=False)</td></tr><tr><td><strong>SlugField</strong></td><td>SlugField(max<em>length=50, min_length=None, allow_blank=False) 正则字段，验证正则模式 [a-zA-Z0-9</em>-]+</td></tr><tr><td><strong>URLField</strong></td><td>URLField(max_length=200, min_length=None, allow_blank=False)</td></tr><tr><td><strong>UUIDField</strong></td><td>UUIDField(format=’hex_verbose’) format: 1) <code>&#39;hex_verbose&#39;</code> 如<code>&quot;5ce0e9a5-5ffa-654b-cee0-1238041fb31a&quot;</code> 2） <code>&#39;hex&#39;</code> 如 <code>&quot;5ce0e9a55ffa654bcee01238041fb31a&quot;</code> 3）<code>&#39;int&#39;</code> - 如: <code>&quot;123456789012312313134124512351145145114&quot;</code> 4）<code>&#39;urn&#39;</code> 如: <code>&quot;urn:uuid:5ce0e9a5-5ffa-654b-cee0-1238041fb31a&quot;</code></td></tr><tr><td><strong>IPAddressField</strong></td><td>IPAddressField(protocol=’both’, unpack_ipv4=False, **options)</td></tr><tr><td><strong>IntegerField</strong></td><td>IntegerField(max_value=None, min_value=None)</td></tr><tr><td><strong>FloatField</strong></td><td>FloatField(max_value=None, min_value=None)</td></tr><tr><td><strong>DecimalField</strong></td><td>DecimalField(max_digits, decimal_places, coerce_to_string=None, max_value=None, min_value=None) max_digits: 最多位数 decimal_palces: 小数点位置</td></tr><tr><td><strong>DateTimeField</strong></td><td>DateTimeField(format=api_settings.DATETIME_FORMAT, input_formats=None)</td></tr><tr><td><strong>DateField</strong></td><td>DateField(format=api_settings.DATE_FORMAT, input_formats=None)</td></tr><tr><td><strong>TimeField</strong></td><td>TimeField(format=api_settings.TIME_FORMAT, input_formats=None)</td></tr><tr><td><strong>DurationField</strong></td><td>DurationField()</td></tr><tr><td><strong>ChoiceField</strong></td><td>ChoiceField(choices) choices与Django的用法相同</td></tr><tr><td><strong>MultipleChoiceField</strong></td><td>MultipleChoiceField(choices)</td></tr><tr><td><strong>FileField</strong></td><td>FileField(max_length=None, allow_empty_file=False, use_url=UPLOADED_FILES_USE_URL)</td></tr><tr><td><strong>ImageField</strong></td><td>ImageField(max_length=None, allow_empty_file=False, use_url=UPLOADED_FILES_USE_URL)</td></tr><tr><td><strong>ListField</strong></td><td>ListField(child=, min_length=None, max_length=None)</td></tr><tr><td><strong>DictField</strong></td><td>DictField(child=)</td></tr></tbody></table><h3 id="选项参数"><a href="#选项参数" class="headerlink" title="选项参数"></a>选项参数</h3><table><thead><tr><th>参数名称</th><th>作用</th></tr></thead><tbody><tr><td><strong>max_length</strong></td><td>最大长度</td></tr><tr><td><strong>min_lenght</strong></td><td>最小长度</td></tr><tr><td><strong>allow_blank</strong></td><td>是否允许为空</td></tr><tr><td><strong>trim_whitespace</strong></td><td>是否截断空白字符</td></tr><tr><td><strong>max_value</strong></td><td>最小值</td></tr><tr><td><strong>min_value</strong></td><td>最大值</td></tr></tbody></table><h3 id="通用参数"><a href="#通用参数" class="headerlink" title="通用参数"></a>通用参数</h3><table><thead><tr><th>参数名称</th><th>说明</th></tr></thead><tbody><tr><td><strong>read_only</strong></td><td>表明该字段仅用于序列化输出，默认False</td></tr><tr><td><strong>write_only</strong></td><td>表明该字段仅用于反序列化输入，默认False</td></tr><tr><td><strong>required</strong></td><td>表明该字段在反序列化时必须输入，默认True</td></tr><tr><td><strong>default</strong></td><td>反序列化时使用的默认值</td></tr><tr><td><strong>allow_null</strong></td><td>表明该字段是否允许传入None，默认False</td></tr><tr><td><strong>validators</strong></td><td>该字段使用的验证器</td></tr><tr><td><strong>error_messages</strong></td><td>包含错误编号与错误信息的字典</td></tr><tr><td><strong>label</strong></td><td>用于HTML展示API页面时，显示的字段名称</td></tr><tr><td><strong>help_text</strong></td><td>用于HTML展示API页面时，显示的字段帮助提示信息</td></tr></tbody></table><h2 id="创建Serializer对象"><a href="#创建Serializer对象" class="headerlink" title="创建Serializer对象"></a>创建Serializer对象</h2><p>定义好Serializer类后，就可以创建Serializer对象了。</p><p>Serializer的构造方法为：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Serializer(instance=<span class="literal">None</span>, data=empty, **kwarg)</span><br></pre></td></tr></table></figure><p>说明：</p><p>1）用于序列化时，将模型类对象传入<strong>instance</strong>参数</p><p>2）用于反序列化时，将要被反序列化的数据传入<strong>data</strong>参数</p><p>3）除了instance和data参数外，在构造Serializer对象时，还可通过<strong>context</strong>参数额外添加数据，如</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">serializer = AccountSerializer(account, context=&#123;<span class="string">'request'</span>: request&#125;)</span><br></pre></td></tr></table></figure><p><strong>通过context参数附加的数据，可以通过Serializer对象的context属性获取。</strong></p><ol><li>使用序列化器的时候一定要注意，序列化器声明了以后，不会自动执行，需要我们在视图中进行调用才可以。</li><li>序列化器无法直接接收数据，需要我们在视图中创建序列化器对象时把使用的数据传递过来。</li><li>序列化器的字段声明类似于我们前面使用过的表单系统。</li><li>开发restful api时，序列化器会帮我们把模型数据转换成字典.</li><li>drf提供的视图会帮我们把字典转换成json,或者把客户端发送过来的数据转换字典.</li></ol><h2 id="序列化器的使用"><a href="#序列化器的使用" class="headerlink" title="序列化器的使用"></a>序列化器的使用</h2><p>序列化器的使用分两个阶段：</p><ol><li>在客户端请求时，使用序列化器可以完成对数据的反序列化。</li><li>在服务器响应时，使用序列化器可以完成对数据的序列化。</li></ol><h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><p>1） 先查询出一个学生对象</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> students.models <span class="keyword">import</span> Student</span><br><span class="line"></span><br><span class="line">student = Student.objects.get(id=<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>2） 构造序列化器对象</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> .serializers <span class="keyword">import</span> StudentSerializer</span><br><span class="line"></span><br><span class="line">serializer = StudentSerializer(instance=student)</span><br></pre></td></tr></table></figure><p>3）获取序列化数据</p><p>通过data属性可以获取序列化后的数据</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">serializer.data</span><br><span class="line"><span class="comment"># &#123;'id': 4, 'name': '小张', 'age': 18, 'sex': True, 'description': '猴赛雷'&#125;</span></span><br></pre></td></tr></table></figure><p>完整视图代码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> View</span><br><span class="line"><span class="keyword">from</span> students.models <span class="keyword">import</span> Student</span><br><span class="line"><span class="keyword">from</span> .serializers <span class="keyword">import</span> StudentSerializer</span><br><span class="line"><span class="keyword">from</span> django.http.response <span class="keyword">import</span> JsonResponse</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentView</span><span class="params">(View)</span>:</span></span><br><span class="line">    <span class="string">"""使用序列化器序列化转换单个模型数据"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request,pk)</span>:</span></span><br><span class="line">        <span class="comment"># 获取数据</span></span><br><span class="line">        student = Student.objects.get(pk=pk)</span><br><span class="line">        <span class="comment"># 数据转换[序列化过程]</span></span><br><span class="line">        serializer = StudentSerializer(instance=student)</span><br><span class="line">        print(serializer.data)</span><br><span class="line">        <span class="comment"># 响应数据</span></span><br><span class="line">        <span class="keyword">return</span> JsonResponse(serializer.data)</span><br></pre></td></tr></table></figure><p>4）如果要被序列化的是包含多条数据的查询集QuerySet，可以通过添加<strong>many=True</strong>参数补充说明</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""使用序列化器序列化转换多个模型数据"""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request)</span>:</span></span><br><span class="line">    <span class="comment"># 获取数据</span></span><br><span class="line">    student_list = Student.objects.all()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 转换数据[序列化过程]</span></span><br><span class="line">    <span class="comment"># 如果转换多个模型对象数据，则需要加上many=True</span></span><br><span class="line">    serializer = StudentSerializer(instance=student_list,many=<span class="literal">True</span>)</span><br><span class="line">    print( serializer.data ) <span class="comment"># 序列化器转换后的数据</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 响应数据给客户端</span></span><br><span class="line">    <span class="comment"># 返回的json数据，如果是列表，则需要声明safe=False</span></span><br><span class="line">    <span class="keyword">return</span> JsonResponse(serializer.data,safe=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问结果：</span></span><br><span class="line"><span class="comment"># [OrderedDict([('id', 1), ('name', 'xiaoming'), ('age', 20), ('sex', True), ('description', '测试')]), OrderedDict([('id', 2), ('name', 'xiaohui'), ('age', 22), ('sex', True), ('description', '后面来的测试')]), OrderedDict([('id', 4), ('name', '小张'), ('age', 18), ('sex', True), ('description', '猴赛雷')])]</span></span><br></pre></td></tr></table></figure><h2 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h2><h3 id="数据验证"><a href="#数据验证" class="headerlink" title="数据验证"></a>数据验证</h3><p>使用序列化器进行反序列化时，需要对数据进行验证后，才能获取验证成功的数据或保存成模型类对象。</p><p>在获取反序列化的数据前，必须调用<strong>is_valid()</strong>方法进行验证，验证成功返回True，否则返回False。</p><p>验证失败，可以通过序列化器对象的<strong>errors</strong>属性获取错误信息，返回字典，包含了字段和字段的错误。如果是非字段错误，可以通过修改REST framework配置中的<strong>NON_FIELD_ERRORS_KEY</strong>来控制错误字典中的键名。</p><p>验证成功，可以通过序列化器对象的<strong>validated_data</strong>属性获取数据。</p><p>在定义序列化器时，指明每个字段的序列化类型和选项参数，本身就是一种验证行为。</p><p>如我们前面定义过的BookInfoSerializer</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInfoSerializer</span><span class="params">(serializers.Serializer)</span>:</span></span><br><span class="line">    <span class="string">"""图书数据序列化器"""</span></span><br><span class="line">    id = serializers.IntegerField(label=<span class="string">'ID'</span>, read_only=<span class="literal">True</span>)</span><br><span class="line">    btitle = serializers.CharField(label=<span class="string">'名称'</span>, max_length=<span class="number">20</span>)</span><br><span class="line">    bpub_date = serializers.DateField(label=<span class="string">'发布日期'</span>, required=<span class="literal">False</span>)</span><br><span class="line">    bread = serializers.IntegerField(label=<span class="string">'阅读量'</span>, required=<span class="literal">False</span>)</span><br><span class="line">    bcomment = serializers.IntegerField(label=<span class="string">'评论量'</span>, required=<span class="literal">False</span>)</span><br><span class="line">    image = serializers.ImageField(label=<span class="string">'图片'</span>, required=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>通过构造序列化器对象，并将要反序列化的数据传递给data构造参数，进而进行验证</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> booktest.serializers <span class="keyword">import</span> BookInfoSerializer</span><br><span class="line">data = &#123;<span class="string">'bpub_date'</span>: <span class="number">123</span>&#125;</span><br><span class="line">serializer = BookInfoSerializer(data=data)</span><br><span class="line">serializer.is_valid()  <span class="comment"># 返回False</span></span><br><span class="line">serializer.errors</span><br><span class="line"><span class="comment"># &#123;'btitle': [ErrorDetail(string='This field is required.', code='required')], 'bpub_date': [ErrorDetail(string='Date has wrong format. Use one of these formats instead: YYYY[-MM[-DD]].', code='invalid')]&#125;</span></span><br><span class="line">serializer.validated_data  <span class="comment"># &#123;&#125;</span></span><br><span class="line"></span><br><span class="line">data = &#123;<span class="string">'btitle'</span>: <span class="string">'python'</span>&#125;</span><br><span class="line">serializer = BookInfoSerializer(data=data)</span><br><span class="line">serializer.is_valid()  <span class="comment"># True</span></span><br><span class="line">serializer.errors  <span class="comment"># &#123;&#125;</span></span><br><span class="line">serializer.validated_data  <span class="comment">#  OrderedDict([('btitle', 'python')])</span></span><br></pre></td></tr></table></figure><p>is_valid()方法还可以在验证失败时抛出异常serializers.ValidationError，可以通过传递<strong>raise_exception=True</strong>参数开启，REST framework接收到此异常，会向前端返回HTTP 400 Bad Request响应。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Return a 400 response if the data was invalid.</span></span><br><span class="line">serializer.is_valid(raise_exception=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>如果觉得这些还不够，需要再补充定义验证行为，可以使用以下三种方法：</p><h4 id="1-validate-字段名"><a href="#1-validate-字段名" class="headerlink" title="1) validate_字段名"></a>1) validate_字段名</h4><p>对<code>&lt;field_name&gt;</code>字段进行验证，如</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInfoSerializer</span><span class="params">(serializers.Serializer)</span>:</span></span><br><span class="line">    <span class="string">"""图书数据序列化器"""</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate_btitle</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">'django'</span> <span class="keyword">not</span> <span class="keyword">in</span> value.lower():</span><br><span class="line">            <span class="keyword">raise</span> serializers.ValidationError(<span class="string">"图书不是关于Django的"</span>)</span><br><span class="line">        <span class="keyword">return</span> value</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> booktest.serializers <span class="keyword">import</span> BookInfoSerializer</span><br><span class="line">data = &#123;<span class="string">'btitle'</span>: <span class="string">'python'</span>&#125;</span><br><span class="line">serializer = BookInfoSerializer(data=data)</span><br><span class="line">serializer.is_valid()  <span class="comment"># False   </span></span><br><span class="line">serializer.errors</span><br><span class="line"><span class="comment">#  &#123;'btitle': [ErrorDetail(string='图书不是关于Django的', code='invalid')]&#125;</span></span><br></pre></td></tr></table></figure><h4 id="2-validate"><a href="#2-validate" class="headerlink" title="2) validate"></a>2) validate</h4><p>在序列化器中需要同时对多个字段进行比较验证时，可以定义validate方法来验证，如</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInfoSerializer</span><span class="params">(serializers.Serializer)</span>:</span></span><br><span class="line">    <span class="string">"""图书数据序列化器"""</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate</span><span class="params">(self, attrs)</span>:</span></span><br><span class="line">        bread = attrs[<span class="string">'bread'</span>]</span><br><span class="line">        bcomment = attrs[<span class="string">'bcomment'</span>]</span><br><span class="line">        <span class="keyword">if</span> bread &lt; bcomment:</span><br><span class="line">            <span class="keyword">raise</span> serializers.ValidationError(<span class="string">'阅读量小于评论量'</span>)</span><br><span class="line">        <span class="keyword">return</span> attrs</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> booktest.serializers <span class="keyword">import</span> BookInfoSerializer</span><br><span class="line">data = &#123;<span class="string">'btitle'</span>: <span class="string">'about django'</span>, <span class="string">'bread'</span>: <span class="number">10</span>, <span class="string">'bcomment'</span>: <span class="number">20</span>&#125;</span><br><span class="line">s = BookInfoSerializer(data=data)</span><br><span class="line">s.is_valid()  <span class="comment"># False</span></span><br><span class="line">s.errors</span><br><span class="line"><span class="comment">#  &#123;'non_field_errors': [ErrorDetail(string='阅读量小于评论量', code='invalid')]&#125;</span></span><br></pre></td></tr></table></figure><h4 id="3-validators"><a href="#3-validators" class="headerlink" title="3) validators"></a>3) validators</h4><p>在字段中添加validators选项参数，也可以补充验证行为，如</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">about_django</span><span class="params">(value)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'django'</span> <span class="keyword">not</span> <span class="keyword">in</span> value.lower():</span><br><span class="line">        <span class="keyword">raise</span> serializers.ValidationError(<span class="string">"图书不是关于Django的"</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInfoSerializer</span><span class="params">(serializers.Serializer)</span>:</span></span><br><span class="line">    <span class="string">"""图书数据序列化器"""</span></span><br><span class="line">    id = serializers.IntegerField(label=<span class="string">'ID'</span>, read_only=<span class="literal">True</span>)</span><br><span class="line">    btitle = serializers.CharField(label=<span class="string">'名称'</span>, max_length=<span class="number">20</span>, validators=[about_django])</span><br><span class="line"> 	。。。</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> booktest.serializers <span class="keyword">import</span> BookInfoSerializer</span><br><span class="line">data = &#123;<span class="string">'btitle'</span>: <span class="string">'python'</span>&#125;</span><br><span class="line">serializer = BookInfoSerializer(data=data)</span><br><span class="line">serializer.is_valid()  <span class="comment"># False   </span></span><br><span class="line">serializer.errors</span><br><span class="line"><span class="comment">#  &#123;'btitle': [ErrorDetail(string='图书不是关于Django的', code='invalid')]&#125;</span></span><br></pre></td></tr></table></figure><h3 id="反序列化-保存数据"><a href="#反序列化-保存数据" class="headerlink" title="反序列化-保存数据"></a>反序列化-保存数据</h3><p>前面的验证数据成功后,我们可以使用序列化器来完成数据反序列化的过程.这个过程可以把数据转成模型类对象.</p><p>可以通过实现create()和update()两个方法来实现。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInfoSerializer</span><span class="params">(serializers.Serializer)</span>:</span></span><br><span class="line">    <span class="string">"""图书数据序列化器"""</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(self, validated_data)</span>:</span></span><br><span class="line">        <span class="string">"""新建"""</span></span><br><span class="line">        <span class="keyword">return</span> BookInfo(**validated_data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self, instance, validated_data)</span>:</span></span><br><span class="line">        <span class="string">"""更新，instance为要更新的对象实例"""</span></span><br><span class="line">        instance.btitle = validated_data.get(<span class="string">'btitle'</span>, instance.btitle)</span><br><span class="line">        instance.bpub_date = validated_data.get(<span class="string">'bpub_date'</span>, instance.bpub_date)</span><br><span class="line">        instance.bread = validated_data.get(<span class="string">'bread'</span>, instance.bread)</span><br><span class="line">        instance.bcomment = validated_data.get(<span class="string">'bcomment'</span>, instance.bcomment)</span><br><span class="line">        <span class="keyword">return</span> instance</span><br></pre></td></tr></table></figure><p>如果需要在返回数据对象的时候，也将数据保存到数据库中，则可以进行如下修改</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInfoSerializer</span><span class="params">(serializers.Serializer)</span>:</span></span><br><span class="line">    <span class="string">"""图书数据序列化器"""</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(self, validated_data)</span>:</span></span><br><span class="line">        <span class="string">"""新建"""</span></span><br><span class="line">        <span class="keyword">return</span> BookInfo.objects.create(**validated_data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self, instance, validated_data)</span>:</span></span><br><span class="line">        <span class="string">"""更新，instance为要更新的对象实例"""</span></span><br><span class="line">        instance.btitle = validated_data.get(<span class="string">'btitle'</span>, instance.btitle)</span><br><span class="line">        instance.bpub_date = validated_data.get(<span class="string">'bpub_date'</span>, instance.bpub_date)</span><br><span class="line">        instance.bread = validated_data.get(<span class="string">'bread'</span>, instance.bread)</span><br><span class="line">        instance.bcomment = validated_data.get(<span class="string">'bcomment'</span>, instance.bcomment)</span><br><span class="line">        instance.save()</span><br><span class="line">        <span class="keyword">return</span> instance</span><br></pre></td></tr></table></figure><p>实现了上述两个方法后，在反序列化数据的时候，就可以通过save()方法返回一个数据对象实例了</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">book = serializer.save()</span><br></pre></td></tr></table></figure><p>如果创建序列化器对象的时候，没有传递instance实例，则调用save()方法的时候，create()被调用，相反，如果传递了instance实例，则调用save()方法的时候，update()被调用。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> db.serializers <span class="keyword">import</span> BookInfoSerializer</span><br><span class="line">data = &#123;<span class="string">'btitle'</span>: <span class="string">'封神演义'</span>&#125;</span><br><span class="line">serializer = BookInfoSerializer(data=data)</span><br><span class="line">serializer.is_valid()  <span class="comment"># True</span></span><br><span class="line">serializer.save()  <span class="comment"># &lt;BookInfo: 封神演义&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> db.models <span class="keyword">import</span> BookInfo</span><br><span class="line">book = BookInfo.objects.get(id=<span class="number">2</span>)</span><br><span class="line">data = &#123;<span class="string">'btitle'</span>: <span class="string">'倚天剑'</span>&#125;</span><br><span class="line">serializer = BookInfoSerializer(book, data=data)</span><br><span class="line">serializer.is_valid()  <span class="comment"># True</span></span><br><span class="line">serializer.save()  <span class="comment"># &lt;BookInfo: 倚天剑&gt;</span></span><br><span class="line">book.btitle  <span class="comment"># '倚天剑'</span></span><br></pre></td></tr></table></figure><h3 id="附加说明"><a href="#附加说明" class="headerlink" title="附加说明"></a>附加说明</h3><p>1） 在对序列化器进行save()保存时，可以额外传递数据，这些数据可以在create()和update()中的validated_data参数获取到</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># request.user 是django中记录当前登录用户的模型对象</span></span><br><span class="line">serializer.save(owner=request.user)</span><br></pre></td></tr></table></figure><p>2）默认序列化器必须传递所有required的字段，否则会抛出验证异常。但是我们可以使用partial参数来允许部分字段更新</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Update `comment` with partial data</span></span><br><span class="line">serializer = CommentSerializer(comment, data=&#123;<span class="string">'content'</span>: <span class="string">u'foo bar'</span>&#125;, partial=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h2 id="模型类序列化器"><a href="#模型类序列化器" class="headerlink" title="模型类序列化器"></a>模型类序列化器</h2><p>如果我们想要使用序列化器对应的是Django的模型类，DRF为我们提供了ModelSerializer模型类序列化器来帮助我们快速创建一个Serializer类。</p><p>ModelSerializer与常规的Serializer相同，但提供了：</p><ul><li>基于模型类自动生成一系列字段</li><li>基于模型类自动为Serializer生成validators，比如unique_together</li><li>包含默认的create()和update()的实现</li></ul><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>比如我们创建一个BookInfoSerializer</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInfoSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="string">"""图书数据序列化器"""</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = BookInfo</span><br><span class="line">        fields = <span class="string">'__all__'</span></span><br></pre></td></tr></table></figure><ul><li>model 指明参照哪个模型类</li><li>fields 指明为模型类的哪些字段生成</li></ul><p>我们可以在python manage.py shell中查看自动生成的BookInfoSerializer的具体实现</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> booktest.serializers <span class="keyword">import</span> BookInfoSerializer</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>serializer = BookInfoSerializer()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>serializer</span><br><span class="line">BookInfoSerializer():</span><br><span class="line">    id = IntegerField(label=<span class="string">'ID'</span>, read_only=<span class="literal">True</span>)</span><br><span class="line">    btitle = CharField(label=<span class="string">'名称'</span>, max_length=<span class="number">20</span>)</span><br><span class="line">    bpub_date = DateField(allow_null=<span class="literal">True</span>, label=<span class="string">'发布日期'</span>, required=<span class="literal">False</span>)</span><br><span class="line">    bread = IntegerField(label=<span class="string">'阅读量'</span>, max_value=<span class="number">2147483647</span>, min_value=<span class="number">-2147483648</span>, required=<span class="literal">False</span>)</span><br><span class="line">    bcomment = IntegerField(label=<span class="string">'评论量'</span>, max_value=<span class="number">2147483647</span>, min_value=<span class="number">-2147483648</span>, required=<span class="literal">False</span>)</span><br><span class="line">    image = ImageField(allow_null=<span class="literal">True</span>, label=<span class="string">'图片'</span>, max_length=<span class="number">100</span>, required=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><h3 id="指定字段"><a href="#指定字段" class="headerlink" title="指定字段"></a>指定字段</h3><p>1) 使用<strong>fields</strong>来明确字段，<code>__all__</code>表名包含所有字段，也可以写明具体哪些字段，如</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInfoSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="string">"""图书数据序列化器"""</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = BookInfo</span><br><span class="line">        fields = (<span class="string">'id'</span>, <span class="string">'btitle'</span>, <span class="string">'bpub_date'</span>)</span><br></pre></td></tr></table></figure><p>2) 使用<strong>exclude</strong>可以明确排除掉哪些字段</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInfoSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="string">"""图书数据序列化器"""</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = BookInfo</span><br><span class="line">        exclude = (<span class="string">'image'</span>,)</span><br></pre></td></tr></table></figure><p>3) 显示指明字段，如：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeroInfoSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    hbook = BookInfoSerializer()</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = HeroInfo</span><br><span class="line">        fields = (<span class="string">'id'</span>, <span class="string">'hname'</span>, <span class="string">'hgender'</span>, <span class="string">'hcomment'</span>, <span class="string">'hbook'</span>)</span><br></pre></td></tr></table></figure><p>4) 指明只读字段</p><p>可以通过<strong>read_only_fields</strong>指明只读字段，即仅用于序列化输出的字段</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInfoSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="string">"""图书数据序列化器"""</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = BookInfo</span><br><span class="line">        fields = (<span class="string">'id'</span>, <span class="string">'btitle'</span>, <span class="string">'bpub_date'</span>， <span class="string">'bread'</span>, <span class="string">'bcomment'</span>)</span><br><span class="line">        read_only_fields = (<span class="string">'id'</span>, <span class="string">'bread'</span>, <span class="string">'bcomment'</span>)</span><br></pre></td></tr></table></figure><h3 id="添加额外参数"><a href="#添加额外参数" class="headerlink" title="添加额外参数"></a>添加额外参数</h3><p>我们可以使用<strong>extra_kwargs</strong>参数为ModelSerializer添加或修改原有的选项参数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInfoSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="string">"""图书数据序列化器"""</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = BookInfo</span><br><span class="line">        fields = (<span class="string">'id'</span>, <span class="string">'btitle'</span>, <span class="string">'bpub_date'</span>, <span class="string">'bread'</span>, <span class="string">'bcomment'</span>)</span><br><span class="line">        extra_kwargs = &#123;</span><br><span class="line">            <span class="string">'bread'</span>: &#123;<span class="string">'min_value'</span>: <span class="number">0</span>, <span class="string">'required'</span>: <span class="literal">True</span>&#125;,</span><br><span class="line">            <span class="string">'bcomment'</span>: &#123;<span class="string">'min_value'</span>: <span class="number">0</span>, <span class="string">'required'</span>: <span class="literal">True</span>&#125;,</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># BookInfoSerializer():</span></span><br><span class="line"><span class="comment">#    id = IntegerField(label='ID', read_only=True)</span></span><br><span class="line"><span class="comment">#    btitle = CharField(label='名称', max_length=20)</span></span><br><span class="line"><span class="comment">#    bpub_date = DateField(allow_null=True, label='发布日期', required=False)</span></span><br><span class="line"><span class="comment">#    bread = IntegerField(label='阅读量', max_value=2147483647, min_value=0, required=True)</span></span><br><span class="line"><span class="comment">#    bcomment = IntegerField(label='评论量', max_value=2147483647, min_value=0, required=True)</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>DRF</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>RESTful</tag>
        <tag>Django</tag>
        <tag>DRF</tag>
      </tags>
  </entry>
  <entry>
    <title>RESTful API规范</title>
    <url>/RESTful/20191028-RESTful-1.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>本篇介绍10个RESTful API规范。在实际中对于这些规范可以选择性的使用。</p></blockquote><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>REST全称是Representational State Transfer，中文意思是表述（编者注：通常译为表征）性状态转移。 它首次出现在2000年Roy Fielding的博士论文中。</p><p>RESTful是一种定义<strong>Web API接口的设计风格</strong>，尤其适用于前后端分离的应用模式中。</p><p>这种风格的理念认为后端开发任务就是提供数据的，对外提供的是数据资源的访问接口，所以在定义接口时，客户端访问的URL路径就表示这种要操作的数据资源。</p><p>而对于数据资源分别使用POST、DELETE、GET、UPDATE等请求动作来表达对数据的增删查改。</p><p><strong>HTTP请求动词</strong></p><table><thead><tr><th>请求方法</th><th>请求地址</th><th>后端操作</th></tr></thead><tbody><tr><td>GET</td><td>/movies</td><td>获取所有电影</td></tr><tr><td>POST</td><td>/movies</td><td>添加电影</td></tr><tr><td>GET</td><td>/movies/<pk></pk></td><td>获取编号为pk的电影</td></tr><tr><td>PUT</td><td>/movies/<pk></pk></td><td>修改编号为pk的电影</td></tr><tr><td>DELETE</td><td>/movies/<pk></pk></td><td>删除编号为pk的电影</td></tr></tbody></table><p>事实上，我们可以使用任何一个框架都可以实现符合restful规范的API接口。</p><p>参考文档：<a href="http://www.runoob.com/w3cnote/restful-architecture.html" target="_blank" rel="noopener">http://www.runoob.com/w3cnote/restful-architecture.html</a></p><h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><p>API接口开发，最核心最常见的一个过程就是序列化，所谓序列化就是把<strong>数据转换格式</strong>，序列化可以分两个阶段：</p><p><strong>序列化</strong>： 把我们识别的数据转换成指定的格式提供给别人。</p><p>例如：我们在django中获取到的数据默认是模型对象，但是模型对象数据无法直接提供给前端或别的平台使用，所以我们需要把数据进行序列化，变成字符串或者json数据，提供给别人。</p><p><strong>反序列化</strong>：把别人提供的数据转换/还原成我们需要的格式。</p><p>例如：前端JS提供过来的JSON数据，对于python而言就是字符串，我们需要进行反序列化换成模型类对象，这样我们才能把数据保存到数据库中。</p><p>接收数据(反序列化) —&gt; 操作数据 —&gt; 响应数据(序列化)</p><h1 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h1><h2 id="域名"><a href="#域名" class="headerlink" title="域名 ***"></a>域名 ***</h2><p>应该尽量将API部署在专用域名之下。</p><figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">https://api.example.com</span></span><br></pre></td></tr></table></figure><p>如果确定API很简单，不会有进一步扩展，可以考虑放在主域名下。</p><figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">https://example.org/api/</span></span><br></pre></td></tr></table></figure><h2 id="版本（Versioning）"><a href="#版本（Versioning）" class="headerlink" title="版本（Versioning） ***"></a>版本（Versioning） ***</h2><p>应该将API的版本号放入URL。</p><figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">http://www.example.com/app/1.0/foo</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line"><span class="attribute">http://www.example.com/app/1.1/foo</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line"><span class="attribute">http://www.example.com/app/2.0/foo</span></span><br></pre></td></tr></table></figure><p>另一种做法是，将版本号放在HTTP头信息中，但不如放入URL方便和直观。<a href="https://developer.github.com/v3/media/#request-specific-version" target="_blank" rel="noopener">Github</a>就采用了这种做法。</p><p>因为不同的版本，可以理解成同一种资源的不同表现形式，所以应该采用同一个URL。版本号可以在HTTP请求头信息的Accept字段中进行区分（参见<a href="http://www.informit.com/articles/article.aspx?p=1566460" target="_blank" rel="noopener">Versioning REST Services</a>）：</p><figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Accept</span>: vnd.example-com.foo+json; version=1.0</span><br><span class="line"></span><br><span class="line"><span class="attribute">Accept</span>: vnd.example-com.foo+json; version=1.1</span><br><span class="line"></span><br><span class="line"><span class="attribute">Accept</span>: vnd.example-com.foo+json; version=2.0</span><br></pre></td></tr></table></figure><h2 id="路径（Endpoint）"><a href="#路径（Endpoint）" class="headerlink" title="路径（Endpoint）**"></a>路径（Endpoint）**</h2><p>路径又称”终点”（endpoint），表示API的具体网址，每个网址代表一种资源（resource）</p><p><strong>(1) 资源作为网址，只能有名词，不能有动词，而且所用的名词往往与数据库的表名对应。</strong></p><p>举例来说，以下是不好的例子:</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">/getProducts</span><br><span class="line">/listOrders</span><br><span class="line">/retreiveClientByOrder?orderId=1</span><br></pre></td></tr></table></figure><p>对于一个简洁结构，你应该始终用名词。 此外，利用的HTTP方法可以分离网址中的资源名称的操作。</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">GET /products ：将返回所有产品清单</span><br><span class="line">POST /products ：将产品新建到集合</span><br><span class="line">GET /products/4 ：将获取产品 4</span><br><span class="line">PATCH（或）PUT /products/4 ：将更新产品 4</span><br></pre></td></tr></table></figure><p><strong>(2) API中的名词应该使用复数。无论子资源或者所有资源。</strong></p><p>举例来说，获取产品的API可以这样定义</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">获取单个产品：http://127.0.0.1:8080/AppName/rest/products/1</span><br><span class="line">获取所有产品: http://127.0.0.1:8080/AppName/rest/products</span><br></pre></td></tr></table></figure><h2 id="HTTP动词"><a href="#HTTP动词" class="headerlink" title="HTTP动词  ***"></a>HTTP动词 ***</h2><p>对于资源的具体操作类型，由HTTP动词表示。</p><p>常用的HTTP动词有下面四个（括号里是对应的SQL命令）。</p><ul><li>GET（SELECT）：从服务器取出资源（一项或多项）。</li><li>POST（CREATE）：在服务器新建一个资源。</li><li>PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。</li><li>DELETE（DELETE）：从服务器删除资源。</li></ul><p>还有三个不常用的HTTP动词。</p><ul><li>PATCH（UPDATE）：在服务器更新(更新)资源（客户端提供改变的属性）。</li><li>HEAD：获取资源的元数据。</li><li>OPTIONS：获取信息，关于资源的哪些属性是客户端可以改变的。</li></ul><p>下面是一些例子。</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">GET /zoos：列出所有动物园</span><br><span class="line">POST /zoos：新建一个动物园（上传文件）</span><br><span class="line">GET /zoos/ID：获取某个指定动物园的信息</span><br><span class="line">PUT /zoos/ID：更新某个指定动物园的信息（提供该动物园的全部信息）</span><br><span class="line">PATCH /zoos/ID：更新某个指定动物园的信息（提供该动物园的部分信息）</span><br><span class="line">DELETE /zoos/ID：删除某个动物园</span><br><span class="line">GET /zoos/ID/animals：列出某个指定动物园的所有动物</span><br><span class="line">DELETE /zoos/ID/animals/ID：删除某个指定动物园的指定动物</span><br></pre></td></tr></table></figure><h2 id="过滤信息（Filtering）"><a href="#过滤信息（Filtering）" class="headerlink" title="过滤信息（Filtering）**"></a>过滤信息（Filtering）**</h2><p>如果记录数量很多，服务器不可能都将它们返回给用户。API应该提供参数，过滤返回结果。</p><p>下面是一些常见的参数。query_string 查询字符串,地址栏后面问号后面的数据,格式: name=xx&amp;sss=xxx</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">?limit=10：指定返回记录的数量</span><br><span class="line">?offset=10：指定返回记录的开始位置。</span><br><span class="line">?page=2&amp;per_page=100：指定第几页，以及每页的记录数。</span><br><span class="line">?sortby=name&amp;order=asc：指定返回结果按照哪个属性排序，以及排序顺序。</span><br><span class="line">?animal_type_id=1：指定筛选条件</span><br></pre></td></tr></table></figure><p>参数的设计允许存在冗余，即允许API路径和URL参数偶尔有重复。比如，GET /zoos/ID/animals 与 GET /animals?zoo_id=ID 的含义是相同的。</p><h2 id="状态码（Status-Codes）"><a href="#状态码（Status-Codes）" class="headerlink" title="状态码（Status Codes）**"></a>状态码（Status Codes）**</h2><p>服务器向用户返回的状态码和提示信息，常见的有以下一些（方括号中是该状态码对应的HTTP动词）。</p><blockquote><ul><li>200 OK - [GET]：服务器成功返回用户请求的数据</li><li>201 CREATED - [POST/PUT/PATCH]：用户新建或修改数据成功。</li><li>202 Accepted - [*]：表示一个请求已经进入后台排队（异步任务）</li><li>204 NO CONTENT - [DELETE]：用户删除数据成功。</li><li>400 INVALID REQUEST - [POST/PUT/PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作</li><li>401 Unauthorized - [*]：表示用户没有权限（令牌、用户名、密码错误）。</li><li>403 Forbidden - [*] 表示用户得到授权（与401错误相对），但是访问是被禁止的。</li><li>404 NOT FOUND - [*]：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。</li><li>406 Not Acceptable - [GET]：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。</li><li>410 Gone -[GET]：用户请求的资源被永久删除，且不会再得到的。</li><li>422 Unprocesable entity - [POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误。</li><li>500 INTERNAL SERVER ERROR - [*]：服务器发生错误，用户将无法判断发出的请求是否成功。</li></ul></blockquote><p>状态码的完全列表参见<a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html" target="_blank" rel="noopener">这里</a>或<a href="https://zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81" target="_blank" rel="noopener">这里</a>。</p><h2 id="错误处理（Error-handling）"><a href="#错误处理（Error-handling）" class="headerlink" title="错误处理（Error handling）"></a>错误处理（Error handling）</h2><p>如果状态码是4xx，服务器就应该向用户返回出错信息。一般来说，返回的信息中将error作为键名，出错信息作为键值即可。</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    error: "Invalid API key"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个就有些勉强了！</p><h2 id="返回结果"><a href="#返回结果" class="headerlink" title="返回结果"></a>返回结果</h2><p>针对不同操作，服务器向用户返回的结果应该符合以下规范。</p><ul><li>GET /collection：返回资源对象的列表（数组）</li><li>GET /collection/ID：返回单个资源对象(json)</li><li>POST /collection：返回新生成的资源对象(json)</li><li>PUT /collection/ID：返回完整的资源对象(json)</li><li>DELETE /collection/ID：返回一个空文档(空字符串)</li></ul><h2 id="超媒体（Hypermedia-API）"><a href="#超媒体（Hypermedia-API）" class="headerlink" title="超媒体（Hypermedia API）"></a>超媒体（Hypermedia API）</h2><p>RESTful API最好做到Hypermedia（即返回结果中提供链接，连向其他API方法），使得用户不查文档，也知道下一步应该做什么。</p><p>比如，Github的API就是这种设计，访问<a href="https://api.github.com/" target="_blank" rel="noopener">api.github.com</a>会得到一个所有可用API的网址列表。</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"current_user_url"</span>: <span class="string">"https://api.github.com/user"</span>,</span><br><span class="line"><span class="attr">"authorizations_url"</span>: <span class="string">"https://api.github.com/authorizations"</span>,</span><br><span class="line">// ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面可以看到，如果想获取当前用户的信息，应该去访问<a href="https://api.github.com/user" target="_blank" rel="noopener">api.github.com/user</a>，然后就得到了下面结果。</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"message"</span>: <span class="string">"Requires authentication"</span>,</span><br><span class="line">  <span class="attr">"documentation_url"</span>: <span class="string">"https://developer.github.com/v3"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码表示，服务器给出了提示信息，以及文档的网址。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>服务器返回的数据格式，应该尽量使用JSON，避免使用XML。</p>]]></content>
      <categories>
        <category>RESTful</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>RESTful</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu使用记录</title>
    <url>/Ubuntu/20191025-Learn-Ubuntu-1.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>记录使用Ubuntu时用到的命令。</p></blockquote><a id="more"></a><h2 id="查看-amp-卸载软件"><a href="#查看-amp-卸载软件" class="headerlink" title="查看&amp;卸载软件"></a>查看&amp;卸载软件</h2><ol><li><p>查看安装的软件：</p><p><code>dpkg --list</code></p></li><li><p>卸载软件：</p><p><code>sudo apt-get --purge remove 包名</code>（<code>--purge</code>是可选项，写上这个属性是将软件及其配置文件一并删除，如不需要删除配置文件，可执行<code>sudo apt-get remove 包名</code>）</p></li></ol><p>持续更新中！！！</p>]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu安装Vue-cli</title>
    <url>/Vue-js/20191025-learn-Vue-4.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>本篇介绍在ubuntu下安装脚手架（vue-cli），从nvm -&gt;node.js -&gt; vue-cli</p></blockquote><a id="more"></a><h2 id="nvm"><a href="#nvm" class="headerlink" title="nvm"></a>nvm</h2><p>由于node.js的版本一直处于不断更新中，所以我们需要一个版本管理器来更好的使用node.js。</p><p>nvm是一个开源的node版本管理器，通过它，你可以下载任意版本的node.js，还可以在不同版本之间切换使用。</p><p><strong>注意：安装nvm之前，要确保当前机子中不存在任何版本的node，如果有，则卸载掉。</strong></p><p>github：<a href="https://github.com/creationix/nvm" target="_blank" rel="noopener">https://github.com/creationix/nvm</a></p><p>安装命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt install curl</span><br><span class="line">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh | bash</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><p>常用的nvm命令：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看官方提供的可安装node版本</span></span><br><span class="line">nvm ls-remote</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装执行版本的node,例如：nvm install v10.15.2</span></span><br><span class="line">nvm install &lt;version&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载node版本，例如：nvm uninstall v10.15.2</span></span><br><span class="line">nvm uninstall &lt;version&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看已安装的node列表</span></span><br><span class="line">nvm ls</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换node版本，例如：nvm use v10.15.2</span></span><br><span class="line">nvm use &lt;version&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置默认版本，如果没有设置，则开机时默认node是没有启动的。</span></span><br><span class="line">nvm alias default v10<span class="number">.15</span><span class="number">.2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前使用的版本</span></span><br><span class="line">nvm current</span><br></pre></td></tr></table></figure><h2 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h2><p>Node.js是一个新的后端(后台)语言，它的语法和JavaScript类似，所以可以说它是属于前端的后端语言，后端语言和前端语言的区别：</p><ul><li>运行环境：后端语言一般运行在服务器端，前端语言运行在客户端的浏览器上</li><li>功能：后端语言可以操作文件，可以读写数据库，前端语言不能操作文件，不能读写数据库。</li></ul><p>node.js的版本有两大分支：</p><ul><li><p>官方发布的node.js版本：0.xx.xx 这种版本号就是官方发布的版本</p></li><li><p>社区发布的node.js版本：xx.xx.x 就是社区开发的版本</p></li></ul><p>对于我们只需要安装常用的LTS版本（长线支持版本 Long-Time Support）：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">nvm install v10<span class="number">.15</span><span class="number">.2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置为默认版本</span></span><br><span class="line">nvm alias default v10<span class="number">.15</span><span class="number">.2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看node.js版本</span></span><br><span class="line">node -v</span><br></pre></td></tr></table></figure><h2 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h2><p>npm（node package manager）是nodejs的包管理器，用于node插件管理（包括安装、卸载、管理依赖等）。安装了node以后，就自动安装了npm[不一定是最新版本]。这个工具相当于python的pip管理器。</p><p>官方：<a href="https://www.npmjs.com/" target="_blank" rel="noopener">https://www.npmjs.com</a></p><p>文档：<a href="https://www.npmjs.com.cn/" target="_blank" rel="noopener">https://www.npmjs.com.cn/</a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm --version</span><br><span class="line">npm install -g 包名              <span class="comment"># 安装模块   -g表示全局安装，如果没有-g，则表示在当前项目安装</span></span><br><span class="line">npm list                        <span class="comment"># 查看当前目录下已安装的node包</span></span><br><span class="line">npm view 包名 engines            <span class="comment"># 查看包所依赖的Node的版本 </span></span><br><span class="line">npm outdated                    <span class="comment"># 检查包是否已经过时，命令会列出所有已过时的包</span></span><br><span class="line">npm update 包名                  <span class="comment"># 更新node包</span></span><br><span class="line">npm uninstall 包名               <span class="comment"># 卸载node包</span></span><br><span class="line">npm 命令 -h                      <span class="comment"># 查看指定命令的帮助文档</span></span><br></pre></td></tr></table></figure><h2 id="cnpm"><a href="#cnpm" class="headerlink" title="cnpm"></a>cnpm</h2><p>默认情况下，npm安装插件是从国外服务器下载，受网络影响大，可能出现网络异常。</p><p>通过淘宝镜像加速npm</p><p><a href="http://npm.taobao.org/" target="_blank" rel="noopener">http://npm.taobao.org/</a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打印默认的 registry 地址</span></span><br><span class="line">npm config -g get registry</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置淘宝镜像</span></span><br><span class="line">npm config -g <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><h2 id="vue-cli"><a href="#vue-cli" class="headerlink" title="vue-cli"></a>vue-cli</h2><p>使用前面已经安装好的node版本，进行安装。注意一旦安装以后，以后这个vue-li最好契合当前node版本。也就是说，运行接下来安装的vue-cli时，最好运行的就是本次跑的node版本。如果回头切换到其他版本node来运行vue-cli，有可能因为版本不兼容出现不必要的bug。</p><p>文档：<a href="https://cli.vuejs.org/zh/guide/installation.html" target="_blank" rel="noopener">https://cli.vuejs.org/zh/guide/installation.html</a></p><p>安装命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br><span class="line">npm install -g @vue/cli-init  <span class="comment"># vue2.x版本需要安装桥接工具</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装完成可以查看版本(这个可不是Vue自己的版本呦)</span></span><br><span class="line">vue -V</span><br><span class="line"></span><br><span class="line"><span class="comment"># 搭建项目</span></span><br><span class="line"><span class="comment"># vue2.x</span></span><br><span class="line">vue init webpack &lt;项目目录名&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># vue3.x</span></span><br><span class="line">vue create &lt;项目目录名&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Vue.js</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>Vue.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue组件化开发</title>
    <url>/Vue-js/20191025-learn-Vue-3.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>Vue组件是Vue.js最强大的功能之一，把页面抽象成一颗组件树，这颗树由独立的可复用的小组件构成！</p></blockquote><a id="more"></a><h1 id="组件（component）"><a href="#组件（component）" class="headerlink" title="组件（component）"></a>组件（component）</h1><ul><li><p>组件（Component）是自定义封装的功能。在前端开发过程中，经常出现多个网页的功能是重复的，而且很多不同的页面之间，也存在同样的功能。</p></li><li><p>而在网页中实现一个功能，需要使用html定义功能的内容结构，使用css声明功能的外观样式，还要使用js来定义功能的特效，因此就产生了<strong>把一个功能相关的[HTML、css和javascript]代码封装在一起组成一个整体的代码块封装模式</strong>，我们称之为“组件”。</p></li></ul><ul><li>所以，组件就是一个html网页中的功能，一般就是一个标签，标签中有自己的html内容结构，css样式和js特效。就如下图中页面像一个拼图，每一个组件是一块小的拼图，来构成整个页面。</li><li>将页面抽象为一颗组件树，由一个根组件以及独立的，可复用的小组件构成。</li></ul><p><img src="/Vue-js/20191025-learn-Vue-3/component.png" alt="component"></p><ul><li>vue的组件有两种：默认组件[全局组件] 和 单文件组件</li></ul><h2 id="默认组件（全局组件）"><a href="#默认组件（全局组件）" class="headerlink" title="默认组件（全局组件）"></a>默认组件（全局组件）</h2><p>组件名称命名建议：驼峰体！</p><p>格式为：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">"组件名称"</span>, &#123;</span><br><span class="line">       template: <span class="string">"模板内容"</span>,</span><br><span class="line">       data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">           <span class="keyword">return</span> json对象</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure><ul><li>在我们使用 <code>Vue.component</code> 定义了全局组件后，还需要用 <code>new Vue({ el: &#39;#container &#39;})</code> 在每个页面内指定一个容器元素。</li><li>与我们定义vm对象中的data有所差别，这里的data的属性是函数，返回值必须是json对象。</li></ul><p>例子：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">show</span>&gt;</span><span class="tag">&lt;/<span class="name">show</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    Vue.component(<span class="string">"show"</span>, &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: '<span class="tag">&lt;<span class="name">p</span>&gt;</span>我是</span><span class="template-variable">&#123;&#123;iam&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span>',</span></span></span><br><span class="line"><span class="actionscript">        data: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 写在这里的数据只有当前组件可以使用</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">                iam: <span class="string">'一个p标签'</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;el: <span class="string">'#container'</span>&#125;)</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 起一个容器的作用，没有这个容器，组件的不会生效的。</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>全局组件的优点在于简单上手，适用于小规模项目，但它的缺点也非常明显：</p><ol><li><strong>全局定义 (Global definitions)</strong> 强制要求每个 component 中的命名不得重复</li><li><strong>字符串模板 (String templates)</strong> 缺乏语法高亮，在 HTML 有多行的时候，需要用到丑陋的 <code>\</code></li><li><strong>不支持 CSS (No CSS support)</strong> 意味着当 HTML 和 JavaScript 组件化时，CSS 明显被遗漏</li><li><strong>没有构建步骤 (No build step)</strong> 限制只能使用 HTML 和 ES5 JavaScript, 而不能使用预处理器，如 Pug (formerly Jade) 和 Babel</li></ol><h2 id="单文件组件"><a href="#单文件组件" class="headerlink" title="单文件组件"></a>单文件组件</h2><ul><li><p>单文件组件（<strong>single-file components</strong>）的文件扩展名为 <code>.vue</code>，它解决了全局组件存在的问题，并且还可以使用 webpack 或 Browserify 等构建工具。</p></li><li><p>在介绍单文件组件之前，我们需要安装准备一些组件开发工具，一般情况下，单文件组件，我们运行在自动化工具 Vue-cli 中</p></li></ul><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>已经配置好的，这块可以跳过。</p><p>如果没有配置的推荐阅读 [Ubuntu安装Vue-cli](待补充！！！</p><h1 id="Vue自动化工具（Vue-cli）"><a href="#Vue自动化工具（Vue-cli）" class="headerlink" title="Vue自动化工具（Vue-cli）"></a>Vue自动化工具（Vue-cli）</h1><p>vue-cli 是脚手架工具，其作用就是用配置好的模板迅速搭建起一个前端项目工程</p><h2 id="创建前端项目"><a href="#创建前端项目" class="headerlink" title="创建前端项目"></a>创建前端项目</h2><h3 id="生成项目目录"><a href="#生成项目目录" class="headerlink" title="生成项目目录"></a>生成项目目录</h3><p>使用vue自动化工具可以快速搭建单页应用项目目录。</p><p>该工具为现代化的前端开发工作流提供了开箱即用的构建配置。只需几分钟即可创建并启动一个带热重载、保存时静态检查以及可用于生产环境的构建配置的项目：</p><p>生成一个基于 webpack 模板的新项目:</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">vue <span class="keyword">init</span> webpack 项目目录名</span><br></pre></td></tr></table></figure><p>例如:</p><p><img src="/Vue-js/20191025-learn-Vue-3/%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE.PNG" alt="创建项目"></p><p>进入项目目录可以启动开发服务器, ctrl+c 停止服务:</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">cd myproject</span><br><span class="line">npm <span class="keyword">run</span><span class="bash"> dev           <span class="comment"># 运行这个命令就可以启动node提供的测试http服务器</span></span></span><br></pre></td></tr></table></figure><p>访问：<a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a></p><p>简化操作：</p><p>当我们修改内容后就需要手动关闭，然后手动开启，这样太过繁琐。使用 pycharm 来简化操作：</p><p><img src="/Vue-js/20191025-learn-Vue-3/pycharm%E9%85%8D%E7%BD%AE.png" alt="pycharm配置"></p><p>这样只需要点击绿三角，启动后，当我们修改了内容，pycharm会自动重新执行。</p><h3 id="项目目录结构"><a href="#项目目录结构" class="headerlink" title="项目目录结构"></a>项目目录结构</h3><figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">|<span class="string">-- build                            // 项目构建(webpack)相关代码：开发/生产环境</span></span><br><span class="line">|<span class="string">   </span>|<span class="string">-- build.js                     // 生产环境构建代码</span></span><br><span class="line">|<span class="string">   </span>|<span class="string">-- check-version.js             // 检查node、npm等版本</span></span><br><span class="line">|<span class="string">   </span>|<span class="string">-- dev-client.js                // 热重载相关</span></span><br><span class="line">|<span class="string">   </span>|<span class="string">-- dev-server.js                // 构建本地服务器</span></span><br><span class="line">|<span class="string">   </span>|<span class="string">-- utils.js                     // 构建工具相关</span></span><br><span class="line">|<span class="string">   </span>|<span class="string">-- webpack.base.conf.js         // webpack基础配置</span></span><br><span class="line">|<span class="string">   </span>|<span class="string">-- webpack.dev.conf.js          // webpack开发环境配置</span></span><br><span class="line">|<span class="string">   </span>|<span class="string">-- webpack.prod.conf.js         // webpack生产环境配置</span></span><br><span class="line">|<span class="string">   └── ...</span></span><br><span class="line">|<span class="string">  </span></span><br><span class="line">|<span class="string">-- node_modules  					// npm install 安装的依赖代码库</span></span><br><span class="line">|<span class="string">   └── ...</span></span><br><span class="line">|<span class="string">  </span></span><br><span class="line">|<span class="string">-- config                           // 项目开发环境配置</span></span><br><span class="line">|<span class="string">   </span>|<span class="string">-- dev.env.js                   // 开发环境变量</span></span><br><span class="line">|<span class="string">   </span>|<span class="string">-- index.js                     // 项目一些配置变量</span></span><br><span class="line">|<span class="string">   └── prod.env.js                  // 生产环境变量</span></span><br><span class="line">|<span class="string">  </span></span><br><span class="line">|<span class="string">-- src                              // 源码目录</span></span><br><span class="line">|<span class="string">   </span>|<span class="string">-- components  目录             // vue公共组件  ***</span></span><br><span class="line">|<span class="string">   </span>|<span class="string">-- assets  目录                 // 资源文件夹，一般放一些静态资源文件  </span></span><br><span class="line">|<span class="string">   </span>|<span class="string">-- App.vue                      // 页面入口文件  ***</span></span><br><span class="line">|<span class="string">   └── main.js                      // 程序入口文件，加载各种公共组件  ***</span></span><br><span class="line">|<span class="string">  </span></span><br><span class="line">|<span class="string">-- static                           // 静态资源目录，存放所有的css，js文件。</span></span><br><span class="line">|<span class="string">   </span></span><br><span class="line">|<span class="string">-- .babelrc                         // ES6语法编译配置</span></span><br><span class="line">|<span class="string">-- .editorconfig                    // 定义代码格式</span></span><br><span class="line">|<span class="string">-- .gitignore                       // git上传需要忽略的文件格式</span></span><br><span class="line">|<span class="string">-- README.md                        // 项目说明</span></span><br><span class="line">|<span class="string">-- favicon.ico </span></span><br><span class="line">|<span class="string">-- index.html                       // 入口页面  ***</span></span><br><span class="line">|<span class="string">-- package.json                     // 项目基本信息</span></span><br></pre></td></tr></table></figure><h3 id="项目执行流程图"><a href="#项目执行流程图" class="headerlink" title="项目执行流程图"></a>项目执行流程图</h3><p><img src="/Vue-js/20191025-learn-Vue-3/%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.png" alt="pycharm配置"></p><ul><li><p>整个项目是一个主文件 <code>index.html</code></p></li><li><p><code>index.html</code> 中会引入src文件夹中的 <code>main.js</code></p></li><li><p><code>main.js</code> 中会导入顶级单文件组件 <code>App.vue</code></p></li><li><p><code>App.vue</code> 中会通过组件嵌套或者路由来引用 components 文件夹中的其他单文件组件。</p></li></ul><h2 id="单文件组件的使用"><a href="#单文件组件的使用" class="headerlink" title="单文件组件的使用"></a>单文件组件的使用</h2><h3 id="template-编写html代码的地方"><a href="#template-编写html代码的地方" class="headerlink" title="template 编写html代码的地方"></a>template 编写html代码的地方</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"add"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"num"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"sub"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--只能有一个根标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>note：只能有一个根标签，其它标签都写在根标签下</p><h3 id="script编写vue-js代码"><a href="#script编写vue-js代码" class="headerlink" title="script编写vue.js代码"></a>script编写vue.js代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">        name: <span class="string">"Home"</span>, <span class="comment">// 组件名称，将来提供给路由进行页面跳转</span></span></span><br><span class="line">        data() &#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> &#123;              </span></span><br><span class="line">                num: 0,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            add() &#123;</span><br><span class="line"><span class="javascript">                <span class="keyword">this</span>.num = <span class="built_in">parseInt</span>(<span class="keyword">this</span>.num) + <span class="number">1</span>;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            sub() &#123;</span><br><span class="line"><span class="actionscript">                <span class="keyword">if</span> (<span class="keyword">this</span>.num &lt;= <span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">return</span> <span class="number">0</span></span></span><br><span class="line">                &#125;</span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.num -= <span class="number">1</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>note：</p><ul><li>在这里 export default 只能有一个。</li><li>data是一个函数，返回的是一个json对象。</li></ul><h3 id="style编写当前组件的样式代码"><a href="#style编写当前组件的样式代码" class="headerlink" title="style编写当前组件的样式代码"></a>style编写当前组件的样式代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="comment">/* scoped 是为了保证只在局部范围内生效，不会影响外界*/</span></span></span><br><span class="line"><span class="css">  <span class="selector-tag">inpupt</span><span class="selector-attr">[type=text]</span> &#123;</span></span><br><span class="line">    width: 80px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>note：scoped是为了保证只在当前组件范围内生效。</p><p>完整例子：点击加减数字</p><p>上面的三块是对于当前组件的定义，那么如何调用这个组件呢？</p><p>在 App.vue 中调用这个组件：</p><ul><li>导入组件，注册组件，使用标签。</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">home</span>&gt;</span><span class="tag">&lt;/<span class="name">home</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">"./components/Home"</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name: <span class="string">'App'</span>,</span></span><br><span class="line">  components: &#123;</span><br><span class="line"><span class="actionscript">    <span class="comment">// 组件注册列表</span></span></span><br><span class="line">      Home</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="组件的嵌套"><a href="#组件的嵌套" class="headerlink" title="组件的嵌套"></a>组件的嵌套</h2><ul><li><p>一个页面是一颗组件树，对于组件特别复杂时，我们可以把子组件分目录存储：将父组件下的子组件存在一个目录下。</p></li><li><p>例如，我们可以声明一个组件，作为父组件（Home），在components/创建一个保存子组件的目录HomeSon，这里存放的是 Home 组件的子组件。</p></li></ul><h2 id="传递数据"><a href="#传递数据" class="headerlink" title="传递数据"></a>传递数据</h2><h3 id="父组件的数据传递给子组件"><a href="#父组件的数据传递给子组件" class="headerlink" title="父组件的数据传递给子组件"></a>父组件的数据传递给子组件</h3><p>① 父组件中通过子组件<strong>标签的属性</strong>来传递数据：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;Menu :sonnum=&quot;num&quot; title=&quot;这是：父组件传递给子组件的字符串数据&quot;/&gt;</span><br></pre></td></tr></table></figure><p>上面表示在父组件调用Menu子组件的时候传递了2个数据：</p><ul><li><p>如果要传递变量[变量可以各种类型的数据]，属性名左边必须加上冒号 <code>:</code> ，同时，属性名是自定义的，会在子组件中使用。</p></li><li><p>如果要传递普通字符串数据，则不需要加上冒号:</p></li></ul><p>② 子组件通过 <strong><code>props</code></strong> 来接接收数据：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name: &quot;Menu&quot;,</span><br><span class="line">        props:[&quot;sonnum&quot;,&quot;title&quot;],</span><br><span class="line">        data()&#123;</span><br><span class="line">            return &#123;</span><br><span class="line">               msg:&apos;我是Menu组件的内容：&apos;,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>③ 对于接收到的数据，按使用data中的变量使用就可以：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;menu&quot;&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123;msg&#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123;title&#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123;sonnum&#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model=&quot;sonnum&quot;&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>note：</p><ol><li><p>传递数据是变量，则需要在属性左边添加冒号.</p><ul><li><p>传递数据是变量,这种数据称之为”<strong>动态数据传递</strong>“</p></li><li><p>传递数据不是变量,这种数据称之为”<strong>静态数据传递</strong>“</p></li></ul></li><li><p>父组件中修改了数据,在子组件中会被同步修改,但是,子组件中的数据修改了,是不是影响到父组件中的数据.</p><ul><li>这种情况,在开发时,也被称为”<strong>单向数据流</strong>“</li></ul></li></ol><h3 id="子组件传递数据给父组件"><a href="#子组件传递数据给父组件" class="headerlink" title="子组件传递数据给父组件"></a>子组件传递数据给父组件</h3><p>① 子组件监听父组件传来的变量，如果在子组件中改变这个变量的值，就使用 <code>this.$emit(&quot;父元素的自定义事件&quot;,&quot;要传递的数据&quot;);</code> 来向父组件提交这个改变的数据[事件的方式进行传递]。</p><p>例中，使用 $emit 提交的事件名称为：<code>sendparentdata</code>。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;menu&quot;&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123;msg&#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123;title&#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123;sonnum&#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model=&quot;sonnum&quot;&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name: &quot;Menu&quot;,</span><br><span class="line">        props:[&quot;sonnum&quot;,&quot;title&quot;],</span><br><span class="line">        data()&#123;</span><br><span class="line">            return &#123;</span><br><span class="line">               msg:&apos;我是Menu组件的内容：&apos;,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        watch:&#123;</span><br><span class="line">            sonnum()&#123;</span><br><span class="line">                console.log(&apos;给父组件发出数据&apos;);</span><br><span class="line">                this.$emit(&quot;sendparentdata&quot;, this.sonnum)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>② 父组件中，声明一个和子组件中<code>this.$emit(&quot;自定义事件名称&quot;)</code>对应的事件属性。</p><p>例中，使用子组件中的同名事件 <code>sendparentdata</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;Menu :sonnum=&quot;num&quot; title=&quot;这是：父组件传递给子组件的字符串数据&quot; @sendparentdata=&quot;getnum&quot;/&gt;</span><br></pre></td></tr></table></figure><p>③ 父组件中，声明一个自定义方法，在事件被调用时执行。</p><p>例中，自定义 <code>getnum</code> 方法，需要使用参数（<code>sondata</code>）接收传递过来的数据，然后赋给父组件的变量就可以</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;我是Home组件的内容:&lt;/p&gt;</span><br><span class="line">    &lt;button @click=&quot;add&quot;&gt;+&lt;/button&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model=&quot;num&quot;&gt;</span><br><span class="line">    &lt;button @click=&quot;sub&quot;&gt;-&lt;/button&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;Menu :sonnum=&quot;num&quot; title=&quot;这是：父组件传递给子组件的字符串数据&quot; @sendparentdata=&quot;getnum&quot;/&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;/div&gt;  </span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    import Menu from &quot;./Homeson/Menu&quot;;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name: &quot;Home&quot;, // 组件名称，将来提供给路由进行页面跳转</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                num: 0,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            add() &#123;</span><br><span class="line">                this.num = parseInt(this.num) + 1;</span><br><span class="line">            &#125;,</span><br><span class="line">            sub() &#123;</span><br><span class="line">                if (this.num &lt;= 1) &#123;</span><br><span class="line">                    return 0</span><br><span class="line">                &#125;</span><br><span class="line">                this.num -= 1</span><br><span class="line">            &#125;,</span><br><span class="line">            getnum(sondata)&#123;</span><br><span class="line">                console.log(&quot;接收到子组件发过来的数据&quot;)</span><br><span class="line">                this.num = sondata</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        components: &#123;</span><br><span class="line">            Menu</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">  /* scoped 是为了保证只在局部范围内生效，不会影响外界*/</span><br><span class="line">  inpupt[type=text] &#123;</span><br><span class="line">    width: 80px;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="在组件中使用axios获取数据"><a href="#在组件中使用axios获取数据" class="headerlink" title="在组件中使用axios获取数据"></a>在组件中使用axios获取数据</h2><h3 id="全局组件"><a href="#全局组件" class="headerlink" title="全局组件"></a>全局组件</h3><ul><li>在全局组件的方法中使用 <code>axios.get</code> 发送 ajax 请求即可。</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">getweather</span>&gt;</span><span class="tag">&lt;/<span class="name">getweather</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    Vue.component(<span class="string">"getweather"</span>, &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: "<span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">'getbeijing'</span>&gt;</span>查询北京天气<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span> <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><span class="template-variable">&#123;&#123;content&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>",</span></span></span><br><span class="line">        data() &#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">                content: <span class="string">''</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            getbeijing() &#123;</span><br><span class="line"><span class="javascript">                axios.get(<span class="string">"http://wthrcdn.etouch.cn/weather_mini?city=北京"</span>).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">this</span>.content = response[<span class="string">'data'</span>][<span class="string">'data'</span>][<span class="string">'ganmao'</span>]</span></span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;el: <span class="string">'#app'</span>&#125;)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="单文件组件-1"><a href="#单文件组件-1" class="headerlink" title="单文件组件"></a>单文件组件</h3><ul><li>只需要在事件的定义中，使用 <code>axios.get</code> 来发送 ajax 请求</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--Getweather.vue--&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;button @click=&quot;getbeijing&quot;&gt;查询北京天气&lt;/button&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123;content&#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    import axios from &apos;axios&apos;</span><br><span class="line"></span><br><span class="line">    export default &#123;</span><br><span class="line">        name: &quot;Getweather&quot;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                content: &apos;&apos;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            getbeijing() &#123;                axios.get(&quot;http://wthrcdn.etouch.cn/weather_mini?city=北京&quot;).then(response=&gt;&#123;</span><br><span class="line">                    console.log(response)</span><br><span class="line">                    this.content = response[&apos;data&apos;][&apos;data&apos;][&apos;ganmao&apos;]</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Vue.js</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>Vue.js</tag>
      </tags>
  </entry>
  <entry>
    <title>数据分析——共享单车租聘需求分析</title>
    <url>/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/20191025-data_analysis_7.html</url>
    <content><![CDATA[<p style="font-size:18px" align="center">引言</p><a id="more"></a><p>占坑！！！</p>]]></content>
      <categories>
        <category>数据分析</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>数据分析</tag>
        <tag>sklearn</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习——使用KNN识别手写体数字</title>
    <url>/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/20191024-data_analysis_6.html</url>
    <content><![CDATA[<p style="font-size:18px" align="center">引言</p><a id="more"></a><p>占坑！！！</p>]]></content>
      <categories>
        <category>数据分析</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>数据分析</tag>
        <tag>sklearn</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue-axios与后端的数据交互</title>
    <url>/Vue-js/20191024-learn-Vue-2.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>本篇介绍在Vue中使用axios与后端进行数据交互。</p></blockquote><a id="more"></a><h1 id="通过axios实现数据请求"><a href="#通过axios实现数据请求" class="headerlink" title="通过axios实现数据请求"></a>通过axios实现数据请求</h1><p>vue.js 默认没有提供 ajax 功能的。</p><ul><li>所以使用vue的时候，一般都会使用axios的插件来实现ajax与后端服务器的数据交互。</li></ul><p>注意，axios本质上就是javascript的ajax封装，所以会被<strong>同源策略</strong>限制。</p><p>插件： <a href="http://www.axios-js.com/" target="_blank" rel="noopener">http://www.axios-js.com/</a></p><p>下载地址：</p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">http<span class="variable">s:</span>//unpkg.<span class="keyword">com</span>/axios@<span class="number">0.18</span>.<span class="number">0</span>/dist/axios.js</span><br><span class="line">http<span class="variable">s:</span>//unpkg.<span class="keyword">com</span>/axios@<span class="number">0.18</span>.<span class="number">0</span>/dist/axios.<span class="built_in">min</span>.js</span><br></pre></td></tr></table></figure><p>axios提供发送请求的常用方法有两个：axios.get() 和 axios.post() 。</p><p>一睹为快：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 发送get请求</span></span><br><span class="line">   <span class="comment">// 参数1: 必填，字符串，请求的数据接口的url地址，例如请求地址：http://www.baidu.com?id=200</span></span><br><span class="line">   <span class="comment">// 参数2：可选，json对象，要提供给数据接口的参数</span></span><br><span class="line">   <span class="comment">// 参数3：可选，json对象，请求头信息</span></span><br><span class="line">axios.get(<span class="string">'服务器的资源地址'</span>,&#123; <span class="comment">// http://www.baidu.com</span></span><br><span class="line">   	params:&#123;</span><br><span class="line">   		参数名:<span class="string">'参数值'</span>, <span class="comment">// id: 200,</span></span><br><span class="line">   	&#125;</span><br><span class="line">   </span><br><span class="line">   &#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123; <span class="comment">// 请求成功以后的回调函数</span></span><br><span class="line">   		<span class="built_in">console</span>.log(<span class="string">"请求成功"</span>);</span><br><span class="line">   		<span class="built_in">console</span>.log(response.data); <span class="comment">// 获取服务端提供的数据</span></span><br><span class="line">   </span><br><span class="line">   &#125;).catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;   <span class="comment">// 请求失败以后的回调函数</span></span><br><span class="line">   		<span class="built_in">console</span>.log(<span class="string">"请求失败"</span>);</span><br><span class="line">   		<span class="built_in">console</span>.log(error.response);  <span class="comment">// 获取错误信息</span></span><br><span class="line">   &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送post请求，参数和使用和axios.get()一样。</span></span><br><span class="line">   <span class="comment">// 参数1: 必填，字符串，请求的数据接口的url地址</span></span><br><span class="line">   <span class="comment">// 参数2：必填，json对象，要提供给数据接口的参数,如果没有参数，则必须使用&#123;&#125;</span></span><br><span class="line">   <span class="comment">// 参数3：可选，json对象，请求头信息</span></span><br><span class="line">   axios.post(<span class="string">'服务器的资源地址'</span>,&#123;</span><br><span class="line">   	username: <span class="string">'xiaoming'</span>,</span><br><span class="line">   	password: <span class="string">'123456'</span></span><br><span class="line">   &#125;,&#123;</span><br><span class="line">       responseData:<span class="string">"json"</span>,</span><br><span class="line">   &#125;)</span><br><span class="line">   .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123; <span class="comment">// 请求成功以后的回调函数</span></span><br><span class="line">     <span class="built_in">console</span>.log(response);</span><br><span class="line">   &#125;)</span><br><span class="line">   .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;   <span class="comment">// 请求失败以后的回调函数</span></span><br><span class="line">     <span class="built_in">console</span>.log(error);</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure><h1 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h1><ul><li><p>ajax，一般中文称之为：”阿贾克斯”，是英文 “Async Javascript And Xml”的简写，译作：异步js和xml数据传输数据。</p></li><li><p>ajax的作用： ajax可以让 js 代替浏览器向后端程序发送http请求，与后端通信，在用户不知道的情况下操作数据和信息，从而实现页面局部刷新数据/无刷新更新数据。</p></li><li><p>所以开发中ajax是很常用的技术，主要用于操作后端提供的<strong>数据接口</strong>，从而实现网站的<strong>前后端分离</strong>。</p></li><li><p>ajax技术的原理是实例化 js 的XMLHttpRequest（XHR）对象，使用此对象提供的内置方法就可以与后端进行数据通信。</p></li></ul><h2 id="数据接口"><a href="#数据接口" class="headerlink" title="数据接口"></a>数据接口</h2><ul><li><p>数据接口，也叫api接口，表示<strong>后端提供</strong>操作数据/功能的url地址给客户端使用。</p></li><li><p>客户端通过发起请求向服务端提供的url地址申请操作数据【操作一般：增删查改】</p></li><li><p>同时在工作中，大部分数据接口都不是手写，而是通过函数库/框架来生成。</p></li><li><p>例如：浏览器输入 <code>http://wthrcdn.etouch.cn/weather_mini?city=北京</code>，我们就可以拿到数据。</p></li></ul><h2 id="ajax的使用"><a href="#ajax的使用" class="headerlink" title="ajax的使用"></a>ajax的使用</h2><p>ajax的使用必须与服务端程序配合使用：</p><ol><li>推荐阅读 <a href="https://chennq.com/django/20190713-django_11_ajax.html">Django-AJAX</a> ,在这篇文章中使用 jq 给后端发 ajax 请求，后端（Django）进行处理，并返回。</li></ol><h2 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h2>]]></content>
      <categories>
        <category>Vue.js</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>Vue.js</tag>
      </tags>
  </entry>
  <entry>
    <title>数据分析——城市气候与海洋的关系研究</title>
    <url>/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/20191023-data_analysis_5.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>城市气候与海洋的关系研究。</p></blockquote><a id="more"></a><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>​ 本例来自《Python数据分析实战》第九章：数据分析实例——气象数据。</p><p>​ 作者是意大利人，本例的出发点为：<u>夏天的时候，人们常常到山村或滨海城市避暑，由此延伸出一个疑问，靠海对气候有什么影响？也就是海洋对一个地区的气候有何影响？</u></p><h3 id="研究系统：亚得里亚海和波河流域"><a href="#研究系统：亚得里亚海和波河流域" class="headerlink" title="研究系统：亚得里亚海和波河流域"></a>研究系统：亚得里亚海和波河流域</h3><p>​ 为了衡量海洋对气候的影响，<u>排除了山地</u>，因为山地也许会引入其他很多因素，比如海拔。</p><p>​ 意大利波河流域这块区域就很适合研究海洋对气候的影响。这一片平原东起亚得里亚海，向内陆延伸数百公里（见图1）。它周边虽不乏群山环绕，但由于它很宽广，削弱了群山的影响。此外，该区域城镇密集，也便于选取一组离海远近不同的城市。我们所选的几个城市，两个城市间的最大距离约为 400 公里。</p><p><img src="/数据分析/20191023-data_analysis_5/%E5%9B%BE1%EF%BC%9A%E6%B3%A2%E6%B2%B3%E6%B5%81%E5%9F%9F%E5%92%8C%E4%BA%9A%E5%BE%97%E9%87%8C%E4%BA%9A%E6%B5%B7.png" alt="图1：波河流域和亚得里亚海"></p><p>第一步，选 10 个城市作为参照组。选择城市时，注意它们要能代表整个平原地区，还有一个海滨城市，作为计算其他城市离海远近的基点。结果如下图所示：</p><p><img src="/数据分析/20191023-data_analysis_5/%E5%9B%BE2%EF%BC%9A%E4%BD%9C%E4%B8%BA%E5%8F%82%E7%85%A7%E7%BB%84%E7%9A%8410%E4%B8%AA%E5%9F%8E%E5%B8%82%EF%BC%88%E8%BF%98%E6%9C%89%E4%B8%80%E4%B8%AA%E6%B5%B7%E6%BB%A8%E5%9F%8E%E5%B8%82%EF%BC%8C%E4%BD%9C%E4%B8%BA%E8%AE%A1%E7%AE%97%E5%85%B6%E4%BB%96%E5%9F%8E%E5%B8%82%E7%A6%BB%E6%B5%B7%E8%BF%9C%E8%BF%91%E7%9A%84%E5%9F%BA%E7%82%B9%EF%BC%89.png" alt="图2：作为参照组的10个城市（还有一个海滨城市，作为计算其他城市离海远近的基点）"></p><p>如上图所示，我们选取了 10 个城市。随后将分析它们的天气数据，其中 5 个城市在距海 100 公里范围内，其余 5 个距海 100～400 公里。</p><p>选作样本的城市列表如下：</p><ul><li>Ferrara（费拉拉）</li><li>Torino（都灵）</li><li>Mantova（曼托瓦）</li><li>Milano（米兰）</li><li>Ravenna（拉文纳）</li><li>Asti（阿斯蒂）</li><li>Bologna（博洛尼亚）</li><li>Piacenza（皮亚琴察）</li><li>Cesena（切塞纳）</li><li>Faenza（法恩莎）</li></ul><p>接下来，我们需要计算这些城市离海有多远。这里使用 TheTimeNow 网站提供的服务，以海滨城市 Comacchio 作为基点，计算其他城市与它之间的距离：</p><p><img src="/数据分析/20191023-data_analysis_5/10%E4%B8%AA%E5%8F%82%E8%80%83%E5%9F%8E%E5%B8%82%E4%B8%8E%E6%B5%B7%E6%B4%8B%E7%9A%84%E8%B7%9D%E7%A6%BB.png" alt="10个参考城市与海洋的距离"></p><h3 id="数据源"><a href="#数据源" class="headerlink" title="数据源"></a>数据源</h3><p>该数据集共30个文本文件，每个城市有3个文本文件，对应着不同的日期。</p><p>数据集的下载链接为： 待补充！！！</p><h2 id="导入数据集"><a href="#导入数据集" class="headerlink" title="导入数据集"></a>导入数据集</h2><ul><li>导入各个城市的数据，并将不同日期的城市数据进行合并。</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> Series,DataFrame</span><br><span class="line"></span><br><span class="line">ferrara1 = pd.read_csv(<span class="string">'./ferrara_150715.csv'</span>)</span><br><span class="line">ferrara2 = pd.read_csv(<span class="string">'./ferrara_250715.csv'</span>)</span><br><span class="line">ferrara3 = pd.read_csv(<span class="string">'./ferrara_270615.csv'</span>)</span><br><span class="line">ferrara=pd.concat([ferrara1,ferrara2,ferrara3],ignore_index=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">torino1 = pd.read_csv(<span class="string">'./torino_150715.csv'</span>)</span><br><span class="line">torino2 = pd.read_csv(<span class="string">'./torino_250715.csv'</span>)</span><br><span class="line">torino3 = pd.read_csv(<span class="string">'./torino_270615.csv'</span>)</span><br><span class="line">torino = pd.concat([torino1,torino2,torino3],ignore_index=<span class="literal">True</span>) </span><br><span class="line"></span><br><span class="line">mantova1 = pd.read_csv(<span class="string">'./mantova_150715.csv'</span>)</span><br><span class="line">mantova2 = pd.read_csv(<span class="string">'./mantova_250715.csv'</span>)</span><br><span class="line">mantova3 = pd.read_csv(<span class="string">'./mantova_270615.csv'</span>)</span><br><span class="line">mantova = pd.concat([mantova1,mantova2,mantova3],ignore_index=<span class="literal">True</span>) </span><br><span class="line"></span><br><span class="line">milano1 = pd.read_csv(<span class="string">'./milano_150715.csv'</span>)</span><br><span class="line">milano2 = pd.read_csv(<span class="string">'./milano_250715.csv'</span>)</span><br><span class="line">milano3 = pd.read_csv(<span class="string">'./milano_270615.csv'</span>)</span><br><span class="line">milano = pd.concat([milano1,milano2,milano3],ignore_index=<span class="literal">True</span>) </span><br><span class="line"></span><br><span class="line">ravenna1 = pd.read_csv(<span class="string">'./ravenna_150715.csv'</span>)</span><br><span class="line">ravenna2 = pd.read_csv(<span class="string">'./ravenna_250715.csv'</span>)</span><br><span class="line">ravenna3 = pd.read_csv(<span class="string">'./ravenna_270615.csv'</span>)</span><br><span class="line">ravenna = pd.concat([ravenna1,ravenna2,ravenna3],ignore_index=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">asti1 = pd.read_csv(<span class="string">'./asti_150715.csv'</span>)</span><br><span class="line">asti2 = pd.read_csv(<span class="string">'./asti_250715.csv'</span>)</span><br><span class="line">asti3 = pd.read_csv(<span class="string">'./asti_270615.csv'</span>)</span><br><span class="line">asti = pd.concat([asti1,asti2,asti3],ignore_index=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">bologna1 = pd.read_csv(<span class="string">'./bologna_150715.csv'</span>)</span><br><span class="line">bologna2 = pd.read_csv(<span class="string">'./bologna_250715.csv'</span>)</span><br><span class="line">bologna3 = pd.read_csv(<span class="string">'./bologna_270615.csv'</span>)</span><br><span class="line">bologna = pd.concat([bologna1,bologna2,bologna3],ignore_index=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">piacenza1 = pd.read_csv(<span class="string">'./piacenza_150715.csv'</span>)</span><br><span class="line">piacenza2 = pd.read_csv(<span class="string">'./piacenza_250715.csv'</span>)</span><br><span class="line">piacenza3 = pd.read_csv(<span class="string">'./piacenza_270615.csv'</span>)</span><br><span class="line">piacenza = pd.concat([piacenza1,piacenza2,piacenza3],ignore_index=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">cesena1 = pd.read_csv(<span class="string">'./cesena_150715.csv'</span>)</span><br><span class="line">cesena2 = pd.read_csv(<span class="string">'./cesena_250715.csv'</span>)</span><br><span class="line">cesena3 = pd.read_csv(<span class="string">'./cesena_270615.csv'</span>)</span><br><span class="line">cesena = pd.concat([cesena1,cesena2,cesena3],ignore_index=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">faenza1 = pd.read_csv(<span class="string">'./faenza_150715.csv'</span>)</span><br><span class="line">faenza2 = pd.read_csv(<span class="string">'./faenza_250715.csv'</span>)</span><br><span class="line">faenza3 = pd.read_csv(<span class="string">'./faenza_270615.csv'</span>)</span><br><span class="line">faenza = pd.concat([faenza1,faenza2,faenza3],ignore_index=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><ul><li>显示一个城市的内容</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">milano.head()</span><br></pre></td></tr></table></figure><p><img src="/数据分析/20191023-data_analysis_5/%E7%B1%B3%E5%85%B0%E7%9A%84%E5%89%8D5%E6%9D%A1%E6%95%B0%E6%8D%AE.png" alt="米兰的前5条数据"></p><h2 id="数据可视化"><a href="#数据可视化" class="headerlink" title="数据可视化"></a>数据可视化</h2><h3 id="温度"><a href="#温度" class="headerlink" title="温度"></a>温度</h3><p>先分析一天中气温的变化趋势，以城市米兰为例：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 温度和日期数据</span></span><br><span class="line">x1 = milano[<span class="string">'day'</span>][:<span class="number">23</span>]</span><br><span class="line">y1 = milano[<span class="string">'temp'</span>][:<span class="number">23</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把日期数据转换成 datetime 的格式</span></span><br><span class="line">dt_x1 = [parser.parse(x) <span class="keyword">for</span> x <span class="keyword">in</span> x1]</span><br><span class="line"></span><br><span class="line">fig, ax = plt.subplots()</span><br><span class="line"><span class="comment"># 调整x轴坐标刻度，使其旋转70度，方便查看</span></span><br><span class="line">plt.xticks(rotation=<span class="number">70</span>) </span><br><span class="line"><span class="comment"># 设定X轴显示的格式</span></span><br><span class="line">hours = mdates.DateFormatter(<span class="string">'%H:%M'</span>)</span><br><span class="line">ax.xaxis.set_major_formatter(hours)  </span><br><span class="line">ax.plot(dt_x1 ,y1, <span class="string">'r'</span>)</span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">'时间'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'温度'</span>)</span><br><span class="line">plt.title(<span class="string">'米兰一天的温度变化'</span>)</span><br></pre></td></tr></table></figure><p>结果如下图：</p><p><img src="/数据分析/20191023-data_analysis_5/%E7%B1%B3%E5%85%B0%E4%B8%80%E5%A4%A9%E7%9A%84%E6%B8%A9%E5%BA%A6%E5%8F%98%E5%8C%96.png" alt="米兰一天的温度变化"></p><p>​ 我们进行数据分析的目的是尝试解释是否能够评估海洋是怎样影响气温的，以及是否能够影响气温趋势，因此我们同时来看几个不同城市的气温趋势。这是检验分析方向是否正确的唯一方式。因此，我们选择三个离海最近以及三个离海最远的城市。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x1 = ravenna[<span class="string">'day'</span>][:<span class="number">24</span>]</span><br><span class="line">y1 = ravenna[<span class="string">'temp'</span>][:<span class="number">24</span>]</span><br><span class="line">x2 = faenza[<span class="string">'day'</span>][:<span class="number">24</span>]</span><br><span class="line">y2 = faenza[<span class="string">'temp'</span>][:<span class="number">24</span>]</span><br><span class="line">x3 = cesena[<span class="string">'day'</span>][:<span class="number">24</span>]</span><br><span class="line">y3 = cesena[<span class="string">'temp'</span>][:<span class="number">24</span>]</span><br><span class="line">x4 = milano[<span class="string">'day'</span>][:<span class="number">24</span>]</span><br><span class="line">y4 = milano[<span class="string">'temp'</span>][:<span class="number">24</span>]</span><br><span class="line">x5 = asti[<span class="string">'day'</span>][:<span class="number">24</span>]</span><br><span class="line">y5 = asti[<span class="string">'temp'</span>][:<span class="number">24</span>]</span><br><span class="line">x6 = torino[<span class="string">'day'</span>][:<span class="number">24</span>]</span><br><span class="line">y6 = torino[<span class="string">'temp'</span>][:<span class="number">24</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把日期从 string 类型转化为标准的 datetime 类型</span></span><br><span class="line">dt_x1 = [parser.parse(x) <span class="keyword">for</span> x <span class="keyword">in</span> x1]</span><br><span class="line">dt_x2 = [parser.parse(x) <span class="keyword">for</span> x <span class="keyword">in</span> x2]</span><br><span class="line">dt_x3 = [parser.parse(x) <span class="keyword">for</span> x <span class="keyword">in</span> x3]</span><br><span class="line">dt_x4 = [parser.parse(x) <span class="keyword">for</span> x <span class="keyword">in</span> x4]</span><br><span class="line">dt_x5 = [parser.parse(x) <span class="keyword">for</span> x <span class="keyword">in</span> x5]</span><br><span class="line">dt_x6 = [parser.parse(x) <span class="keyword">for</span> x <span class="keyword">in</span> x6]</span><br><span class="line"></span><br><span class="line">fig, ax = plt.subplots()</span><br><span class="line"><span class="comment"># 调整x轴坐标刻度，使其旋转70度，方便查看</span></span><br><span class="line">plt.xticks(rotation=<span class="number">70</span>) </span><br><span class="line"><span class="comment"># 设定X轴显示的格式</span></span><br><span class="line">hours = mdates.DateFormatter(<span class="string">'%H:%M'</span>)</span><br><span class="line">ax.xaxis.set_major_formatter(hours)  </span><br><span class="line"><span class="comment"># 红色表示离海最近的三个城市，绿色表示离海最远的三个城市</span></span><br><span class="line">ax.plot(dt_x1 ,y1, <span class="string">'r'</span>,dt_x2 ,y2, <span class="string">'r'</span>,dt_x3 ,y3, <span class="string">'r'</span>)</span><br><span class="line">ax.plot(dt_x4 ,y4, <span class="string">'g'</span>,dt_x5 ,y5, <span class="string">'g'</span>,dt_x6 ,y6, <span class="string">'g'</span>)</span><br></pre></td></tr></table></figure><p>六个城市的气温趋势如下图所示，红色表示离海最近的三个城市，绿色表示离海最远的三个城市：</p><p><img src="/数据分析/20191023-data_analysis_5/6%E4%B8%AA%E5%9F%8E%E5%B8%82%E7%9A%84%E6%B8%A9%E5%BA%A6.png" alt="6个城市的温度"></p><p>可以沿着这个方向做深入研究，收集10个城市的最高温和最低温，用线性图表示气温最值点和离海远近之间的关系。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 城市列表</span></span><br><span class="line">cities = [ravenna,cesena,faenza,ferrara,bologna,mantova,piacenza,milano,asti,torino]</span><br><span class="line"><span class="comment"># 最高气温列表</span></span><br><span class="line">temp_max = np.array([max(i[<span class="string">'temp'</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> cities])</span><br><span class="line"><span class="comment"># 最低气温列表</span></span><br><span class="line">temp_min = np.array([min(i[<span class="string">'temp'</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> cities])</span><br><span class="line"><span class="comment"># 距离列表</span></span><br><span class="line">location = np.array([i[<span class="string">'dist'</span>][<span class="number">0</span>] <span class="keyword">for</span> i <span class="keyword">in</span> cities])</span><br></pre></td></tr></table></figure><h3 id="最高气温"><a href="#最高气温" class="headerlink" title="最高气温"></a>最高气温</h3><p>先把最高气温的散点图画出来</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 最高温度</span></span><br><span class="line">plt.scatter(location,temp_max)</span><br><span class="line">plt.xlabel(<span class="string">'距离'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'温度'</span>)</span><br><span class="line">plt.title(<span class="string">'10个城市的最高气温'</span>)</span><br></pre></td></tr></table></figure><p><img src="/数据分析/20191023-data_analysis_5/%E6%9C%80%E9%AB%98%E6%B0%94%E6%B8%A9.png" alt="最高气温"></p><p>如图所示，海洋对气象数据具有一定程度的影响这个假设是正确的（至少一天内如此）。而且从图中可以发现，海洋的影响衰减的很快，离海60~70公里开外，气温就已攀升到高位。</p><p>使用线性回归算法（scikit-learn库的SVR）得到两条直线，分别表示两种不同的气温趋势。</p><p>持续更新中！！！</p>]]></content>
      <categories>
        <category>数据分析</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>数据分析</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue基础</title>
    <url>/Vue-js/20191022-learn-Vue-1.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>本篇介绍Vue基础。</p></blockquote><a id="more"></a><h1 id="入门篇"><a href="#入门篇" class="headerlink" title="入门篇"></a>入门篇</h1><ul><li><p>vue.js是目前前端web开发最流行的工具库，由尤雨溪在2014年2月发布的。</p></li><li><p>另外几个常见的工具库：react.js /angular.js</p></li><li><p>官方网站：</p><ul><li><p>中文：<a href="https://cn.vuejs.org/" target="_blank" rel="noopener">https://cn.vuejs.org/</a></p></li><li><p>英文：<a href="https://vuejs.org/" target="_blank" rel="noopener">https://vuejs.org/</a></p></li></ul></li><li><p>官方文档：<a href="https://cn.vuejs.org/v2/guide/" target="_blank" rel="noopener">https://cn.vuejs.org/v2/guide/</a></p></li><li><p>vue.js目前有1.x、2.x和3.x 版本，本篇使用2.x，原因是目前3.x还不成熟。</p></li></ul><h2 id="vue-js库的下载"><a href="#vue-js库的下载" class="headerlink" title="vue.js库的下载"></a>vue.js库的下载</h2><ol><li><p>可以在 <a href="https://cn.vuejs.org/v2/guide/installation.html" target="_blank" rel="noopener">官网</a> 下载，有开发版本和生产版本，学习时使用开发版本就行。</p></li><li><p>也可以在 <a href="https://github.com/vuejs/vue" target="_blank" rel="noopener">GitHub</a> 下载，js位于 <code>dist</code> 文件夹</p></li></ol><h2 id="vue-js库的基本使用"><a href="#vue-js库的基本使用" class="headerlink" title="vue.js库的基本使用"></a>vue.js库的基本使用</h2><p>vue的引入类似于jQuery，开发中可以使用开发版本vue.js，产品上线要换成vue.min.js。</p><p>三步走：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1.创建Vue对象</span><br><span class="line">	var vm = new Vue()</span><br><span class="line">2.创建vue对象的时候，需要传递参数，是json对象，json对象对象必须至少有两个属性成员</span><br><span class="line">	var vm = new Vue(&#123;</span><br><span class="line">    	el: "#app",</span><br><span class="line">    	data: &#123;</span><br><span class="line">    		hello: "Hello Vue!",</span><br><span class="line">   		&#125;</span><br><span class="line">    &#125;)</span><br><span class="line">   el:设置vue可以操作的html内容范围，值一般就是css的id选择器。</span><br><span class="line">   data: 保存vue.js中要显示到html页面的数据。</span><br><span class="line">3. vue.js要控制器的内容外围，必须先通过id来设置。</span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    	&#123;&#123;hello&#125;&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第一个vue示例：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">                el: <span class="string">"#app"</span>,</span></span><br><span class="line">                data: &#123;</span><br><span class="line"><span class="actionscript">                    hello: <span class="string">"Hello Vue!"</span>,</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    &#123;&#123;hello&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面代码将在页面中显示： Hello Vue!</p><h2 id="vue-js的M-V-VM思想"><a href="#vue-js的M-V-VM思想" class="headerlink" title="vue.js的M-V-VM思想"></a>vue.js的M-V-VM思想</h2><p>MVVM 是Model-View-ViewModel 的缩写，它是一种基于前端开发的架构模式。</p><p><code>Model</code> 指代的就是vue对象的<strong>data属性里面的数据</strong>。这里的数据要显示到页面中。</p><p><code>View</code> 指代的就是vue中数据要显示的HTML页面(绑定标签)，在vue中，也称之为“视图模板” 。</p><p><code>ViewModel</code> 指代的是vue.js中我们编写代码时的<strong>vm对象</strong>了，它是vue.js的核心，负责连接 View 和 Model，保证<strong>数据data属性中的数据和html视图中的内容的一致性</strong>，所以前面代码中，data里面的数据被显示中p标签中就是vm对象自动完成的。</p><p>例子：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">            vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">                el: <span class="string">"#box"</span>,</span></span><br><span class="line">                data: &#123;</span><br><span class="line"><span class="actionscript">                    img: <span class="string">"logo.png"</span>,</span></span><br><span class="line"><span class="handlebars"><span class="xml">                    content: "<span class="tag">&lt;<span class="name">h1</span>&gt;</span>大标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>",</span></span></span><br><span class="line"><span class="actionscript">                    url: <span class="string">"https://www.baidu.com"</span>,</span></span><br><span class="line">                &#125;,</span><br><span class="line"><span class="actionscript">                <span class="comment">// 事件触发时调用的方法，待补充</span></span></span><br><span class="line">                methods: &#123;</span><br><span class="line">                    show() &#123;</span><br><span class="line"><span class="actionscript">                        alert(<span class="string">'hello'</span>)</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line"><span class="actionscript">        <span class="comment">// js中也有三元表达式，也叫三元运算符</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 格式：</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 条件?true:false;</span></span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--支持js的方法--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-text</span>=<span class="string">"img.toUpperCase()"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-text</span>=<span class="string">"img.toUpperCase()"</span>&gt;</span>不要在这里写了，写了也不会显示<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--v-text只能显示字符串--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-text</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--v-html将解析字符串中的标签--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-html</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--显示图片--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"img"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--v-model 将来可以同步到model中--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"img"</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--三元运算符--&gt;</span></span><br><span class="line">    &#123;&#123;num%2==0?"偶数":"奇数"&#125;&#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">"url"</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="comment">&lt;!--不建议使用--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用链接--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">"url"</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--绑定事件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> @<span class="attr">click</span>=<span class="string">"show"</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-on:click</span>=<span class="string">"show"</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">p</span>&gt;</span>  <span class="comment">&lt;!--不建议使用--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>总结：</p><figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 如果要输出<span class="class"><span class="keyword">data</span>里面的数据作为普通标签的内容，需要使用&#123;&#123;  &#125;&#125;</span></span><br><span class="line">   用法：</span><br><span class="line">      vue对象的<span class="class"><span class="keyword">data</span>属性：</span></span><br><span class="line">          <span class="class"><span class="keyword">data</span>:&#123;</span></span><br><span class="line"><span class="class">            <span class="title">name</span>:"小明",</span></span><br><span class="line"><span class="class">          &#125;</span></span><br><span class="line">      标签元素：</span><br><span class="line">      		&lt;h1&gt;&#123;&#123; name &#125;&#125;&lt;/h1&gt;</span><br><span class="line">      		</span><br><span class="line"><span class="number">2.</span> 如果要输出<span class="class"><span class="keyword">data</span>里面的数据作为表单元素的值，需要使用vue.js提供的元素属性v-model</span></span><br><span class="line">   用法：</span><br><span class="line">      vue对象的<span class="class"><span class="keyword">data</span>属性：</span></span><br><span class="line">          <span class="class"><span class="keyword">data</span>:&#123;</span></span><br><span class="line"><span class="class">            <span class="title">name</span>:"小明",</span></span><br><span class="line"><span class="class">          &#125;</span></span><br><span class="line">      表单元素：</span><br><span class="line">      		&lt;input v-model=<span class="string">"name"</span>&gt;</span><br><span class="line">      </span><br><span class="line">   使用v-model把<span class="class"><span class="keyword">data</span>里面的数据显示到表单元素以后，一旦用户修改表单元素的值，则<span class="keyword">data</span>里面对应数据的值也会随之发生改变，甚至，页面中凡是使用了这个数据都会发生变化。</span></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>可以在普通标签中使用&#123;&#123;  &#125;&#125; 或者 v-html 来输出<span class="class"><span class="keyword">data</span>里面的数据</span></span><br><span class="line">   &lt;h1&gt;&#123;&#123;message&#125;&#125;&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>可以在表单标签中使用v-model属性来输出<span class="class"><span class="keyword">data</span>里面的数据，同时还可以修改<span class="keyword">data</span>里面的数据</span></span><br><span class="line">   &lt;input <span class="class"><span class="keyword">type</span>="text" v-model="username"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>三元运算符</span><br><span class="line">	判断条件 ? 条件为true : 条件为false的结果</span><br></pre></td></tr></table></figure><h1 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h1><p>指令 (Directives) 是带有“v-”前缀的特殊属性。每一个指令在vue中都有固定的作用。</p><p>在vue中，提供了很多指令，常用的有：v-if、v-model、v-for等等。</p><p>指令会在vm对象的data属性的数据发生变化时，会同时改变元素中的其控制的内容或属性。</p><p>因为vue的历史版本原因，所以有一部分指令都有两种写法：</p><figure class="highlight xl"><table><tr><td class="code"><pre><span class="line">vue1.x写法             vue2.x的写法</span><br><span class="line"><span class="function"><span class="title">v</span>-html         ----&gt;</span>   &#123;&#123; 普通文本 &#125;&#125;   # vue2.x 也支持v-html,v-<span class="keyword">text</span>，输出html代码的内容</span><br><span class="line"><span class="function"><span class="title">v</span>-bind:属性名   ----&gt;</span>   :属性</span><br><span class="line"><span class="function"><span class="title">v</span>-on:事件名     ----&gt;</span>   @事件名</span><br></pre></td></tr></table></figure><h2 id="操作属性"><a href="#操作属性" class="headerlink" title="操作属性"></a>操作属性</h2><p>格式：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">标签名</span> <span class="attr">:</span>标签属性=<span class="string">"data属性"</span>&gt;</span><span class="tag">&lt;/<span class="name">标签名</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 2.x 中，省略了v-bind，直接使用冒号就可以。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">:title</span>=<span class="string">"str1"</span>&gt;</span>&#123;&#123; str1 &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="comment">&lt;!-- 也可以使用v-html显示双标签的内容，&#123;&#123;  &#125;&#125; 是简写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">"url2"</span>&gt;</span>淘宝<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">"url1"</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span>  <span class="comment">&lt;!-- v-bind是vue1.x版本的写法 --&gt;</span></span><br></pre></td></tr></table></figure><p>例子：显示输入的密码效果：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">:type</span>=<span class="string">"tp"</span> <span class="attr">v-model</span>=<span class="string">"pwd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> @<span class="attr">mousedown</span>=<span class="string">"down"</span> @<span class="attr">mouseup</span>=<span class="string">"up"</span> <span class="attr">v-model</span>=<span class="string">"message"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el: <span class="string">"#app"</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="actionscript">                pwd:<span class="string">""</span>,</span></span><br><span class="line"><span class="actionscript">                tp:<span class="string">"password"</span>,</span></span><br><span class="line"><span class="actionscript">                message:<span class="string">"显示密码"</span></span></span><br><span class="line">            &#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line">                down()&#123;</span><br><span class="line"><span class="actionscript">                    <span class="comment">// 在methods中把子方法里面要做data的属性，可以直接用this.属性值</span></span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">this</span>.tp = <span class="string">"text"</span>,</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">this</span>.message=<span class="string">"隐藏密码"</span></span></span><br><span class="line">                &#125;,</span><br><span class="line">               up()&#123;</span><br><span class="line"><span class="actionscript">                    <span class="keyword">this</span>.tp = <span class="string">"password"</span>,</span></span><br><span class="line"><span class="actionscript">                   <span class="keyword">this</span>.message=<span class="string">"显示密码"</span></span></span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h2><p>有两种事件操作的写法，@事件名 和 v-on:事件名，@是 2.x 版本，也是推荐使用的：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"num++"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span>   <span class="comment">&lt;!-- v-on 是vue1.x版本的写法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"num+=5"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>总结：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1. 使用@事件名来进行事件的绑定</span><br><span class="line">   语法：</span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span> @<span class="attr">click</span>=<span class="string">"num++"</span>&gt;</span>&#123;&#123;num&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">2. 绑定的事件的事件名，全部都是js的事件名：</span><br><span class="line">   @submit   ---&gt;  onsubmit</span><br><span class="line">   @focus    ---&gt;  onfocus</span><br><span class="line">   ....</span><br></pre></td></tr></table></figure><p>例子：购物车中的商品数量调整，并改变总价</p><ul><li>浮点数的运算永远是近似计算。我们需要四舍五入，保留两位。</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"add"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"num"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"sub"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    单价：&#123;&#123;price.toFixed(2)&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>总计：&#123;&#123;total.toFixed(2)&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">"#box"</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line">            num:1,</span><br><span class="line">            total:39.8,</span><br><span class="line">            price:39.8,</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            add()&#123;</span><br><span class="line"><span class="actionscript">                <span class="comment">// 减少数量</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">this</span>.num = <span class="built_in">parseInt</span>(<span class="keyword">this</span>.num) + <span class="number">1</span>;</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// 将 num 转成int 不然的话会变成字符串的拼接</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 计算总价</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.total = <span class="keyword">this</span>.price * <span class="keyword">this</span>.num</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 浮点数的运算永远是近似计算。四舍五入</span></span></span><br><span class="line">            &#125;,</span><br><span class="line">            sub()&#123;</span><br><span class="line"><span class="actionscript">                <span class="comment">// 减少数量</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">if</span> (<span class="keyword">this</span>.num &lt;=<span class="number">1</span>)&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">return</span></span></span><br><span class="line">                &#125;</span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.num -= <span class="number">1</span>;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 计算总价</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.calc();</span></span><br><span class="line">            &#125;,</span><br><span class="line">            calc()&#123;</span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.total = <span class="keyword">this</span>.price * <span class="keyword">this</span>.num</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="操作样式"><a href="#操作样式" class="headerlink" title="操作样式"></a>操作样式</h2><p>推荐使用 class ，而不使用 style 来操作样式。</p><h3 id="控制标签class类名"><a href="#控制标签class类名" class="headerlink" title="控制标签class类名"></a>控制标签class类名</h3><p>格式：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">:class</span>=<span class="string">"值"</span>&gt;</span>元素<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>  值可以是字符串、对象、对象名、数组</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.box</span>&#123;</span></span><br><span class="line">          width: 100px;</span><br><span class="line">          height: 100px;</span><br><span class="line">          background-color: red;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line">            border-radius: 5px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.box3</span>&#123;</span></span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            background-color: blue;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--第一种：使用变量--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"cls"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--第二种：使用数组--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"[cls1,cls2]"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--第三种：使用对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"&#123;box3:show_box3,box1:show_box1&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">"#app"</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            cls:<span class="string">"box box1"</span>,</span></span><br><span class="line"><span class="actionscript">            cls1:<span class="string">'box'</span>,</span></span><br><span class="line"><span class="actionscript">            cls2:<span class="string">'box1'</span>,</span></span><br><span class="line"><span class="actionscript">            show_box3:<span class="literal">true</span>,</span></span><br><span class="line"><span class="actionscript">            show_box1:<span class="literal">true</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>总结：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1. 给元素绑定class类名，最常用的就是第一种。</span><br><span class="line">    vue对象的data数据：</span><br><span class="line">        data:&#123;</span><br><span class="line">          myObj:&#123;</span><br><span class="line">            complete:true,</span><br><span class="line">            uncomplete:false,</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">		html元素：    </span><br><span class="line">    		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">:class</span>=<span class="string">"myObj"</span>&gt;</span>2222<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    最终浏览器效果：</span><br><span class="line">		    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box complete"</span>&gt;</span>2222<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>例子：网页背景开关灯</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.baitian</span>&#123;</span></span><br><span class="line">            background-color: white;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.heiye</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#666</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.bg</span>&#123;</span></span><br><span class="line">            width: 100%;</span><br><span class="line">            height: 1000px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span> <span class="attr">class</span>=<span class="string">"bg"</span> <span class="attr">:class</span>=<span class="string">"&#123;baitian:is_show,heiye:is_show_2&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"change"</span>&gt;</span>关灯<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">"#app"</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            is_show:<span class="literal">true</span>,</span></span><br><span class="line"><span class="actionscript">            is_show_2:<span class="literal">false</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            change()&#123;</span><br><span class="line"><span class="actionscript">                <span class="keyword">if</span>(<span class="keyword">this</span>.is_show == <span class="literal">true</span>)&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">this</span>.is_show = <span class="literal">false</span>;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">this</span>.is_show_2 = <span class="literal">true</span></span></span><br><span class="line">                &#125;</span><br><span class="line"><span class="actionscript">                <span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">this</span>.is_show = <span class="literal">true</span>;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">this</span>.is_show_2 = <span class="literal">false</span></span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="控制标签style样式"><a href="#控制标签style样式" class="headerlink" title="控制标签style样式"></a>控制标签style样式</h3><p>使用 style 的缺点：不好更新，不利于复制</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">格式1：值是json对象，对象写在元素的:style属性中</span><br><span class="line">	 标签元素：</span><br><span class="line">		     <span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">"&#123;color: activeColor, fontSize: fontSize + 'px' &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	 data数据如下：</span><br><span class="line">         data: &#123;</span><br><span class="line">             activeColor: 'red',</span><br><span class="line">             fontSize: 30</span><br><span class="line">         &#125;</span><br><span class="line">格式2：值是对象变量名，对象在data中进行声明</span><br><span class="line">   标签元素：</span><br><span class="line">   			<span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">"styleObject"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   data数据如下：</span><br><span class="line">         data: &#123;</span><br><span class="line">            	styleObject: &#123;</span><br><span class="line">             		color: 'red',</span><br><span class="line">             		fontSize: '13px'</span><br><span class="line">			  	&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">格式3：值是数组</span><br><span class="line">  标签元素：</span><br><span class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">"[style1, style2]"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	data数据如下：</span><br><span class="line">				data: &#123;</span><br><span class="line">                     style1:&#123;</span><br><span class="line">                       color:"red"</span><br><span class="line">                     &#125;,</span><br><span class="line">                     style2:&#123;</span><br><span class="line">                       background:"yellow",</span><br><span class="line">                       fontSize: "21px"</span><br><span class="line">                     &#125;</span><br><span class="line">				&#125;</span><br></pre></td></tr></table></figure><p>例子：vue版本选项卡</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#card</span>&#123;</span></span><br><span class="line">            width: 500px;</span><br><span class="line">            height: 350px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.title</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:50px</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.title</span> <span class="selector-tag">span</span>&#123;</span></span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 50px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>:<span class="selector-id">#ccc</span>;</span></span><br><span class="line">            display: inline-block;</span><br><span class="line"><span class="css">            <span class="selector-tag">line-height</span>: 50<span class="selector-tag">px</span>; <span class="comment">/* 设置行和当前元素的高度相等,就可以让文本内容上下居中 */</span></span></span><br><span class="line"><span class="css">            <span class="selector-tag">text-align</span><span class="selector-pseudo">:center</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.content</span> <span class="selector-class">.list</span>&#123;</span></span><br><span class="line">            width: 500px;</span><br><span class="line">            height: 300px;</span><br><span class="line">            background-color: yellow;</span><br><span class="line">            display: none;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.content</span> <span class="selector-class">.active</span>&#123;</span></span><br><span class="line">            display: block;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.title</span> <span class="selector-class">.current</span>&#123;</span></span><br><span class="line">            background-color: yellow;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"card"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> @<span class="attr">mouseover</span>=<span class="string">"num=1"</span> @<span class="attr">mouseleave</span>=<span class="string">"num=0"</span> <span class="attr">:class</span>=<span class="string">"num==1?'current':''"</span>&gt;</span>国内新闻<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> @<span class="attr">mouseover</span>=<span class="string">"num=2"</span> @<span class="attr">mouseleave</span>=<span class="string">"num=0"</span> <span class="attr">:class</span>=<span class="string">"num==2?'current':''"</span>&gt;</span>国际新闻<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> @<span class="attr">mouseover</span>=<span class="string">"num=3"</span> @<span class="attr">mouseleave</span>=<span class="string">"num=0"</span> <span class="attr">:class</span>=<span class="string">"num==3?'current':''"</span>&gt;</span>银河新闻<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;span&gt;&#123;&#123;num&#125;&#125;&lt;/span&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span> <span class="attr">:class</span>=<span class="string">"num==1?'active':''"</span>&gt;</span>国内新闻列表<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span> <span class="attr">:class</span>=<span class="string">"num==2?'active':''"</span>&gt;</span>国际新闻列表<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span> <span class="attr">:class</span>=<span class="string">"num==3?'active':''"</span>&gt;</span>银河新闻列表<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 思路：</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 当用户点击标题栏的按钮[span]时，显示对应索引下标的内容块[.list]</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 代码实现：</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> card = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">"#card"</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line">                num:0,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="条件渲染指令"><a href="#条件渲染指令" class="headerlink" title="条件渲染指令"></a>条件渲染指令</h2><p>vue中提供了两个指令可以用于判断是否要显示元素，分别是v-if和v-show。</p><h3 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h3><ul><li>如果为false，则 v-if 会直接干掉标签</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">标签元素：</span><br><span class="line">    <span class="comment">&lt;!-- vue对象最终会把条件的结果变成布尔值 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">"ok"</span>&gt;</span>Yes<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">data数据：</span><br><span class="line">		data:&#123;</span><br><span class="line">    		ok:false    // true则是显示，false是隐藏，不再DOM中</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="v-else"><a href="#v-else" class="headerlink" title="v-else"></a>v-else</h3><ul><li>v-else指令来表示 v-if 的“else 块”，v-else 元素必须紧跟在带 v-if 或者 v-else-if 的元素的后面，否则它将不会被识别。</li><li>如果为false，则标签将不会在DOM中。</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">标签元素：</span><br><span class="line">	<span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">"ok"</span>&gt;</span>Yes<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>&gt;</span>No<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">data数据：</span><br><span class="line">		data:&#123;</span><br><span class="line">    		ok:false    // true则是显示，false是隐藏 =&gt; 不再DOM</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="v-else-if"><a href="#v-else-if" class="headerlink" title="v-else-if"></a>v-else-if</h3><ul><li><p>可以出现多个v-else-if语句，但是v-else-if之前必须有一个v-if开头。后面可以跟着v-else，也可以没有。</p></li><li><p>如果为false，则 v-else-if 会直接干掉标签</p></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">标签元素：</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">"num==1"</span>&gt;</span>num的值为1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else-if</span>=<span class="string">"num==2"</span>&gt;</span>num的值为2<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>&gt;</span>num的值是&#123;&#123;num&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">data数据：</span><br><span class="line">		data:&#123;</span><br><span class="line">    		num:2</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h3><p>用法和v-if大致一样，区别在于2点：</p><ol><li>v-show后面不能v-else或者v-else-if</li><li>v-show隐藏元素时，使用的是display:none来隐藏的，而v-if是直接从HTML文档中移除元素[ DOM操作中的remove ]</li></ol><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">标签元素：</span><br><span class="line">	<span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">"ok"</span>&gt;</span>Hello!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">data数据：</span><br><span class="line">		data:&#123;</span><br><span class="line">    		ok:false    // true则是显示，false是隐藏 =&gt; display:none</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">v-if</span>=<span class="string">"ok"</span>&gt;</span>v-if<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box box1"</span> <span class="attr">v-else</span>&gt;</span>v-else<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">v-show</span>=<span class="string">"ok"</span>&gt;</span>v-show<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--v-if 会直接干掉标签--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--v-show 只是改变display:none--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">v-if</span>=<span class="string">"num%3==0"</span>&gt;</span>num是3的倍数<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">v-else-if</span>=<span class="string">"num%5==0"</span>&gt;</span>num是5的倍数<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box box1"</span> <span class="attr">v-else</span>&gt;</span>num既不是3也不是5的倍数<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">"#app"</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="actionscript">            ok:<span class="literal">true</span>,</span></span><br><span class="line">            num:3</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="列表渲染指令"><a href="#列表渲染指令" class="headerlink" title="列表渲染指令"></a>列表渲染指令</h2><ul><li>通过v-for指令可以将一组数据渲染到页面中，数据可以是数组或者对象。</li><li>如： <code>student,index in student_list</code></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line">            height: 100px;</span><br><span class="line">            width: 100px;</span><br><span class="line">            background-color: black;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line">            background-color: red;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span> <span class="attr">width</span>=<span class="string">"800px"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>序号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>ID<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">"student,index in student_list"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;index+1&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;student.id&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;student.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;student.age&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">"#app"</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line">            student_list: [</span><br><span class="line"><span class="actionscript">                &#123;<span class="string">'id'</span>: <span class="number">1</span>, <span class="string">"name"</span>: <span class="string">"小明1"</span>, <span class="string">"age"</span>: <span class="number">13</span>&#125;,</span></span><br><span class="line"><span class="actionscript">                &#123;<span class="string">'id'</span>: <span class="number">2</span>, <span class="string">"name"</span>: <span class="string">"小明2"</span>, <span class="string">"age"</span>: <span class="number">13</span>&#125;,</span></span><br><span class="line"><span class="actionscript">                &#123;<span class="string">'id'</span>: <span class="number">3</span>, <span class="string">"name"</span>: <span class="string">"小明3"</span>, <span class="string">"age"</span>: <span class="number">13</span>&#125;,</span></span><br><span class="line"><span class="actionscript">                &#123;<span class="string">'id'</span>: <span class="number">4</span>, <span class="string">"name"</span>: <span class="string">"小明4"</span>, <span class="string">"age"</span>: <span class="number">13</span>&#125;,</span></span><br><span class="line"><span class="actionscript">                &#123;<span class="string">'id'</span>: <span class="number">5</span>, <span class="string">"name"</span>: <span class="string">"小明5"</span>, <span class="string">"age"</span>: <span class="number">13</span>&#125;,</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Vue对象提供的属性功能"><a href="#Vue对象提供的属性功能" class="headerlink" title="Vue对象提供的属性功能"></a>Vue对象提供的属性功能</h1><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><ul><li><p>过滤器，就是vue允许开发者自定义的文本格式化函数，可以使用在两个地方：输出内容和操作数据中。</p></li><li><p>它将对原本的数据加工成我们想要的新数据。</p></li><li><p>定义过滤器的方式有两种：全局过滤器与局部过滤器。</p></li></ul><h3 id="全局过滤器"><a href="#全局过滤器" class="headerlink" title="全局过滤器"></a>全局过滤器</h3><p>格式：<code>Vue.filter(&#39;过滤器名称&#39;,匿名函数)</code></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;price|RMB&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span>    </span><br><span class="line"><span class="actionscript">    <span class="comment">// 全局过滤器：通过Vue.filter('过滤器名称',匿名函数)</span></span></span><br><span class="line"><span class="actionscript">    Vue.filter(<span class="string">'RMB'</span>,<span class="function"><span class="keyword">function</span> <span class="params">(v)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> <span class="string">"￥"</span>+v;</span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line">            price:30.5</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="局部过滤器"><a href="#局部过滤器" class="headerlink" title="局部过滤器"></a>局部过滤器</h3><p>格式：<code>filters:{ 过滤器函数 }</code></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;price|RMB&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span>  </span><br><span class="line"><span class="actionscript">    <span class="comment">// 局部过滤器:直接把过滤器写在当前vm对象中，只适用于当前vm对象</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line">            price:30.5</span><br><span class="line">        &#125;,</span><br><span class="line">        filters:&#123;</span><br><span class="line">            RMB(v) &#123;</span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> <span class="string">'￥'</span> + v;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h2><ul><li>当我们需要针对data的数据调整成另一个变量，留作其他地方进行运算时使用，可以使用计算属性得到一个新的变量</li><li>计算属性（computed），可以让我们把调整data数据的代码存在在该属性中。</li><li>如下例中从price中拿到price2</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;price&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;price2&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 当我们需要针对data的数据调整成另一个变量，留作其他地方进行运算时使用，可以使用计算属性得到一个新的变量</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line">            price:30.5</span><br><span class="line">        &#125;,</span><br><span class="line"><span class="actionscript">        computed:&#123;  <span class="comment">//计算属性：里面的函数都必须有返回值</span></span></span><br><span class="line">            price2()&#123;</span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> <span class="keyword">this</span>.price.toFixed(<span class="number">2</span>)</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="监听属性"><a href="#监听属性" class="headerlink" title="监听属性"></a>监听属性</h2><p>侦听属性（watch），可以帮助我们侦听data某个数据的变化，从而做相应的自定义操作。</p><p>侦听属性是一个对象，它的键是要监听的对象或者变量，值一般是函数，当侦听的data数据发生变化时，会自定执行的对应函数，这个函数在被调用时，vue会传入两个形参，第一个是变化前的数据值，第二个是变化后的数据值。</p><p>例子：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    数量：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"num"</span>&gt;</span></span><br><span class="line">    单价：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"price"</span>&gt;</span></span><br><span class="line">    总价：&#123;&#123;total&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 只要监听的变量有变化，则会自动执行匿名函数</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line">            price:30.5,</span><br><span class="line">            num:0,</span><br><span class="line">            total:0,</span><br><span class="line">        &#125;,</span><br><span class="line">        watch:&#123;</span><br><span class="line">            num(newval, oldval)&#123;</span><br><span class="line"><span class="actionscript">                <span class="comment">// num发生变化的时候，要执行的代码</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">// console.log('修改后num='+ newval);</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">// console.log('修改前num='+ oldval);</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.total = <span class="keyword">this</span>.price * <span class="keyword">this</span>.num;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            price()&#123;</span><br><span class="line"><span class="actionscript">                <span class="comment">// price发生变化的时候，要执行的代码</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.total = <span class="keyword">this</span>.price * <span class="keyword">this</span>.num;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Vue对象的生命周期"><a href="#Vue对象的生命周期" class="headerlink" title="Vue对象的生命周期"></a>Vue对象的生命周期</h3><p>每个Vue对象在创建时都要经过一系列的初始化过程。在这个过程中Vue.js会自动运行一些叫做生命周期的的钩子函数，我们可以使用这些函数，在对象创建的不同阶段加上我们需要的代码，实现特定的功能。</p><p>话不多说，先上图：</p><p>生命周期：</p><p><img src="/Vue-js/20191022-learn-Vue-1/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" alt="生命周期"></p><p>钩子：</p><p><img src="/Vue-js/20191022-learn-Vue-1/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E9%92%A9%E5%AD%90.png" alt="生命周期钩子"></p><p>通过一个例子解释：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/filter.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    &#123;&#123;num&#125;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--修改内容时会涉及 beforeUpdate 与 updated--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"num"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 只要监听的变量有变化，则会自动执行匿名函数</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line">            num: 30,</span><br><span class="line">        &#125;,</span><br><span class="line"><span class="actionscript">        <span class="comment">// 创建data之前,组件实例刚刚被创建，组件属性计算之前；（vm对象还没有初始化完成的时候执行）</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 用来加载第三方扩展</span></span></span><br><span class="line">        beforeCreate() &#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'beforeCreate'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.$data);    <span class="comment">//undefined 组件属性还未计算，如data属性</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.num);      <span class="comment">//undefined 得不到里面的数据</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'---------------'</span>)</span></span><br><span class="line">        &#125;,</span><br><span class="line">        created() &#123;</span><br><span class="line"><span class="actionscript">            <span class="comment">// 这里的代码执行时，vm对象创建完成，属性已绑定，但是还没有把数据和视图模板进行绑定（DOM未生成，$el属性还不存在）</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.num);      <span class="comment">// data的数据已经可以操作了。</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.$data);    <span class="comment">// 可以取出数据了</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.$el);      <span class="comment">//undefined 此时还没有绑定视图</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// console.log(this.$el.innerHTML)  // DOM未生成</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 这里以后用于编写从后端获取数据的代码</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'---------------'</span>)</span></span><br><span class="line">        &#125;,</span><br><span class="line">        beforeMount() &#123;</span><br><span class="line"><span class="actionscript">            <span class="comment">// 这里的代码执行时，已经绑定了视图，但是没有更新视图中的数据</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 还没有把数据放入</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.$el.innerHTML);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'---------------'</span>)</span></span><br><span class="line">        &#125;,</span><br><span class="line">        mounted() &#123;</span><br><span class="line"><span class="actionscript">            <span class="comment">// 这里的代码执行时，已经把 data 中的数据替换了模板视图对应的内容</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.$el);</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 这里可以用于编写一些需要操作视图初始化代码</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'---------------'</span>)</span></span><br><span class="line">        &#125;,</span><br><span class="line">        beforeUpdate() &#123;</span><br><span class="line"><span class="actionscript">            <span class="comment">// 更新html模板数据之前</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.num);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.$el.innerHTML);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'---------------'</span>)</span></span><br><span class="line">        &#125;,</span><br><span class="line">        updated() &#123;</span><br><span class="line"><span class="actionscript">            <span class="comment">// 更新html模板数据之后，区别在于视图模板</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.num);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.$el.innerHTML);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'---------------'</span>)</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="actionscript">        <span class="comment">// beforeUpdate,updated很少用，因为监听属性和他们重复了，所以很少用</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// created,mounted 经常使用</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>总结：</p><p>待补充！！！！！！！！！！！！！！！！！！！！！！！！！</p><h2 id="阻止事件冒泡和刷新页面"><a href="#阻止事件冒泡和刷新页面" class="headerlink" title="阻止事件冒泡和刷新页面"></a>阻止事件冒泡和刷新页面</h2><p>只需要在事件后面加上.stop和.prevent，如@click.stop，@click.prevent</p><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><ul><li><p>事件（event）在js中表示用户和浏览器之间进行的一次交互过程</p></li><li><p>事件在触发时，就会有一个事件对象来记录整个事件发生的过程和发生的位置</p></li></ul><h3 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h3><ul><li><p>从事件发生位置由内及外，根据标签之间父子嵌套关系，逐层往外传播，让父级元素触发同类事件，这种事件的传递方式称为事件冒泡。</p></li><li><p>优点：可以利用这种机制实现事件的委托。</p></li><li><p>缺点：当前元素的父级元素有同类事件，会随着冒泡直接全部执行。</p></li></ul><p>事件冒泡效果演示：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onclick</span>=<span class="string">"alert('body')"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onclick</span>=<span class="string">"alert('div')"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line">            num:30,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h3><ul><li>场景：当一个父标签下有很多的子标签时，逐个给子标签绑定事件是一个繁琐，重复的过程。或者当我们在父标签中添加新的子标签时，对子标签绑定事件也有些繁琐。所以事件委托是很好的解决办法。</li></ul><p>原生 js 如下：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>111<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>222<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>333<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>444<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>555<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>666<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> list = <span class="built_in">document</span>.getElementById(<span class="string">'list'</span>);</span></span><br><span class="line"><span class="actionscript">    list.onclick = <span class="function"><span class="keyword">function</span> <span class="params">(event)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);          <span class="comment">// 事件绑定的对象</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(event);         <span class="comment">//  事件对象</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(event.target);  <span class="comment">//  事件触发点</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> self = event.target;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(self.innerHTML)</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>有适合事件委托的场景，那也就有不适合事件委托的场景了，如我只希望该标签响应而不希望它的父标签或者父级的父级标签响应。</p><h3 id="阻止事件冒泡（原生js）"><a href="#阻止事件冒泡（原生js）" class="headerlink" title="阻止事件冒泡（原生js）"></a>阻止事件冒泡（原生js）</h3><p>在函数定义内加入如下两句：</p><ul><li><code>event.stopPropagation();</code></li><li><code>event.cancelBubble = true;</code></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">'box'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>);</span></span><br><span class="line"><span class="actionscript">    box.onclick = <span class="function"><span class="keyword">function</span> <span class="params">(event)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        alert(<span class="string">'父元素'</span>)</span></span><br><span class="line">    &#125;;</span><br><span class="line"><span class="actionscript">    btn.onclick = <span class="function"><span class="keyword">function</span> <span class="params">(event)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        alert(<span class="string">'按钮'</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 为了兼容，两个一起用</span></span></span><br><span class="line">        event.stopPropagation();</span><br><span class="line"><span class="actionscript">        event.cancelBubble = <span class="literal">true</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="阻止事件冒泡（vue）"><a href="#阻止事件冒泡（vue）" class="headerlink" title="阻止事件冒泡（vue）"></a>阻止事件冒泡（vue）</h3><ul><li>只需要在事件后面加上.stop如 <code>@click.stop</code></li></ul><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">"box"</span> @click=<span class="string">"show2"</span>&gt;</span><br><span class="line">	&lt;button @click="show"&gt;按钮&lt;/button&gt;</span><br><span class="line">    &lt;button @click.stop="show"&gt;按钮&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">        el:<span class="string">'#box'</span>,</span><br><span class="line">        data:&#123;&#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            show()&#123;</span><br><span class="line">                console.log(<span class="number">666</span>)</span><br><span class="line">                alert(<span class="string">'按钮'</span>)</span><br><span class="line">            &#125;,</span><br><span class="line">            show2()&#123;</span><br><span class="line">                console.log(<span class="number">777</span>)</span><br><span class="line">                alert(<span class="string">'父元素'</span>)</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="阻止页面刷新"><a href="#阻止页面刷新" class="headerlink" title="阻止页面刷新"></a>阻止页面刷新</h3><p>场景：对于会产生跳转的标签（如a标签，表单中的 submit，button）我们绑定了click事件的时候，但我们只想执行click事件，而不想刷新页面。例如：对于a标签，当它有 href 属性的时候，虽然 href 的值为空，但只要点击这个标签就会刷新页面。</p><ul><li>js 中直接使用return 就可以</li><li>在vue中，使用 <code>@事件.prevent</code></li></ul><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span>      </span><br><span class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> @<span class="attr">click</span>=<span class="string">"show3"</span>&gt;</span>a链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> @<span class="attr">click.prevent</span>=<span class="string">"show4"</span>&gt;</span>a链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 很多时候，这里会有空href --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">'#box'</span>,</span></span><br><span class="line">        data:&#123;&#125;,</span><br><span class="line">        methods:&#123;          </span><br><span class="line">            show3()&#123;</span><br><span class="line"><span class="actionscript">                <span class="comment">// 需要阻止默认的刷新，以前在js中使用return false</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">'一句话'</span>)</span></span><br><span class="line">            &#125;,</span><br><span class="line">            show4()&#123;</span><br><span class="line"><span class="actionscript">                <span class="comment">// 需要阻止默认的刷新，以前在js中使用return false</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">'一句话'</span>)</span></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="综合练习"><a href="#综合练习" class="headerlink" title="综合练习"></a>综合练习</h3><p>完成我的计划列表，该列表中可以添加，删除计划，同时每行信息可以上下移动。</p><p>效果如下：</p><p><img src="/Vue-js/20191022-learn-Vue-1/todolist.PNG" alt="todolist"></p><p>核心：</p><ul><li>使用push来完成添加</li><li>使用splice来完成上下移动以及删除。</li></ul><p>完整代码如下：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>todolist<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">		<span class="selector-class">.list_con</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">width</span><span class="selector-pseudo">:600px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">margin</span><span class="selector-pseudo">:50px</span> <span class="selector-tag">auto</span> 0;</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.inputtxt</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">width</span><span class="selector-pseudo">:550px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">height</span><span class="selector-pseudo">:30px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">padding</span><span class="selector-pseudo">:0px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">text-indent</span><span class="selector-pseudo">:10px</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.inputbtn</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">width</span><span class="selector-pseudo">:40px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">height</span><span class="selector-pseudo">:32px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">padding</span><span class="selector-pseudo">:0px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.list</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">margin</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">padding</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">list-style</span><span class="selector-pseudo">:none</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">margin-top</span><span class="selector-pseudo">:20px</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.list</span> <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">height</span><span class="selector-pseudo">:40px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">line-height</span><span class="selector-pseudo">:40px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">border-bottom</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">		<span class="selector-class">.list</span> <span class="selector-tag">li</span> <span class="selector-tag">span</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">		<span class="selector-class">.list</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">float</span><span class="selector-pseudo">:right</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">text-decoration</span><span class="selector-pseudo">:none</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">margin</span><span class="selector-pseudo">:0</span> 10<span class="selector-tag">px</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list_con"</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h2</span>&gt;</span>To do list<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"txt1"</span> <span class="attr">class</span>=<span class="string">"inputtxt"</span> <span class="attr">v-model</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"增加"</span> <span class="attr">id</span>=<span class="string">"btn1"</span> <span class="attr">class</span>=<span class="string">"inputbtn"</span> @<span class="attr">click</span>=<span class="string">"add"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"list"</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span>			</span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item,index in todolist"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"up"</span> @<span class="attr">click</span>=<span class="string">"up(index)"</span>&gt;</span> ↑ <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"down"</span> @<span class="attr">click</span>=<span class="string">"down(index)"</span>&gt;</span> ↓ <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"del"</span> @<span class="attr">click</span>=<span class="string">"del(index)"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">'#app'</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line">            	todolist:[</span><br><span class="line"><span class="actionscript">            		<span class="string">'学习html'</span>,</span></span><br><span class="line"><span class="actionscript">            		<span class="string">'学习css'</span>,</span></span><br><span class="line"><span class="actionscript">            		<span class="string">'学习javascript'</span>,</span></span><br><span class="line">				],</span><br><span class="line"><span class="actionscript">				text:<span class="string">''</span></span></span><br><span class="line">            &#125;,</span><br><span class="line">			methods:&#123;</span><br><span class="line">            	add()&#123;</span><br><span class="line"><span class="javascript">            		<span class="built_in">console</span>.log(<span class="keyword">this</span>.text);</span></span><br><span class="line"><span class="actionscript">            		<span class="keyword">this</span>.todolist.push(<span class="keyword">this</span>.text);</span></span><br><span class="line"><span class="actionscript">					<span class="keyword">this</span>.text = <span class="string">''</span></span></span><br><span class="line">				&#125;,</span><br><span class="line">				del(index)&#123;</span><br><span class="line"><span class="actionscript">            		<span class="keyword">this</span>.todolist.splice(index,<span class="number">1</span>);</span></span><br><span class="line">				&#125;,</span><br><span class="line">				up(index)&#123;</span><br><span class="line"><span class="actionscript">            		<span class="keyword">if</span>(index===<span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="actionscript">            			<span class="keyword">return</span></span></span><br><span class="line">					&#125;</span><br><span class="line"><span class="actionscript">					ret = <span class="keyword">this</span>.todolist.splice(index,<span class="number">1</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">					<span class="built_in">console</span>.log(ret);</span></span><br><span class="line"><span class="actionscript">					<span class="keyword">this</span>.todolist.splice(index - <span class="number">1</span>,<span class="number">0</span>,ret);</span></span><br><span class="line"><span class="javascript">					<span class="built_in">console</span>.log(<span class="keyword">this</span>.todolist)</span></span><br><span class="line">				&#125;,</span><br><span class="line">				down(index)&#123;</span><br><span class="line"><span class="actionscript">					ret = <span class="keyword">this</span>.todolist.splice(index,<span class="number">1</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">					<span class="built_in">console</span>.log(ret);</span></span><br><span class="line"><span class="actionscript">					<span class="keyword">this</span>.todolist.splice(index + <span class="number">1</span>,<span class="number">0</span>,ret);</span></span><br><span class="line"><span class="javascript">					<span class="built_in">console</span>.log(<span class="keyword">this</span>.todolist)</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line"><span class="actionscript">			<span class="comment">// splice 万能函数，可以做增删查改</span></span></span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Vue.js</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>Vue.js</tag>
      </tags>
  </entry>
  <entry>
    <title>美国2012年总统候选人政治献金数据分析</title>
    <url>/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/20191022-data_analysis_4.html</url>
    <content><![CDATA[<p style="font-size:18px" align="center">引言</p><a id="more"></a><p>占坑！！！</p>]]></content>
      <categories>
        <category>数据分析</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>数据分析</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue.js学习目录</title>
    <url>/Vue-js/20191021-learn-Vue-0.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>Vue.js 的学习目录</p></blockquote><a id="more"></a><h1 id="基础篇"><a href="#基础篇" class="headerlink" title="基础篇"></a>基础篇</h1><h2 id="Vue基础"><a href="#Vue基础" class="headerlink" title="Vue基础"></a><a href="https://chennq.com/Vue-js/20191022-learn-Vue-1.html">Vue基础</a></h2><h2 id="Vue-axios与后端的数据交互"><a href="#Vue-axios与后端的数据交互" class="headerlink" title="Vue-axios与后端的数据交互"></a><a href="https://chennq.com/Vue-js/20191024-learn-Vue-2.html">Vue-axios与后端的数据交互</a></h2><h2 id="Vue组件化开发"><a href="#Vue组件化开发" class="headerlink" title="Vue组件化开发"></a><a href="https://chennq.com/Vue-js/20191025-learn-Vue-3.html">Vue组件化开发</a></h2><ul><li><a href="https://chennq.com/Vue-js/20191025-learn-Vue-4.html">Ubuntu安装Vue-cli</a></li></ul><p>持续更新中！！！</p>]]></content>
      <categories>
        <category>Vue.js</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>Vue.js</tag>
      </tags>
  </entry>
  <entry>
    <title>人口分析</title>
    <url>/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/20191021-data_analysis_3.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>本篇介绍使用数据分析进行人口分析。</p></blockquote><a id="more"></a><ul><li>需求：<ul><li>导入文件，查看原始数据</li><li>将人口数据和各州简称数据进行合并</li><li>将合并的数据中重复的abbreviation列进行删除</li><li>查看存在缺失数据的列</li><li>找到有哪些state/region使得state的值为NaN，进行去重操作</li><li>为找到的这些state/region的state项补上正确的值，从而去除掉state这一列的所有NaN</li><li>合并各州面积数据areas</li><li>我们会发现area(sq.mi)这一列有缺失数据，找出是哪些行</li><li>去除含有缺失数据的行</li><li>找出2010年的全民人口数据</li><li>计算各州的人口密度</li><li>排序，并找出人口密度最高的五个州 df.sort_values()</li></ul></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> DataFrame,Series</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">abb = pd.read_csv(<span class="string">'./data/state-abbrevs.csv'</span>)</span><br><span class="line">abb.head(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>打印：</p><table border="1" class="dataframe"><thead><tr style="text-align:right"><th></th><th>state</th><th>abbreviation</th></tr></thead><tbody><tr><th>0</th><td>Alabama</td><td>AL</td></tr><tr><th>1</th><td>Alaska</td><td>AK</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pop = pd.read_csv(<span class="string">'./data/state-population.csv'</span>)</span><br><span class="line">pop.head(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>打印：</p><table border="1" class="dataframe"><thead><tr style="text-align:right"><th></th><th>state/region</th><th>ages</th><th>year</th><th>population</th></tr></thead><tbody><tr><th>0</th><td>AL</td><td>under18</td><td>2012</td><td>1117489.0</td></tr><tr><th>1</th><td>AL</td><td>total</td><td>2012</td><td>4817528.0</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">area = pd.read_csv(<span class="string">'./data/state-areas.csv'</span>)</span><br><span class="line">area.head(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>打印：</p><table border="1" class="dataframe"><thead><tr style="text-align:right"><th></th><th>state</th><th>area (sq. mi)</th></tr></thead><tbody><tr><th>0</th><td>Alabama</td><td>52423</td></tr><tr><th>1</th><td>Alaska</td><td>656425</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将人口数据和各州简称数据进行合并</span></span><br><span class="line">abb_pop = pd.merge(abb,pop,left_on=<span class="string">'abbreviation'</span>,right_on=<span class="string">'state/region'</span>,how=<span class="string">'outer'</span>)</span><br><span class="line">abb_pop.head(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>打印：</p><table border="1" class="dataframe"><thead><tr style="text-align:right"><th></th><th>state</th><th>abbreviation</th><th>state/region</th><th>ages</th><th>year</th><th>population</th></tr></thead><tbody><tr><th>0</th><td>Alabama</td><td>AL</td><td>AL</td><td>under18</td><td>2012</td><td>1117489.0</td></tr><tr><th>1</th><td>Alabama</td><td>AL</td><td>AL</td><td>total</td><td>2012</td><td>4817528.0</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将合并的数据中重复的abbreviation列进行删除</span></span><br><span class="line">abb_pop.drop(labels=<span class="string">'abbreviation'</span>,axis=<span class="number">1</span>,inplace=<span class="literal">True</span>)</span><br><span class="line">abb_pop.head(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>打印：</p><table border="1" class="dataframe"><thead><tr style="text-align:right"><th></th><th>state</th><th>state/region</th><th>ages</th><th>year</th><th>population</th></tr></thead><tbody><tr><th>0</th><td>Alabama</td><td>AL</td><td>under18</td><td>2012</td><td>1117489.0</td></tr><tr><th>1</th><td>Alabama</td><td>AL</td><td>total</td><td>2012</td><td>4817528.0</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看存在缺失数据的列</span></span><br><span class="line">abb_pop.isnull().any(axis=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>打印：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">state</span>            <span class="literal">True</span></span><br><span class="line"><span class="string">state/region</span>    <span class="literal">False</span></span><br><span class="line"><span class="string">ages</span>            <span class="literal">False</span></span><br><span class="line"><span class="string">year</span>            <span class="literal">False</span></span><br><span class="line"><span class="string">population</span>       <span class="literal">True</span></span><br><span class="line"><span class="attr">dtype:</span> <span class="string">bool</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 找到有哪些state/region使得state的值为NaN，进行去重操作</span></span><br><span class="line"><span class="comment"># 1.state列中哪些值为空</span></span><br><span class="line">abb_pop[<span class="string">'state'</span>].isnull()</span><br></pre></td></tr></table></figure><p>打印：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span>       <span class="literal">False</span></span><br><span class="line"><span class="number">1</span>       <span class="literal">False</span></span><br><span class="line"><span class="number">2</span>       <span class="literal">False</span></span><br><span class="line">        <span class="string">...</span>  </span><br><span class="line"><span class="number">2542</span>     <span class="literal">True</span></span><br><span class="line"><span class="number">2543</span>     <span class="literal">True</span></span><br><span class="line"><span class="attr">Name:</span> <span class="string">state,</span> <span class="attr">Length:</span> <span class="number">2544</span><span class="string">,</span> <span class="attr">dtype:</span> <span class="string">bool</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 2.可以将step1中空对应的行数据取出(state中的空值对应的行数据)</span></span><br><span class="line">abb_pop.loc[abb_pop[<span class="string">'state'</span>].isnull()]</span><br></pre></td></tr></table></figure><p>打印：</p><table border="1" class="dataframe"><thead><tr style="text-align:right"><th></th><th>state</th><th>state/region</th><th>ages</th><th>year</th><th>population</th></tr></thead><tbody><tr><th>2448</th><td>NaN</td><td>PR</td><td>under18</td><td>1990</td><td>NaN</td></tr><tr><th>...</th><td>...</td><td>...</td><td>...</td><td>...</td><td>...</td></tr><tr><th>2543</th><td>NaN</td><td>USA</td><td>total</td><td>2012</td><td>313873685.0</td></tr></tbody></table><p>96 rows × 5 columns</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 3.将对应的行数据中指定的简称列取出</span></span><br><span class="line">abb_pop.loc[abb_pop[<span class="string">'state'</span>].isnull()][<span class="string">'state/region'</span>].unique()</span><br></pre></td></tr></table></figure><p>打印：</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">array</span><span class="params">([<span class="string">'PR'</span>, <span class="string">'USA'</span>], dtype=object)</span></span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 为找到的这些state/region的state项补上正确的值，从而去除掉state这一列的所有NaN</span></span><br><span class="line"><span class="comment"># 1.先将USA对应的state列中的空值定位到</span></span><br><span class="line">abb_pop[<span class="string">'state/region'</span>] == <span class="string">'USA'</span></span><br></pre></td></tr></table></figure><p>打印：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span>       <span class="literal">False</span></span><br><span class="line"><span class="number">1</span>       <span class="literal">False</span></span><br><span class="line"><span class="number">2</span>       <span class="literal">False</span></span><br><span class="line"><span class="number">3</span>       <span class="literal">False</span></span><br><span class="line">        <span class="string">...</span>  </span><br><span class="line"><span class="number">2541</span>     <span class="literal">True</span></span><br><span class="line"><span class="number">2542</span>     <span class="literal">True</span></span><br><span class="line"><span class="number">2543</span>     <span class="literal">True</span></span><br><span class="line"><span class="attr">Name:</span> <span class="string">state/region,</span> <span class="attr">Length:</span> <span class="number">2544</span><span class="string">,</span> <span class="attr">dtype:</span> <span class="string">bool</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 2,将布尔值作为原数据的行索引，取出USA简称对应的行数据</span></span><br><span class="line">abb_pop.loc[abb_pop[<span class="string">'state/region'</span>] == <span class="string">'USA'</span>]</span><br></pre></td></tr></table></figure><p>打印：</p><table border="1" class="dataframe"><thead><tr style="text-align:right"><th></th><th>state</th><th>state/region</th><th>ages</th><th>year</th><th>population</th></tr></thead><tbody><tr><th>2496</th><td>NaN</td><td>USA</td><td>under18</td><td>1990</td><td>64218512.0</td></tr><tr><th>...</th><td>...</td><td>...</td><td>...</td><td>...</td><td>...</td></tr><tr><th>2542</th><td>NaN</td><td>USA</td><td>under18</td><td>2012</td><td>73708179.0</td></tr><tr><th>2543</th><td>NaN</td><td>USA</td><td>total</td><td>2012</td><td>313873685.0</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 3.获取符合要求行数据的行索引</span></span><br><span class="line">indexs = abb_pop.loc[abb_pop[<span class="string">'state/region'</span>] == <span class="string">'USA'</span>].index</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 4.将indexs这些行中的state列的值批量赋值成united states</span></span><br><span class="line">abb_pop.loc[indexs,<span class="string">'state'</span>] = <span class="string">'United Status'</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将PR对应的state列中的空批量赋值成 PUERTO RICO</span></span><br><span class="line">abb_pop[<span class="string">'state/region'</span>] == <span class="string">'PR'</span></span><br><span class="line">abb_pop.loc[abb_pop[<span class="string">'state/region'</span>] == <span class="string">'PR'</span>]</span><br><span class="line">indexs = abb_pop.loc[abb_pop[<span class="string">'state/region'</span>] == <span class="string">'PR'</span>].index</span><br><span class="line">abb_pop.loc[indexs,<span class="string">'state'</span>] = <span class="string">'PUERTO RICO'</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 合并各州面积数据areas</span></span><br><span class="line">abb_pop_area = pd.merge(abb_pop,area,how=<span class="string">'outer'</span>)</span><br><span class="line">abb_pop_area.head(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>打印：</p><table border="1" class="dataframe"><thead><tr style="text-align:right"><th></th><th>state</th><th>state/region</th><th>ages</th><th>year</th><th>population</th><th>area (sq. mi)</th></tr></thead><tbody><tr><th>0</th><td>Alabama</td><td>AL</td><td>under18</td><td>2012.0</td><td>1117489.0</td><td>52423.0</td></tr><tr><th>1</th><td>Alabama</td><td>AL</td><td>total</td><td>2012.0</td><td>4817528.0</td><td>52423.0</td></tr><tr><th>2</th><td>Alabama</td><td>AL</td><td>under18</td><td>2010.0</td><td>1130966.0</td><td>52423.0</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 我们会发现area(sq.mi)这一列有缺失数据，找出是哪些行</span></span><br><span class="line">abb_pop_area[<span class="string">'area (sq. mi)'</span>].isnull()</span><br><span class="line"><span class="comment"># 将空值对应的行数据取出</span></span><br><span class="line">indexs = abb_pop_area.loc[abb_pop_area[<span class="string">'area (sq. mi)'</span>].isnull()].index</span><br><span class="line">indexs</span><br></pre></td></tr></table></figure><p>打印：</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">Int64Index([<span class="number">2448</span>, <span class="number">2449</span>, <span class="number">2450</span>, <span class="number">2451</span>, <span class="number">2452</span>, <span class="number">2453</span>, <span class="number">2454</span>, <span class="number">2455</span>, <span class="number">2456</span>, <span class="number">2457</span>, <span class="number">2458</span>,</span><br><span class="line">            <span class="number">2459</span>, <span class="number">2460</span>, <span class="number">2461</span>, <span class="number">2462</span>, <span class="number">2463</span>, <span class="number">2464</span>, <span class="number">2465</span>, <span class="number">2466</span>, <span class="number">2467</span>, <span class="number">2468</span>, <span class="number">2469</span>,</span><br><span class="line">            <span class="number">2470</span>, <span class="number">2471</span>, <span class="number">2472</span>, <span class="number">2473</span>, <span class="number">2474</span>, <span class="number">2475</span>, <span class="number">2476</span>, <span class="number">2477</span>, <span class="number">2478</span>, <span class="number">2479</span>, <span class="number">2480</span>,</span><br><span class="line">            <span class="number">2481</span>, <span class="number">2482</span>, <span class="number">2483</span>, <span class="number">2484</span>, <span class="number">2485</span>, <span class="number">2486</span>, <span class="number">2487</span>, <span class="number">2488</span>, <span class="number">2489</span>, <span class="number">2490</span>, <span class="number">2491</span>,</span><br><span class="line">            <span class="number">2492</span>, <span class="number">2493</span>, <span class="number">2494</span>, <span class="number">2495</span>, <span class="number">2496</span>, <span class="number">2497</span>, <span class="number">2498</span>, <span class="number">2499</span>, <span class="number">2500</span>, <span class="number">2501</span>, <span class="number">2502</span>,</span><br><span class="line">            <span class="number">2503</span>, <span class="number">2504</span>, <span class="number">2505</span>, <span class="number">2506</span>, <span class="number">2507</span>, <span class="number">2508</span>, <span class="number">2509</span>, <span class="number">2510</span>, <span class="number">2511</span>, <span class="number">2512</span>, <span class="number">2513</span>,</span><br><span class="line">            <span class="number">2514</span>, <span class="number">2515</span>, <span class="number">2516</span>, <span class="number">2517</span>, <span class="number">2518</span>, <span class="number">2519</span>, <span class="number">2520</span>, <span class="number">2521</span>, <span class="number">2522</span>, <span class="number">2523</span>, <span class="number">2524</span>,</span><br><span class="line">            <span class="number">2525</span>, <span class="number">2526</span>, <span class="number">2527</span>, <span class="number">2528</span>, <span class="number">2529</span>, <span class="number">2530</span>, <span class="number">2531</span>, <span class="number">2532</span>, <span class="number">2533</span>, <span class="number">2534</span>, <span class="number">2535</span>,</span><br><span class="line">            <span class="number">2536</span>, <span class="number">2537</span>, <span class="number">2538</span>, <span class="number">2539</span>, <span class="number">2540</span>, <span class="number">2541</span>, <span class="number">2542</span>, <span class="number">2543</span>],</span><br><span class="line">           dtype=<span class="string">'int64'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 去除含有缺失数据的行</span></span><br><span class="line">abb_pop_area.drop(labels=indexs,axis=<span class="number">0</span>,inplace=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 找出2010年的全民人口数据    条件查询</span></span><br><span class="line">abb_pop_area.query(<span class="string">'year == 2010 &amp; ages == "total"'</span>)</span><br></pre></td></tr></table></figure><p>打印：</p><table border="1" class="dataframe"><thead><tr style="text-align:right"><th></th><th>state</th><th>state/region</th><th>ages</th><th>year</th><th>population</th><th>area (sq. mi)</th></tr></thead><tbody><tr><th>3</th><td>Alabama</td><td>AL</td><td>total</td><td>2010.0</td><td>4785570.0</td><td>52423.0</td></tr><tr><th>91</th><td>Alaska</td><td>AK</td><td>total</td><td>2010.0</td><td>713868.0</td><td>656425.0</td></tr><tr><th>101</th><td>Arizona</td><td>AZ</td><td>total</td><td>2010.0</td><td>6408790.0</td><td>114006.0</td></tr><tr><th>189</th><td>Arkansas</td><td>AR</td><td>total</td><td>2010.0</td><td>2922280.0</td><td>53182.0</td></tr><tr><th>197</th><td>California</td><td>CA</td><td>total</td><td>2010.0</td><td>37333601.0</td><td>163707.0</td></tr><tr><th>2405</th><td>Wyoming</td><td>WY</td><td>total</td><td>2010.0</td><td>564222.0</td><td>97818.0</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 计算各州的人口密度</span></span><br><span class="line">abb_pop_area[<span class="string">'midu'</span>] = abb_pop_area[<span class="string">'population'</span>] / abb_pop_area[<span class="string">'area (sq. mi)'</span>]</span><br><span class="line">abb_pop_area.head(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>打印：</p><table border="1" class="dataframe"><thead><tr style="text-align:right"><th></th><th>state</th><th>state/region</th><th>ages</th><th>year</th><th>population</th><th>area (sq. mi)</th><th>midu</th></tr></thead><tbody><tr><th>0</th><td>Alabama</td><td>AL</td><td>under18</td><td>2012.0</td><td>1117489.0</td><td>52423.0</td><td>21.316769</td></tr><tr><th>1</th><td>Alabama</td><td>AL</td><td>total</td><td>2012.0</td><td>4817528.0</td><td>52423.0</td><td>91.897221</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 排序，并找出人口密度最高的五个州   df.sort_values()</span></span><br><span class="line">abb_pop_area.sort_values(by=<span class="string">'midu'</span>,axis=<span class="number">0</span>,ascending=<span class="literal">False</span>).head(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>打印：</p><table border="1" class="dataframe"><thead><tr style="text-align:right"><th></th><th>state</th><th>state/region</th><th>ages</th><th>year</th><th>population</th><th>area (sq. mi)</th><th>midu</th></tr></thead><tbody><tr><th>391</th><td>District of Columbia</td><td>DC</td><td>total</td><td>2013.0</td><td>646449.0</td><td>68.0</td><td>9506.602941</td></tr><tr><th>385</th><td>District of Columbia</td><td>DC</td><td>total</td><td>2012.0</td><td>633427.0</td><td>68.0</td><td>9315.102941</td></tr><tr><th>387</th><td>District of Columbia</td><td>DC</td><td>total</td><td>2011.0</td><td>619624.0</td><td>68.0</td><td>9112.117647</td></tr><tr><th>431</th><td>District of Columbia</td><td>DC</td><td>total</td><td>1990.0</td><td>605321.0</td><td>68.0</td><td>8901.779412</td></tr><tr><th>389</th><td>District of Columbia</td><td>DC</td><td>total</td><td>2010.0</td><td>605125.0</td><td>68.0</td><td>8898.897059</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">abb_pop_area.groupby(by=<span class="string">'state'</span>)[<span class="string">'area (sq. mi)'</span>].max().sort_values(ascending=<span class="literal">False</span>).head(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>打印：</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">state</span><br><span class="line">Alaska        656425.0</span><br><span class="line">Texas         268601.0</span><br><span class="line">California    163707.0</span><br><span class="line">Montana       147046.0</span><br><span class="line">New Mexico    121593.0</span><br><span class="line">Name:<span class="built_in"> area </span>(sq. mi), dtype: float64</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据分析</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>数据分析</tag>
      </tags>
  </entry>
  <entry>
    <title>股票分析</title>
    <url>/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/20191020-data_analysis_2.html</url>
    <content><![CDATA[<p style="font-size:18px" align="center">引言</p><a id="more"></a><p>使用tushare包获取某股票的历史行情数据</p><ul><li>pip install tushare</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tushare <span class="keyword">as</span> ts</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 茅台的数据</span></span><br><span class="line">maotai = ts.get_k_data(code=<span class="string">'600519'</span>,start=<span class="string">'1900-01-01'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">maotai.head()</span><br></pre></td></tr></table></figure><p>打印：</p><table border="1" class="dataframe"><thead><tr style="text-align:right"><th></th><th>date</th><th>open</th><th>close</th><th>high</th><th>low</th><th>volume</th><th>code</th></tr></thead><tbody><tr><th>0</th><td>2001-08-27</td><td>5.392</td><td>5.554</td><td>5.902</td><td>5.132</td><td>406318.00</td><td>600519</td></tr><tr><th>1</th><td>2001-08-28</td><td>5.467</td><td>5.759</td><td>5.781</td><td>5.407</td><td>129647.79</td><td>600519</td></tr><tr><th>2</th><td>2001-08-29</td><td>5.777</td><td>5.684</td><td>5.781</td><td>5.640</td><td>53252.75</td><td>600519</td></tr><tr><th>3</th><td>2001-08-30</td><td>5.668</td><td>5.796</td><td>5.860</td><td>5.624</td><td>48013.06</td><td>600519</td></tr><tr><th>4</th><td>2001-08-31</td><td>5.804</td><td>5.782</td><td>5.877</td><td>5.749</td><td>23231.48</td><td>600519</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 存储本地</span></span><br><span class="line">maotai.to_csv(<span class="string">'./maotai.csv'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 从本地读取数据</span></span><br><span class="line"><span class="comment"># index_col将哪一列['date']作为原数据的行索引</span></span><br><span class="line"><span class="comment"># parse_dates: 将哪些列的数据转换为date类型</span></span><br><span class="line"><span class="comment"># 将date的类型转成时间类型然后将其作为原数据的行索引</span></span><br><span class="line">df = pd.read_csv(<span class="string">'./maotai.csv'</span>, index_col=<span class="string">'date'</span>, parse_dates=[<span class="string">'date'</span>])</span><br><span class="line">df.drop(labels=<span class="string">'Unnamed: 0'</span>,axis=<span class="number">1</span>,inplace=<span class="literal">True</span>)  <span class="comment"># 删除多余的一列 inplace表示,是否修改原数据</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.head()</span><br></pre></td></tr></table></figure><p>打印：</p><table border="1" class="dataframe"><thead><tr style="text-align:right"><th></th><th>open</th><th>close</th><th>high</th><th>low</th><th>volume</th><th>code</th></tr><tr><th>date</th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><th>2001-08-27</th><td>5.392</td><td>5.554</td><td>5.902</td><td>5.132</td><td>406318.00</td><td>600519</td></tr><tr><th>2001-08-28</th><td>5.467</td><td>5.759</td><td>5.781</td><td>5.407</td><td>129647.79</td><td>600519</td></tr><tr><th>2001-08-29</th><td>5.777</td><td>5.684</td><td>5.781</td><td>5.640</td><td>53252.75</td><td>600519</td></tr><tr><th>2001-08-30</th><td>5.668</td><td>5.796</td><td>5.860</td><td>5.624</td><td>48013.06</td><td>600519</td></tr><tr><th>2001-08-31</th><td>5.804</td><td>5.782</td><td>5.877</td><td>5.749</td><td>23231.48</td><td>600519</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 输出该股票所有收盘比开盘上涨3%以上的日期。</span></span><br><span class="line"><span class="comment"># (收盘-开盘)/开盘 &gt; 0.03</span></span><br><span class="line">(df[<span class="string">'close'</span>] - df[<span class="string">'open'</span>]) / df[<span class="string">'open'</span>] &gt; <span class="number">0.03</span></span><br><span class="line"><span class="comment"># 将True对应的行数据取出</span></span><br><span class="line">df.loc[(df[<span class="string">'close'</span>] - df[<span class="string">'open'</span>]) / df[<span class="string">'open'</span>] &gt; <span class="number">0.03</span>]</span><br><span class="line"><span class="comment"># 取行索引(时间)</span></span><br><span class="line">df.loc[(df[<span class="string">'close'</span>] - df[<span class="string">'open'</span>]) / df[<span class="string">'open'</span>] &gt; <span class="number">0.03</span>].index</span><br></pre></td></tr></table></figure><p>打印：</p><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">DatetimeIndex(['<span class="number">2001</span><span class="number">-08</span><span class="number">-27</span>', '<span class="number">2001</span><span class="number">-08</span><span class="number">-28</span>', '<span class="number">2001</span><span class="number">-09</span><span class="number">-10</span>', '<span class="number">2001</span><span class="number">-12</span><span class="number">-21</span>',</span><br><span class="line">               '<span class="number">2002</span><span class="number">-01</span><span class="number">-18</span>', '<span class="number">2002</span><span class="number">-01</span><span class="number">-31</span>', '<span class="number">2003</span><span class="number">-01</span><span class="number">-14</span>', '<span class="number">2003</span><span class="number">-10</span><span class="number">-29</span>',</span><br><span class="line">               '<span class="number">2004</span><span class="number">-01</span><span class="number">-05</span>', '<span class="number">2004</span><span class="number">-01</span><span class="number">-14</span>',</span><br><span class="line">               ...</span><br><span class="line">               '<span class="number">2019</span><span class="number">-03</span><span class="number">-01</span>', '<span class="number">2019</span><span class="number">-03</span><span class="number">-18</span>', '<span class="number">2019</span><span class="number">-04</span><span class="number">-10</span>', '<span class="number">2019</span><span class="number">-04</span><span class="number">-16</span>',</span><br><span class="line">               '<span class="number">2019</span><span class="number">-05</span><span class="number">-10</span>', '<span class="number">2019</span><span class="number">-05</span><span class="number">-15</span>', '<span class="number">2019</span><span class="number">-06</span><span class="number">-11</span>', '<span class="number">2019</span><span class="number">-06</span><span class="number">-20</span>',</span><br><span class="line">               '<span class="number">2019</span><span class="number">-09</span><span class="number">-12</span>', '<span class="number">2019</span><span class="number">-09</span><span class="number">-18</span>'],</span><br><span class="line">              dtype='datetime64[ns]', name='date', length=<span class="number">303</span>, freq=None)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 输出该股票所有开盘比前日收盘跌幅超过2%的日期。</span></span><br><span class="line"><span class="comment"># (开盘-前日收盘)/前日收盘  &lt; -0.02</span></span><br><span class="line"><span class="comment"># shift(1): 向下移动一行</span></span><br><span class="line">(df[<span class="string">'open'</span>] - df[<span class="string">'close'</span>].shift(<span class="number">1</span>)) / df[<span class="string">'close'</span>].shift(<span class="number">1</span>) &lt; <span class="number">-0.02</span></span><br><span class="line">df.loc[(df[<span class="string">'open'</span>] - df[<span class="string">'close'</span>].shift(<span class="number">1</span>)) / df[<span class="string">'close'</span>].shift(<span class="number">1</span>) &lt; <span class="number">-0.02</span>]</span><br><span class="line">df.loc[(df[<span class="string">'open'</span>] - df[<span class="string">'close'</span>].shift(<span class="number">1</span>)) / df[<span class="string">'close'</span>].shift(<span class="number">1</span>) &lt; <span class="number">-0.02</span>].index</span><br></pre></td></tr></table></figure><p>打印：</p><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">DatetimeIndex(['<span class="number">2001</span><span class="number">-09</span><span class="number">-12</span>', '<span class="number">2002</span><span class="number">-06</span><span class="number">-26</span>', '<span class="number">2002</span><span class="number">-12</span><span class="number">-13</span>', '<span class="number">2004</span><span class="number">-07</span><span class="number">-01</span>',</span><br><span class="line">               '<span class="number">2004</span><span class="number">-10</span><span class="number">-29</span>', '<span class="number">2006</span><span class="number">-08</span><span class="number">-21</span>', '<span class="number">2006</span><span class="number">-08</span><span class="number">-23</span>', '<span class="number">2007</span><span class="number">-01</span><span class="number">-25</span>',</span><br><span class="line">               '<span class="number">2007</span><span class="number">-02</span><span class="number">-01</span>', '<span class="number">2007</span><span class="number">-02</span><span class="number">-06</span>', '<span class="number">2007</span><span class="number">-03</span><span class="number">-19</span>', '<span class="number">2007</span><span class="number">-05</span><span class="number">-21</span>',</span><br><span class="line">               '<span class="number">2007</span><span class="number">-05</span><span class="number">-30</span>', '<span class="number">2007</span><span class="number">-06</span><span class="number">-05</span>', '<span class="number">2007</span><span class="number">-07</span><span class="number">-27</span>', '<span class="number">2007</span><span class="number">-09</span><span class="number">-05</span>',</span><br><span class="line">               '<span class="number">2007</span><span class="number">-09</span><span class="number">-10</span>', '<span class="number">2008</span><span class="number">-03</span><span class="number">-13</span>', '<span class="number">2008</span><span class="number">-03</span><span class="number">-17</span>', '<span class="number">2008</span><span class="number">-03</span><span class="number">-25</span>',</span><br><span class="line">               '<span class="number">2008</span><span class="number">-03</span><span class="number">-27</span>', '<span class="number">2008</span><span class="number">-04</span><span class="number">-22</span>', '<span class="number">2008</span><span class="number">-04</span><span class="number">-23</span>', '<span class="number">2008</span><span class="number">-04</span><span class="number">-29</span>',</span><br><span class="line">               '<span class="number">2008</span><span class="number">-05</span><span class="number">-13</span>', '<span class="number">2008</span><span class="number">-06</span><span class="number">-10</span>', '<span class="number">2008</span><span class="number">-06</span><span class="number">-13</span>', '<span class="number">2008</span><span class="number">-06</span><span class="number">-24</span>',</span><br><span class="line">               '<span class="number">2008</span><span class="number">-06</span><span class="number">-27</span>', '<span class="number">2008</span><span class="number">-08</span><span class="number">-11</span>', '<span class="number">2008</span><span class="number">-08</span><span class="number">-19</span>', '<span class="number">2008</span><span class="number">-09</span><span class="number">-23</span>',</span><br><span class="line">               '<span class="number">2008</span><span class="number">-10</span><span class="number">-10</span>', '<span class="number">2008</span><span class="number">-10</span><span class="number">-15</span>', '<span class="number">2008</span><span class="number">-10</span><span class="number">-16</span>', '<span class="number">2008</span><span class="number">-10</span><span class="number">-20</span>',</span><br><span class="line">               '<span class="number">2008</span><span class="number">-10</span><span class="number">-23</span>', '<span class="number">2008</span><span class="number">-10</span><span class="number">-27</span>', '<span class="number">2008</span><span class="number">-11</span><span class="number">-06</span>', '<span class="number">2008</span><span class="number">-11</span><span class="number">-12</span>',</span><br><span class="line">               '<span class="number">2008</span><span class="number">-11</span><span class="number">-20</span>', '<span class="number">2008</span><span class="number">-11</span><span class="number">-21</span>', '<span class="number">2008</span><span class="number">-12</span><span class="number">-02</span>', '<span class="number">2009</span><span class="number">-02</span><span class="number">-27</span>',</span><br><span class="line">               '<span class="number">2009</span><span class="number">-03</span><span class="number">-25</span>', '<span class="number">2009</span><span class="number">-08</span><span class="number">-13</span>', '<span class="number">2010</span><span class="number">-04</span><span class="number">-26</span>', '<span class="number">2010</span><span class="number">-04</span><span class="number">-30</span>',</span><br><span class="line">               '<span class="number">2011</span><span class="number">-08</span><span class="number">-05</span>', '<span class="number">2012</span><span class="number">-03</span><span class="number">-27</span>', '<span class="number">2012</span><span class="number">-08</span><span class="number">-10</span>', '<span class="number">2012</span><span class="number">-11</span><span class="number">-22</span>',</span><br><span class="line">               '<span class="number">2012</span><span class="number">-12</span><span class="number">-04</span>', '<span class="number">2012</span><span class="number">-12</span><span class="number">-24</span>', '<span class="number">2013</span><span class="number">-01</span><span class="number">-16</span>', '<span class="number">2013</span><span class="number">-01</span><span class="number">-25</span>',</span><br><span class="line">               '<span class="number">2013</span><span class="number">-09</span><span class="number">-02</span>', '<span class="number">2014</span><span class="number">-04</span><span class="number">-25</span>', '<span class="number">2015</span><span class="number">-01</span><span class="number">-19</span>', '<span class="number">2015</span><span class="number">-05</span><span class="number">-25</span>',</span><br><span class="line">               '<span class="number">2015</span><span class="number">-07</span><span class="number">-03</span>', '<span class="number">2015</span><span class="number">-07</span><span class="number">-08</span>', '<span class="number">2015</span><span class="number">-07</span><span class="number">-13</span>', '<span class="number">2015</span><span class="number">-08</span><span class="number">-24</span>',</span><br><span class="line">               '<span class="number">2015</span><span class="number">-09</span><span class="number">-02</span>', '<span class="number">2015</span><span class="number">-09</span><span class="number">-15</span>', '<span class="number">2017</span><span class="number">-11</span><span class="number">-17</span>', '<span class="number">2018</span><span class="number">-02</span><span class="number">-06</span>',</span><br><span class="line">               '<span class="number">2018</span><span class="number">-02</span><span class="number">-09</span>', '<span class="number">2018</span><span class="number">-03</span><span class="number">-23</span>', '<span class="number">2018</span><span class="number">-03</span><span class="number">-28</span>', '<span class="number">2018</span><span class="number">-07</span><span class="number">-11</span>',</span><br><span class="line">               '<span class="number">2018</span><span class="number">-10</span><span class="number">-11</span>', '<span class="number">2018</span><span class="number">-10</span><span class="number">-24</span>', '<span class="number">2018</span><span class="number">-10</span><span class="number">-25</span>', '<span class="number">2018</span><span class="number">-10</span><span class="number">-29</span>',</span><br><span class="line">               '<span class="number">2018</span><span class="number">-10</span><span class="number">-30</span>', '<span class="number">2019</span><span class="number">-05</span><span class="number">-06</span>', '<span class="number">2019</span><span class="number">-05</span><span class="number">-08</span>'],</span><br><span class="line">              dtype='datetime64[ns]', name='date', freq=None)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#假如我从2010年1月1日开始，每月第一个交易日买入1手股票，每年最后一个交易日卖出所有股票，到今天为止，我的收益如何？</span></span><br><span class="line">df_2010 = df[<span class="string">'2010'</span>:<span class="string">'2019'</span>]</span><br></pre></td></tr></table></figure><ul><li>基于开盘价进行股票的买卖</li><li>买股票的时机：<ul><li>每月的第一个交易日买入一手（100股）股票</li><li>一个完整的年会买入12次股票共计1200股</li></ul></li><li>卖股票的时机：<ul><li>每年的最后一个交易日卖出所有（1200股）的股票</li><li>一共可以卖9次股票</li></ul></li><li>注意：19年只可以买入不可以卖出，最后剩余的不能卖出的1000股股票是需要计算到总收益中</li><li>数据的重新取样resample()</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 买入股票花费的钱数</span></span><br><span class="line"><span class="comment"># df_2010.resample('M').first() 取出每月的第一天为索引的行</span></span><br><span class="line">df_monthly = df_2010.resample(<span class="string">'M'</span>).first()</span><br><span class="line">cost_money = df_monthly[<span class="string">'open'</span>].sum() * <span class="number">100</span></span><br><span class="line">cost_money</span><br></pre></td></tr></table></figure><p>打印：</p><figure class="highlight dns"><table><tr><td class="code"><pre><span class="line"><span class="number">3568986</span>.<span class="number">0999999996</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 卖出股票收到多少钱</span></span><br><span class="line"><span class="comment"># df_2010.resample('A').last()取出每年的最后一天为索引的行</span></span><br><span class="line"><span class="comment"># 并且排除2019年</span></span><br><span class="line">df_yearly = df_2010.resample(<span class="string">'A'</span>).last()[:<span class="number">-1</span>]</span><br><span class="line">df_yearly</span><br></pre></td></tr></table></figure><p>打印：</p><table border="1" class="dataframe"><thead><tr style="text-align:right"><th></th><th>open</th><th>close</th><th>high</th><th>low</th><th>volume</th><th>code</th></tr><tr><th>date</th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><th>2010-12-31</th><td>117.103</td><td>118.469</td><td>118.701</td><td>116.620</td><td>46084.0</td><td>600519</td></tr><tr><th>2011-12-31</th><td>138.039</td><td>138.468</td><td>139.600</td><td>136.105</td><td>29460.0</td><td>600519</td></tr><tr><th>2012-12-31</th><td>155.208</td><td>152.087</td><td>156.292</td><td>150.144</td><td>51914.0</td><td>600519</td></tr><tr><th>2013-12-31</th><td>93.188</td><td>96.480</td><td>97.179</td><td>92.061</td><td>57546.0</td><td>600519</td></tr><tr><th>2014-12-31</th><td>157.642</td><td>161.056</td><td>161.379</td><td>157.132</td><td>46269.0</td><td>600519</td></tr><tr><th>2015-12-31</th><td>207.487</td><td>207.458</td><td>208.704</td><td>207.106</td><td>19673.0</td><td>600519</td></tr><tr><th>2016-12-31</th><td>317.239</td><td>324.563</td><td>325.670</td><td>317.239</td><td>34687.0</td><td>600519</td></tr><tr><th>2017-12-31</th><td>707.948</td><td>687.725</td><td>716.329</td><td>681.918</td><td>76038.0</td><td>600519</td></tr><tr><th>2018-12-31</th><td>563.300</td><td>590.010</td><td>596.400</td><td>560.000</td><td>63678.0</td><td>600519</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">last_price = df_2010[<span class="string">'close'</span>][<span class="number">-1</span>]  <span class="comment"># 昨天的收盘价</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">recv_monry = df_yearly[<span class="string">'open'</span>].sum() * <span class="number">1200</span> + last_price * <span class="number">1000</span></span><br><span class="line">recv_monry - cost_money</span><br></pre></td></tr></table></figure><p>打印：</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">590598.6999999997</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据分析</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>数据分析</tag>
      </tags>
  </entry>
  <entry>
    <title>常用10种可视化视图</title>
    <url>/Data-visualization/20191019-data_visualization_1.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>本篇介绍Python的可视化技术以及10种可视化视图，包括散点图、折线图、直方图、条形图、箱线图、饼图、热力图、蜘蛛图、二元变量分布和成对关系。</p></blockquote><a id="more"></a><h1 id="可视化技术有哪些？"><a href="#可视化技术有哪些？" class="headerlink" title="可视化技术有哪些？"></a>可视化技术有哪些？</h1><h2 id="Matplotlib"><a href="#Matplotlib" class="headerlink" title="Matplotlib"></a>Matplotlib</h2><blockquote><p>Matplotlib 是一个 Python 的 2D绘图库，它以各种硬拷贝格式和跨平台的交互式环境生成出版质量级别的图形。通过 Matplotlib，开发者可以仅需要几行代码，便可以生成绘图，直方图，功率谱，条形图，错误图，散点图等。</p></blockquote><h2 id="Seaborn"><a href="#Seaborn" class="headerlink" title="Seaborn"></a>Seaborn</h2><blockquote><p>Seaborn是一个基于matplotlib的Python数据可视化库。它提供了一个高级界面，用于绘制有吸引力且信息丰富的统计图形。Seaborn是一个用Python制作统计图形的库。它建立在matplotlib之上，并与pandas数据结构紧密集成。</p></blockquote><h1 id="可视化视图都有哪些？"><a href="#可视化视图都有哪些？" class="headerlink" title="可视化视图都有哪些？"></a>可视化视图都有哪些？</h1><p>按照数据之间的关系，我们可以把可视化视图划分为 4 类，它们分别是比较、联系、构成和分布。</p><ol><li>比较：比较数据间各类别的关系，或者是它们随着时间的变化趋势，比如<strong>折线图</strong>；</li><li>联系：查看两个或两个以上变量之间的关系，比如<strong>散点图</strong>；</li><li>构成：每个部分占整体的百分比，或者是随着时间的百分比变化，比如<strong>饼图</strong>；</li><li>分布：关注单个变量，或者多个变量的分布情况，比如<strong>直方图</strong>。</li></ol><h2 id="散点图（scatter-plot）"><a href="#散点图（scatter-plot）" class="headerlink" title="散点图（scatter plot）"></a>散点图（scatter plot）</h2><p>散点图：</p><h3 id="使用Matplotlib"><a href="#使用Matplotlib" class="headerlink" title="使用Matplotlib"></a>使用Matplotlib</h3><p>​ 先导包。pyplot这个工具包，它包括了很多绘图函数，类似 Matlab 的绘图框架。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br></pre></td></tr></table></figure><p>​ 在工具包引用后，画散点图，需要使用 plt.scatter(x, y, marker=None) 函数。x、y 是坐标，marker 代表了标记的符号。比如“x”、“&gt;”或者“o”。选择不同的 marker，呈现出来的符号样式也会不同：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">x = np.random.randint(<span class="number">0</span>,<span class="number">100</span>,size=(<span class="number">100</span>,))</span><br><span class="line">y = np.random.randint(<span class="number">0</span>,<span class="number">100</span>,size=(<span class="number">100</span>,))</span><br><span class="line"><span class="comment"># plt.scatter(x,y,marker='x')</span></span><br><span class="line"><span class="comment"># plt.scatter(x,y,marker='&gt;')</span></span><br><span class="line">plt.scatter(x,y,marker=<span class="string">'o'</span>)</span><br></pre></td></tr></table></figure><p><img src="/Data-visualization/20191019-data_visualization_1/%E6%95%A3%E7%82%B9%E5%9B%BE1.png" alt="散点图1"></p><h3 id="使用Seaborn"><a href="#使用Seaborn" class="headerlink" title="使用Seaborn"></a>使用Seaborn</h3><p>​ 先导包</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br></pre></td></tr></table></figure><p>​ 在引用 seaborn 工具包之后，就可以使用 seaborn 工具包的函数了。</p><p>散点图使用 <code>sns.jointplot(x, y, data=None, kind=‘scatter’)</code> 函数。其中 x、y 是 data 中的下标。data 就是我们要传入的数据，一般是 DataFrame 类型。kind 这类我们取 scatter，代表散点的意思。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd </span><br><span class="line">df = pd.DataFrame(&#123;<span class="string">'x'</span>:x,<span class="string">'y'</span>:y&#125;)</span><br><span class="line">sns.jointplot(x=<span class="string">"x"</span>,y=<span class="string">"y"</span>,data=df, kind=<span class="string">'scatter'</span>)</span><br></pre></td></tr></table></figure><p><img src="/Data-visualization/20191019-data_visualization_1/%E6%95%A3%E7%82%B9%E5%9B%BE2.png" alt="散点图2"></p><p>从上下两张图中可以看出 Matplotlib 和 Seaborn 的视图呈现还是有差别的。Matplotlib 默认情况下呈现出来的是个长方形。而 Seaborn 呈现的是个正方形，而且不仅显示出了散点图，还给了这两个变量的分布情况。</p><h2 id="折线图"><a href="#折线图" class="headerlink" title="折线图"></a>折线图</h2><p>折线图：用来表示数据随着时间变化的趋势。</p><ul><li>Matplotlib</li></ul><p>在 Matplotlib 中，我们可以直接使用 plt.plot() 函数，当然需要提前把数据按照 x 轴的大小进行排序，要不画出来的折线图就无法按照 x 轴递增的顺序展示。</p><ul><li>Seaborn</li></ul><p>在 Seaborn 中，我们使用 sns.lineplot (x, y, data=None) 函数。其中 x、y 是 data 中的下标。data 就是我们要传入的数据，一般是 DataFrame 类型。</p><p>例子：包含 x、y 的数组。x 数组代表时间（年），y 数组我们随便设置几个取值。下面是详细的代码。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="comment"># 数据准备</span></span><br><span class="line">x = [<span class="number">2010</span>, <span class="number">2011</span>, <span class="number">2012</span>, <span class="number">2013</span>, <span class="number">2014</span>, <span class="number">2015</span>, <span class="number">2016</span>, <span class="number">2017</span>, <span class="number">2018</span>, <span class="number">2019</span>]</span><br><span class="line">y = [<span class="number">5</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">20</span>, <span class="number">17</span>, <span class="number">16</span>, <span class="number">19</span>, <span class="number">30</span>, <span class="number">32</span>, <span class="number">35</span>]</span><br><span class="line"><span class="comment"># 使用 Matplotlib 画折线图</span></span><br><span class="line">plt.plot(x, y)</span><br><span class="line">plt.show()</span><br><span class="line"><span class="comment"># 使用 Seaborn 画折线图</span></span><br><span class="line">df = pd.DataFrame(&#123;<span class="string">'x'</span>: x, <span class="string">'y'</span>: y&#125;)</span><br><span class="line">sns.lineplot(x=<span class="string">"x"</span>, y=<span class="string">"y"</span>, data=df)</span><br></pre></td></tr></table></figure><p>Matplotlib 折线图：</p><p><img src="/Data-visualization/20191019-data_visualization_1/D:%5Catlasnq.github.io%5Cblog%5Csource_posts%5C%E5%B8%B8%E7%94%A810%E7%A7%8D%E5%8F%AF%E8%A7%86%E5%8C%96%E8%A7%86%E5%9B%BE%5C%E6%8A%98%E7%BA%BF%E5%9B%BE2.png" alt="折线图2"></p><p>Seaborn 折线图：</p><p><img src="/Data-visualization/20191019-data_visualization_1/%E6%8A%98%E7%BA%BF%E5%9B%BE2.png" alt="折线图2"></p><h2 id="直方图"><a href="#直方图" class="headerlink" title="直方图"></a>直方图</h2><p>直方图：表示变量的数值分布</p><p>​ 直方图是比较常见的视图，它是把横坐标等分成了一定数量的小区间，这个小区间也叫作“箱子”，然后在每个“箱子”内用矩形条（bars）展示该箱子的箱子数（也就是 y 值），这样就完成了对数据集的直方图分布的可视化。</p><ul><li>Matplotlib</li></ul><p>在 Matplotlib 中，我们使用 plt.hist(x, bins=10) 函数，其中参数 x 是一维数组，bins 代表直方图中的箱子数量，默认是 10。</p><ul><li>Seaborn</li></ul><p>在 Seaborn 中，我们使用 sns.distplot(x, bins=10, kde=True) 函数。其中参数 x 是一维数组，bins 代表直方图中的箱子数量，kde 代表显示核密度估计，默认是 True，我们也可以把 kde 设置为 False，不进行显示。核密度估计是通过核函数帮我们来估计概率密度的方法。</p><p>例子：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="comment"># 数据准备</span></span><br><span class="line">a = np.random.randn(<span class="number">100</span>)</span><br><span class="line">s = pd.Series(a) </span><br><span class="line"><span class="comment"># 用 Matplotlib 画直方图</span></span><br><span class="line">plt.hist(s)</span><br><span class="line">plt.show()</span><br><span class="line"><span class="comment"># 用 Seaborn 画直方图</span></span><br><span class="line">sns.distplot(s, kde=<span class="literal">False</span>)</span><br><span class="line">sns.distplot(s, kde=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>Matplotlib 直方图：</p><p><img src="/Data-visualization/20191019-data_visualization_1/%E7%9B%B4%E6%96%B9%E5%9B%BE1.png" alt="直方图1"></p><p>Seaborn 直方图：</p><p><img src="/Data-visualization/20191019-data_visualization_1/%E7%9B%B4%E6%96%B9%E5%9B%BE2.png" alt="直方图2"></p><p><img src="/Data-visualization/20191019-data_visualization_1/%E7%9B%B4%E6%96%B9%E5%9B%BE3.png" alt="直方图3"></p><h2 id="条形图"><a href="#条形图" class="headerlink" title="条形图"></a>条形图</h2><p>条形图：显示类别的特征。在条形图中，长条形的长度表示类别的频数，宽度表示类别。</p><ul><li>Matplotlib</li></ul><p>在 Matplotlib 中，我们使用 plt.bar(x, height) 函数，其中参数 x 代表 x 轴的位置序列，height 是 y 轴的数值序列，也就是柱子的高度。</p><ul><li>Seaborn</li></ul><p>在 Seaborn 中，我们使用 sns.barplot(x=None, y=None, data=None) 函数。其中参数 data 为 DataFrame 类型，x、y 是 data 中的变量。</p><p>例子：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="comment"># 数据准备</span></span><br><span class="line">x = [<span class="string">'Cat1'</span>, <span class="string">'Cat2'</span>, <span class="string">'Cat3'</span>, <span class="string">'Cat4'</span>, <span class="string">'Cat5'</span>]</span><br><span class="line">y = [<span class="number">5</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">7</span>]</span><br><span class="line"><span class="comment"># 用 Matplotlib 画条形图</span></span><br><span class="line">plt.bar(x, y)</span><br><span class="line">plt.show()</span><br><span class="line"><span class="comment"># 用 Seaborn 画条形图</span></span><br><span class="line">sns.barplot(x, y)</span><br></pre></td></tr></table></figure><p>Matplotlib ：</p><p><img src="/Data-visualization/20191019-data_visualization_1/%E6%9D%A1%E5%BD%A2%E5%9B%BE1.png" alt="条形图1"></p><p>Seaborn ：</p><p><img src="/Data-visualization/20191019-data_visualization_1/%E6%9D%A1%E5%BD%A2%E5%9B%BE2.png" alt="条形图2"></p><h2 id="箱线图"><a href="#箱线图" class="headerlink" title="箱线图"></a>箱线图</h2><p>箱线图，又称盒式图，它是在 1977 年提出的，由五个数值点组成：<strong>最大值 (max)</strong>、<strong>最小值 (min)</strong>、<strong>中位数 (median)</strong> 和<strong>上下四分位数</strong> (Q3, Q1)。它可以帮我们分析出数据的<strong>差异性</strong>、<strong>离散程度</strong>和<strong>异常值</strong>等。</p><ul><li>Matplotlib</li></ul><p>在 Matplotlib 中，我们使用 plt.boxplot(x, labels=None) 函数，其中参数 x 代表要绘制箱线图的数据，labels 是缺省值，可以为箱线图添加标签。</p><ul><li>Seaborn</li></ul><p>在 Seaborn 中，我们使用 sns.boxplot(x=None, y=None, data=None) 函数。其中参数 data 为 DataFrame 类型，x、y 是 data 中的变量。</p><p>例子：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 数据准备</span></span><br><span class="line"><span class="comment"># 生成 0-1 之间的 10*4 维度数据</span></span><br><span class="line">data=np.random.normal(size=(<span class="number">10</span>,<span class="number">4</span>)) </span><br><span class="line">lables = [<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'D'</span>]</span><br><span class="line"><span class="comment"># 用 Matplotlib 画箱线图</span></span><br><span class="line">plt.boxplot(data,labels=lables)</span><br><span class="line">plt.show()</span><br><span class="line"><span class="comment"># 用 Seaborn 画箱线图</span></span><br><span class="line">df = pd.DataFrame(data, columns=lables)</span><br><span class="line">sns.boxplot(data=df)</span><br></pre></td></tr></table></figure><p>Matplotlib 箱线图：</p><p><img src="/Data-visualization/20191019-data_visualization_1/%E7%AE%B1%E7%BA%BF%E5%9B%BE1.png" alt="箱线图1"></p><p>Seaborn 箱线图：</p><p><img src="/Data-visualization/20191019-data_visualization_1/%E7%AE%B1%E7%BA%BF%E5%9B%BE2.png" alt="箱线图2"></p><p>待补充！！！</p>]]></content>
      <categories>
        <category>Data visualization</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>数据分析</tag>
        <tag>python</tag>
        <tag>Matplotlib</tag>
        <tag>Seaborn</tag>
      </tags>
  </entry>
  <entry>
    <title>用Pandas进行数据清洗</title>
    <url>/Pandas/20191019-learning_Pandas_2.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>数据分析三剑客之Pandas。</p></blockquote><a id="more"></a><h1 id="数据清理"><a href="#数据清理" class="headerlink" title="数据清理"></a>数据清理</h1><h2 id="检测过滤缺失值"><a href="#检测过滤缺失值" class="headerlink" title="检测过滤缺失值"></a>检测过滤缺失值</h2><p>两种丢失数据：</p><ul><li>None</li><li>np.nan(NaN)</li></ul><h3 id="None"><a href="#None" class="headerlink" title="None"></a>None</h3><p>None是Python自带的，其类型为python object。因此，None不能参与到任何计算中。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas</span><br><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> DataFrame</span><br><span class="line"><span class="comment"># 查看None的数据类型</span></span><br><span class="line">type(<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><h3 id="np-nan（NaN）"><a href="#np-nan（NaN）" class="headerlink" title="np.nan（NaN）"></a>np.nan（NaN）</h3><p>np.nan是浮点类型，能参与到计算中。但计算的结果总是NaN。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看np.nan的数据类型</span></span><br><span class="line">type(np.nan)</span><br></pre></td></tr></table></figure><h3 id="pandas中的None与NaN"><a href="#pandas中的None与NaN" class="headerlink" title="pandas中的None与NaN"></a>pandas中的None与NaN</h3><h3 id="pandas中None与np-nan都视作np-nan"><a href="#pandas中None与np-nan都视作np-nan" class="headerlink" title="pandas中None与np.nan都视作np.nan"></a>pandas中None与np.nan都视作np.nan</h3><p>创建DataFrame</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df = DataFrame(data=np.random.randint(<span class="number">0</span>,<span class="number">100</span>,size=(<span class="number">10</span>,<span class="number">8</span>)))</span><br><span class="line">df</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将某些数组元素赋值为nan</span></span><br><span class="line">df.iloc[<span class="number">1</span>,<span class="number">4</span>] = <span class="literal">None</span></span><br><span class="line">df.iloc[<span class="number">3</span>,<span class="number">6</span>] = <span class="literal">None</span></span><br><span class="line">df.iloc[<span class="number">7</span>,<span class="number">7</span>] = <span class="literal">None</span></span><br><span class="line">df.iloc[<span class="number">3</span>,<span class="number">1</span>] = <span class="literal">None</span></span><br><span class="line">df.iloc[<span class="number">5</span>,<span class="number">5</span>] = np.nan</span><br><span class="line">df</span><br></pre></td></tr></table></figure><h3 id="pandas处理空值操作"><a href="#pandas处理空值操作" class="headerlink" title="pandas处理空值操作"></a>pandas处理空值操作</h3><p>判断函数</p><ul><li><code>isnull()</code></li><li><code>notnull()</code></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.isnull()</span><br><span class="line">df.notnull()</span><br><span class="line">df.isnull().any(axis=<span class="number">1</span>)</span><br><span class="line">df.notnull().all(axis=<span class="number">1</span>)</span><br><span class="line">df.loc[~df.isnull().any(axis=<span class="number">1</span>)]</span><br></pre></td></tr></table></figure><p>df.dropna() 可以选择过滤的是行还是列（默认为行）:axis中0表示行，1表示的列</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">df.dropna(<span class="attribute">axis</span>=0)</span><br></pre></td></tr></table></figure><p>填充函数 Series/DataFrame</p><ul><li><code>fillna()</code>:value和method参数</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df_test = df.fillna(method=<span class="string">'bfill'</span>,axis=<span class="number">1</span>).fillna(method=<span class="string">'ffill'</span>,axis=<span class="number">1</span>)</span><br><span class="line">df_test</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#测试df_test中的哪些列中还有空值</span></span><br><span class="line">df_test.isnull().any(axis=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h2 id="检测过滤重复值"><a href="#检测过滤重复值" class="headerlink" title="检测过滤重复值"></a>检测过滤重复值</h2><p>使用<code>duplicated()</code>函数检测重复的行，返回元素为布尔类型的Series对象，每个元素对应一行，如果该行不是第一次出现，则元素为True</p><ul><li>keep参数：指定保留哪一重复的行数据</li><li>创建具有重复元素行的DataFrame</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> DataFrame</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个df</span></span><br><span class="line">df = DataFrame(data=np.random.randint(<span class="number">0</span>,<span class="number">100</span>,size=(<span class="number">12</span>,<span class="number">7</span>)))</span><br><span class="line"><span class="comment"># 手动将df的某几行设置成相同的内容</span></span><br><span class="line">df.iloc[<span class="number">1</span>] = [<span class="number">6</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">6</span>]</span><br><span class="line">df.iloc[<span class="number">8</span>] = [<span class="number">6</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">6</span>]</span><br><span class="line">df.iloc[<span class="number">5</span>] = [<span class="number">6</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">6</span>]</span><br></pre></td></tr></table></figure><ul><li>使用drop_duplicates()函数删除重复的行<ul><li>drop_duplicates(keep=’first/last’/False)</li></ul></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.drop_duplicates()   <span class="comment"># 默认first</span></span><br><span class="line">df.drop_duplicates(keep=<span class="string">'last'</span>)</span><br><span class="line">df.drop_duplicates(keep=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><h2 id="检测过滤异常值"><a href="#检测过滤异常值" class="headerlink" title="检测过滤异常值"></a>检测过滤异常值</h2><ul><li>得到鉴定异常值的条件</li><li>使用聚合操作对数据异常检测并过滤</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>检测过滤<strong>缺失值</strong><ul><li>dropna</li><li>fillna</li></ul></li><li>检测过滤<strong>重复值</strong><ul><li>drop_duplicated(keep)</li></ul></li><li>检测过滤<strong>异常值</strong><ul><li>得到鉴定异常值的条件</li><li>将异常值对应的行删除</li></ul></li></ul>]]></content>
      <categories>
        <category>Pandas</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>Pandas</tag>
        <tag>数据分析</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Pandas基础</title>
    <url>/Pandas/20191018-learning_Pandas_1.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>数据分析三剑客之Pandas。</p></blockquote><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>在Pandas中有两个核心数据结构：Series 和 DataFrame。Series 理解为一行数据，DataFrame 理解为由 Series 构成的二维表格。</p><h2 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h2><p>Series是一种类似与一维数组的对象，由下面两个部分组成：</p><ul><li>values：一组数据（ndarray类型）</li><li>index：相关的数据索引标签</li></ul><h3 id="Series的创建"><a href="#Series的创建" class="headerlink" title="Series的创建"></a>Series的创建</h3><p>两种创建方式：</p><ul><li>由列表或numpy数组创建</li></ul><p>默认索引为0到N-1的整数型索引</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> Series,DataFrame</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用列表创建Series</span></span><br><span class="line">Series(data=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br></pre></td></tr></table></figure><p>还可以通过设置index参数指定索引</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = Series(data=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],index=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>])</span><br><span class="line">s</span><br><span class="line">s[<span class="number">0</span>]</span><br><span class="line">s[<span class="string">'a'</span>]</span><br><span class="line">s.a</span><br></pre></td></tr></table></figure><h3 id="Series的索引和切片"><a href="#Series的索引和切片" class="headerlink" title="Series的索引和切片"></a>Series的索引和切片</h3><p>可以使用中括号取单个索引（此时返回的是元素类型），或者中括号里<font color="red">一个列表</font>取多个索引（此时返回的是一个Series类型）。</p><p>显式索引：</p><ul><li><p>使用index中的元素作为索引值</p></li><li><p>使用s.loc[]（推荐）:注意，loc中括号中放置的一定是显示索引</p><p>注意，此时是闭区间</p></li></ul><h3 id="Series的基本概念"><a href="#Series的基本概念" class="headerlink" title="Series的基本概念"></a>Series的基本概念</h3><p>可以使用s.head(),tail()分别查看前n个和后n个值</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = Series(data=[<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>])</span><br><span class="line">s.head(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p><strong>对Series元素进行去重</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s.unique()</span><br></pre></td></tr></table></figure><p>当索引没有对应的值时，可能出现缺失数据显示NaN（not a number）的情况</p><ul><li>使得两个Series进行相加</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],index=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>])</span><br><span class="line">s2 = Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],index=[<span class="string">'a'</span>,<span class="string">'d'</span>,<span class="string">'c'</span>])</span><br><span class="line">s = s1 + s2</span><br><span class="line">s</span><br></pre></td></tr></table></figure><p>可以使用pd.isnull()，pd.notnull()，或s.isnull(),notnull()函数检测缺失数据</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s[[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>]]</span><br><span class="line">s[[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>]]</span><br><span class="line">s[[<span class="literal">True</span>,<span class="literal">False</span>,<span class="literal">True</span>,<span class="literal">False</span>]]</span><br><span class="line">s.isnull()</span><br><span class="line">s.notnull()</span><br><span class="line"><span class="comment"># 将Series中的空值直接进行了清洗</span></span><br><span class="line">s[s.notnull()]</span><br></pre></td></tr></table></figure><p><strong>Series之间的运算</strong></p><ul><li>在运算中自动对齐不同索引的数据</li><li>如果索引不对应，则补NaN</li></ul><h2 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a>DataFrame</h2><p>DataFrame是一个【表格型】的数据结构。DataFrame由按一定顺序排列的多列数据组成。设计初衷是将Series的使用场景从一维拓展到多维。DataFrame既有行索引，也有列索引。</p><ul><li>行索引：index</li><li>列索引：columns</li><li>值：values</li></ul><h3 id="DataFrame的创建"><a href="#DataFrame的创建" class="headerlink" title="DataFrame的创建"></a>DataFrame的创建</h3><p>最常用的方法是传递一个字典来创建。DataFrame以字典的键作为每一【列】的名称，以字典的值（一个数组）作为每一列。</p><p>此外，DataFrame会自动加上每一行的索引。</p><p>使用字典创建的DataFrame后，则columns参数将不可被使用。</p><p>同Series一样，若传入的列与字典的键不匹配，则相应的值为NaN。</p><p>使用ndarray创建DataFrame</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df = DataFrame(data=np.random.randint(<span class="number">0</span>,<span class="number">100</span>,size=(<span class="number">3</span>,<span class="number">4</span>)),index=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>],columns=[<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'D'</span>])</span><br><span class="line">df</span><br></pre></td></tr></table></figure><p>DataFrame属性：values、columns、index、shape</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.values</span><br><span class="line">df.columns</span><br><span class="line">df.index</span><br><span class="line">df.shape</span><br></pre></td></tr></table></figure><p>使用dict创建DataFrame</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dic = &#123;</span><br><span class="line">    <span class="string">'zhangsan'</span>:[<span class="number">99</span>,<span class="number">99</span>,<span class="number">99</span>,<span class="number">99</span>],</span><br><span class="line">    <span class="string">'lisi'</span>:[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">&#125;</span><br><span class="line">df = DataFrame(data=dic,index=[<span class="string">'语文'</span>,<span class="string">'数学'</span>,<span class="string">'英语'</span>,<span class="string">'理综'</span>])</span><br><span class="line">df</span><br></pre></td></tr></table></figure><h3 id="DataFrame的索引"><a href="#DataFrame的索引" class="headerlink" title="DataFrame的索引"></a>DataFrame的索引</h3><p>① 对列进行索引</p><ul><li>通过类似字典的方式 df[‘q’]</li><li>通过属性的方式 df.q</li></ul><p>可以将DataFrame的列获取为一个Series。返回的Series拥有原DataFrame相同的索引，且name属性也已经设置好了，就是相应的列名。</p><p>② 对行进行索引</p><ul><li><p>使用.loc[]加index来进行行索引</p></li><li><p>使用.iloc[]加整数来进行行索引</p><p>同样返回一个Series，index为原来的columns。</p></li></ul><p>③ 对元素索引的方法</p><ul><li>使用列索引</li><li>使用行索引(iloc[3,1] or loc[‘C’,’q’]) 行索引在前，列索引在后</li></ul><h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3><p>【注意】 直接用中括号时：</p><ul><li>索引表示的是列索引</li><li>切片表示的是行切片</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df[<span class="number">0</span>:<span class="number">2</span>]  <span class="comment"># 行切片</span></span><br></pre></td></tr></table></figure><p>在loc和iloc中使用切片(切列) ： df.loc[‘B’:’C’,’丙’:’丁’]</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.iloc[:,<span class="number">0</span>:<span class="number">1</span>]</span><br></pre></td></tr></table></figure><h3 id="DataFrame的运算"><a href="#DataFrame的运算" class="headerlink" title="DataFrame的运算"></a>DataFrame的运算</h3><p>DataFrame之间的运算</p><p>同Series一样：</p><ul><li>在运算中自动对齐不同索引的数据</li><li>如果索引不对应，则补NaN</li></ul>]]></content>
      <categories>
        <category>Pandas</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>Pandas</tag>
        <tag>数据分析</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>数据分析学习目录</title>
    <url>/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/20191016-data_analysis_1.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>数据分析学习目录</p></blockquote><a id="more"></a><h1 id="基础篇"><a href="#基础篇" class="headerlink" title="基础篇"></a>基础篇</h1><h2 id="Python科学计算：用NumPy快速处理数据"><a href="#Python科学计算：用NumPy快速处理数据" class="headerlink" title="Python科学计算：用NumPy快速处理数据"></a>Python科学计算：用NumPy快速处理数据</h2><h2 id="Python科学计算：Pandas"><a href="#Python科学计算：Pandas" class="headerlink" title="Python科学计算：Pandas"></a>Python科学计算：Pandas</h2><h2 id="绘图与可视化：Matplotlib"><a href="#绘图与可视化：Matplotlib" class="headerlink" title="绘图与可视化：Matplotlib"></a>绘图与可视化：Matplotlib</h2>]]></content>
      <categories>
        <category>数据分析</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>数据分析</tag>
      </tags>
  </entry>
  <entry>
    <title>用NumPy快速处理数据</title>
    <url>/Numpy/20191016-learning_Numpy_1.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>本篇介绍使用NumPy快速处理数据。</p></blockquote><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><ul><li><p>Numpy（Numerical Python）是Python语言的一个扩展程序库，支持大量的维度数组与矩阵运算，此外也针对数组运算提供大量的数学函数库。</p></li><li><p>NumPy 所提供的数据结构是 Python 数据分析的基础。</p></li></ul><h2 id="列表与数组"><a href="#列表与数组" class="headerlink" title="列表与数组"></a>列表与数组</h2><p>​ 标准的 Python 中，用列表 list 保存数组的数值。由于列表中的元素可以是<strong>任意的对象</strong>，所以列表中 list 保存的是<strong>对象的指针</strong>。虽然在 Python 编程中隐去了指针的概念，但是数组有指针，Python 的列表 list 其实就是数组。这样如果我要保存一个简单的数组 [0,1,2]，就需要有 3 个指针和 3 个整数的对象，这样对于 Python 来说是非常不经济的，浪费了内存和计算时间。</p><p>​ 为什么要用 NumPy 数组结构而不是 Python 本身的列表 list？这是因为列表 list 的元素在系统内存中是分散存储的，而 NumPy 数组存储在一个均匀连续的内存块中。这样数组计算遍历所有的元素，不像列表 list 还需要对内存地址进行查找，从而节省了计算资源。</p><p>​ 另外在内存访问模式中，缓存会直接把字节块从 RAM 加载到 CPU 寄存器中。因为数据连续的存储在内存中，NumPy 直接利用现代 CPU 的矢量化指令计算，加载寄存器中的多个连续浮点数。另外 NumPy 中的矩阵计算可以采用多线程的方式，充分利用多核 CPU 计算资源，大大提升了计算效率。</p><p>​ 当然除了使用 NumPy 外，你还需要一些技巧来提升内存和提高计算资源的利用率。一个重要的规则就是：<strong>避免采用隐式拷贝，而是采用就地操作的方式</strong>。举个例子，如果我想让一个数值 x 是原来的两倍，可以直接写成 <code>x*=2</code>，而不要写成 <code>y=x*2</code>。</p><h2 id="ndarray-与-ufunc"><a href="#ndarray-与-ufunc" class="headerlink" title="ndarray 与 ufunc"></a>ndarray 与 ufunc</h2><p>在 NumPy 里有两个重要的对象：</p><ul><li>ndarray（N-dimensional array object）解决了多维数组问题</li><li>ufunc（universal function object）包含对数组进行处理的函数。</li></ul><h2 id="ndarray-对象"><a href="#ndarray-对象" class="headerlink" title="ndarray 对象"></a>ndarray 对象</h2><p>​ ndarray 实际上是多维数组的含义。在 NumPy 数组中，维数称为秩（rank），一维数组的秩为 1，二维数组的秩为 2，以此类推。在 NumPy 中，每一个线性的数组称为一个轴（axes），其实秩就是描述轴的数量。</p><p><strong>创建数组</strong></p><p><strong>结构数组</strong></p><h2 id="ufunc-运算"><a href="#ufunc-运算" class="headerlink" title="ufunc 运算"></a>ufunc 运算</h2><p>​ ufunc 是 universal function 的缩写，是不是听起来就感觉功能非常强大？确如其名，它能对数组中每个元素进行函数操作。NumPy 中很多 ufunc 函数计算速度非常快，因为都是采用 C 语言实现的。</p><p><strong>连续数组的创建</strong></p><p><strong>算术运算</strong></p><p><strong>统计函数</strong></p><h2 id="Numpy-排序"><a href="#Numpy-排序" class="headerlink" title="Numpy 排序"></a>Numpy 排序</h2><h2 id="创建ndarray"><a href="#创建ndarray" class="headerlink" title="创建ndarray"></a>创建ndarray</h2><h3 id="使用np-array-创建"><a href="#使用np-array-创建" class="headerlink" title="使用np.array()创建"></a>使用np.array()创建</h3><p><strong>一维数组创建</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">arr = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line">arr</span><br></pre></td></tr></table></figure><p><strong>二维数组创建</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]])</span><br><span class="line">arr = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5.123</span>,<span class="number">6</span>]])</span><br><span class="line">arr</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>numpy默认ndarray的所有元素的类型是相同的</li><li>如果传进来的列表中包含不同的类型，则统一为同一类型，优先级：str&gt;float&gt;int</li></ul><h3 id="使用np的routines函数创建"><a href="#使用np的routines函数创建" class="headerlink" title="使用np的routines函数创建"></a>使用np的routines函数创建</h3><p><code>np.linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None)</code> 等差数列</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.linspace(<span class="number">0</span>,<span class="number">100</span>,num=<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p><code>np.arange([start, ]stop, [step, ]dtype=None)</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.arange(<span class="number">0</span>,<span class="number">100</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p><code>np.random.randint(low, high=None, size=None, dtype=&#39;l&#39;)</code></p><ul><li>时间种子（随机因子）：无时无刻都在变化的值（系统时间）</li><li>固定随机因子就可以固定随机函数的随机性</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.random.seed(<span class="number">90</span>)</span><br><span class="line">np.random.randint(<span class="number">0</span>,<span class="number">100</span>,size=(<span class="number">3</span>,<span class="number">5</span>))</span><br></pre></td></tr></table></figure><p><code>np.random.random(size=None)</code></p><p>生成0到1的随机数，<strong>左闭右开</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.random.seed(<span class="number">3</span>)</span><br><span class="line">np.random.random(size=(<span class="number">3</span>,<span class="number">4</span>))</span><br></pre></td></tr></table></figure><h2 id="ndarray的属性"><a href="#ndarray的属性" class="headerlink" title="ndarray的属性"></a>ndarray的属性</h2><p>4个必记参数：</p><ul><li>ndim：维度</li><li>shape：形状（各维度的长度）</li><li>size：总长度</li><li>dtype：元素类型</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">type(img_arr) 		<span class="comment"># numpy.ndarray</span></span><br><span class="line">img_arr.shape		</span><br><span class="line">arr.shape			</span><br><span class="line">arr.size</span><br><span class="line">arr.dtype</span><br><span class="line">arr.ndim</span><br></pre></td></tr></table></figure><h2 id="ndarray的基本操作"><a href="#ndarray的基本操作" class="headerlink" title="ndarray的基本操作"></a>ndarray的基本操作</h2><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr = np.random.randint(<span class="number">0</span>,<span class="number">100</span>,size=(<span class="number">5</span>,<span class="number">8</span>))	<span class="comment"># 创建5行8列的数组</span></span><br><span class="line"></span><br><span class="line">arr[<span class="number">0</span>]			<span class="comment"># 取第0行</span></span><br><span class="line">arr[[<span class="number">0</span>,<span class="number">1</span>]]		<span class="comment"># 取一、二两行</span></span><br><span class="line">arr[<span class="number">1</span>,[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]]	<span class="comment"># 取一行中的第2，3，4列</span></span><br></pre></td></tr></table></figure><h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr = np.random.randint(<span class="number">0</span>,<span class="number">100</span>,size=(<span class="number">5</span>,<span class="number">8</span>))	<span class="comment"># 创建5行8列的数组</span></span><br><span class="line"><span class="comment"># 获取二维数组的前两行</span></span><br><span class="line">arr[<span class="number">0</span>:<span class="number">2</span>]			</span><br><span class="line"><span class="comment"># 获取二维数组前两列</span></span><br><span class="line">arr[:,<span class="number">0</span>:<span class="number">2</span>]  		 	<span class="comment"># arr[hang,lie]</span></span><br><span class="line"><span class="comment"># 获取二维数组前两行和前两列数据</span></span><br><span class="line">arr[<span class="number">0</span>:<span class="number">2</span>,<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line"><span class="comment"># 将数组的行倒序</span></span><br><span class="line">arr[::<span class="number">-1</span>,:]       		</span><br><span class="line"><span class="comment"># 列倒序</span></span><br><span class="line">arr[:,::<span class="number">-1</span>]</span><br><span class="line"><span class="comment">#全部倒序</span></span><br><span class="line">arr[::<span class="number">-1</span>,::<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><h3 id="变形"><a href="#变形" class="headerlink" title="变形"></a>变形</h3><p>使用arr.reshape()函数，注意参数是一个tuple！</p><p>基本使用</p><ol><li>将一维数组变形成多维数组</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr = np.random.randint(<span class="number">0</span>,<span class="number">100</span>,size=(<span class="number">16</span>))</span><br><span class="line">arr.reshape((<span class="number">2</span>,<span class="number">8</span>))</span><br></pre></td></tr></table></figure><ol start="2"><li>将多维数组变形成一维数组</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr = np.random.randint(<span class="number">0</span>,<span class="number">100</span>,size=(<span class="number">4</span>,<span class="number">4</span>))</span><br><span class="line">arr.reshape(<span class="number">16</span>)</span><br></pre></td></tr></table></figure><h3 id="级联"><a href="#级联" class="headerlink" title="级联"></a>级联</h3><p><code>np.concatenate()</code></p><ul><li>一维，二维，多维数组的级联，实际操作中级联多个二维数组</li></ul><p>级联需要注意的点：</p><ul><li>级联的参数是列表：一定要加中括号或小括号</li><li>维度必须相同</li><li>形状相符：在维度保持一致的前提下，如果进行横向（axis=1）级联，必须保证进行级联的数组行数保持一致。如果进行纵向（axis=0）级联，必须保证进行级联的数组列数保持一致。</li><li>可通过axis参数改变级联的方向</li></ul><p>例子：</p><ul><li>合并两张照片</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用matplotlib.pyplot获取一个numpy数组，数据来源于一张图片</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">img_arr = plt.imread(<span class="string">'./cat.jpg'</span>)</span><br><span class="line"></span><br><span class="line">img = np.concatenate((img_arr,img_arr),axis=<span class="number">1</span>)    <span class="comment"># axis=1 合并列/横向级联</span></span><br><span class="line">plt.imshow(img)</span><br><span class="line">img = np.concatenate((img_arr,img_arr),axis=<span class="number">0</span>)    <span class="comment"># axis=0 合并行/纵向级联</span></span><br><span class="line">plt.imshow(img)</span><br></pre></td></tr></table></figure><ul><li>制作九宫格图片</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr_col = np.concatenate((img_arr,img_arr,img_arr),axis=<span class="number">1</span>)</span><br><span class="line">plt.imshow(arr_col)</span><br><span class="line">arr_row = np.concatenate((arr_col,arr_col,arr_col),axis=<span class="number">0</span>)</span><br><span class="line">plt.imshow(arr_row)</span><br></pre></td></tr></table></figure><h2 id="ndarray的聚合操作"><a href="#ndarray的聚合操作" class="headerlink" title="ndarray的聚合操作"></a>ndarray的聚合操作</h2><h3 id="求和np-sum"><a href="#求和np-sum" class="headerlink" title="求和np.sum"></a>求和np.sum</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr = np.random.randint(<span class="number">0</span>,<span class="number">100</span>,size=(<span class="number">5</span>,<span class="number">8</span>))</span><br><span class="line">arr.sum()              <span class="comment"># 所有元素之和</span></span><br><span class="line">arr.sum(axis=<span class="number">0</span>)        <span class="comment"># 合并列</span></span><br><span class="line">arr.sum(axis=<span class="number">1</span>)        <span class="comment"># 合并行</span></span><br></pre></td></tr></table></figure><h3 id="最大最小值：np-max-np-min"><a href="#最大最小值：np-max-np-min" class="headerlink" title="最大最小值：np.max/ np.min"></a>最大最小值：np.max/ np.min</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr.max()</span><br><span class="line">arr.min()</span><br></pre></td></tr></table></figure><h3 id="平均值：np-mean"><a href="#平均值：np-mean" class="headerlink" title="平均值：np.mean()"></a>平均值：np.mean()</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr.mean(axis=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h3 id="其他聚合操作"><a href="#其他聚合操作" class="headerlink" title="其他聚合操作"></a>其他聚合操作</h3><table><thead><tr><th>Function Name</th><th>NaN-safe Version</th><th>Description</th></tr></thead><tbody><tr><td>np.sum</td><td>NaN-safe Version</td><td>NaN-safe Version</td></tr><tr><td>np.prod</td><td>np.nanprod</td><td>Compute product of elements</td></tr><tr><td>np.mean</td><td>np.nanmean</td><td>Compute mean of elements</td></tr><tr><td>np.std</td><td>np.nanstd</td><td>Compute standard deviation</td></tr><tr><td>np.var</td><td>np.nanvar</td><td>Compute variance</td></tr><tr><td>np.min</td><td>np.nanmin</td><td>Find minimum value</td></tr><tr><td>np.max</td><td>np.nanmax</td><td>Find maximum value</td></tr><tr><td>np.argmin</td><td>np.nanargmin</td><td>Find index of minimum value</td></tr><tr><td>np.argmax</td><td>np.nanargmax</td><td>Find index of maximum value</td></tr><tr><td>np.median</td><td>np.nanmedian</td><td>Compute median of elements</td></tr><tr><td>np.percentile</td><td>np.nanpercentile</td><td>Compute rank-based statistics of elements</td></tr><tr><td>np.any</td><td>N/A</td><td>Evaluate whether any elements are true</td></tr><tr><td>np.all</td><td>N/A</td><td>Evaluate whether all elements are true</td></tr><tr><td>np.power</td><td></td><td>幂运算</td></tr></tbody></table><h2 id="ndarray的排序"><a href="#ndarray的排序" class="headerlink" title="ndarray的排序"></a>ndarray的排序</h2><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p>np.sort()与ndarray.sort()都可以，但有区别：</p><ul><li>np.sort()不改变输入</li><li>ndarray.sort()本地处理，不占用空间，但改变输入</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.sort(arr,axis=<span class="number">0</span>)		<span class="comment"># 按行排序</span></span><br><span class="line">np.sort(arr,axis=<span class="number">1</span>)		<span class="comment"># 按列排序</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Numpy</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>数据分析</tag>
        <tag>python</tag>
        <tag>Numpy</tag>
      </tags>
  </entry>
  <entry>
    <title>Jupyter Notebook的初识</title>
    <url>/Jupyter-Notebook/20191008-Jupyter-Notebook-1.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>本篇介绍Jupyter Notebook的概念以及常用快捷方式。</p></blockquote><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><blockquote><p>Jupyter Notebook也称为 Ipython notebook是一种Web应用程序，您可以在其中创建和共享包含实时<strong>代码</strong>，<strong>方程式</strong>，<strong>可视化效果</strong>以及<strong>文本</strong>的文档，Jupyter Notebook是帮助您获得所需的数据科学技能的理想工具之一。</p></blockquote><p>特色在于cell：</p><p>cell的先后顺序不区分，区分cell执行顺序：</p><ul><li>理解上：这一个ipy文件在内存中对应的一块缓存，当cell执行后，其它cell都可以访问。</li></ul><p>推荐阅读 <a href="https://cloud.tencent.com/developer/article/1031448" target="_blank" rel="noopener">关于Jupyter Notebook的28个技巧</a></p><h1 id="快捷键——更具生产力！"><a href="#快捷键——更具生产力！" class="headerlink" title="快捷键——更具生产力！"></a>快捷键——更具生产力！</h1><h2 id="两种模式"><a href="#两种模式" class="headerlink" title="两种模式"></a>两种模式</h2><h3 id="键盘输入模式"><a href="#键盘输入模式" class="headerlink" title="键盘输入模式"></a>键盘输入模式</h3><p>Jupyter Notebooks 提供了两种不同的键盘输入模式——命令和编辑：</p><ul><li>命令模式是将键盘和笔记本层面的命令绑定起来，并且由带有蓝色左边距的灰色单元边框表示。</li><li>编辑模式让你可以在活动单元中输入文本（或代码），用绿色单元边框表示。</li></ul><figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line">使用 Esc 和 <span class="keyword">Enter</span> 在命令模式和编辑模式之间跳跃。</span><br></pre></td></tr></table></figure><h3 id="cell的两种模式"><a href="#cell的两种模式" class="headerlink" title="cell的两种模式"></a>cell的两种模式</h3><p>code模式 与 markdown 模式</p><h2 id="命令行模式-按-Esc-生效-编辑快捷键"><a href="#命令行模式-按-Esc-生效-编辑快捷键" class="headerlink" title="命令行模式(按 Esc 生效)编辑快捷键"></a>命令行模式(按 Esc 生效)编辑快捷键</h2><ol><li><p>运行选中的cell：</p><figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line">Ctrl+<span class="keyword">Enter</span></span><br></pre></td></tr></table></figure></li><li><p>运行代码块并选择下面的代码块</p><figure class="highlight dos"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Shift</span>+Enter</span><br></pre></td></tr></table></figure></li><li><p>运行cell并在下面添加一个新单元：</p><figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line">Alt + <span class="keyword">Enter</span></span><br></pre></td></tr></table></figure></li><li><p>插入cell：</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span> 会在活跃单元之上插入一个新的单元，<span class="selector-tag">b</span> 会在活跃单元之下插入一个新单元。</span><br></pre></td></tr></table></figure></li><li><p>删除cell：</p><figure class="highlight excel"><table><tr><td class="code"><pre><span class="line">x 会删除该<span class="built_in">cell</span>， 连续按两次d，也会删除该<span class="built_in">cell</span></span><br></pre></td></tr></table></figure></li><li><p>撤销被删除的cell：</p><figure class="highlight excel"><table><tr><td class="code"><pre><span class="line">z 会撤销删除的<span class="built_in">cell</span></span><br></pre></td></tr></table></figure></li><li><p>将 cell 变成 markdown 模式：</p><figure class="highlight excel"><table><tr><td class="code"><pre><span class="line">m 会将该<span class="built_in">cell</span>变成markdown模式</span><br></pre></td></tr></table></figure></li><li><p>将 cell 变成 code 模式：</p><figure class="highlight excel"><table><tr><td class="code"><pre><span class="line">y 会将该<span class="built_in">cell</span>变成<span class="built_in">code</span>模式</span><br></pre></td></tr></table></figure></li><li><p>选择多个cell并进行合并：</p><figure class="highlight dos"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Shift</span> + 上或下箭头可选择多个单元。在多选模式时，按住 <span class="built_in">Shift</span> + M 可合并你的选择。</span><br></pre></td></tr></table></figure></li><li><p>查找和替换：</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">f</span> 会弹出「查找和替换」菜单。</span><br></pre></td></tr></table></figure></li><li><p>查看所有快捷键：</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">h</span> 会弹出所有快捷键</span><br></pre></td></tr></table></figure></li></ol><p>完整如下:</p><p>![命令模式下的快捷键](Jupyter Notebook的初识/命令模式下的快捷键.png)</p><p>当然了，点击编辑快捷键，我们可以自定义快捷键。</p><h2 id="编辑模式下的快捷键"><a href="#编辑模式下的快捷键" class="headerlink" title="编辑模式下的快捷键"></a>编辑模式下的快捷键</h2><ol><li><p>到达单元起始位置/结尾：</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">Ctrl</span> <span class="string">+ Home</span></span><br><span class="line"><span class="attr">Ctrl</span> <span class="string">+ End</span></span><br></pre></td></tr></table></figure></li><li><p>打开帮助文档：</p><figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">Shift + <span class="literal">Tab</span></span><br></pre></td></tr></table></figure></li><li><p>跳到单词右边：</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Ctrl</span> + 右</span><br></pre></td></tr></table></figure></li><li><p>打开命令面板：</p><figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">Ctrl + <span class="built_in">Shift</span> + F</span><br></pre></td></tr></table></figure></li></ol><p>完整如下:</p><p>![编辑模式下的快捷键](Jupyter Notebook的初识/编辑模式下的快捷键.png)</p><h1 id="安装扩展"><a href="#安装扩展" class="headerlink" title="安装扩展"></a>安装扩展</h1><p>在使用中还是感觉有些缺乏，就比如说格式化代码，高亮代码等等。对于这些情况，我们需要添加扩展。扩展/附加组件是一种非常有生产力的方式，能帮你提升在 Jupyter Notebooks 上的生产力。这里安装的是 Nbextensions。</p><p>第一步：从 pip 安装它：</p><p>如果是多版本或环境较多不容易确定的时候，可以打开anaconda，在Environments中选择环境并点击绿三角选择 Open Terminal</p><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">pip <span class="keyword">install</span> jupyter_contrib_nbextensions</span><br></pre></td></tr></table></figure><p>第二步：安装相关的 JavaScript 和 CSS 文件：</p><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">jupyter </span>contrib nbextension <span class="keyword">install </span>–user</span><br></pre></td></tr></table></figure><p>完成这个工作之后，你会在你的 Jupyter Notebook 主页顶部看见一个 Nbextensions 选项卡。点击一下，你就能看到很多可在你的项目中使用的扩展。</p><p>note：如果不成功，第二部改为：</p><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">jupyter contrib nbextension install --<span class="keyword">user</span> <span class="title">--skip-running-check</span></span><br></pre></td></tr></table></figure><p>第三步：安装完成后，重新启动jupyter notebook，“Nbextensions”出现在导航栏中。</p><p>![nb扩展](Jupyter Notebook的初识/nb扩展.png)</p><p>要启用某个扩展，只需勾选它即可。</p>]]></content>
      <categories>
        <category>Jupyter Notebook</category>
      </categories>
      <tags>
        <tag>Jupyter Notebook</tag>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>爬取存在js加密与js混淆的页面</title>
    <url>/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/20191005-Web_Spider_11.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>本文以爬取中国空气质量在线监测分析平台为例进行分析。</p></blockquote><a id="more"></a><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><ul><li><p>地址: <code>https://www.aqistudy.cn/html/city_detail.html</code></p></li><li><p>爬取气象数据</p></li></ul><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="①"><a href="#①" class="headerlink" title="①"></a>①</h3><p>在页面中更换查找条件（城市）可以让抓包工具捕获到我们想要的数据包。而每个按钮只是把数据进行展示，并不会发起请求。</p><p><img src="/网络爬虫/20191005-Web_Spider_11/1.%E5%8F%91%E9%80%81ajax%E8%AF%B7%E6%B1%82.png" alt="1.发送ajax请求"></p><h3 id="②"><a href="#②" class="headerlink" title="②"></a>②</h3><p>apistudyapi.php 该数据包就是我们最终定位到的爬取数据对应的数据包</p><ul><li>该数据包中可以提取到url和请求参数（请求参数不正常要么是动态加载的，要么是加密的，还可能是动态且加密的）（刷新后参数在变化也没在页面源码中找到，推测是动态且加密的）</li><li>响应数据是经过加密的密文</li></ul><p><img src="/网络爬虫/20191005-Web_Spider_11/2.%E5%8F%91%E9%80%81%E7%9A%84%E5%8F%82%E6%95%B0%E4%B8%8E%E5%93%8D%E5%BA%94%E6%95%B0%E6%8D%AE%E6%98%AF%E5%8A%A0%E5%AF%86%E8%BF%87%E7%9A%84.png" alt="2.发送的参数与响应数据是加密过的"></p><h3 id="③"><a href="#③" class="headerlink" title="③"></a>③</h3><p>当修改查询条件后，点击查询按钮后，发起 ajax 请求，url也没有变化，该请求可以请求到 apistudyapi.php 数据包</p><ul><li>想要捕获的数据是可以通过点击搜索按钮生成的，所以目标移动到这个按钮对应的事件。</li></ul><p><img src="/网络爬虫/20191005-Web_Spider_11/3.%E6%8C%89%E9%92%AE%E5%AF%B9%E5%BA%94%E7%9A%84%E4%BA%8B%E4%BB%B6.png" alt="3.按钮对应的事件"></p><h3 id="④"><a href="#④" class="headerlink" title="④"></a>④</h3><p>通过火狐浏览器的开发者工具可以找到搜索按钮绑定的点击事件对应的事件函数 getData()</p><h3 id="⑤"><a href="#⑤" class="headerlink" title="⑤"></a>⑤</h3><p>分析 getData():</p><ul><li>在函数定义中找关于ajax请求相关的代码（含有url，解密方式）</li><li>type这个变量可以为 HOUR</li><li>虽然没有找到ajax请求但是找到另外两个，getAQIData();getWeatherData();</li></ul><p><img src="/网络爬虫/20191005-Web_Spider_11/4.getData%E5%AE%9A%E4%B9%89.png" alt="4.getData定义"></p><h3 id="⑥"><a href="#⑥" class="headerlink" title="⑥"></a>⑥</h3><p>分析getAQIData(); getWeatherData();</p><p>这两个函数的实现除了method变量不同，剩下的都一致</p><ul><li>method = (GETDETAIL或者是GETCITYWEATHER)</li><li>在这两个函数的实现中也没有发现ajax请求对应的代码，但发现了一个叫做getServerData这个函数的实现中，猜测在这个getServerData包含着ajax请求<ul><li>getServerData(method, param, 匿名函数， 0.5)</li><li>param是字典，有4组键值对（city,type,starttime,endtime）</li></ul></li></ul><p><img src="/网络爬虫/20191005-Web_Spider_11/5.getAQIData%E4%B8%8EgetWeatherData.png" alt="getAQIData与getWeatherData"></p><h3 id="⑦"><a href="#⑦" class="headerlink" title="⑦"></a>⑦</h3><p>分析getServerData函数的实现</p><ul><li>最终通过抓包工具的全局搜索定位到了该函数的实现，但是实现的js代码被加密了，该种形式的加密被称为js混淆。</li></ul><p><img src="/网络爬虫/20191005-Web_Spider_11/6.js%E6%B7%B7%E6%B7%86.png" alt="6.js混淆"></p><p>如何破解js混淆</p><ul><li>地址：<code>http://www.bm8.com.cn/jsConfusion/</code></li></ul><p>在该函数的实现中终于找到了ajax请求对应的代码：</p><ul><li>ajax请求的url</li><li>ajax请求方式</li><li>请求参数的来源：getParam(method, object); object 是前面的param是字典</li><li>对加密的响应数据解密：decodeData(密文)</li></ul><h3 id="⑧"><a href="#⑧" class="headerlink" title="⑧"></a>⑧</h3><p>基于python模拟js代码</p><ul><li>PyExecJS模块可以让python模拟执行js代码</li><li>环境安装：<ul><li>pip install PyExecJS</li><li>在本机安装node.js的开发环境</li></ul></li></ul><ol><li>将解密后的代码写入本地，名为 test.js</li></ol><ol start="2"><li>获取ajax请求的动态变化且加密的请求参数（d：xxx）</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#获取ajax请求的动态变化且加密的请求参数（d：xxx）</span></span><br><span class="line"><span class="keyword">import</span> execjs</span><br><span class="line">node = execjs.get()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Params</span></span><br><span class="line">method = <span class="string">'GETCITYWEATHER'</span></span><br><span class="line">city = <span class="string">'北京'</span></span><br><span class="line">type = <span class="string">'HOUR'</span></span><br><span class="line">start_time = <span class="string">'2018-01-25 00:00:00'</span></span><br><span class="line">end_time = <span class="string">'2018-01-25 23:00:00'</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># Compile javascript</span></span><br><span class="line">file = <span class="string">'test.js'</span></span><br><span class="line">ctx = node.compile(open(file,encoding=<span class="string">'utf-8'</span>).read())</span><br><span class="line"></span><br><span class="line"><span class="comment"># Get params</span></span><br><span class="line">js = <span class="string">'getPostParamCode("&#123;0&#125;", "&#123;1&#125;", "&#123;2&#125;", "&#123;3&#125;", "&#123;4&#125;")'</span>.format(method, city, type, start_time, end_time)</span><br><span class="line">params = ctx.eval(js)</span><br><span class="line">print(params)</span><br></pre></td></tr></table></figure><ol start="3"><li>携带捕获到请求参数进行请求</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#携带捕获到请求参数进行请求</span></span><br><span class="line"><span class="keyword">import</span> execjs</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">node = execjs.get()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Params</span></span><br><span class="line">method = <span class="string">'GETCITYWEATHER'</span></span><br><span class="line">city = <span class="string">'北京'</span></span><br><span class="line">type = <span class="string">'HOUR'</span></span><br><span class="line">start_time = <span class="string">'2018-01-25 00:00:00'</span></span><br><span class="line">end_time = <span class="string">'2018-01-25 23:00:00'</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># Compile javascript</span></span><br><span class="line">file = <span class="string">'test.js'</span></span><br><span class="line">ctx = node.compile(open(file,encoding=<span class="string">'utf-8'</span>).read())</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Get params</span></span><br><span class="line">js = <span class="string">'getPostParamCode("&#123;0&#125;", "&#123;1&#125;", "&#123;2&#125;", "&#123;3&#125;", "&#123;4&#125;")'</span>.format(method, city, type, start_time, end_time)</span><br><span class="line">params = ctx.eval(js)</span><br><span class="line"></span><br><span class="line"><span class="comment">#发起post请求</span></span><br><span class="line">url = <span class="string">'https://www.aqistudy.cn/apinew/aqistudyapi.php'</span></span><br><span class="line">response_text = requests.post(url, data=&#123;<span class="string">'d'</span>: params&#125;).text</span><br><span class="line">print(response_text)</span><br></pre></td></tr></table></figure><ol start="4"><li>对捕获到的加密的响应数据进行解密</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 对捕获到的加密的响应数据进行解密</span></span><br><span class="line"><span class="keyword">import</span> execjs</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">node = execjs.get()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Params</span></span><br><span class="line">method = <span class="string">'GETDETAIL'</span></span><br><span class="line">city = <span class="string">'北京'</span></span><br><span class="line">type = <span class="string">'HOUR'</span></span><br><span class="line">start_time = <span class="string">'2018-01-25 00:00:00'</span></span><br><span class="line">end_time = <span class="string">'2018-01-25 23:00:00'</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># Compile javascript</span></span><br><span class="line">file = <span class="string">'test.js'</span></span><br><span class="line">ctx = node.compile(open(file,encoding=<span class="string">'utf-8'</span>).read())</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Get params</span></span><br><span class="line">js = <span class="string">'getPostParamCode("&#123;0&#125;", "&#123;1&#125;", "&#123;2&#125;", "&#123;3&#125;", "&#123;4&#125;")'</span>.format(method, city, type, start_time, end_time)</span><br><span class="line">params = ctx.eval(js)</span><br><span class="line"></span><br><span class="line"><span class="comment">#发起post请求</span></span><br><span class="line">url = <span class="string">'https://www.aqistudy.cn/apinew/aqistudyapi.php'</span></span><br><span class="line">response_text = requests.post(url, data=&#123;<span class="string">'d'</span>: params&#125;).text</span><br><span class="line"></span><br><span class="line"><span class="comment">#对加密的响应数据进行解密</span></span><br><span class="line">js = <span class="string">'decodeData("&#123;0&#125;")'</span>.format(response_text)</span><br><span class="line">decrypted_data = ctx.eval(js)</span><br><span class="line">print(decrypted_data)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>网络爬虫</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>python</tag>
        <tag>网络爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Scrapy框架的增量式爬虫</title>
    <url>/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/20191003-Web_Spider_10.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>本篇介绍监测网站数据变化的增量式爬虫。</p></blockquote><a id="more"></a><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>概念：监测</p><p>核心技术：去重</p><ul><li>基于 redis 的一个去重</li></ul><p>适合使用增量式的网站：</p><ul><li>基于深度爬取的<ul><li>对爬取过的页面<strong>url</strong>进行一个记录（记录表）</li></ul></li><li>基于非深度爬取的<ul><li>记录表：爬取过的数据对应的数据指纹<ul><li>数据指纹：原始数据的一组唯一标识</li><li>数据 –&gt; 数据指纹 –&gt; 库中查询</li><li>hashlib</li></ul></li></ul></li></ul><p>所谓的记录表是以怎样的形式存在于哪？</p><ul><li>redis的set充当记录表</li></ul><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>爬取4567电影网中影片名称以及简介，当网站有更新时爬取增加的了数据。</p><ul><li>地址为：<code>https://www.4567tv.tv/frim/index1.html</code></li><li>该例为基于深度爬取的。</li></ul><p><code>scrapy startproject zlsPro</code></p><p><code>scrapy genspider zls www.xxx.com</code></p><h3 id="①"><a href="#①" class="headerlink" title="①"></a>①</h3><ul><li>使用手动传参进行深度的爬取</li><li>使用 <code>self.conn.sadd(&#39;movie_url&#39;, detail_url)</code> 的返回值来判断是否爬取过该电影。</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># zls.py</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> zlsPro.items <span class="keyword">import</span> ZlsproItem</span><br><span class="line"><span class="keyword">from</span> redis <span class="keyword">import</span> Redis</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ZlsSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">'zls'</span></span><br><span class="line">    <span class="comment"># allowed_domains = ['www.xxx.com']</span></span><br><span class="line">    start_urls = [<span class="string">'https://www.4567tv.tv/frim/index1.html'</span>]</span><br><span class="line">    conn = Redis(<span class="string">'127.0.0.1'</span>, <span class="number">6379</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        li_list = response.xpath(<span class="string">'/html/body/div[1]/div/div/div/div[2]/ul/li'</span>)</span><br><span class="line">        <span class="keyword">for</span> li <span class="keyword">in</span> li_list:</span><br><span class="line">            title = li.xpath(<span class="string">'./div/div/h4/a/text()'</span>).extract_first()</span><br><span class="line">            detail_url = <span class="string">'https://www.4567tv.tv'</span> + li.xpath(<span class="string">'./div/div/h4/a/@href'</span>).extract_first()</span><br><span class="line">            ret = self.conn.sadd(<span class="string">'movie_url'</span>, detail_url)</span><br><span class="line">            <span class="keyword">if</span> ret:</span><br><span class="line">                <span class="comment"># 如果成功写入则该url不存在，可以之后后续操作：</span></span><br><span class="line">                performer = li.xpath(<span class="string">'./div/div/p/text()'</span>).extract_first()</span><br><span class="line">                item = ZlsproItem()</span><br><span class="line">                item[<span class="string">'title'</span>] = title</span><br><span class="line">                item[<span class="string">'performer'</span>] = performer</span><br><span class="line">                <span class="keyword">yield</span> scrapy.Request(detail_url, callback=self.parse_detail, meta=&#123;<span class="string">'item'</span>: item&#125;)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">'暂无更新的数据'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_detail</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        item = response.meta[<span class="string">'item'</span>]</span><br><span class="line">        content = response.xpath(</span><br><span class="line">            <span class="string">'//div[@class="stui-content__detail"]/p/span[@class="detail-content"]/text()'</span>).extract_first()</span><br><span class="line">        item[<span class="string">'content'</span>] = content</span><br><span class="line">        <span class="keyword">yield</span> item</span><br></pre></td></tr></table></figure><h3 id="②"><a href="#②" class="headerlink" title="②"></a>②</h3><ul><li>定义Item</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># items.py</span></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ZlsproItem</span><span class="params">(scrapy.Item)</span>:</span></span><br><span class="line">    <span class="comment"># define the fields for your item here like:</span></span><br><span class="line">    title = scrapy.Field()</span><br><span class="line">    performer = scrapy.Field()</span><br><span class="line">    content = scrapy.Field()</span><br></pre></td></tr></table></figure><h3 id="③"><a href="#③" class="headerlink" title="③"></a>③</h3><ul><li>定义pipeline</li><li>传入redis</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pipelines.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ZlsproPipeline</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></span><br><span class="line">        title = item[<span class="string">'title'</span>]</span><br><span class="line">        performer = item[<span class="string">'performer'</span>]</span><br><span class="line">        content = item[<span class="string">'content'</span>]</span><br><span class="line">        conn = spider.conn</span><br><span class="line">        conn.lpush(<span class="string">'movie'</span>, item)</span><br><span class="line">        <span class="keyword">return</span> item</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>网络爬虫</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>python</tag>
        <tag>网络爬虫</tag>
        <tag>scrapy</tag>
      </tags>
  </entry>
  <entry>
    <title>Scrapy+redis实现分布式爬虫</title>
    <url>/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/20191002-Web_Spider_9.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>Scrapy + Scrapy-Redis 组件实现的分布式。</p></blockquote><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="什么是分布式爬虫"><a href="#什么是分布式爬虫" class="headerlink" title="什么是分布式爬虫"></a>什么是分布式爬虫</h2><ul><li>需要搭建一个由n台电脑组成的机群，然后在每一台电脑中执行同一组程序，让其对同一网络资源进行联合且分布的数据爬取。</li></ul><h2 id="原生Scrapy无法实现分布式的原因"><a href="#原生Scrapy无法实现分布式的原因" class="headerlink" title="原生Scrapy无法实现分布式的原因"></a>原生Scrapy无法实现分布式的原因</h2><ol><li>原生Scrapy中<strong>调度器</strong>不可以被共享<ul><li>每一台机器都拥有一个调度器，如果一个机群共享一个调度器就可以了。</li></ul></li><li>原生Scrapy中<strong>管道</strong>不可以被共享<ul><li>每一台机器都拥有自己的管道，如果把Item发送到同一个管道就可以了。</li></ul></li></ol><h2 id="Scrapy-redis组件的作用是什么？"><a href="#Scrapy-redis组件的作用是什么？" class="headerlink" title="Scrapy_redis组件的作用是什么？"></a>Scrapy_redis组件的作用是什么？</h2><ul><li>提供可以被共享的管道和调度器</li></ul><h2 id="分布式的实现流程"><a href="#分布式的实现流程" class="headerlink" title="分布式的实现流程"></a>分布式的实现流程</h2><p><strong>实现分布式的重点在于配置</strong></p><ul><li><p>环境的安装</p><ul><li><code>pip install scrapy-redis</code></li></ul></li><li><p>创建工程</p><ul><li>基于Spider： <code>scrapy genspider crawl spiderName</code></li><li>基于CrawlSpider： <code>scrapy genspider -t crawl spiderName</code></li></ul></li><li><p>cd 工程</p></li><li><p>创建爬虫文件</p><ul><li>基于Spider</li><li>基于CrawlSpider</li></ul></li><li><p>修改爬虫文件：</p><ul><li>导包：<ul><li><code>from scrapy_redis.spiders import RedisCrawlSpider</code> 基于 CrawlSpider 爬虫文件</li><li><code>from scrapy_redis.spiders import RedisSpider</code> 基于Spider爬虫文件</li></ul></li><li>将父类修改为 RedisCrawlSpider 或 RedisSpider</li><li>删除 allowed_domains 和 start_urls</li><li>添加 redis_key = ‘队列名称’ ：可被共享的调度器队列的名称，向这个队列中放入起始url</li><li>根据常规形式编写爬虫文件后续的代码</li></ul></li><li><p>修改settings配置</p><ul><li><p>指定管道</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">    <span class="string">'scrapy_redis.pipelines.RedisPipeline'</span>: <span class="number">400</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>指定调度器</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 增加了一个去重容器类的配置, 作用使用Redis的set集合来存储请求的指纹数据, 从而实现请求去重的持久化</span></span><br><span class="line">DUPEFILTER_CLASS = <span class="string">"scrapy_redis.dupefilter.RFPDupeFilter"</span></span><br><span class="line"><span class="comment"># 使用scrapy-redis组件自己的调度器</span></span><br><span class="line">SCHEDULER = <span class="string">"scrapy_redis.scheduler.Scheduler"</span></span><br><span class="line"><span class="comment"># 配置调度器是否要持久化, 也就是当爬虫结束了, 要不要清空Redis中请求队列和去重指纹的set。如果是True, 就表示要持久化存储, 就不清空数据, 否则清空数据</span></span><br><span class="line">SCHEDULER_PERSIST = <span class="literal">True</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>指定redis数据库</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">REDIS_HOST = <span class="string">'192.168.13.254'</span></span><br><span class="line">REDIS_PORT = <span class="number">6379</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>修改redis的配置文件</p><ul><li>关闭默认绑定<ul><li>56行 注释 bind 127.0.0.1</li></ul></li><li>关闭保护模式<ul><li>75行 protected-mode no</li><li>这样就可以写数据了</li></ul></li></ul></li></ul><ul><li><p>启动redis的服务端（携带配置文件）和客户端</p><ul><li><code>redis-server.exe redis.windows.conf</code></li></ul></li><li><p>启动分布式的程序：</p><ul><li>启动之后才会有调度器对象和队列</li><li>scrapy runspider xxx.py</li><li>启动后在等起始url</li></ul></li><li><p>向调度器的队列中扔入一个起始的url</p><ul><li>队列是存在于redis中</li><li>redis的客户端中：lpush sun <a href="http://www.xxx.com" target="_blank" rel="noopener">www.xxx.com</a></li></ul></li><li><p>在redis中就可以查看爬取到的数据</p></li></ul><h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><p>使用Scrapy + Scrapy-redis 组件实现的分布式爬取（阳光热线问政平台的投诉帖子）的主题、状态和详细内容</p><p>地址为：<code>http://wz.sun0769.com/html/top/reply.shtml</code></p><h2 id="①"><a href="#①" class="headerlink" title="①"></a>①</h2><p><code>scrapy startproject fbsPro</code> 创建基于fbsPro的工程</p><p><code>scrapy genspider -t crawl fbs 域名</code> 创建名为fbs的spider文件</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># fbs.py</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> scrapy.linkextractors <span class="keyword">import</span> LinkExtractor</span><br><span class="line"><span class="keyword">from</span> scrapy.spiders <span class="keyword">import</span> CrawlSpider, Rule</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> scrapy_redis.spiders <span class="keyword">import</span> RedisCrawlSpider</span><br><span class="line"><span class="comment"># from scrapy_redis.spiders import RedisSpider</span></span><br><span class="line"><span class="keyword">from</span> fbsPro.items <span class="keyword">import</span> Item1, Item2</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FbsSpider</span><span class="params">(RedisCrawlSpider)</span>:</span></span><br><span class="line">    name = <span class="string">'fbs'</span></span><br><span class="line">    <span class="comment"># allowed_domains = ['www.xxx.com']</span></span><br><span class="line">    <span class="comment"># start_urls = ['http://www.xxx.com/']</span></span><br><span class="line">    redis_key = <span class="string">'fbs'</span>       <span class="comment"># 可被共享的调度器队列的名称，向这个队列中放入起始url</span></span><br><span class="line"></span><br><span class="line">    start_urls = [<span class="string">'http://wz.sun0769.com/html/top/reply.shtml'</span>]</span><br><span class="line">    <span class="comment"># 链接提取器（如：获得每一个页码）</span></span><br><span class="line">    link = LinkExtractor(allow=<span class="string">r'page=\d+'</span>)  <span class="comment"># 空的话取所有url</span></span><br><span class="line">    link_1 = LinkExtractor(allow=<span class="string">r'page=$'</span>)  <span class="comment"># 拿到第一页数据</span></span><br><span class="line">    link_detail = LinkExtractor(allow=<span class="string">r'question/\d+/\d+\.shtml'</span>)  <span class="comment"># 拿到第一页数据 . 需要转义</span></span><br><span class="line"></span><br><span class="line">    rules = (</span><br><span class="line">        <span class="comment"># 实例化一个Rule（规则解析器）对象</span></span><br><span class="line">        Rule(link, callback=<span class="string">'parse_item'</span>, follow=<span class="literal">False</span>),</span><br><span class="line">        Rule(link_1, callback=<span class="string">'parse_item'</span>),</span><br><span class="line">        Rule(link_detail, callback=<span class="string">'parse_detail'</span>),</span><br><span class="line">        <span class="comment"># follow = True; 将链接提取器 继续作用到 连接提取器提取到的链接 所对应的 页码源码中</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 数据解析: 用来解析连接提取器提取到的链接所对应的页码</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_item</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="comment"># tr_list = response.xpath('/html/body/div[8]/table[2]/tbody/tr')   # xpath中不能含有tbody</span></span><br><span class="line">        tr_list = response.xpath(<span class="string">'/html/body/div[8]/table[2]//tr'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> tr <span class="keyword">in</span> tr_list:</span><br><span class="line">            title = tr.xpath(<span class="string">'./td[3]/a[1]/text()'</span>).extract_first()</span><br><span class="line">            status = tr.xpath(<span class="string">'./td[4]/span/text()'</span>).extract_first()</span><br><span class="line">            num = tr.xpath(<span class="string">'./td[1]/text()'</span>).extract_first()</span><br><span class="line">            <span class="comment"># print(num, title,status)</span></span><br><span class="line">            item = Item2()</span><br><span class="line">            item[<span class="string">'title'</span>] = title</span><br><span class="line">            item[<span class="string">'status'</span>] = status</span><br><span class="line">            item[<span class="string">'num'</span>] = num</span><br><span class="line">            <span class="keyword">yield</span> item</span><br><span class="line">        <span class="comment"># print(response)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 解析详情页中的新闻内容</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_detail</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        content = response.xpath(<span class="string">'/html/body/div[9]/table[2]//tr[1]/td//text()'</span>).extract()</span><br><span class="line">        <span class="keyword">if</span> content:</span><br><span class="line">            content = <span class="string">''</span>.join(content)</span><br><span class="line">            num = response.xpath(<span class="string">'/html/body/div[9]/table[1]//tr/td[2]/span[2]'</span>).extract_first().split(<span class="string">':'</span>)[<span class="number">-1</span>].replace(</span><br><span class="line">                <span class="string">r'&lt;/span&gt;'</span>, <span class="string">''</span>)</span><br><span class="line">            <span class="comment"># print(num, content)</span></span><br><span class="line">            item = Item1()</span><br><span class="line">            item[<span class="string">'content'</span>] = content</span><br><span class="line">            item[<span class="string">'num'</span>] = num</span><br><span class="line">            <span class="keyword">yield</span> item</span><br></pre></td></tr></table></figure><h2 id="②"><a href="#②" class="headerlink" title="②"></a>②</h2><p>定义Item</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># items.py</span></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Item1</span><span class="params">(scrapy.Item)</span>:</span></span><br><span class="line">    <span class="comment"># define the fields for your item here like:</span></span><br><span class="line">    content = scrapy.Field()</span><br><span class="line">    num = scrapy.Field()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Item2</span><span class="params">(scrapy.Item)</span>:</span></span><br><span class="line">    <span class="comment"># define the fields for your item here like:</span></span><br><span class="line">    title = scrapy.Field()</span><br><span class="line">    status = scrapy.Field()</span><br><span class="line">    num = scrapy.Field()</span><br></pre></td></tr></table></figure><h2 id="③"><a href="#③" class="headerlink" title="③"></a>③</h2><p>配置settings.py</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#指定管道</span></span><br><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">    <span class="string">'scrapy_redis.pipelines.RedisPipeline'</span>: <span class="number">400</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#指定调度器</span></span><br><span class="line"><span class="comment"># 增加了一个去重容器类的配置, 作用使用Redis的set集合来存储请求的指纹数据, 从而实现请求去重的持久化</span></span><br><span class="line">DUPEFILTER_CLASS = <span class="string">"scrapy_redis.dupefilter.RFPDupeFilter"</span></span><br><span class="line"><span class="comment"># 使用scrapy-redis组件自己的调度器</span></span><br><span class="line">SCHEDULER = <span class="string">"scrapy_redis.scheduler.Scheduler"</span></span><br><span class="line"><span class="comment"># 配置调度器是否要持久化, 也就是当爬虫结束了, 要不要清空Redis中请求队列和去重指纹的set。如果是True, 就表示要持久化存储, 就不清空数据, 否则清空数据</span></span><br><span class="line">SCHEDULER_PERSIST = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#指定redis</span></span><br><span class="line">REDIS_HOST = <span class="string">'192.168.13.254'</span></span><br><span class="line">REDIS_PORT = <span class="number">6379</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>网络爬虫</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>python</tag>
        <tag>网络爬虫</tag>
        <tag>scrapy</tag>
      </tags>
  </entry>
  <entry>
    <title>Scrapy框架——使用CrawlSpider爬取数据</title>
    <url>/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/20191001-Web_Spider_8.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>本篇介绍Crawlspider，相比于Spider，Crawlspider更适用于批量爬取网页。</p></blockquote><a id="more"></a><h1 id="Crawlspider"><a href="#Crawlspider" class="headerlink" title="Crawlspider"></a>Crawlspider</h1><ul><li>Crawlspider适用于对网站爬取批量网页，相对比Spider类，CrawSpider主要使用规则（rules）来提取链接，通过定义一组规则为跟踪链接提供了遍历的机制。</li><li>Crawlspider 的强大体现在自动爬取页面所有符合规则的链接并深入下去！</li></ul><h1 id="全站数据爬取"><a href="#全站数据爬取" class="headerlink" title="全站数据爬取"></a>全站数据爬取</h1><h2 id="编码流程"><a href="#编码流程" class="headerlink" title="编码流程"></a>编码流程</h2><ol><li><p>新建一个工程</p></li><li><p>cd 工程</p></li><li><p>创建爬虫文件： <code>scrapy genspider -t crawl spiderName 地址</code> （crawlspider 继承 scrapy.Spider）</p><ul><li>链接提取器 LinkExtractor<ul><li>可以根据指定的规则对指定的链接进行提取<ul><li>提取的规则就是构造方法中的 allow(‘正则表达式’) 参数决定</li></ul></li></ul></li><li>规则解析器 Rule<ul><li>可以将链接提取器提到的链接进行请求，可以根据指定的规则（callback）对请求到的数据进行解析</li></ul></li></ul><p><code>Rule(link, callback=&#39;parse_item&#39;, follow=True)</code></p><ul><li><p>follow = True 表示每一个页码都当作起始url 然后进行链接提取，如果为 false 只能提取到第一页的几个页码。</p></li><li><p>follow = True; 将链接提取器 继续作用到 连接提取器提取到的链接 所对应的 页码源码中。</p></li></ul></li></ol><p>scrapy中发送请求的几种方式：</p><ul><li>start_url</li><li>self.Request()</li><li>链接提取器</li></ul><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>使用CrawlSpider模板批量爬取（阳光热线问政平台的投诉帖子）的主题、状态和详细内容</p><p>地址为：<code>http://wz.sun0769.com/html/top/reply.shtml</code></p><h3 id="①-定义spider"><a href="#①-定义spider" class="headerlink" title="① 定义spider"></a>① 定义spider</h3><p><code>scrapy genspider -t crawl sun</code> 创建一个spider</p><p>在该spider文件中：</p><ul><li>定义 <code>LinkExtractor</code> 获取每个页面中的页码的url地址。</li><li>定义 <code>Rule</code> ，放入 <code>LinkExtractor</code> 以及 <code>callback</code> ，对于 follow 值得话，如果为True得话，将继续作用到 <code>LinkExtractor</code> 提取到的链接 所对应的 页码源码中。</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sun.py</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> scrapy.linkextractors <span class="keyword">import</span> LinkExtractor</span><br><span class="line"><span class="keyword">from</span> scrapy.spiders <span class="keyword">import</span> CrawlSpider, Rule</span><br><span class="line"><span class="keyword">from</span> sunPro.items <span class="keyword">import</span> Item1, Item2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SunSpider</span><span class="params">(CrawlSpider)</span>:</span></span><br><span class="line">    name = <span class="string">'sun'</span></span><br><span class="line">    <span class="comment"># allowed_domains = ['www.xxx.com']</span></span><br><span class="line">    start_urls = [<span class="string">'http://wz.sun0769.com/html/top/reply.shtml'</span>]</span><br><span class="line">    <span class="comment"># 链接提取器（如：获得每一个页码）</span></span><br><span class="line">    link = LinkExtractor(allow=<span class="string">r'page=\d+'</span>)  <span class="comment"># 空的话取所有url</span></span><br><span class="line">    link_1 = LinkExtractor(allow=<span class="string">r'page=$'</span>)  <span class="comment"># 拿到第一页数据</span></span><br><span class="line">    link_detail = LinkExtractor(allow=<span class="string">r'question/\d+/\d+\.shtml'</span>)  <span class="comment"># 拿到第一页数据 . 需要转义</span></span><br><span class="line"></span><br><span class="line">    rules = (</span><br><span class="line">        <span class="comment"># 实例化一个Rule（规则解析器）对象</span></span><br><span class="line">        Rule(link, callback=<span class="string">'parse_item'</span>, follow=<span class="literal">True</span>),	</span><br><span class="line">        Rule(link_1, callback=<span class="string">'parse_item'</span>),</span><br><span class="line">        Rule(link_detail, callback=<span class="string">'parse_detail'</span>),</span><br><span class="line">        <span class="comment"># follow = True; 将链接提取器 继续作用到 连接提取器提取到的链接 所对应的 页码源码中</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 数据解析: 用来解析连接提取器提取到的链接所对应的页码</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_item</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="comment"># tr_list = response.xpath('/html/body/div[8]/table[2]/tbody/tr')   # xpath中不能含有tbody</span></span><br><span class="line">        tr_list = response.xpath(<span class="string">'/html/body/div[8]/table[2]//tr'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> tr <span class="keyword">in</span> tr_list:</span><br><span class="line">            title = tr.xpath(<span class="string">'./td[3]/a[1]/text()'</span>).extract_first()</span><br><span class="line">            status = tr.xpath(<span class="string">'./td[4]/span/text()'</span>).extract_first()</span><br><span class="line">            num = tr.xpath(<span class="string">'./td[1]/text()'</span>).extract_first()</span><br><span class="line">            <span class="comment"># print(num, title,status)</span></span><br><span class="line">            item = Item2()</span><br><span class="line">            item[<span class="string">'title'</span>] = title</span><br><span class="line">            item[<span class="string">'status'</span>] = status</span><br><span class="line">            item[<span class="string">'num'</span>] = num</span><br><span class="line">            <span class="keyword">yield</span> item</span><br><span class="line">        <span class="comment"># print(response)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 解析详情页中的新闻内容</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_detail</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        content = response.xpath(<span class="string">'/html/body/div[9]/table[2]//tr[1]/td//text()'</span>).extract()</span><br><span class="line">        <span class="keyword">if</span> content:</span><br><span class="line">            content = <span class="string">''</span>.join(content)</span><br><span class="line">            num = response.xpath(<span class="string">'/html/body/div[9]/table[1]//tr/td[2]/span[2]'</span>).extract_first().split(<span class="string">':'</span>)[<span class="number">-1</span>].replace(</span><br><span class="line">                <span class="string">r'&lt;/span&gt;'</span>, <span class="string">''</span>)</span><br><span class="line">            <span class="comment"># print(num, content)</span></span><br><span class="line">            item = Item1()</span><br><span class="line">            item[<span class="string">'content'</span>] = content</span><br><span class="line">            item[<span class="string">'num'</span>] = num</span><br><span class="line">            <span class="keyword">yield</span> item</span><br></pre></td></tr></table></figure><h3 id="②-定义Item类"><a href="#②-定义Item类" class="headerlink" title="② 定义Item类"></a>② 定义Item类</h3><ol><li>两个Rule是为了拿到所有页码的url，它对应着 Item2</li><li>另一个Rule是为了拿到所有详情页的url，它对应着 Item1</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># items.py</span></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Item1</span><span class="params">(scrapy.Item)</span>:</span></span><br><span class="line">    <span class="comment"># define the fields for your item here like:</span></span><br><span class="line">    content = scrapy.Field()</span><br><span class="line">    num = scrapy.Field()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Item2</span><span class="params">(scrapy.Item)</span>:</span></span><br><span class="line">    <span class="comment"># define the fields for your item here like:</span></span><br><span class="line">    title = scrapy.Field()</span><br><span class="line">    status = scrapy.Field()</span><br><span class="line">    num = scrapy.Field()</span><br></pre></td></tr></table></figure><h3 id="③-定义pipeline"><a href="#③-定义pipeline" class="headerlink" title="③ 定义pipeline"></a>③ 定义pipeline</h3><p>定义pipeline做持久化存储！</p><ol><li>在 <code>open_spider</code> 中开起连接</li><li>在 <code>close_spider</code> 中关闭连接</li><li>在 <code>process_item</code> 中执行数据库得插入操作。</li></ol><p>遇到的问题：</p><ul><li><p>第一个问题：主题和状态与详细内容如何对应起来呢？</p><ul><li>通过对页面进行分析发现，使用在这两个页面中都有编号，所以增加一个新的字段变化，来连接这两块。</li></ul></li><li><p>两个数据解析函数不同于使用scrapy.Request进行手动传参，然后通过回调来进行连接。而现在只能定义两个 Item ，在管道中如何判断item类型：</p><ul><li><code>item.__class__.__name__</code> 表示类名</li></ul></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pipeline.py</span></span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SunproPipeline</span><span class="params">(object)</span>:</span></span><br><span class="line">    conn = <span class="literal">None</span></span><br><span class="line">    cursor = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_spider</span><span class="params">(self, spider)</span>:</span></span><br><span class="line">        self.conn = pymysql.Connection(host=<span class="string">'127.0.0.1'</span>, user=<span class="string">'root'</span>, password=<span class="string">"2296"</span>,</span><br><span class="line">                                       database=<span class="string">'spider'</span>, charset=<span class="string">'utf8'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></span><br><span class="line">        self.cursor = self.conn.cursor()</span><br><span class="line">        <span class="keyword">if</span> item.__class__.__name__ == <span class="string">'Item1'</span>:</span><br><span class="line">            content = item[<span class="string">'content'</span>]</span><br><span class="line">            num = item[<span class="string">'num'</span>]</span><br><span class="line">            query_sql = <span class="string">'select * from sun where num = %s'</span></span><br><span class="line">            self.cursor.execute(query_sql, (num,))</span><br><span class="line">            ret = self.cursor.fetchall()</span><br><span class="line">            <span class="keyword">if</span> ret:</span><br><span class="line">                insert_sql = <span class="string">f'update sun set content = %s where num=%s'</span></span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    self.cursor.execute(insert_sql, (content, num))</span><br><span class="line">                    self.conn.commit()</span><br><span class="line">                <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                    print(e)</span><br><span class="line">                    self.conn.rollback()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                insert_sql = <span class="string">f'insert into sun(num,content) values (%s, %s)'</span></span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    self.cursor.execute(insert_sql, (num, content))</span><br><span class="line">                    self.conn.commit()</span><br><span class="line">                <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                    print(e)</span><br><span class="line">                    self.conn.rollback()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            title = item[<span class="string">'title'</span>]</span><br><span class="line">            status = item[<span class="string">'status'</span>]</span><br><span class="line">            num = item[<span class="string">'num'</span>]</span><br><span class="line">            query_sql = <span class="string">f'select * from sun where num = %s'</span></span><br><span class="line">            self.cursor.execute(query_sql, (num,))</span><br><span class="line">            ret = self.cursor.fetchall()</span><br><span class="line">            <span class="keyword">if</span> ret:</span><br><span class="line">                insert_sql = <span class="string">f'update sun set title = %s,status = %s where num=%s'</span></span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    self.cursor.execute(insert_sql, (title, status, num))</span><br><span class="line">                    self.conn.commit()</span><br><span class="line">                <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                    print(e)</span><br><span class="line">                    self.conn.rollback()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                insert_sql = <span class="string">f'insert into sun(num,title,status) values (%s, %s,%s)'</span></span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    self.cursor.execute(insert_sql, (num, title, status))</span><br><span class="line">                    self.conn.commit()</span><br><span class="line">                <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                    print(e)</span><br><span class="line">                    self.conn.rollback()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_spider</span><span class="params">(self, spider)</span>:</span></span><br><span class="line">        self.cursor.close()</span><br><span class="line">        self.conn.close()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>网络爬虫</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>python</tag>
        <tag>网络爬虫</tag>
        <tag>scrapy</tag>
      </tags>
  </entry>
  <entry>
    <title>基于scrapy框架的爬虫</title>
    <url>/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/20190929-Web_Spider_7.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>Scrapy是一个为了爬取网站数据，提取结构性数据而编写的应用框架。 可以应用在包括数据挖掘，信息处理或存储历史数据等一系列的程序中。</p></blockquote><a id="more"></a><h1 id="scrapy-框架"><a href="#scrapy-框架" class="headerlink" title="scrapy 框架"></a>scrapy 框架</h1><ul><li>高性能的网络请求</li><li>高性能的数据解析</li><li>高性能的持久化存储</li><li>深度爬取</li><li>全站爬取</li><li>分布式</li><li>中间件</li><li>请求传参</li></ul><h2 id="环境的安装"><a href="#环境的安装" class="headerlink" title="环境的安装"></a>环境的安装</h2><ul><li>mac/linux：pip install scrapy</li><li>windows：<ul><li>pip install wheel</li><li>twisted(异步相关，scrapy 的异步由twisted实现)</li><li>一定要在twisted安装成功的情况下执行后面的安装</li></ul></li></ul><p>环境测试： cmd中 输入scrapy 就安装成功</p><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><ol><li><p>新建一个工程：</p><ul><li><p>终端下 <code>scrapy startproject ProName</code></p><ul><li>如果环境变量中没有，前面加 <code>python -m scrapy startproject ProName</code></li></ul></li><li><p>目录结构</p><ul><li>spiders（包）：空包</li></ul></li><li><p>修改配置文件（settings.py）</p><ul><li><p>不遵从robots</p><ul><li><code>ROBOTSTXT_OBEY = False</code></li></ul></li><li><p>UA伪装</p><ul><li><code>USER_AGENT = &#39;xxx&#39;</code></li></ul></li><li><p>日志等级的指定</p><ul><li><code>LOG_LEVEL = &#39;ERROR&#39;</code></li><li><code>LOG_FILE = &#39;./file.txt&#39;</code></li><li><code>scrapy crawl spiderName --nolog</code> 不推荐</li></ul></li><li><p>CONCURRENT_REQUESTS = 16 默认开启的线程数量</p></li><li><p>AUTOTHROTTLE_START_DELAY = 3 开始下载时限速并延迟时间</p></li><li><p>AUTOTHROTTLE_MAX_DELAY = 60 高并发请求时最大延迟时间</p></li></ul></li></ul></li><li><p><code>cd ProName</code>： 进入到工程目录</p></li><li><p>在spiders（爬虫文件夹）中创建一个爬虫文件</p><ul><li><code>scrapy genspider spiderName www.xxx.com</code><ul><li>url 随意，后面再改</li></ul></li></ul></li><li><p>编写代码：主要代码会编写在爬虫文件中</p><ul><li>爬虫类：父类（spider），后面还有4中爬虫类</li><li>爬虫文件的名称：当前爬虫源文件的唯一标识</li><li>通常注释掉 allowed_domains , 因为有些资源是存在别的域名的</li><li>起始的url列表：<ul><li>列表中存放的url都可以被scrapy进行异步的网络请求</li></ul></li></ul></li><li><p>执行工程： <code>scrapy crawl spiderName</code></p></li></ol><h2 id="scrapy的数据解析"><a href="#scrapy的数据解析" class="headerlink" title="scrapy的数据解析"></a>scrapy的数据解析</h2><p>parse用作数据解析</p><ul><li><p>参数：response 就是响应对象</p></li><li><p>extract、extract_first() 作用</p></li></ul><h2 id="scrapy的持久化存储"><a href="#scrapy的持久化存储" class="headerlink" title="scrapy的持久化存储"></a>scrapy的持久化存储</h2><h3 id="基于终端指令进行持久化存储"><a href="#基于终端指令进行持久化存储" class="headerlink" title="基于终端指令进行持久化存储"></a>基于终端指令进行持久化存储</h3><ul><li>只可以将parse方法的返回值存储到本地的磁盘文件（指定形式后缀）中。</li><li><code>sracpy crawl spiderName -o filePath</code></li><li>局限性：<ol><li>只能是parse的返回值</li><li>不能存到数据库中</li></ol></li></ul><h3 id="基于管道进行持久化存储（推荐）"><a href="#基于管道进行持久化存储（推荐）" class="headerlink" title="基于管道进行持久化存储（推荐）"></a>基于管道进行持久化存储（推荐）</h3><p>编码流程：</p><ol><li>在爬虫文件中进行数据解析</li><li>在item类中定义相关的属性/字段</li><li>将解析到的数据存储到一个item类型的对象中<ul><li>Field类型视为一个万能的数据类型</li></ul></li><li>将item类型的对象提交给管道<ul><li>采用这样的规则是比手动存效率高的。</li><li>管道负责持久化存储</li><li>yield item 将item提交给管道</li></ul></li><li>管道类的process_item方法负责接收item，接收到后可以对item实现任意形式的持久化存储操作。<ol><li>return item 会将item传递给下一个即将执行的管道类。</li><li>重写父类方法 open_spider 该方法只会被执行一次，并且在爬虫之前执行</li><li>重写父类方法 close_spider 该方法只会被执行一次，并且在爬虫结束执行</li></ol></li><li>在配置文件中开启管道。<ol><li>300 表示的是优先级，数值越小优先级越高，可以定义多个管道类，这样优先级就会起作用。</li></ol></li></ol><p>note：一个管道类对应一种平台的持久化存储</p><h2 id="例子：爬取抽屉网热榜"><a href="#例子：爬取抽屉网热榜" class="headerlink" title="例子：爬取抽屉网热榜"></a>例子：爬取抽屉网热榜</h2><p>需求：爬取抽屉网热榜的作者和内容并做持久化存储</p><p>地址为：<code>https://dig.chouti.com/</code></p><h3 id="①修改spider"><a href="#①修改spider" class="headerlink" title="①修改spider"></a>①修改spider</h3><p>生成 spider 文件： <code>scrapy genspider first www.xxx.com</code></p><p>补充数据解析的逻辑：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># first.py</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> choutiPro.items <span class="keyword">import</span> ChoutiproItem</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FirstSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">'first'</span></span><br><span class="line">    <span class="comment"># allowed_domains = ['www.xxx.com']		# 注释掉，因为有时候爬取的资源不一定在该域名下。</span></span><br><span class="line">    start_urls = [<span class="string">'https://dig.chouti.com/'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="comment"># 解析内容和发布平台</span></span><br><span class="line">        div_list = response.xpath(<span class="string">'//div[@class="link-info-con left"]'</span>)  <span class="comment"># 支持class属性中有多个值（中间有空格）</span></span><br><span class="line">        print(len(div_list))</span><br><span class="line">        <span class="keyword">for</span> div <span class="keyword">in</span> div_list:</span><br><span class="line">            <span class="comment"># print(div)</span></span><br><span class="line">            content = div.xpath(<span class="string">'.//a[@class="link-title link-statistics"]/text()'</span>).extract_first()</span><br><span class="line">            author = div.xpath(<span class="string">'.//span[@class="left author-name"]/text()'</span>).extract_first()</span><br><span class="line">            <span class="comment"># 不同于etree，数据提取的时候不再是字符串，而是封装到了selector对象。  使用 .extract() 来提取 .extract_first()</span></span><br><span class="line">            <span class="comment"># xpath在取标签中存储在文本数据时必须使用 extract() , extract_first() 进行字符串的单独提取</span></span><br><span class="line"></span><br><span class="line">            item = ChoutiproItem()</span><br><span class="line">            item[<span class="string">'author'</span>] = author</span><br><span class="line">            item[<span class="string">'content'</span>] = content</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 将 item类型的对象提交给管道</span></span><br><span class="line">            <span class="keyword">yield</span> item</span><br></pre></td></tr></table></figure><h3 id="②定义Item"><a href="#②定义Item" class="headerlink" title="②定义Item"></a>②定义Item</h3><p>定义Item，来将数据从 spider 传入管道并进行处理。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># items.py</span></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChoutiproItem</span><span class="params">(scrapy.Item)</span>:</span></span><br><span class="line"></span><br><span class="line">    author = scrapy.Field()</span><br><span class="line">    content = scrapy.Field()</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h3 id="③定义pipeline"><a href="#③定义pipeline" class="headerlink" title="③定义pipeline"></a>③定义pipeline</h3><p>定义 pipeline 来做持久化存储。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pipelines.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChoutiproPipeline</span><span class="params">(object)</span>:</span></span><br><span class="line">    fp = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_spider</span><span class="params">(self, spider)</span>:</span></span><br><span class="line">        self.fp = open(<span class="string">'news.txt'</span>, <span class="string">'w'</span>, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></span><br><span class="line">        author = item[<span class="string">'author'</span>]</span><br><span class="line">        content = item[<span class="string">'content'</span>]</span><br><span class="line">        self.fp.write(author + <span class="string">'\n\t'</span> + content + <span class="string">'\n'</span>)</span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_spider</span><span class="params">(self, spider)</span>:</span></span><br><span class="line">        self.fp.close()</span><br></pre></td></tr></table></figure><h1 id="请求传参（深度爬取）"><a href="#请求传参（深度爬取）" class="headerlink" title="请求传参（深度爬取）"></a>请求传参（深度爬取）</h1><p>深度爬取：</p><ul><li>爬取的数据没有存在同一张页面中。</li></ul><p>如何实现请求传参：</p><p>例如：<code>yield scrapy.Request(detail_url, callback=self.parse_detail, meta={&#39;item&#39;: item})</code></p><ul><li><code>meta= {}</code> : 可以将meta字典传递给 callback</li><li>在 callback 接收 <code>item = response.meta[&#39;item&#39;]</code></li></ul><h1 id="scrapy的五大核心组件"><a href="#scrapy的五大核心组件" class="headerlink" title="scrapy的五大核心组件"></a>scrapy的五大核心组件</h1><p><img src="/网络爬虫/20190929-Web_Spider_7/%E4%BA%94%E5%A4%A7%E7%BB%84%E4%BB%B6.png" alt="五大组件"></p><ul><li>引擎依据接接受到的数据流的类型调用相关事务！</li></ul><h2 id="Scrapy运行流程"><a href="#Scrapy运行流程" class="headerlink" title="Scrapy运行流程"></a>Scrapy运行流程</h2><p>①：spider中的url被封装成请求对象交给引擎(每一个对应一个请求对象)</p><p>②：引擎拿到请求对象之后,将全部交给调度器</p><p>③：调度器过滤掉重复的请求对象（request）（重复的url），然后使用队列来存储非重复的请求对象，并将去重的消息队列回发给引擎</p><p>④：引擎将调度器调度出的请求对象交给下载器</p><p>⑤：下载器拿到该请求对象去互联网中下载数据</p><p>⑥：数据下载成功后会被封装到response中，随后response会被交给下载器</p><p>⑦：下载器将response交给引擎</p><p>⑧：引擎将response对象交给spiders（爬虫文件）</p><p>⑨：spiders拿到response后调用回调方法进行数据解析，解析成功后生成item,随后spiders将item交给引擎</p><p>⑩：引擎将解析好的item对象交给管道，管道拿到item后进行数据的持久化存储</p><h2 id="引擎"><a href="#引擎" class="headerlink" title="引擎"></a>引擎</h2><p>所有组件的交互都要经过引擎，它控制着整个流程。</p><p>引擎定义了很多方法（parse，process_item），那它什么时候该执行这是如何做到的呢？</p><ul><li>通过数据流来判断</li></ul><p>作用：</p><ul><li>接收所有事务流</li><li>对事务流进行判断来执行下一步</li></ul><h2 id="spider"><a href="#spider" class="headerlink" title="spider"></a>spider</h2><p>封装成请求对象</p><h2 id="调度器"><a href="#调度器" class="headerlink" title="调度器"></a>调度器</h2><ul><li>调度请求对象</li></ul><p>过滤器</p><ul><li>过滤掉重复的请求对象</li></ul><p>队列</p><ul><li>存储非重复的请求的对象</li></ul><h2 id="实体管道"><a href="#实体管道" class="headerlink" title="实体管道"></a>实体管道</h2><ul><li>做持久化存储</li></ul><h2 id="下载器"><a href="#下载器" class="headerlink" title="下载器"></a>下载器</h2><ul><li>将下载好的数据封装成response对象</li><li>异步体现在下载器这里</li></ul><p>scrapy的异步也体现在下载器的异步，是建立在twisted这个高效的异步模型上的(其实整个框架都在建立在这个模型上的)。</p><h1 id="scrapy的中间件"><a href="#scrapy的中间件" class="headerlink" title="scrapy的中间件"></a>scrapy的中间件</h1><h2 id="中间件有哪些？"><a href="#中间件有哪些？" class="headerlink" title="中间件有哪些？"></a>中间件有哪些？</h2><h3 id="下载中间件"><a href="#下载中间件" class="headerlink" title="下载中间件"></a>下载中间件</h3><p>引擎和下载器之间</p><h3 id="爬虫中间件"><a href="#爬虫中间件" class="headerlink" title="爬虫中间件"></a>爬虫中间件</h3><p>引擎和spider之间</p><h2 id="下载中间件的作用"><a href="#下载中间件的作用" class="headerlink" title="下载中间件的作用"></a>下载中间件的作用</h2><ul><li>批量拦截所有的请求和响应</li></ul><h2 id="为什么需要拦截请求"><a href="#为什么需要拦截请求" class="headerlink" title="为什么需要拦截请求?"></a>为什么需要拦截请求?</h2><ul><li>篡改请求的头信息（headers）（UA）<ul><li>建一个UA池</li><li>request.headers[‘User-Agent’] = ‘xxx’</li></ul></li><li>代理<ul><li>request.meta[‘proxy’] = ‘<a href="http://ip:port&#39;" target="_blank" rel="noopener">http://ip:port&#39;</a></li></ul></li></ul><h2 id="为什么拦截响应？"><a href="#为什么拦截响应？" class="headerlink" title="为什么拦截响应？"></a>为什么拦截响应？</h2><ul><li>篡改响应数据</li><li>篡改响应对象（推荐）</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># middlewares.py</span></span><br><span class="line"><span class="keyword">from</span> scrapy <span class="keyword">import</span> signals</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">user_agent_list = [</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 "</span></span><br><span class="line">    <span class="string">"(KHTML, like Gecko) Chrome/22.0.1207.1 Safari/537.1"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (X11; CrOS i686 2268.111.0) AppleWebKit/536.11 "</span></span><br><span class="line">    <span class="string">"(KHTML, like Gecko) Chrome/20.0.1132.57 Safari/536.11"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.6 "</span></span><br><span class="line">    <span class="string">"(KHTML, like Gecko) Chrome/20.0.1092.0 Safari/536.6"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.6 "</span></span><br><span class="line">    <span class="string">"(KHTML, like Gecko) Chrome/20.0.1090.0 Safari/536.6"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.1 "</span></span><br><span class="line">    <span class="string">"(KHTML, like Gecko) Chrome/19.77.34.5 Safari/537.1"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/536.5 "</span></span><br><span class="line">    <span class="string">"(KHTML, like Gecko) Chrome/19.0.1084.9 Safari/536.5"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.0) AppleWebKit/536.5 "</span></span><br><span class="line">    <span class="string">"(KHTML, like Gecko) Chrome/19.0.1084.36 Safari/536.5"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 "</span></span><br><span class="line">    <span class="string">"(KHTML, like Gecko) Chrome/19.0.1063.0 Safari/536.3"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 5.1) AppleWebKit/536.3 "</span></span><br><span class="line">    <span class="string">"(KHTML, like Gecko) Chrome/19.0.1063.0 Safari/536.3"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_0) AppleWebKit/536.3 "</span></span><br><span class="line">    <span class="string">"(KHTML, like Gecko) Chrome/19.0.1063.0 Safari/536.3"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.3 "</span></span><br><span class="line">    <span class="string">"(KHTML, like Gecko) Chrome/19.0.1062.0 Safari/536.3"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 "</span></span><br><span class="line">    <span class="string">"(KHTML, like Gecko) Chrome/19.0.1062.0 Safari/536.3"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.3 "</span></span><br><span class="line">    <span class="string">"(KHTML, like Gecko) Chrome/19.0.1061.1 Safari/536.3"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 "</span></span><br><span class="line">    <span class="string">"(KHTML, like Gecko) Chrome/19.0.1061.1 Safari/536.3"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/536.3 "</span></span><br><span class="line">    <span class="string">"(KHTML, like Gecko) Chrome/19.0.1061.1 Safari/536.3"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.3 "</span></span><br><span class="line">    <span class="string">"(KHTML, like Gecko) Chrome/19.0.1061.0 Safari/536.3"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/535.24 "</span></span><br><span class="line">    <span class="string">"(KHTML, like Gecko) Chrome/19.0.1055.1 Safari/535.24"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/535.24 "</span></span><br><span class="line">    <span class="string">"(KHTML, like Gecko) Chrome/19.0.1055.1 Safari/535.24"</span></span><br><span class="line">]</span><br><span class="line">PROXY_http = [</span><br><span class="line">    <span class="string">'http://153.180.102.104:80'</span>,</span><br><span class="line">    <span class="string">'http://195.208.131.189:56055'</span>,</span><br><span class="line">]</span><br><span class="line">PROXY_https = [</span><br><span class="line">    <span class="string">'https://120.83.49.90:9000'</span>,</span><br><span class="line">    <span class="string">'https://95.189.112.214:35508'</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MiddleproDownloaderMiddleware</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 拦截正常的请求</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request, spider)</span>:</span></span><br><span class="line">        print(<span class="string">"i am process_request"</span>)</span><br><span class="line">        <span class="comment"># 拦截请求尽可能多的设定不同的UA</span></span><br><span class="line">        request.headers[<span class="string">'User-Agent'</span>] = random.choice(user_agent_list)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 代理的应用</span></span><br><span class="line">        <span class="comment"># 两个代理池，一个是http代理池 一个是https代理池</span></span><br><span class="line">        <span class="keyword">if</span> request.url.split(<span class="string">':'</span>)[<span class="number">0</span>] == <span class="string">'http'</span>:</span><br><span class="line">            request.meta[<span class="string">'proxy'</span>] = <span class="string">'http://ip:port'</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            request.meta[<span class="string">'proxy'</span>] = <span class="string">'https://ip:port'</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 拦截所有的响应</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_response</span><span class="params">(self, request, response, spider)</span>:</span></span><br><span class="line">        print(<span class="string">'i am process_response'</span>)</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 拦截异常的请求</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_exception</span><span class="params">(self, request, exception, spider)</span>:</span></span><br><span class="line">        print(<span class="string">'i am process_exception'</span>)</span><br><span class="line">        <span class="comment"># 相关的修正操作，将修正后的请求对象重新发送</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> request  <span class="comment"># 将异常的请求重新发送</span></span><br></pre></td></tr></table></figure><h1 id="爬取网易新闻"><a href="#爬取网易新闻" class="headerlink" title="爬取网易新闻"></a>爬取网易新闻</h1><ul><li><strong>基于Scrapy框架中的Spider的递归爬取进行实现（Request模块递归回调parse方法）</strong></li></ul><p>（国内、国际、军事、航空、无人机） 新闻数据的标题和内容</p><p>分析：</p><ol><li><p>每一个板块下对应的新闻数据都是动态加载出来的</p></li><li><p>会对5个板块的响应数据进行数据解析，但是板块对应的响应对象中是不包含动态加载的新闻数据的，意味着目前获取的每一个板块对应的响应对象是不满足需求的响应对象！！！</p></li><li><p>将不满足需求的5个响应对象篡改（工程中一共有1 + 5 + n），修改成满足需求的</p><ol><li>找到指定的5个不满足需求的响应对象（中间件中完成）</li><li>使用selenium加载动态数据，获取标题和新闻详情的url</li></ol></li><li><p>持久化存储：</p><ul><li><p>mysql</p></li><li><p>redis</p></li></ul></li></ol><p>完整代码如下：</p><ul><li>wangyi.py</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># wangyi.py</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> wangyiPro.items <span class="keyword">import</span> WangyiproItem</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WangyiSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">'wangyi'</span></span><br><span class="line">    <span class="comment"># allowed_domains = ['www.1.com']</span></span><br><span class="line">    start_urls = [<span class="string">'https://news.163.com/'</span>]</span><br><span class="line"></span><br><span class="line">    model_urls = []  <span class="comment"># 5个板块对应的url，使用spider对象可以拿到</span></span><br><span class="line"></span><br><span class="line">    bro = webdriver.Chrome(<span class="string">r'C:\Users\ATLAS\爬虫学习\wangyiPro\wangyiPro\chromedriver.exe'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 解析出每一个板块对应的url</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        li_list = response.xpath(<span class="string">'//div[@class="bd"]/div[@class="ns_area list"]/ul/li'</span>)</span><br><span class="line">        indexes = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line">        <span class="keyword">for</span> index <span class="keyword">in</span> indexes:</span><br><span class="line">            li_tag = li_list[index]</span><br><span class="line">            <span class="comment"># 解析到每一个板块对应的url</span></span><br><span class="line">            model_url = li_tag.xpath(<span class="string">'./a/@href'</span>).extract_first()</span><br><span class="line">            self.model_urls.append(model_url)</span><br><span class="line">            <span class="comment"># 对板块的url进行请求发送获取每一个板块对应页码源码数据</span></span><br><span class="line">            <span class="keyword">yield</span> scrapy.Request(model_url, callback=self.parse_model_page)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 用来解析每一个板块对应新闻标题</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_model_page</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        div_list = response.xpath(<span class="string">'//div[@class="ndi_main"]/div'</span>)</span><br><span class="line">        item = WangyiproItem()</span><br><span class="line">        <span class="keyword">for</span> div <span class="keyword">in</span> div_list:</span><br><span class="line">            detail_url = div.xpath(<span class="string">'./a/@href'</span>).extract_first()</span><br><span class="line">            title = div.xpath(<span class="string">'./div//h3//text()'</span>).extract_first()</span><br><span class="line">            <span class="keyword">if</span> title <span class="keyword">and</span> detail_url:</span><br><span class="line">                item[<span class="string">'title'</span>] = title</span><br><span class="line">                <span class="keyword">yield</span> scrapy.Request(detail_url, callback=self.parse_detail, meta=&#123;<span class="string">'item'</span>: item&#125;)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_detail</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        item = response.meta[<span class="string">'item'</span>]</span><br><span class="line">        content_list = response.xpath(<span class="string">'//*[@id="endText"]/p/text()'</span>).extract()</span><br><span class="line">        content = <span class="string">''</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> content_list:</span><br><span class="line">            <span class="keyword">if</span> <span class="string">'endText'</span> <span class="keyword">and</span> <span class="string">'window.'</span> <span class="keyword">and</span> <span class="string">'if'</span> <span class="keyword">not</span> <span class="keyword">in</span> i:</span><br><span class="line">                content += i</span><br><span class="line">        content = <span class="string">''</span>.join(content).replace(<span class="string">' '</span>, <span class="string">''</span>)  <span class="comment"># 去除空格</span></span><br><span class="line">        content = <span class="string">''</span>.join(content).replace(<span class="string">'\n'</span>, <span class="string">''</span>)  <span class="comment"># 去除多余的回车</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> content:</span><br><span class="line">            item[<span class="string">'content'</span>] = content</span><br><span class="line">            <span class="keyword">yield</span> item</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 该方法是在最后被执行一次，用来关闭浏览器</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">closed</span><span class="params">(self, spider)</span>:</span></span><br><span class="line">        self.bro.close()</span><br></pre></td></tr></table></figure><ul><li>items.py</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># items.py</span></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WangyiproItem</span><span class="params">(scrapy.Item)</span>:</span></span><br><span class="line">    <span class="comment"># define the fields for your item here like:</span></span><br><span class="line">    title = scrapy.Field()</span><br><span class="line">    content = scrapy.Field()</span><br><span class="line">    keywords = scrapy.Field()</span><br><span class="line">    types = scrapy.Field()</span><br></pre></td></tr></table></figure><ul><li>middlewares.py</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># middlewares.py</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> scrapy <span class="keyword">import</span> signals</span><br><span class="line"><span class="keyword">from</span> scrapy.http <span class="keyword">import</span> HtmlResponse</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WangyiproDownloaderMiddleware</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request, spider)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 可以拦截到1 + 5 + n个响应对象</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_response</span><span class="params">(self, request, response, spider)</span>:</span></span><br><span class="line">        <span class="comment"># 根据5个板块的url定位到指定的request</span></span><br><span class="line">        <span class="comment"># request定位到指定的response</span></span><br><span class="line">        model_urls = spider.model_urls</span><br><span class="line">        <span class="keyword">if</span> request.url <span class="keyword">in</span> model_urls:</span><br><span class="line">            <span class="comment"># response，就是最后定位到的5大板块对应的响应对象</span></span><br><span class="line">            <span class="comment"># 如果该新的响应对象中对应的响应对象中包含了动态加载的数据</span></span><br><span class="line">            <span class="comment"># 使用selenium请求 request.url。浏览器对象只能实例化一次,在爬虫类中实例化</span></span><br><span class="line">            bro = spider.bro</span><br><span class="line">            bro.get(request.url)</span><br><span class="line">            sleep(<span class="number">1</span>)</span><br><span class="line">            bro.execute_script(<span class="string">'window.scrollTo(0,document.body.scrollHeight)'</span>)</span><br><span class="line">            sleep(<span class="number">1</span>)</span><br><span class="line">            <span class="comment"># bro.execute_script('window.scrollTo(0,document.body.scrollHeight)')</span></span><br><span class="line">            <span class="comment"># sleep(1)</span></span><br><span class="line">            <span class="comment"># bro.execute_script('window.scrollTo(0,document.body.scrollHeight)')</span></span><br><span class="line">            page_text = bro.page_source</span><br><span class="line">            new_response = HtmlResponse(url=request.url, body=page_text, encoding=<span class="string">'utf-8'</span>, request=request)  <span class="comment"># 参数'待补充'</span></span><br><span class="line">            <span class="comment"># print(page_text)</span></span><br><span class="line">            <span class="keyword">return</span> new_response</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><ul><li>pipelines.py</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pipelines.py</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">from</span> redis <span class="keyword">import</span> Redis</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">AI</span><span class="params">(title, content)</span>:</span></span><br><span class="line">    <span class="keyword">from</span> aip <span class="keyword">import</span> AipNlp</span><br><span class="line"></span><br><span class="line">    <span class="string">""" 你的 APPID AK SK """</span></span><br><span class="line">    APP_ID = <span class="string">'APP的id'</span></span><br><span class="line">    API_KEY = <span class="string">'APP的key'</span></span><br><span class="line">    SECRET_KEY = <span class="string">'密钥'</span></span><br><span class="line"></span><br><span class="line">    print(title)</span><br><span class="line">    print(len(content))</span><br><span class="line"></span><br><span class="line">    client = AipNlp(APP_ID, API_KEY, SECRET_KEY)</span><br><span class="line">    types = []</span><br><span class="line">    title_dict = client.topic(title, content).get(<span class="string">'items'</span>)</span><br><span class="line">    <span class="keyword">if</span> title_dict:</span><br><span class="line">        <span class="keyword">for</span> title_list <span class="keyword">in</span> title_dict.values():</span><br><span class="line">            <span class="keyword">for</span> title <span class="keyword">in</span> title_list:</span><br><span class="line">                types.append(title[<span class="string">'tag'</span>])</span><br><span class="line">    types = <span class="string">','</span>.join(types)</span><br><span class="line">    tag_list = []</span><br><span class="line">    tag_dict = client.keyword(title, content).get(<span class="string">'items'</span>)</span><br><span class="line">    <span class="keyword">if</span> tag_dict:</span><br><span class="line">        <span class="keyword">for</span> tag <span class="keyword">in</span> tag_dict:</span><br><span class="line">            tag_list.append(tag[<span class="string">'tag'</span>])</span><br><span class="line">    keywords = <span class="string">','</span>.join(tag_list)</span><br><span class="line">    <span class="keyword">return</span> types, keywords</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WangyiMysql</span><span class="params">(object)</span>:</span></span><br><span class="line">    conn = <span class="literal">None</span></span><br><span class="line">    cursor = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_spider</span><span class="params">(self, spider)</span>:</span></span><br><span class="line">        self.conn = pymysql.Connection(host=<span class="string">'127.0.0.1'</span>, user=<span class="string">'root'</span>, password=<span class="string">'2296'</span>, database=<span class="string">'spider'</span>,</span><br><span class="line">                                       charset=<span class="string">'utf8'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></span><br><span class="line">        self.cursor = self.conn.cursor()</span><br><span class="line">        title = item[<span class="string">'title'</span>]</span><br><span class="line">        content = item[<span class="string">'content'</span>]</span><br><span class="line">        types, keywords = AI(title, content)</span><br><span class="line">        item[<span class="string">'types'</span>] = types</span><br><span class="line">        item[<span class="string">'keywords'</span>] = keywords</span><br><span class="line">        sql = <span class="string">f'insert into wangyi values ("<span class="subst">&#123;title&#125;</span>","<span class="subst">&#123;keywords&#125;</span>","<span class="subst">&#123;types&#125;</span>","<span class="subst">&#123;content&#125;</span>")'</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.cursor.execute(sql)</span><br><span class="line">            self.conn.commit()</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(e)</span><br><span class="line">            self.conn.rollback()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_spider</span><span class="params">(self, spider)</span>:</span></span><br><span class="line">        self.cursor.close()</span><br><span class="line">        self.conn.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WangyiRedis</span><span class="params">(object)</span>:</span></span><br><span class="line">    conn = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_spider</span><span class="params">(self, spider)</span>:</span></span><br><span class="line">        self.conn = Redis(host=<span class="string">'127.0.0.1'</span>, port=<span class="string">'6379'</span>)</span><br><span class="line">        print(self.conn)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></span><br><span class="line">        self.conn.lpush(item)</span><br><span class="line">        <span class="keyword">return</span> item</span><br></pre></td></tr></table></figure><p>redis</p><ul><li>启动server 启动cle</li><li>查看数据 keys *</li><li>lpush key value</li><li>lpush names 123</li></ul><p>redis如果不可以写入字典：</p><ul><li>pip install - U redis == 2.10.6</li></ul>]]></content>
      <categories>
        <category>网络爬虫</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>python</tag>
        <tag>网络爬虫</tag>
        <tag>scrapy</tag>
      </tags>
  </entry>
  <entry>
    <title>可见即可的Selenium</title>
    <url>/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/20190926-Web_Spider_6.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>本篇介绍爬虫的一把利器Selenium。</p></blockquote><a id="more"></a><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>概念：基于浏览器自动化的一个模块。</p><p>​ 广泛用于自动化测试</p><p>selenium和爬虫之间的关联</p><ul><li><strong>便捷</strong>的爬取到动态加载的数据<ul><li><strong>可见即可得</strong></li></ul></li><li>便捷的实现模拟登录</li></ul><p>基本使用</p><ul><li>环境安装 pip install selenium</li><li>下载浏览器得驱动程序<ul><li>地址： <code>https://npm.taobao.org/mirrors/chromedriver</code></li><li>浏览器版本和驱动程序得映射关系：按照浏览器的大版本号下载最新即可。<ul><li>如我的浏览器是 76.0.3809.132 下载 <a href="https://npm.taobao.org/mirrors/chromedriver/76.0.3809.68/" target="_blank" rel="noopener">76.0.3809.68/</a></li></ul></li></ul></li></ul><p>原则：</p><ul><li><p>迫不得已之后是使用 selenium</p></li><li><p>selenium 不支持异步</p></li><li><p>pyppeteer 支持异步，基于asyncio</p></li></ul><p>扩充：</p><ul><li>Appnium：基于手机的自动化的模块</li></ul><h2 id="演示程序"><a href="#演示程序" class="headerlink" title="演示程序"></a>演示程序</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"><span class="comment"># 后面是你的浏览器驱动位置，记得前面加r'','r'是防止字符转义的</span></span><br><span class="line">driver = webdriver.Chrome(<span class="string">r'chromedriver.exe'</span>)</span><br><span class="line"><span class="comment"># 用get打开百度页面</span></span><br><span class="line">driver.get(<span class="string">"http://www.baidu.com"</span>)</span><br><span class="line"><span class="comment"># 查找页面的“设置”选项，并进行点击</span></span><br><span class="line">driver.find_elements_by_link_text(<span class="string">'设置'</span>)[<span class="number">0</span>].click()</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># # 打开设置后找到“搜索设置”选项，设置为每页显示50条</span></span><br><span class="line">driver.find_elements_by_link_text(<span class="string">'搜索设置'</span>)[<span class="number">0</span>].click()</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选中每页显示50条</span></span><br><span class="line">m = driver.find_element_by_id(<span class="string">'nr'</span>)</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">m.find_element_by_xpath(<span class="string">'//*[@id="nr"]/option[3]'</span>).click()</span><br><span class="line">m.find_element_by_xpath(<span class="string">'.//option[3]'</span>).click()</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 点击保存设置</span></span><br><span class="line">driver.find_elements_by_class_name(<span class="string">"prefpanelgo"</span>)[<span class="number">0</span>].click()</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理弹出的警告页面   确定accept() 和 取消dismiss()</span></span><br><span class="line">driver.switch_to_alert().accept()</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 找到百度的输入框，并输入 美女</span></span><br><span class="line">driver.find_element_by_id(<span class="string">'kw'</span>).send_keys(<span class="string">'美女'</span>)</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 点击搜索按钮</span></span><br><span class="line">driver.find_element_by_id(<span class="string">'su'</span>).click()</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 在打开的页面中找到“Selenium - 开源中国社区”，并打开这个页面</span></span><br><span class="line">driver.find_elements_by_link_text(<span class="string">'美女_百度图片'</span>)[<span class="number">0</span>].click()</span><br><span class="line">sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭浏览器</span></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># 实例化某一款浏览器对象</span></span><br><span class="line">bro = webdriver.Chrome(executable_path=<span class="string">'chromedriver.exe'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 基于浏览器发起请求</span></span><br><span class="line">bro.get(<span class="string">'https://www.jd.com/'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 商品搜索</span></span><br><span class="line"><span class="comment"># 标签定位</span></span><br><span class="line">search_input = bro.find_element_by_id(<span class="string">'key'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 往定位到的标签录入数据</span></span><br><span class="line">search_input.send_keys(<span class="string">'袜子'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 点击搜索按钮</span></span><br><span class="line">btn = bro.find_element_by_xpath(<span class="string">'//*[@id="search"]/div/div[2]/button'</span>)</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line">btn.click()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 滚轮滑动（js注入）</span></span><br><span class="line"></span><br><span class="line">bro.execute_script(<span class="string">'window.scrollTo(0, document.body.scrollHeight)'</span>)</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭浏览器</span></span><br><span class="line">bro.quit()</span><br></pre></td></tr></table></figure><h2 id="爬取动态数据"><a href="#爬取动态数据" class="headerlink" title="爬取动态数据"></a>爬取动态数据</h2><ul><li>在爬取页面的时候我们要先判断数据是不是动态加载的，如果是动态加载的话就需要找它的url</li><li>对于selenium无须如此，可见即可得</li></ul><p>需求：爬取 <code>https://www.fjggfw.gov.cn/Website/JYXXNew.aspx</code> 所展示得公告标题。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化某一款浏览器对象</span></span><br><span class="line">bro = webdriver.Chrome(executable_path=<span class="string">'chromedriver.exe'</span>)</span><br><span class="line"></span><br><span class="line">bro.get(<span class="string">'https://www.fjggfw.gov.cn/Website/JYXXNew.aspx'</span>)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># page_source：当前页面所有得页面源码数据</span></span><br><span class="line">page_text = bro.page_source</span><br><span class="line"></span><br><span class="line"><span class="comment"># 存储前3页对应得页面源码数据</span></span><br><span class="line">all_page_text = [page_text]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">    next_page_btn = bro.find_element_by_xpath(<span class="string">'//*[@id="kkpager"]/div[1]/span[1]/a[7]'</span>)</span><br><span class="line">    next_page_btn.click()</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    all_page_text.append(bro.page_source)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> page_text <span class="keyword">in</span> all_page_text:</span><br><span class="line">    tree = etree.HTML(page_text)</span><br><span class="line">    titles = tree.xpath(<span class="string">'//*[@id="list"]/div/div/h4//text()'</span>)</span><br><span class="line">    <span class="keyword">for</span> title <span class="keyword">in</span> titles:</span><br><span class="line">        print(title)</span><br></pre></td></tr></table></figure><h2 id="动作链"><a href="#动作链" class="headerlink" title="动作链"></a>动作链</h2><p>需求：打开 <code>https://www.runoob.com/try/try.php?filename=jqueryui-api-droppable</code> 并拖动方块</p><p>动作链：</p><ul><li>实例化 <code>ActionChains(bro)</code> 后就可以使用动作了</li><li>在使用find系列得函数进行标签定位得时候如果出现了<strong>NoSuchElementException</strong>的时候：可能是iframe做html嵌套</li><li>如果定位的标签是存在于 iframe 标签之下的，则在进行指定标签定位的时候，必须使用 switch_to.frame() 操作即可</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ActionChains  <span class="comment"># 动作链得类</span></span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">bro = webdriver.Chrome(executable_path=<span class="string">'chromedriver.exe'</span>)</span><br><span class="line">bro.get(<span class="string">'https://www.runoob.com/try/try.php?filename=jqueryui-api-droppable'</span>)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">bro.switch_to.frame(<span class="string">'iframeResult'</span>)  <span class="comment"># 给frame传入iframe标签的id，一个iframe表示一个页面</span></span><br><span class="line"><span class="comment"># NoSuchElementException</span></span><br><span class="line">div_tag = bro.find_element_by_id(<span class="string">'draggable'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 基于动作链实现滑动/拖动</span></span><br><span class="line"><span class="comment"># 动作制定好后，可以在任意的浏览器中，它们并没有强约束</span></span><br><span class="line">action = ActionChains(bro)</span><br><span class="line"><span class="comment"># 点击且长按</span></span><br><span class="line">action.click_and_hold(div_tag)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    <span class="comment"># perform() 表示让动作链立即执行</span></span><br><span class="line">    action.move_by_offset(<span class="number">20</span>, <span class="number">0</span>).perform()  <span class="comment"># 右移动20像素</span></span><br><span class="line">    sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">bro.quit()</span><br></pre></td></tr></table></figure><h2 id="谷歌无头浏览器"><a href="#谷歌无头浏览器" class="headerlink" title="谷歌无头浏览器"></a>谷歌无头浏览器</h2><p>😨第一次听这么恐怖得名称，所谓无头（headless）浏览器指的是没有可视化界面得浏览器。这样打包好给用户，不至于用户在使用得时候发现自己得浏览器开始骚操作了~</p><ul><li>当然还有一个无头浏览器，称为phantomjs（停止更新了）。</li></ul><p>只需要在原来代码得基础上加入如下内容：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"><span class="comment"># 创建一个参数对象，用来控制chrome以无界面模式打开</span></span><br><span class="line">chrome_options = Options()</span><br><span class="line">chrome_options.add_argument(<span class="string">'--headless'</span>)</span><br><span class="line">chrome_options.add_argument(<span class="string">'--disable-gpu'</span>)</span><br></pre></td></tr></table></figure><p>例子：打开淘宝并截图</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"><span class="comment"># 创建一个参数对象，用来控制chrome以无界面模式打开</span></span><br><span class="line">chrome_options = Options()</span><br><span class="line">chrome_options.add_argument(<span class="string">'--headless'</span>)</span><br><span class="line">chrome_options.add_argument(<span class="string">'--disable-gpu'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">bro = webdriver.Chrome(executable_path=<span class="string">'chromedriver.exe'</span>,chrome_options=chrome_options)</span><br><span class="line">bro.get(<span class="string">'https://www.taobao.com/'</span>)</span><br><span class="line">bro.save_screenshot(<span class="string">'./taobao.jpg'</span>)</span><br><span class="line"></span><br><span class="line">print(bro.page_source)</span><br></pre></td></tr></table></figure><h2 id="如果规避监测"><a href="#如果规避监测" class="headerlink" title="如果规避监测"></a>如果规避监测</h2><p>既然selenium这么利，防守方该怎么做呢？</p><ul><li>服务器会对 selenium 暴露出的一些变量进行监测，如果监测到用户使用了 selenium 则不让其访问。</li></ul><p>首先执行如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">bro = webdriver.Chrome(<span class="string">'chromedriver.exe'</span>)</span><br><span class="line">bro.get(<span class="string">'https://www.taobao.com'</span>)</span><br></pre></td></tr></table></figure><p>打开淘宝页面，然后我们打开开发者工具，点击 console 执行 js 注入，输入这一句：</p><p><code>window.navigator.webdriver</code></p><ul><li>undefined：正常</li><li>true：使用了selenium</li></ul><p>那我们该如何规避监测呢？ 同样是一段代码，随用随粘</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ChromeOptions</span><br><span class="line"></span><br><span class="line">option = ChromeOptions()</span><br><span class="line">option.add_experimental_option(<span class="string">'excludeSwitches'</span>, [<span class="string">'enable-automation'</span>])</span><br><span class="line">bro = webdriver.Chrome(<span class="string">'chromedriver.exe'</span>, options=option)</span><br></pre></td></tr></table></figure><p>补充上例：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ChromeOptions</span><br><span class="line"></span><br><span class="line">option = ChromeOptions()</span><br><span class="line">option.add_experimental_option(<span class="string">'excludeSwitches'</span>, [<span class="string">'enable-automation'</span>])</span><br><span class="line">bro = webdriver.Chrome(<span class="string">'chromedriver.exe'</span>, options=option)</span><br><span class="line"></span><br><span class="line">bro.get(<span class="string">'https://www.taobao.com'</span>)</span><br></pre></td></tr></table></figure><h2 id="12306的模拟登录"><a href="#12306的模拟登录" class="headerlink" title="12306的模拟登录"></a>12306的模拟登录</h2><p>地址为：<code>https://kyfw.12306.cn/otn/login/init</code></p><ul><li>核心： 验证码图片的截取、使用动作链</li></ul><p>流程：</p><ol><li>获取登录页面，并截图</li><li>定位img标签的位置和大小，用于对前面截到的图片进行裁剪得到验证码。</li><li>通过打码平台确定需要点击的坐标，然后定义动作链，完成验证码校验<ul><li>对于验证码我使用打码平台 （超级鹰）</li></ul></li><li>填写用户名，密码，点击按钮即可</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image  <span class="comment"># 下载pil或者是pillow，完成对图片的裁剪</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 超级鹰部分</span></span><br><span class="line"><span class="keyword">from</span> ChaoJiYing <span class="keyword">import</span> Chaojiying_Client</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_code</span><span class="params">(img_path, ctype)</span>:</span></span><br><span class="line">    chaojiying = Chaojiying_Client(<span class="string">'用户名'</span>, <span class="string">'密码'</span>, <span class="string">'901824'</span>)  <span class="comment"># 用户中心&gt;&gt;软件ID 生成一个替换 96001</span></span><br><span class="line">    im = open(img_path, <span class="string">'rb'</span>).read()</span><br><span class="line">    <span class="keyword">return</span> chaojiying.PostPic(im, ctype)[<span class="string">'pic_str'</span>]  <span class="comment"># 1902 验证码类型  官方网站&gt;&gt;价格体系 3.4+版 print 后要加()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">bro = webdriver.Chrome(<span class="string">'chromedriver.exe'</span>)</span><br><span class="line">bro.get(<span class="string">'https://kyfw.12306.cn/otn/login/init'</span>)</span><br><span class="line">sleep(<span class="number">2</span>)  <span class="comment"># 这里需要睡眠，因为加载图片是需要时间的，不加后面的坐标就是0*0了。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 截取登陆页面</span></span><br><span class="line">bro.save_screenshot(<span class="string">'./login.png'</span>)</span><br><span class="line"><span class="comment"># 定位img坐标</span></span><br><span class="line">img_tag = bro.find_element_by_xpath(<span class="string">'//*[@id="loginForm"]/div/ul[2]/li[4]/div/div/div[3]/img'</span>)</span><br><span class="line"><span class="comment"># 通过img坐标使用 Image 进行裁剪</span></span><br><span class="line">location = img_tag.location  <span class="comment"># 左下角坐标</span></span><br><span class="line"><span class="comment"># print(location)</span></span><br><span class="line">size = img_tag.size  <span class="comment"># img标签对应的图片的尺寸</span></span><br><span class="line"><span class="comment"># print(size)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 得到的坐标转为列表  ---&gt;  [[x,y],[x,y]]</span></span><br><span class="line">rangle = (location[<span class="string">'x'</span>], location[<span class="string">'y'</span>], location[<span class="string">'x'</span>] + size[<span class="string">'width'</span>], location[<span class="string">'y'</span>] + size[<span class="string">'height'</span>])</span><br><span class="line">print(rangle)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从登录图片中截取出验证码图片</span></span><br><span class="line">img = Image.open(<span class="string">'./login.png'</span>)</span><br><span class="line">code_img = img.crop(rangle)  <span class="comment"># 接受左下角和右上角两个坐标  (x1,y1,x2,y2)    # 要么屏幕分辨率1280*720 要么显示设为100%</span></span><br><span class="line">code_img.save(<span class="string">'./code.png'</span>)</span><br><span class="line"></span><br><span class="line">xy_str = get_code(<span class="string">'./code.png'</span>, <span class="number">9004</span>)</span><br><span class="line">print(xy_str)</span><br><span class="line"></span><br><span class="line">xy_list = []</span><br><span class="line"><span class="keyword">for</span> xy <span class="keyword">in</span> xy_str.split(<span class="string">'|'</span>):</span><br><span class="line">    x, y = xy.split(<span class="string">','</span>)</span><br><span class="line">    xy_list.append((int(x), int(y)))</span><br><span class="line"></span><br><span class="line">print(xy_list)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 点击操作，需要动作链，偏移然后点击</span></span><br><span class="line">action = webdriver.ActionChains(bro)</span><br><span class="line"><span class="keyword">for</span> xy <span class="keyword">in</span> xy_list:</span><br><span class="line">    print(xy)</span><br><span class="line">    action.move_to_element_with_offset(img_tag, *xy).click().perform()</span><br><span class="line"></span><br><span class="line">user = bro.find_element_by_xpath(<span class="string">'//*[@id="username"]'</span>)</span><br><span class="line">pw = bro.find_element_by_xpath(<span class="string">'//*[@id="password"]'</span>)</span><br><span class="line"></span><br><span class="line">user.send_keys(<span class="string">'用户名'</span>)</span><br><span class="line">pw.send_keys(<span class="string">'密码'</span>)</span><br><span class="line"></span><br><span class="line">btn = bro.find_element_by_xpath(<span class="string">'//*[@id="loginSub"]'</span>)</span><br><span class="line">btn.click()</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>用到的方法</p><ul><li>webdriver.Chrome() 实例一个浏览器对象（驱动程序）</li><li>get()：发送get请求</li><li>find的系列的函数：用作标签定位</li><li>send_keys(): 进行向标签中录入数据</li><li>click()</li><li>excute_script(‘j’): js注入</li><li>page_sourse: 返回的是页面源码数据</li><li>switch_to.frame(): 如何定位的标签是存在于嵌套页面中，需要定位前先切换到这个子页面中</li><li>save_screenshot()：截图</li></ul>]]></content>
      <categories>
        <category>网络爬虫</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>python</tag>
        <tag>网络爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>使用asyncio和aiohttp加速爬取</title>
    <url>/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/20190924-Web_Spider_5.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>上一篇中介绍了基于asyncio模块的单线程-多任务的异步协程，本篇与aiohttp（支持异步网络请求模块）配合来加速爬取。</p></blockquote><a id="more"></a><h2 id="aiohttp"><a href="#aiohttp" class="headerlink" title="aiohttp"></a>aiohttp</h2><p>概念：支持异步的网络请求模块</p><ul><li>它是基于asyncio实现的</li></ul><p>编写流程：</p><ul><li>写基本架构：</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> aiohttp.ClientSession() <span class="keyword">as</span> s:</span><br><span class="line">    <span class="comment"># s.get(url)  # 这里的参数和requests中的get/post 的参数大部分相同，只有proxy = 'http://ip"port"'需要注意</span></span><br><span class="line">    <span class="keyword">with</span> <span class="keyword">await</span> s.get(url) <span class="keyword">as</span> response:</span><br><span class="line">        page_text = <span class="keyword">await</span> response.text()     <span class="comment"># text 返回的是字符串形式的响应数据，read() 返回的是二进制的响应数据</span></span><br><span class="line">        <span class="keyword">return</span> page_text</span><br><span class="line"></span><br><span class="line"><span class="comment"># note：aiohttp需要我们手动关闭，所以使用with进行上下文管理。</span></span><br></pre></td></tr></table></figure><ul><li><p>补充细节：</p><ul><li><p>添加 async 关键字</p><ul><li>每一个<code>with</code>前 加 async。</li></ul></li><li><p>添加await关键字</p><ul><li>加到每一步的阻塞操前<ul><li>请求</li><li>获取响应数据</li></ul></li></ul></li></ul></li></ul><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>本例中先在本地搭一个flask服务器，然后对它进行爬取。</p><p>首先是flask代码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># server.py</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/ip1')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index_1</span><span class="params">()</span>:</span></span><br><span class="line">    sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'ip.html'</span>)	<span class="comment"># 这个html 随便，有就行。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/ip2')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index_2</span><span class="params">()</span>:</span></span><br><span class="line">    sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'ip.html'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.run(debug=<span class="literal">True</span>)  <span class="comment"># 有改动就会自动重启</span></span><br></pre></td></tr></table></figure><p>接下来写我们的爬虫代码吧：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 尝试reuqests</span></span><br><span class="line"><span class="comment"># async def get_request(url):</span></span><br><span class="line"><span class="comment">#     # requests是一个不支持异步的模块</span></span><br><span class="line"><span class="comment">#     page_text = requests.get(url).text</span></span><br><span class="line"><span class="comment">#     return page_text</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 协程函数：发起请求获取页面源码数据</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">get_request</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="comment"># aiohttp.ClientSession()  # 定义请求对象，且在用完之后需要使用手动关闭close,使用with做上下文管理</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession() <span class="keyword">as</span> s:</span><br><span class="line">        <span class="comment"># s.get(url)  # 这里的参数和requests中的get/post 的参数大部分相同，只有proxy = 'http://ip"port"'需要注意</span></span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">with</span> <span class="keyword">await</span> s.get(url) <span class="keyword">as</span> response:</span><br><span class="line">            page_text = <span class="keyword">await</span> response.text()     <span class="comment"># text 返回的是字符串形式的响应数据，read() 返回的是二进制的响应数据</span></span><br><span class="line">            <span class="keyword">return</span> page_text</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(task)</span>:</span></span><br><span class="line">    page_text = task.result()</span><br><span class="line">    tree = etree.HTML(page_text)    <span class="comment"># 这里使用etree 影响异步吗？不需要，直接执行完就行</span></span><br><span class="line">    print(tree.xpath(<span class="string">'//*[@id="3"]/div/div[2]/p[1]'</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">urls = [</span><br><span class="line">    <span class="string">'http://127.0.0.1:5000/ip1'</span>,</span><br><span class="line">    <span class="string">'http://127.0.0.1:5000/ip2'</span>,</span><br><span class="line">    <span class="string">'http://127.0.0.1:5000/ip1'</span>,</span><br><span class="line">    <span class="string">'http://127.0.0.1:5000/ip2'</span>,</span><br><span class="line">    <span class="string">'http://127.0.0.1:5000/ip1'</span>,</span><br><span class="line">    <span class="string">'http://127.0.0.1:5000/ip2'</span>,</span><br><span class="line">]</span><br><span class="line">start = time.time()</span><br><span class="line"><span class="comment"># py3.6</span></span><br><span class="line"><span class="comment"># tasks = []  # 任务列表</span></span><br><span class="line"><span class="comment"># for url in urls:</span></span><br><span class="line"><span class="comment">#     # 创建协程对象</span></span><br><span class="line"><span class="comment">#     c = get_request(url)</span></span><br><span class="line"><span class="comment">#     # 创建任务对象</span></span><br><span class="line"><span class="comment">#     task = asyncio.ensure_future(c)</span></span><br><span class="line"><span class="comment">#     # 绑定回调：用作数据解析</span></span><br><span class="line"><span class="comment">#     task.add_done_callback(parse)</span></span><br><span class="line"><span class="comment">#     tasks.append(task)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># # 创建事件循环对象</span></span><br><span class="line"><span class="comment"># loop = asyncio.get_event_loop()</span></span><br><span class="line"><span class="comment"># # 注册任务并开启事件循环</span></span><br><span class="line"><span class="comment"># loop.run_until_complete(asyncio.wait(tasks))</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># print('总耗时：', time.time() - start)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># py3.7</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义 asyncio 程序的主入口</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    tasks = []  <span class="comment"># 任务列表</span></span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">        <span class="comment"># 创建协程对象</span></span><br><span class="line">        c = get_request(url)</span><br><span class="line">        <span class="comment"># 创建任务对象</span></span><br><span class="line">        task = asyncio.ensure_future(c)</span><br><span class="line">        <span class="comment"># 绑定回调：用作数据解析</span></span><br><span class="line">        task.add_done_callback(parse)</span><br><span class="line">        tasks.append(task)</span><br><span class="line">    <span class="keyword">await</span> asyncio.gather(*tasks)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">asyncio.run(main())</span><br><span class="line">print(<span class="string">'总耗时：'</span>, time.time() - start)</span><br></pre></td></tr></table></figure><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><p>待补充！！！</p>]]></content>
      <categories>
        <category>网络爬虫</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>python</tag>
        <tag>网络爬虫</tag>
        <tag>并发编程</tag>
      </tags>
  </entry>
  <entry>
    <title>单线程-多任务的异步协程</title>
    <url>/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/20190923-Web_Spider_4.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>本篇介绍基于asyncio模块，实现单线程-多任务的异步协程。</p></blockquote><a id="more"></a><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><blockquote><pre><code>协程是实现并发编程的一种方式。一说并发，你肯定想到了多线程 / 多进程模型，没错，多线程 / 多进程，正是解决并发问题的经典模型之一。最初的互联网世界，多线程 / 多进程在服务器并发中，起到举足轻重的作用。</code></pre><p>​ 随着互联网的快速发展，你逐渐遇到了 <strong>C10K 瓶颈</strong>，也就是同时连接到服务器的客户达到了一万个。于是很多代码跑崩了，进程上下文切换占用了大量的资源，线程也顶不住如此巨大的压力，这时， NGINX 带着<strong>事件循环</strong>出来拯救世界了。</p><p>​ 如果将多进程 / 多线程类比为起源于唐朝的藩镇割据，那么事件循环，就是宋朝加强的中央集权制。<strong>事件循环启动一个统一的调度器，让调度器来决定一个时刻去运行哪个任务，于是省却了多线程中启动线程、管理线程、同步锁等各种开销。</strong>同一时期的 NGINX，在高并发下能保持低资源低消耗高性能，相比 Apache 也支持更多的并发连接。</p><p>​ 再到后来，出现了一个很有名的名词，叫做回调地狱（callback hell），手撸过 JavaScript 的朋友肯定知道我在说什么。我们大家惊喜地发现，这种工具完美地继承了事件循环的优越性，同时还能提供 async / await 语法糖，解决了执行性和可读性共存的难题。于是，协程逐渐被更多人发现并看好，也有越来越多的人尝试用 Node.js 做起了后端开发。（讲个笑话，JavaScript 是一门编程语言。）</p><p>引用自《Python核心技术与实战》</p></blockquote><h2 id="协程函数"><a href="#协程函数" class="headerlink" title="协程函数"></a>协程函数</h2><ul><li><em>协程函数</em>: 定义形式为 <a href="https://docs.python.org/zh-cn/3/reference/compound_stmts.html#async-def" target="_blank" rel="noopener"><code>async def</code></a> 的函数;</li></ul><h3 id="aysnc"><a href="#aysnc" class="headerlink" title="aysnc"></a>aysnc</h3><ul><li><p>在<code>Python</code>3.5+版本新增了<code>aysnc</code>和<code>await</code>关键字，这两个语法糖让我们非常方便地定义和使用协程。</p></li><li><p>如果一个函数的定义被<code>async</code>修饰后，则该函数就是一个<strong>特殊的函数（协程函数）</strong>。</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 async 关键字修饰函数后，调用该函数，但不会执行函数，而是返回一个coroutine协程对象</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">get_request</span><span class="params">(url)</span>:</span></span><br><span class="line">    print(<span class="string">"正在请求: "</span>, url)</span><br><span class="line">    sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">'请求结束:'</span>, url)</span><br><span class="line">    </span><br><span class="line">get_request(<span class="string">'www.b.com'</span>)</span><br></pre></td></tr></table></figure><p>运行分析：</p><ul><li><p>直接调用这个函数的话并不会被执行，也会出现一条警告 <code>RuntimeWarning: coroutine &#39;get_request&#39; was never awaited</code> 。</p></li><li><p>对于它的解释 <a href="https://docs.python.org/zh-cn/3/library/asyncio-dev.html" target="_blank" rel="noopener">官方文档</a> 里提到，当协程程序被调用而不是被等待时（即执行 <code>get_request(&#39;www.b.com&#39;)</code> 而不是 <code>await get_request(&#39;www.b.com&#39;)</code> ）或者协程没有通过 <a href="https://docs.python.org/zh-cn/3/library/asyncio-task.html#asyncio.create_task" target="_blank" rel="noopener"><code>asyncio.create_task()</code></a> 被排入计划日程（<strong>创建任务对象</strong>），asyncio 将会发出一条 <a href="https://docs.python.org/zh-cn/3/library/exceptions.html#RuntimeWarning" target="_blank" rel="noopener"><code>RuntimeWarning</code></a>。</p></li><li><p>当然 asyncio.create_task( get_request) 是py3.7中的，在之前的版本中是用到的 asyncio.ensure_future( get_request )</p></li></ul><h3 id="await"><a href="#await" class="headerlink" title="await"></a>await</h3><ul><li>在协程中如果要调用另一个协程就使用<code>await</code>，它可以<strong>挂起阻塞</strong>的异步调用接口。<ul><li><strong>要注意await关键字要在async定义的函数中使用，而反过来async函数可以不出现await</strong></li></ul></li><li>如果一个对象可以在 <a href="https://docs.python.org/zh-cn/3/reference/expressions.html#await" target="_blank" rel="noopener"><code>await</code></a> 语句中使用，那么它就是 <strong>可等待</strong> 对象。许多 asyncio API 都被设计为接受可等待对象。</li><li><span style="color:red">可等待</span> 对象有三种主要类型: <strong>协程</strong>, <strong>任务</strong> 和 <strong>Future</strong>.<ul><li>如果直接使用 <code>await 协程函数</code> 、是不会有异步效果的，相当于用异步接口写了个同步代码。需要将协程对象转化成任务才可以异步运行。</li><li>通过 <code>ensure_future</code> 或 <code>create_task</code> 函数打包协程对象即可得到<strong>任务</strong>。</li><li><a href="https://docs.python.org/zh-cn/3/library/asyncio-future.html#asyncio.Future" target="_blank" rel="noopener"><code>Future</code></a> 是一种特殊的 <strong>低层级</strong> 可等待对象，表示一个异步操作的 <strong>最终结果</strong>。<ul><li>不用回调方法编写异步代码后，为了获取异步调用的结果，引入一个 Future 未来对象。Future 封装了与 loop 的交互行为，add_done_callback 方法向 epoll 注册回调函数，当 result 属性得到返回值后，会运行之前注册的回调函数，向上传递给 coroutine。</li><li>通常情况下 <strong>没有必要</strong> 在应用层级的代码中创建 Future 对象</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">producer</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">6</span>):</span><br><span class="line">        print(<span class="string">f'生产：<span class="subst">&#123;i&#125;</span>'</span>)</span><br><span class="line">        <span class="keyword">await</span> consumer(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">consumer</span><span class="params">(i)</span>:</span></span><br><span class="line">    print(<span class="string">f'消费：<span class="subst">&#123;i&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line">asyncio.run(producer())</span><br><span class="line"><span class="comment"># asyncio.run() 是py3.7更新出来的，在py3.7中，使用这个可以简单直接的运行 asyncio 程序。</span></span><br></pre></td></tr></table></figure><ul><li><p><a href="https://docs.python.org/zh-cn/3/library/asyncio-task.html#asyncio.run" target="_blank" rel="noopener"><code>asyncio.run()</code></a> 函数用来运行最高层级的入口点 “main()” 函数，更多解释详见 <a href="https://docs.python.org/zh-cn/3/library/asyncio-task.html#asyncio.create_task" target="_blank" rel="noopener">官方文档</a></p></li><li><p>此函数总是会创建一个新的事件循环并在结束时关闭之。它应当被用作 asyncio 程序的主入口点，理想情况下应当只被调用一次。</p></li></ul><h2 id="协程对象"><a href="#协程对象" class="headerlink" title="协程对象"></a>协程对象</h2><ul><li><p><em>协程对象*：调用 *协程函数</em> 所返回的对象。</p><ul><li>特殊函数被调用后，函数内部的实现语句不会被立即执行，然后该函数调用会返回一个协程对象。</li></ul></li><li><p>结论：协程对象 == 特殊的函数调用</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">get_request</span><span class="params">(url)</span>:</span></span><br><span class="line">    print(<span class="string">"正在请求: "</span>, url)</span><br><span class="line">    sleep(<span class="number">1</span>) <span class="comment"># 这里是个小坑</span></span><br><span class="line">    print(<span class="string">'请求结束:'</span>, url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数调用：返回的就是一个协程对象</span></span><br><span class="line">c = get_request(<span class="string">'www.b.com'</span>)</span><br><span class="line">print(c)	</span><br><span class="line">	<span class="comment"># &lt;coroutine object get_request at 0x000002A6DFA026D0&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建3个协程对象</span></span><br><span class="line">urls = [</span><br><span class="line">    <span class="string">'1.com'</span>, <span class="string">'2.com'</span>, <span class="string">'3.com'</span></span><br><span class="line">]</span><br><span class="line">coroutine_list = []</span><br><span class="line"><span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">    c = get_request(url)</span><br><span class="line">    coroutine_list.append(c)</span><br><span class="line">print(coroutine_list)</span><br><span class="line">	<span class="comment"># [&lt;coroutine object get_request at 0x0000022FE5313F10&gt;, &lt;coroutine object get_request at 0x0000022FE52426D0&gt;, &lt;coroutine object get_request at 0x0000022FE5313EB8&gt;]</span></span><br></pre></td></tr></table></figure><h2 id="任务对象"><a href="#任务对象" class="headerlink" title="任务对象"></a>任务对象</h2><ul><li><strong>任务对象其实就是对协程对象的进一步封装</strong>。</li><li><em>任务</em> 被用来设置日程以便 <em>并发</em> 执行协程。</li></ul><p>结论：任务对象 == 高级的协程对象 == 特殊的函数调用</p><p>特性：可以绑定回调（爬虫中回调函数常用来做数据解析）</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"><span class="comment"># 协程函数的定义</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">get_request</span><span class="params">(url)</span>:</span></span><br><span class="line">    print(<span class="string">"正在请求: "</span>, url)</span><br><span class="line">    sleep(<span class="number">1</span>)	<span class="comment"># 这里是个小坑</span></span><br><span class="line">    print(<span class="string">'请求结束:'</span>, url)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数调用：返回的就是一个协程对象</span></span><br><span class="line">c = get_request(<span class="string">'www.b.com'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个任务对象：基于协程对象创建的</span></span><br><span class="line">task = asyncio.ensure_future(c)			<span class="comment"># ensure_future 是py3.7之前的</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建3个任务对象</span></span><br><span class="line">urls = [</span><br><span class="line">    <span class="string">'1.com'</span>, <span class="string">'2.com'</span>, <span class="string">'3.com'</span></span><br><span class="line">]</span><br><span class="line">task_list = []  <span class="comment"># 存放多个任务对象的列表</span></span><br><span class="line"><span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">    c = get_request(url)</span><br><span class="line">    task = asyncio.ensure_future(c)</span><br><span class="line">    task_list.append(task)</span><br></pre></td></tr></table></figure><h3 id="绑定回调"><a href="#绑定回调" class="headerlink" title="绑定回调"></a>绑定回调</h3><p>回调函数什么时候被执行？</p><ul><li>任务对象执行结束后执行</li></ul><p><code>task.add_done_callback(func)</code></p><ul><li>func必须要有一个参数，该参数表示的是该回调函数对应的任务对象</li><li><code>回调函数的参数.result()</code> ： 任务对象对应的特殊函数执行结束的返回值。</li></ul><h2 id="事件循环对象"><a href="#事件循环对象" class="headerlink" title="事件循环对象"></a>事件循环对象</h2><ul><li>作用：将其内部注册的任务对象进行异步执行。</li><li><strong>事件循环是异步编程的底层基石</strong>。</li><li>在py3.6中我们需要手动创建事件循环对象。</li><li>在py3.7中，有了高层级的 asyncio 函数，例如 asyncio.run()，就很少有必要使用 <strong>低层级函数</strong> 来手动创建和关闭事件循环。</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数的定义</span></span><br><span class="line"><span class="comment"># 使用 async 关键字修饰函数后，调用该函数，但不会执行函数，而是返回一个coroutine协程对象</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">get_request</span><span class="params">(url)</span>:</span></span><br><span class="line">    print(<span class="string">"正在请求: "</span>, url)</span><br><span class="line">    <span class="comment"># asyncio.sleep(1)    # 阻塞1s没有成功</span></span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)  <span class="comment"># 加上await关键字即可，这里的 await 表示等待</span></span><br><span class="line">    print(<span class="string">'请求结束:'</span>, url)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建3个协程对象</span></span><br><span class="line">urls = [</span><br><span class="line">    <span class="string">'1.com'</span>, <span class="string">'2.com'</span>, <span class="string">'3.com'</span></span><br><span class="line">]</span><br><span class="line">start = time.time()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># py3.6</span></span><br><span class="line"><span class="comment"># 创建任务列表：存储多个任务对象</span></span><br><span class="line">tasks = [asyncio.ensure_future(get_request(url)) <span class="keyword">for</span> url <span class="keyword">in</span> urls]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前事件循环，如果当前os线程没有设置并且 set_event_loop() 还没有被调用，asyncio创建一个新的事件循环</span></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(asyncio.wait(tasks))  <span class="comment"># 直接列表会报错，需要修饰以下，这里的 wait 表示挂起</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">'总耗时：'</span>, time.time() - start)</span><br><span class="line"></span><br><span class="line"><span class="comment"># py3.7</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当然这样的写法仍是同步</span></span><br><span class="line"><span class="comment"># async def main():</span></span><br><span class="line"><span class="comment">#     for url in urls:</span></span><br><span class="line"><span class="comment">#         task = asyncio.create_task(get_request(url))</span></span><br><span class="line"><span class="comment">#         await task			# 当前也只有一个任务，所以仍是同步</span></span><br><span class="line"><span class="comment">#     print('总耗时：', time.time() - start)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># asyncio.run(main())</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 异步写法一</span></span><br><span class="line"><span class="comment"># async def main():</span></span><br><span class="line"><span class="comment">#     tasks = [asyncio.create_task(get_request(url)) for url in urls]</span></span><br><span class="line"><span class="comment">#     for task in tasks:</span></span><br><span class="line"><span class="comment">#         await task              # 这样当一个任务遇到阻塞就会切换到下一个任务，知道所有任务都结束为止</span></span><br><span class="line"><span class="comment">#     print('总耗时：', time.time() - start)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># asyncio.run(main())</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 异步写法二：推荐</span></span><br><span class="line"><span class="comment"># 为了省去遍历任务列表的过程增加了 gather 方法</span></span><br><span class="line"><span class="comment"># async def main():</span></span><br><span class="line"><span class="comment">#     tasks = [asyncio.create_task(get_request(url)) for url in urls]</span></span><br><span class="line"><span class="comment">#     await asyncio.gather(*tasks)</span></span><br><span class="line"><span class="comment">#     print('总耗时：', time.time() - start)</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># asyncio.run(main())</span></span><br></pre></td></tr></table></figure><ul><li>与py3.6相比，都是先做一个任务列表，然后py3.6需要手动创建事件循环对象<code>get_event_loop</code> 并使用 <code>run_until_complete</code> 来达到异步执行，而在py3.7中，gather会并发的执行传入的可等待对象并在run的调用下完成异步执行。所以在新版py3.7中，我们无需手动创建和关闭事件循环了。</li><li>py3.7用 create_task 代替 ensure_future。</li></ul><h2 id="编码流程"><a href="#编码流程" class="headerlink" title="编码流程"></a>编码流程</h2><ul><li><p>定义协程函数</p></li><li><p>创建协程对象</p></li><li><p>封装任务对象</p><ul><li>绑定回调函数</li></ul></li><li><p>创建事件循环对象</p></li><li><p>将任务对象注册到事件循环对象中，并且开启事件循环。</p></li></ul><p>按照流程完整的py3.6代码如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义协程函数</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">get_request</span><span class="params">(url)</span>:</span></span><br><span class="line">    print(<span class="string">"正在请求: "</span>, url)</span><br><span class="line">    <span class="comment"># asyncio.sleep(1)    # 阻塞1s没有成功</span></span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)  <span class="comment"># 加上await关键字即可，这里的 await 表示等待</span></span><br><span class="line">    print(<span class="string">'请求结束:'</span>, url)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'我去回调啦'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(task)</span>:</span>  <span class="comment"># task 表示与回调函数绑定的任务对象 / 给回调函数传入任务对象</span></span><br><span class="line">    print(<span class="string">'i am task callback() !!!'</span>, task.result())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">urls = [</span><br><span class="line">    <span class="string">'1.com'</span>, <span class="string">'2.com'</span>, <span class="string">'3.com'</span></span><br><span class="line">]</span><br><span class="line">start = time.time()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 任务列表：存储多个任务对象</span></span><br><span class="line">tasks = []</span><br><span class="line"><span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">    <span class="comment"># 创建协程对象</span></span><br><span class="line">    c = get_request(url)</span><br><span class="line">    <span class="comment"># 封装任务对象</span></span><br><span class="line">    task = asyncio.ensure_future(c)</span><br><span class="line">    <span class="comment"># 绑定回调</span></span><br><span class="line">    task.add_done_callback(parse)</span><br><span class="line">    tasks.append(task)</span><br><span class="line"><span class="comment"># 创建事件循环对象</span></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line"><span class="comment"># 将任务对象注册到事件循环对象中，并且开启事件循环</span></span><br><span class="line">loop.run_until_complete(asyncio.wait(tasks))  <span class="comment"># 直接列表会报错，需要修饰以下，这里的 wait 表示挂起</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">'总耗时：'</span>, time.time() - start)</span><br></pre></td></tr></table></figure><p>note：在特殊函数内部的实现语句中不可以出现不支持异步的模块对应的代码，否则就会终止多任务异步协程的异步效果。</p><p>在py3.7中，则为</p><ul><li><p>定义协程函数</p></li><li><p>定义 asyncio 程序的主入口</p><ul><li>创建协程对象</li><li>封装任务对象</li><li>绑定回调函数</li></ul></li><li><p><code>asyncio.run(main())</code></p></li></ul><p>按照流程完整的py3.7代码如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义协程函数</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">get_request</span><span class="params">(url)</span>:</span></span><br><span class="line">    print(<span class="string">"正在请求: "</span>, url)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">'请求结束:'</span>, url)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'我去回调啦'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(task)</span>:</span>  <span class="comment"># task 表示与回调函数绑定的任务对象 / 给回调函数传入任务对象</span></span><br><span class="line">    print(<span class="string">'i am task callback() !!!'</span>, task.result())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">urls = [</span><br><span class="line">    <span class="string">'1.com'</span>, <span class="string">'2.com'</span>, <span class="string">'3.com'</span></span><br><span class="line">]</span><br><span class="line">start = time.time()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义 asyncio 程序的入口点</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    tasks = []</span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">        <span class="comment"># 创建协程对象</span></span><br><span class="line">        c = get_request(url)</span><br><span class="line">        <span class="comment"># 封装任务对象</span></span><br><span class="line">        task = asyncio.create_task(c)</span><br><span class="line">        <span class="comment"># 绑定回调函数</span></span><br><span class="line">        task.add_done_callback(parse)</span><br><span class="line">        tasks.append(task)</span><br><span class="line">    <span class="keyword">await</span> asyncio.gather(*tasks)</span><br><span class="line">    print(<span class="string">'总耗时：'</span>, time.time() - start)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">asyncio.run(main())</span><br></pre></td></tr></table></figure><h2 id="异步的本质"><a href="#异步的本质" class="headerlink" title="异步的本质"></a>异步的本质</h2><ul><li><p>按照注册顺序执行，遇到阻塞就会挂起，执行下一个任务。</p></li><li><p>当上一个任务的阻塞结束后，就会继续执行该任务。</p></li><li><p>真正的挂起是由 <code>asyncio.wait(tasks)</code> 做到的</p></li></ul><p><img src="/网络爬虫/20190923-Web_Spider_4/%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF.jpg" alt="事件循环"></p><p>图片来自: <a href="https://zhuanlan.zhihu.com/p/30275154" target="_blank" rel="noopener">谈谈Python协程技术的演进</a></p><p><img src="/网络爬虫/20190923-Web_Spider_4/%E5%BA%95%E5%B1%82%E6%B5%81%E7%A8%8B.png" alt="底层流程"></p><p>图片来自 <a href="https://lotabout.me/2017/understand-python-asyncio/" target="_blank" rel="noopener">理解 Python asyncio</a></p><p>底层还没有理解，先把大佬的图粘过来慢慢研究😄</p><p>待补充！！！</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="执行协程的三种机制"><a href="#执行协程的三种机制" class="headerlink" title="执行协程的三种机制"></a>执行协程的三种机制</h2><p>asyncio提供了三种执行协程的机制：</p><ol><li><p>使用<code>asyncio.run()</code>执行协程。一般用于执行最顶层的入口函数，如<code>main()</code>。</p></li><li><p><code>await</code>一个协程。一般用于在一个协程中调用另一协程。</p></li><li><p>用 <code>asyncio.create_task()</code> 或 <code>asyncio.ensure_futuer()</code> 方法将Coroutine（协程）封装为Task（任务）。一般用于实现异步并发操作。 需要注意的是，只有在当前线程存在事件循环的时候才能创建任务（Task）。</p></li></ol><p>在下一篇中将结合 aiohttp 网络请求模块，加速爬取！！！</p>]]></content>
      <categories>
        <category>网络爬虫</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>python</tag>
        <tag>网络爬虫</tag>
        <tag>并发编程</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo-自定义含有小游戏的404页面</title>
    <url>/Hexo/20190922-hexo_next_404page.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>在GitHub page中定义自己的404页面！</p></blockquote><a id="more"></a><p>通过这篇文章，你能了解到：</p><ul><li>如何自定义404页面</li><li>给404页面加入游戏的简单方式</li></ul><h2 id="自定义404页面"><a href="#自定义404页面" class="headerlink" title="自定义404页面"></a>自定义404页面</h2><p>404页面是对非法请求的一个回应，在没有定义之前，显示如下：</p><p><img src="/Hexo/20190922-hexo_next_404page/git404.png" alt="git404"></p><p>容我先展示一下结果！ <a href="chennq.com/404">404页面</a></p><p><img src="/Hexo/20190922-hexo_next_404page/404%E6%95%88%E6%9E%9C.png" alt="404效果"></p><p>接下来让我们开始：</p><ol><li><p>在博客根下的 <code>source</code> 目录中创建404.html</p></li><li><p>打开html，写入想要展示的html代码，我们的html可以带着框架，也可以是完全独立的一个。</p></li><li><p>不需要next主题进行渲染时：</p></li></ol><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">layout:</span> <span class="literal">false</span>			<span class="comment"># 不需要渲染</span></span><br><span class="line"><span class="attr">comments:</span> <span class="literal">false</span>			<span class="comment"># 评论也需要关闭了</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">/404.html</span>	<span class="comment"># 设置固定链接</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>以下是我的404.html代码</p><p><a href="chennq.com/404">404页面</a></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">comments: false</span><br><span class="line">permalink: /404.html</span><br><span class="line">---</span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#game</span> &#123;</span></span><br><span class="line">            width: 100%;</span><br><span class="line">            margin-top: 32px;</span><br><span class="line">            text-align: center;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#msg</span> &#123;</span></span><br><span class="line">            width: 100%;</span><br><span class="line">            text-align: center;</span><br><span class="line">            font-size: 70px;</span><br><span class="line">            font-family: PingFang SC, Helvetica Neue, Hiragino Sans GB, Segoe UI, Microsoft YaHei, sans-serif;</span><br><span class="line">            font-weight: bold;</span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>: <span class="selector-id">#4f565f</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.have_rest</span> &#123;</span></span><br><span class="line">            height: 41px;</span><br><span class="line">            background: url("/images/have_rest.png") center no-repeat rgba(255, 255, 255, .8);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.main-inner</span> &#123;</span></span><br><span class="line">            margin-top: 60px;</span><br><span class="line">            padding: 60px 60px 60px 60px;</span><br><span class="line">            background: rgba(255, 255, 255, 1) !important;</span><br><span class="line">            min-height: 500px;</span><br><span class="line">            border-radius: 5px;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"><span class="css">		@<span class="keyword">media</span> screen and (max-width: <span class="number">768px</span>) &#123;</span></span><br><span class="line">			canvas&#123;</span><br><span class="line">            margin-left: -94px;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/js/src/catch-cat/catch-the-cat.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span></span></span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"text-align: center;font-size: 30px; font-weight: bold"</span>&gt;</span>404 Not Found<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width: 320px;margin: 0 auto"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"text-align: center;font-size: large"</span>&gt;</span>请试试以下办法：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"font-size: medium"</span>&gt;</span>返回首页：<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://chennq.com"</span>&gt;</span>点击此处<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"font-size: medium"</span>&gt;</span>我的Github：<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://github.com/atlasnq"</span>&gt;</span>atlasnq<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"have_rest"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"error-split"</span> <span class="attr">id</span>=<span class="string">"up"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/js/src/catch-cat/phaser.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/js/src/catch-cat/catch-the-cat.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"game"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">window</span>.game = <span class="keyword">new</span> CatchTheCatGame(&#123;</span></span><br><span class="line">    w: 8,</span><br><span class="line">    h: 8,</span><br><span class="line">    r: 19,</span><br><span class="line">    backgroundColor: 16777215,</span><br><span class="line"><span class="actionscript">    parent: <span class="string">"game"</span>,</span></span><br><span class="line"><span class="actionscript">    statusBarAlign: <span class="string">"center"</span>,</span></span><br><span class="line"><span class="actionscript">    credit: <span class="string">""</span></span></span><br><span class="line">&#125;)<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里，我将 <a href="https://chennq.com/js/src/catch-cat/phaser.min.js">phaser.min.js</a> 和 <a href="https://chennq.com/js/src/catch-cat/catch-the-cat.min.js">catch-the-cat.min.js</a>上传到了自己的服务器，防止链接挂掉。如果想自定义的话，只需要将这两个js下载，然后模仿上文进行修改即可！</p><p>参考：<a href="https://www.jianshu.com/p/1b819734538f" target="_blank" rel="noopener">吾爱破解</a>、<a href="https://www.kimiye.xyz/2019/08/17/hexo3/" target="_blank" rel="noopener">自定义404抓猫游戏界面</a></p><h2 id="算法解析"><a href="#算法解析" class="headerlink" title="算法解析"></a>算法解析</h2><p>边配置边玩😄，对猫的路径搜索特别好奇，探索探索补充它的原理~</p><p>待补充！！！</p>]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Next主题</tag>
      </tags>
  </entry>
  <entry>
    <title>基于requests的爬虫</title>
    <url>/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/20190921-Web_Spider_3.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>本篇介绍基于requests的爬虫。</p></blockquote><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>概念：基于网络请求的模块</p><p>作用：用来模拟浏览器发请求，从而实现爬虫</p><h1 id="通用爬虫"><a href="#通用爬虫" class="headerlink" title="通用爬虫"></a>通用爬虫</h1><p>步骤：</p><ol><li>指定url</li><li>请求发送：get返回的是一个响应对象</li><li>获取响应数据: text返回的是字符串形式的响应数据</li><li>持久化存储</li></ol><h2 id="爬取搜狗首页的页面源码数据"><a href="#爬取搜狗首页的页面源码数据" class="headerlink" title="爬取搜狗首页的页面源码数据"></a>爬取搜狗首页的页面源码数据</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment"># 1.指定url</span></span><br><span class="line">url = <span class="string">'https://www.sogou.com/'</span></span><br><span class="line"><span class="comment"># 2.请求发送：get返回的是一个响应对象</span></span><br><span class="line">response = requests.get(url=url)</span><br><span class="line"><span class="comment"># 3. 获取响应数据: text返回的是字符串形式的响应数据</span></span><br><span class="line">page_text = response.text</span><br><span class="line">page_text</span><br><span class="line"><span class="comment"># 4. 持久化存储</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'./sogou.html'</span>,<span class="string">'w'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    fp.write(page_text)</span><br></pre></td></tr></table></figure><h2 id="实现一个简易的网页采集器"><a href="#实现一个简易的网页采集器" class="headerlink" title="实现一个简易的网页采集器"></a>实现一个简易的网页采集器</h2><ul><li>请求参数动态化（自定义字典给get方法的params传参）</li><li>使用UA伪装</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">url = <span class="string">'https://www.sogou.com/web'</span></span><br><span class="line"><span class="comment"># 请求参数的动态化</span></span><br><span class="line">wd = input(<span class="string">'enter a key word：'</span>)</span><br><span class="line">params = &#123;</span><br><span class="line">    <span class="string">'query'</span>:wd</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 没有做UA伪装是得不到数据的</span></span><br><span class="line">headers = &#123;</span><br><span class="line">  <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.132 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.get(url=url, params=params,headers=headers)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将响应数据的编码格式手动进行指定，来解决乱码问题。</span></span><br><span class="line">response.encoding = <span class="string">'utf-8'</span></span><br><span class="line">page_text = response.text</span><br><span class="line">fileName = wd + <span class="string">'.html'</span></span><br><span class="line"><span class="keyword">with</span> open(fileName,<span class="string">'w'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    fp.write(page_text)</span><br><span class="line">print(fileName,<span class="string">'爬取成功！'</span>)</span><br></pre></td></tr></table></figure><h2 id="动态加载的数据"><a href="#动态加载的数据" class="headerlink" title="动态加载的数据"></a>动态加载的数据</h2><ul><li>页面中想要爬取的内容并不是请求当前url得到的，而是通过另一个网络请求请求到的数据（例如，滚轮滑到底部，会发送ajax，对局部进行刷新）</li></ul><p>例子：爬取豆瓣电影中动态加载出的电影详情</p><p>我们想爬取的页面是：豆瓣电影分类排行榜 - 科幻片 <code>https://movie.douban.com/typerank?type_name=%E7%A7%91%E5%B9%BB&amp;type=17&amp;interval_id=100:90&amp;action=</code></p><ul><li><p>首先在chorme的抓包工具中进行全局搜索发现它不是请求当前url得到的，而是一个新的url： <code>https://movie.douban.com/j/chart/top_list?</code></p></li><li><p>当然这是一个ajax请求（在chorme的抓包工具中选择 XHR 可以进行查看）</p></li><li><p>在寻找另一部电影，请求的url仍然是 <code>https://movie.douban.com/j/chart/top_list?</code></p></li><li><p>然后我们就需要找参数的规律了：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">type: <span class="number">17</span></span><br><span class="line">interval_id: <span class="number">100</span>:<span class="number">90</span></span><br><span class="line">action: </span><br><span class="line">start: <span class="number">0</span></span><br><span class="line">limit: <span class="number">1</span></span><br><span class="line"><span class="comment"># 第二部</span></span><br><span class="line">type: <span class="number">17</span></span><br><span class="line">interval_id: <span class="number">100</span>:<span class="number">90</span></span><br><span class="line">action: </span><br><span class="line">start: <span class="number">20</span></span><br><span class="line">limit: <span class="number">20</span></span><br></pre></td></tr></table></figure></li><li><p>start 和 limit 是可以变化的，基于例二，我们自定义字典进行传参，然后进行尝试。</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">url = <span class="string">'https://movie.douban.com/j/chart/top_list'</span></span><br><span class="line"><span class="comment"># 参数动态化</span></span><br><span class="line">params = &#123;</span><br><span class="line">    <span class="string">'type'</span>: <span class="string">'5'</span>,</span><br><span class="line">    <span class="string">'interval_id'</span>: <span class="string">'100:90'</span>,</span><br><span class="line">    <span class="string">'action'</span>: <span class="string">''</span>,</span><br><span class="line">    <span class="string">'start'</span>: <span class="string">'01'</span>,</span><br><span class="line">    <span class="string">'limit'</span>: <span class="string">'20'</span>,	</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># start 决定起始位置，limit 为显示数量。</span></span><br><span class="line">response = requests.get(url=url, params=params, headers=headers)</span><br><span class="line"></span><br><span class="line"><span class="comment"># json() 返回序列化好的对象（字典，列表）</span></span><br><span class="line">movie_list = response.json()  </span><br><span class="line"><span class="comment"># 手动反序列化</span></span><br><span class="line"><span class="comment"># import json</span></span><br><span class="line"><span class="comment"># movie_list = json.loads(movie_list)</span></span><br><span class="line"><span class="keyword">for</span> movie <span class="keyword">in</span> movie_list:</span><br><span class="line">    print(movie[<span class="string">'title'</span>],movie[<span class="string">'score'</span>])</span><br></pre></td></tr></table></figure><p>note：response.json() 可以免除我们手动使用json进行loads的过程。</p><h2 id="爬取肯德基的餐厅位置信息"><a href="#爬取肯德基的餐厅位置信息" class="headerlink" title="爬取肯德基的餐厅位置信息"></a>爬取肯德基的餐厅位置信息</h2><ul><li><p>地址为：<code>http://www.kfc.com.cn/kfccda/storelist/index.aspx</code></p></li><li><p>post请求</p></li><li><p>一次爬取多页数据</p></li></ul><p>思路：</p><ul><li>首先，数据是动态加载的，分析请求方式为 post 发出的 url 与 data。</li><li>通过pageSize就可以在循环内完成多所有地址的爬取。</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">url = <span class="string">'http://www.kfc.com.cn/kfccda/ashx/GetStoreList.ashx?op=keyword'</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">'cname'</span>:<span class="string">''</span>, </span><br><span class="line">    <span class="string">'keyword'</span>:<span class="string">'北京'</span>,</span><br><span class="line">    <span class="string">'pageIndex'</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="string">'pageSize'</span>:<span class="number">10</span>,</span><br><span class="line">    <span class="string">'pid'</span>:<span class="string">''</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(data[<span class="string">'keyword'</span>]+<span class="string">'肯德基地址.txt'</span>,<span class="string">'w'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,data[<span class="string">'pageSize'</span>]+<span class="number">1</span>):</span><br><span class="line">        data[<span class="string">'pageIndex'</span>] = i    </span><br><span class="line">        address_dic = requests.post(url=url, data=data, headers=headers).json()</span><br><span class="line">        <span class="keyword">for</span> address <span class="keyword">in</span> address_dic[<span class="string">'Table1'</span>]:</span><br><span class="line">            print(address[<span class="string">'addressDetail'</span>])</span><br><span class="line">            f.write(address[<span class="string">'addressDetail'</span>] + <span class="string">'\n'</span>)</span><br></pre></td></tr></table></figure><p>补充：可以使用代理服务器，如搜索：全网代理IP</p><h2 id="中标公告提取"><a href="#中标公告提取" class="headerlink" title="中标公告提取"></a>中标公告提取</h2><ul><li>需求<br><a href="https://www.fjggfw.gov.cn/Website/JYXXNew.aspx" target="_blank" rel="noopener">https://www.fjggfw.gov.cn/Website/JYXXNew.aspx</a> 福建省公共资源交易中心</li></ul><p>提取内容:</p><p>工程建设中的中标结果信息/中标候选人信息</p><ol><li><p>完整的html中标信息</p></li><li><p>第一中标候选人</p></li><li><p>中标金额</p></li><li><p>中标时间</p></li><li><p>其它参与投标的公司</p></li></ol><p>思路：</p><ol><li>从首页打开一个公告，先尝试得到一个公告的信息。</li><li>在得到另一个公告的信息进行比较，只有ID是变化的，所以有了ID就可以批量爬取了。</li><li>回到首页，判断加载方式，确定数据的请求方式，url以及参数。</li></ol><p>实现过程：</p><ul><li>确认爬取的数据都是动态加载出来的</li><li>在首页中捕获到ajax请求对应的数据包，从该数据包中提取出请求的url和请求参数</li><li>对提取到的url进行请求发送，获取响应数据（json），（包含ID信息）</li><li>从json串中提取到每一个公告对应的id值</li><li>将id值和中标信息对应的url进行整合，进行请求发送捕获到每一个公告对应的中标信息数据</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 该部分为得到一个公告的信息，但是我们这里的ID不灵活，需要进一步改进。</span></span><br><span class="line">params = &#123;</span><br><span class="line">    <span class="string">'OPtype'</span>: <span class="string">'GetGGInfoPC'</span>,</span><br><span class="line">    <span class="string">'ID'</span>: <span class="number">132458</span>,</span><br><span class="line">    <span class="string">'GGTYPE'</span>: <span class="number">4</span>,</span><br><span class="line">    <span class="string">'url'</span>: <span class="string">'AjaxHandler/BuilderHandler.ashx'</span>,</span><br><span class="line">&#125;</span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.132 Safari/537.36'</span>,</span><br><span class="line">    <span class="string">'Cookie'</span>: <span class="string">'ASP.NET_SessionId=j0ps3kcjisaajyenlgihwwxo; Hm_lvt_94bfa5b89a33cebfead2f88d38657023=1570523570; Hm_lpvt_94bfa5b89a33cebfead2f88d38657023=1570523621; _qddagsx_02095bad0b=115b25431c8f1a2f7f607e8464ba7c5ef5807a77e65a44aa3c9045306ab0ba3bf02c48523e97b816f16d9ff0c57b6e77f46e59f8776b88c64cbd9da7f84676d8c4c9db3686235ef49e9ee7ff1871ec99884e7ba79b8c173e472b039b0c9a8fb61b4049ab036f68e1f5e0857c4bd4131f0c3b7478b98687d0b9c0538352871ec9'</span>,</span><br><span class="line">&#125;</span><br><span class="line">url = <span class="string">'https://www.fjggfw.gov.cn/Website/AjaxHandler/BuilderHandler.ashx'</span></span><br><span class="line">response = requests.get(url=url, params=params, headers=headers)</span><br><span class="line">response.text</span><br></pre></td></tr></table></figure><p>完成了对公告详情的爬取后，接下来批量爬取公告。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 该部分完成了对前5页的公告信息进行爬取</span></span><br><span class="line">url = <span class="string">'https://www.fjggfw.gov.cn/Website/AjaxHandler/BuilderHandler.ashx'</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.132 Safari/537.36'</span>,</span><br><span class="line">    <span class="string">'Cookie'</span>: <span class="string">'ASP.NET_SessionId=j0ps3kcjisaajyenlgihwwxo; Hm_lvt_94bfa5b89a33cebfead2f88d38657023=1570523570; Hm_lpvt_94bfa5b89a33cebfead2f88d38657023=1570523621; _qddagsx_02095bad0b=115b25431c8f1a2f7f607e8464ba7c5ef5807a77e65a44aa3c9045306ab0ba3bf02c48523e97b816f16d9ff0c57b6e77f46e59f8776b88c64cbd9da7f84676d8c4c9db3686235ef49e9ee7ff1871ec99884e7ba79b8c173e472b039b0c9a8fb61b4049ab036f68e1f5e0857c4bd4131f0c3b7478b98687d0b9c0538352871ec9'</span>,</span><br><span class="line">&#125;</span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">'OPtype'</span>: <span class="string">'GetListNew'</span>,</span><br><span class="line">    <span class="string">'pageNo'</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">'pageSize'</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="string">'proArea'</span>: <span class="number">-1</span>,</span><br><span class="line">    <span class="string">'category'</span>: <span class="string">'GCJS'</span>,</span><br><span class="line">    <span class="string">'announcementType'</span>: <span class="number">-1</span>,</span><br><span class="line">    <span class="string">'ProType'</span>: <span class="number">-1</span>,</span><br><span class="line">    <span class="string">'xmlx'</span>: <span class="number">-1</span>,</span><br><span class="line">    <span class="string">'projectName'</span>: <span class="string">''</span>,</span><br><span class="line">    <span class="string">'TopTime'</span>: <span class="string">'2019-07-10 00:00:00'</span>,</span><br><span class="line">    <span class="string">'EndTime'</span>: <span class="string">'2019-10-08 23:59:59'</span>,</span><br><span class="line">    <span class="string">'rrr'</span>: <span class="number">0.8853761868569314</span>,</span><br><span class="line">&#125;</span><br><span class="line">params = &#123;</span><br><span class="line">    <span class="string">'OPtype'</span>: <span class="string">'GetGGInfoPC'</span>,</span><br><span class="line">    <span class="string">'ID'</span>: <span class="number">132458</span>,</span><br><span class="line">    <span class="string">'GGTYPE'</span>: <span class="number">4</span>,</span><br><span class="line">    <span class="string">'url'</span>: <span class="string">'AjaxHandler/BuilderHandler.ashx'</span>,</span><br><span class="line">&#125;</span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">6</span>):</span><br><span class="line">    data[<span class="string">'pageNo'</span>] = i    </span><br><span class="line">    <span class="comment"># 第i页内容的爬取</span></span><br><span class="line">    response = requests.post(url=url,data=data,headers=headers)</span><br><span class="line">    post_data = response.json()</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> post_data[<span class="string">'data'</span>]:</span><br><span class="line">        ID = int(row[<span class="string">'M_ID'</span>])</span><br><span class="line">        params[<span class="string">'ID'</span>] = ID</span><br><span class="line">        company_respose = requests.get(url=url, params=params, headers=headers)</span><br><span class="line">        company_detail = company_respose.json()[<span class="string">'data'</span>]</span><br><span class="line"><span class="comment">#         print(company_detail)</span></span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">print(count)</span><br></pre></td></tr></table></figure><h2 id="爬取图片"><a href="#爬取图片" class="headerlink" title="爬取图片"></a>爬取图片</h2><p>如何做？</p><ul><li>基于requests</li><li>基于urllib</li><li>区别：urllib中的 urlretrieve 不可以进行UA伪装<br>requests在urllib基础上产生，更加pythonic！</li></ul><h3 id="基于requests的图片爬取"><a href="#基于requests的图片爬取" class="headerlink" title="基于requests的图片爬取"></a>基于requests的图片爬取</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.132 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 基于requests的图片爬取</span></span><br><span class="line">url = <span class="string">r'https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1570593174006&amp;di=5ade9e1cb9e63a708c69095283f8e40a&amp;imgtype=0&amp;src=http%3A%2F%2Fdingyue.nosdn.127.net%2F92Ot1vmaeOklEbu2G7ABakMeGiYWpYi8R3urPnggBDJSs1535663928397.jpeg'</span></span><br><span class="line">img_data = requests.get(url=url, headers=headers).content   <span class="comment"># content 返回的是bytes类型的响应数据</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'./123.jpg'</span>,<span class="string">'wb'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    fp.write(img_data)</span><br></pre></td></tr></table></figure><ul><li>request更具通用性，数据可以展示为：text（字符串），json（列表/字典），content（字节）。</li></ul><h3 id="基于urllib的图片爬取"><a href="#基于urllib的图片爬取" class="headerlink" title="基于urllib的图片爬取"></a>基于urllib的图片爬取</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 基于urllib</span></span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line">url = <span class="string">'https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1570593174006&amp;di=5ade9e1cb9e63a708c69095283f8e40a&amp;imgtype=0&amp;src=http%3A%2F%2Fdingyue.nosdn.127.net%2F92Ot1vmaeOklEbu2G7ABakMeGiYWpYi8R3urPnggBDJSs1535663928397.jpeg'</span></span><br><span class="line">request.urlretrieve(url,<span class="string">'./456.jpg'</span>)</span><br></pre></td></tr></table></figure><ul><li>由于urlretrieve不能做UA伪装，所以存在图片缺失的可能。</li></ul><h1 id="聚焦爬虫"><a href="#聚焦爬虫" class="headerlink" title="聚焦爬虫"></a>聚焦爬虫</h1><p>较通用爬虫相比，增加了<strong>数据解析</strong>。</p><h2 id="数据解析"><a href="#数据解析" class="headerlink" title="数据解析"></a>数据解析</h2><p>概念：将一整张页面的局部数据进行提取/解析</p><p>作用：用来实现聚焦爬虫</p><p>实现方式：</p><ul><li>正则：可以匹配任意，下面方式拿不到 js 代码中的数据</li><li>bs4</li><li>xpath</li><li>pyquery</li></ul><p>数据解析的通用原理是什么？</p><ul><li>标签的定位</li><li>数据的提取</li></ul><p>页面中的相关的字符串的数据都存储在哪里？</p><ul><li>标签中间</li><li>标签的属性中</li></ul><p>基于聚焦爬虫的编码流程</p><ul><li>指定url</li><li>发起请求</li><li>获取响应数据</li><li><strong>数据解析</strong></li><li>持久化存储</li></ul><h2 id="正则解析"><a href="#正则解析" class="headerlink" title="正则解析"></a>正则解析</h2><h3 id="爬取煎蛋网中的图片"><a href="#爬取煎蛋网中的图片" class="headerlink" title="爬取煎蛋网中的图片"></a>爬取煎蛋网中的图片</h3><ul><li>地址为：<code>http://jandan.net/pic/MjAxOTEwMDktNjk=#comments</code></li></ul><p>实现过程：</p><ul><li>指定url</li><li>获取响应数据</li><li>数据解析<ul><li>写正则表达式</li><li>正则匹配</li></ul></li><li>持久化存储</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">url = <span class="string">'http://jandan.net/pic/MjAxOTEwMDktNjk=#comments'</span></span><br><span class="line">page_text = requests.get(url=url,headers=headers).text</span><br><span class="line"><span class="comment"># 解析数据：img标签的src的属性值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 写正则表达式</span></span><br><span class="line"><span class="comment"># print(page_text) # 参考page_text来定正则，网页源码可能有些小问题</span></span><br><span class="line"><span class="comment"># ex = r'&lt;div class="text"&gt;.*?&lt;img src="(.*?)" referrerpolicy'   # 坑！！！</span></span><br><span class="line">ex = <span class="string">r'&lt;div class="text"&gt;.*?&lt;img src="(.*?)" referrerPolicy'</span>   <span class="comment"># 在源码中那里的p是小写，可爬下来的p是大写，坑~~~</span></span><br><span class="line"></span><br><span class="line">dirName = <span class="string">'./JDimg/'</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(dirName):</span><br><span class="line">    os.mkdir(dirName)</span><br><span class="line">img_url_list = re.findall(ex,page_text,re.S)   <span class="comment"># re.S处理回车</span></span><br><span class="line"><span class="keyword">for</span> img_url <span class="keyword">in</span> img_url_list:</span><br><span class="line">    ex2 = <span class="string">r'org_src="(.*?)"'</span></span><br><span class="line">    gif_url = re.findall(ex2,img_url)</span><br><span class="line">    <span class="keyword">if</span> gif_url:</span><br><span class="line">        new_url = <span class="string">'http:'</span> + gif_url[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        new_url = <span class="string">'http:'</span> + img_url</span><br><span class="line">    name = new_url.split(<span class="string">'/'</span>)[<span class="number">-1</span>]</span><br><span class="line">    img = requests.get(new_url,headers=headers).content</span><br><span class="line">    img_path = dirName + name </span><br><span class="line">    <span class="keyword">with</span> open(img_path,<span class="string">'wb'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        fp.write(img)</span><br><span class="line">    print(name,<span class="string">'下载完成!!!'</span>)</span><br></pre></td></tr></table></figure><p>note：内容依据响应数据page_text，而不是根据浏览器中网页上的代码，上面就出现一个字母的大小写不同而导致正则失效的例子。</p><h2 id="bs4解析"><a href="#bs4解析" class="headerlink" title="bs4解析"></a>bs4解析</h2><p>环境的安装：</p><ul><li>pip install bs4</li><li>pip install lxml</li></ul><p>bs4的解析原理：</p><ul><li>实例化一个BeatifulSoup的一个对象，把即将被解析的页面源码数据加载到该对象中</li><li>需要调用BeatifulSoup对象中的相关的<span style="color:red">方法</span>和<span style="color:red">属性</span>进行标签定位和数据的提取</li></ul><p>BeatifulSoup的实例化</p><ul><li>BeatifulSoup(fp, ‘lxml’) 将本地存储的html文档中的页面源码数据加载到该对象中</li><li>BeatifulSoup(page_text, ‘lxml’) 将从互联网中请求到的页面源码数据加载到该对象中</li></ul><p>标签的定位</p><ul><li><p>soup.tagName: 只可以定位到第一个tagName标签</p></li><li><p>属性定位：</p><ul><li>soup.find(‘div’,’attrName=’value’) 只能定位到符合要求的第一个</li><li>soup.findAll：返回列表，可以定位到符合要求的所有标签<br>note：只有class需要加下划线，其它直接用原名就可以。</li></ul></li><li><p>选择器定位：</p><ul><li>select(‘选择器’)</li><li>选择器：id，class，tag，层级选择器（大于号表示一个层级，空格表示多个层级）</li></ul></li><li><p>取文本</p><ul><li>text：将标签中所有文本取出</li><li>string：将标签中直系的文本取出</li></ul></li><li><p>取属性</p><ul><li>tag[‘attrName’]</li></ul></li></ul><h3 id="熟悉"><a href="#熟悉" class="headerlink" title="熟悉"></a>熟悉</h3><p>此为练手的html。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>测试bs4<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">p</span>&gt;</span>百里守约<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"song"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">p</span>&gt;</span>李清照<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">p</span>&gt;</span>王安石<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">p</span>&gt;</span>苏轼<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">p</span>&gt;</span>柳宗元<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.song.com/"</span> <span class="attr">title</span>=<span class="string">"赵匡胤"</span> <span class="attr">target</span>=<span class="string">"_self"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">span</span>&gt;</span>this is span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">		宋朝是最强大的王朝，不是军队的强大，而是经济很强大，国民都很有钱<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"du"</span>&gt;</span>总为浮云能蔽日,长安不见使人愁<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://www.baidu.com/meinv.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tang"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.baidu.com"</span> <span class="attr">title</span>=<span class="string">"qing"</span>&gt;</span>清明时节雨纷纷,路上行人欲断魂,借问酒家何处有,牧童遥指杏花村<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.163.com"</span> <span class="attr">title</span>=<span class="string">"qin"</span>&gt;</span>秦时明月汉时关,万里长征人未还,但使龙城飞将在,不教胡马度阴山<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.126.com"</span> <span class="attr">alt</span>=<span class="string">"qi"</span>&gt;</span>岐王宅里寻常见,崔九堂前几度闻,正是江南好风景,落花时节又逢君<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.sina.com"</span> <span class="attr">class</span>=<span class="string">"du"</span>&gt;</span>杜甫<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.dudu.com"</span> <span class="attr">class</span>=<span class="string">"du"</span>&gt;</span>杜牧<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>杜小月<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span>度蜜月<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.haha.com"</span> <span class="attr">id</span>=<span class="string">"feng"</span>&gt;</span>凤凰台上凤凰游,凤去台空江自流,吴宫花草埋幽径,晋代衣冠成古丘<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>熟悉 BeautifulSoup 的选择器以及如何取文本和属性</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fp = open(<span class="string">'./test.html'</span>,encoding=<span class="string">'utf-8'</span>) </span><br><span class="line">soup = BeautifulSoup(fp ,<span class="string">'lxml'</span>)</span><br><span class="line">soup.div				</span><br><span class="line">type(soup.div)                   <span class="comment"># bs4.element.Tag</span></span><br><span class="line">soup.find(<span class="string">'div'</span>)</span><br><span class="line">soup.find(<span class="string">'div'</span>,class_=<span class="string">"song"</span>)   <span class="comment"># 由于class 是关键字，所以需要加下划线</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#下面的 findAll 与 select 都将返回列表</span></span><br><span class="line">soup.findAll(<span class="string">'div'</span>)              </span><br><span class="line">soup.select(<span class="string">'div'</span>)     </span><br><span class="line">soup.select(<span class="string">'div[class="song"]'</span>) </span><br><span class="line">soup.select(<span class="string">'.song'</span>)</span><br><span class="line">soup.select(<span class="string">'div &gt; ul &gt; li'</span>)</span><br><span class="line">soup.select(<span class="string">'div li'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取文本</span></span><br><span class="line">soup.select(<span class="string">'div li'</span>)[<span class="number">0</span>].text    </span><br><span class="line">soup.select(<span class="string">'.song'</span>)[<span class="number">0</span>].text</span><br><span class="line">soup.select(<span class="string">'.song'</span>)[<span class="number">0</span>].string    <span class="comment"># 只能取直系,所以这个结果为空</span></span><br><span class="line">soup.select(<span class="string">'b'</span>)[<span class="number">0</span>].string      </span><br><span class="line"></span><br><span class="line"><span class="comment"># 取属性</span></span><br><span class="line">soup.select(<span class="string">'div a'</span>)[<span class="number">0</span>][<span class="string">'href'</span>]</span><br></pre></td></tr></table></figure><h3 id="爬取三国演义小说的标题和内容"><a href="#爬取三国演义小说的标题和内容" class="headerlink" title="爬取三国演义小说的标题和内容"></a>爬取三国演义小说的标题和内容</h3><ul><li>地址为：<code>http://www.shicimingju.com/book/sanguoyanyi.html</code></li></ul><p>数据解析流程：</p><ul><li>首先定位标签</li><li>然后取出文本和内容</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">main_url = <span class="string">'http://www.shicimingju.com/book/sanguoyanyi.html'</span></span><br><span class="line">page_text = requests.get(url=main_url,headers=headers).text</span><br><span class="line"><span class="comment"># 数据解析: 章节的标题和详情页的url</span></span><br><span class="line">soup = BeautifulSoup(page_text,<span class="string">'lxml'</span>)</span><br><span class="line">li = soup.select(<span class="string">'.book-mulu a'</span>)</span><br><span class="line">fp = open(<span class="string">'./sanguo.txt'</span>,<span class="string">'w'</span>,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> li:</span><br><span class="line">    title = i.string</span><br><span class="line">    detail_url = <span class="string">'http://www.shicimingju.com'</span> + i[<span class="string">'href'</span>]</span><br><span class="line">    detail_page_text = requests.get(url=detail_url,headers=headers).text</span><br><span class="line">    <span class="comment"># 数据解析：章节内容</span></span><br><span class="line">    detail_soup = BeautifulSoup(detail_page_text,<span class="string">'lxml'</span>)</span><br><span class="line">    detail = detail_soup.find(<span class="string">'div'</span>,class_=<span class="string">'chapter_content'</span>).text</span><br><span class="line">    fp.write(title + <span class="string">'\n'</span> + detail + <span class="string">'\n\n'</span>)</span><br><span class="line">fp.close()</span><br></pre></td></tr></table></figure><h2 id="xpath-解析"><a href="#xpath-解析" class="headerlink" title="xpath 解析"></a>xpath 解析</h2><ul><li><p>环境的安装</p><ul><li>pip install lxml</li></ul></li><li><p>解析原理</p><ul><li>实例化一个etree的对象，且把即将被解析的页面源码数据加载到该对象中</li><li>调用etree对象中的xpath方法结合着<span class="mark">不同形式的xpath表达式</span>进行标签定位和数据提取</li></ul></li><li><p>etree对象的实例化</p><ul><li>etree.parse(‘fileName’)</li><li>etree.HTML(page_text)</li></ul></li><li><p>标签定位</p><ul><li>最左侧的/：一定要从根标签开始进行标签定位</li><li>非最左侧的/：表示一个层级</li><li>最左侧的//：可以从任意位置进行指定标签的定位</li><li>非最左侧的//：表示多个层级</li><li>属性定位：<ul><li>//tagName[@attrName=”value”]</li></ul></li><li>索引定位：<ul><li>//tagName[@attrName=”value”]/li[2]，索引是从1开始的</li></ul></li><li>逻辑运算：<pre><code>- 找到href属性值为空且class属性值为du的a标签</code></pre><ul><li>//a[@href=”” and @class=”du”]</li></ul></li><li>模糊匹配：<ul><li>//div[contains(@class, “ng”)]</li><li>//div[starts-with(@class, “ta”)]</li></ul></li></ul></li><li><p>取文本</p><ul><li>/text():取直系的文本内容</li><li>//text()：取所有文本内容</li></ul></li><li><p>取属性</p><ul><li>/@attrName</li></ul></li></ul><p>note：</p><ul><li>返回的都是列表</li><li>在google中的Element可以直接copy xpath</li><li>在xpath表达式中不可以出现tbody标签</li></ul><h3 id="熟悉-1"><a href="#熟悉-1" class="headerlink" title="熟悉"></a>熟悉</h3><p>依旧使用上面的html练手</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line">tree = etree.parse(<span class="string">'./test.html'</span>)</span><br><span class="line">tree        <span class="comment"># &lt;lxml.etree._ElementTree at 0x231b25371c8&gt;</span></span><br><span class="line">tree.xpath(<span class="string">'/html'</span>)</span><br><span class="line">tree.xpath(<span class="string">'/html//title'</span>)</span><br><span class="line">tree.xpath(<span class="string">'//div'</span>)</span><br><span class="line"><span class="comment"># 属性定位</span></span><br><span class="line">tree.xpath(<span class="string">'//*[@class="tang"]'</span>)</span><br><span class="line">tree.xpath(<span class="string">'//div[@class="song"]'</span>)</span><br><span class="line">tree.xpath(<span class="string">'//div[@class="tang"]/ul/li'</span>)</span><br><span class="line"><span class="comment"># 索引定位</span></span><br><span class="line">tree.xpath(<span class="string">'//div[@class="tang"]/ul/li[2]'</span>)   </span><br><span class="line"></span><br><span class="line"><span class="comment"># 取文本</span></span><br><span class="line">tree.xpath(<span class="string">'//b/text()'</span>)   <span class="comment"># 取直系</span></span><br><span class="line">tree.xpath(<span class="string">'//div[@class="tang"]/ul/li//text()'</span>)   <span class="comment"># 取所有</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 取属性</span></span><br><span class="line">tree.xpath(<span class="string">'//a/@href'</span>)</span><br></pre></td></tr></table></figure><h3 id="爬取虎牙主播名称，热度和标题"><a href="#爬取虎牙主播名称，热度和标题" class="headerlink" title="爬取虎牙主播名称，热度和标题"></a>爬取虎牙主播名称，热度和标题</h3><ul><li>地址为：<a href="https://www.huya.com/g/xingxiu" target="_blank" rel="noopener">https://www.huya.com/g/xingxiu</a></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">url = <span class="string">'https://www.huya.com/g/xingxiu'</span></span><br><span class="line">page_text = requests.get(url,headers=headers).text</span><br><span class="line">tree = etree.HTML(page_text)</span><br><span class="line">li_list = tree.xpath(<span class="string">'//div[@class="box-bd"]/ul/li'</span>)</span><br><span class="line"><span class="comment"># print(page_text)</span></span><br><span class="line"><span class="keyword">for</span> li <span class="keyword">in</span> li_list:</span><br><span class="line">    title = li.xpath(<span class="string">'./a[2]/@title'</span>)[<span class="number">0</span>] </span><br><span class="line">    name = li.xpath(<span class="string">'./span/span[1]/i/@title'</span>)[<span class="number">0</span>] </span><br><span class="line">    hot = li.xpath(<span class="string">'./span/span[2]/i[2]/text()'</span>)[<span class="number">0</span>] </span><br><span class="line">    print(name,<span class="string">'的直播间: '</span>,title,<span class="string">'热度为:'</span>,hot)</span><br></pre></td></tr></table></figure><h3 id="爬取前5页的妹子"><a href="#爬取前5页的妹子" class="headerlink" title="爬取前5页的妹子"></a>爬取前5页的妹子</h3><p>地址为：<code>http://sc.chinaz.com/tag_tupian/yazhoumeinv.html</code></p><ul><li>涉及中文乱码<ul><li>以前对response对象设置 encoding 这样针对一整张页面代价大。</li><li>我们只需要对想要的内容进行转码。</li><li>通常由 iso-8859-1 –&gt; utf-8 先编码成iso-8859-1 在解码成 utf-8 或gbk</li></ul></li><li>多页码数据的爬取<ul><li>制定一个通用的url模板</li></ul></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通用模板</span></span><br><span class="line">url = <span class="string">'http://sc.chinaz.com/tag_tupian/yazhoumeinv_%s.html'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">6</span>):</span><br><span class="line">    <span class="comment"># 获取页面</span></span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">1</span>:</span><br><span class="line">        new_url = <span class="string">'http://sc.chinaz.com/tag_tupian/yazhoumeinv.html'</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        new_url = format(url%i)</span><br><span class="line"></span><br><span class="line">    page_text = requests.get(new_url,headers=headers).text</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 数据解析</span></span><br><span class="line">    tree = etree.HTML(page_text)</span><br><span class="line">    img_list = tree.xpath(<span class="string">'//*[@id="container"]/div/div/a'</span>)  </span><br><span class="line"></span><br><span class="line">    dirName = (<span class="string">'./MZimg'</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(dirName):</span><br><span class="line">        os.makedirs(dirName)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'./MZ.html'</span>,<span class="string">'w'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(page_text)</span><br><span class="line">    <span class="keyword">for</span> li <span class="keyword">in</span> img_list:        </span><br><span class="line">        title = li.xpath(<span class="string">'./img/@alt'</span>)[<span class="number">0</span>].encode(<span class="string">' iso-8859-1'</span>).decode(<span class="string">'utf-8'</span>) + <span class="string">'.jpg'</span>		</span><br><span class="line">        <span class="comment"># print(li.xpath('./img/@src2'))     </span></span><br><span class="line">        <span class="comment"># 由于是惰性加载，所以这里没有值，这该怎么办呢？ 发现这里的惰性加载只是用src2替换src</span></span><br><span class="line">        <span class="comment"># 疑惑: 为什么./@src2 得不到，而必须用 ./img/@src2 呢？  ~~~</span></span><br><span class="line">        </span><br><span class="line">        src = li.xpath(<span class="string">'./img/@src2'</span>)[<span class="number">0</span>]</span><br><span class="line">        img = requests.get(src,headers=headers).content</span><br><span class="line">        <span class="comment"># 数据持久化存储</span></span><br><span class="line">        img_path = dirName + <span class="string">'/'</span> + title    </span><br><span class="line">        <span class="keyword">with</span> open(img_path,<span class="string">'wb'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">            fp.write(img)</span><br><span class="line"> </span><br><span class="line">    print(<span class="string">f'第<span class="subst">&#123;i&#125;</span>页妹纸完成抓取'</span>)</span><br></pre></td></tr></table></figure><h3 id="爬取全国所有城市的名称，包含热门城市和全部城市"><a href="#爬取全国所有城市的名称，包含热门城市和全部城市" class="headerlink" title="爬取全国所有城市的名称，包含热门城市和全部城市"></a>爬取全国所有城市的名称，包含热门城市和全部城市</h3><p>待补充！！！</p><h3 id="梨视频短视频的爬取"><a href="#梨视频短视频的爬取" class="headerlink" title="梨视频短视频的爬取"></a>梨视频短视频的爬取</h3><ul><li><p>需求：爬取 <code>https://www.pearvideo.com/category_8</code> 这一页的一组视频</p></li><li><p>视频的url是藏在script中，所以只能配合正则去解析。</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">url = <span class="string">'https://www.pearvideo.com/category_8'</span></span><br><span class="line">page_text = requests.get(url,headers=headers).text</span><br><span class="line"><span class="comment"># 数据解析:得到视频的名字与视频详情页的url</span></span><br><span class="line">tree = etree.HTML(page_text)</span><br><span class="line">li_list = tree.xpath(<span class="string">'//*[@id="listvideoListUl"]/li'</span>)</span><br><span class="line"><span class="keyword">for</span> li <span class="keyword">in</span> li_list:</span><br><span class="line">    name = li.xpath(<span class="string">'./div/a/div[2]/text()'</span>)[<span class="number">0</span>] + <span class="string">'.mp4'</span></span><br><span class="line">    detail_url = <span class="string">'https://www.pearvideo.com/'</span> + li.xpath(<span class="string">'./div/a/@href'</span>)[<span class="number">0</span>]</span><br><span class="line">    detail_page_text = requests.get(detail_url,headers=headers).text</span><br><span class="line">    <span class="comment"># 数据解析：得到视频的url</span></span><br><span class="line">    detail_tree = etree.HTML(detail_page_text)</span><br><span class="line">    video = detail_tree.xpath(<span class="string">'//script/text()'</span>)</span><br><span class="line">    st = <span class="string">''</span>.join(video)</span><br><span class="line">    ex = <span class="string">r'srcUrl="(.*?.mp4)"'</span></span><br><span class="line">    <span class="comment"># print(video)</span></span><br><span class="line">    video_url = re.findall(ex,st)[<span class="number">0</span>]</span><br><span class="line">    mp4 = requests.get(video_url,headers=headers).content</span><br><span class="line">    <span class="comment"># 得到视频的bytes流。</span></span><br><span class="line">    <span class="keyword">with</span> open(name,<span class="string">'wb'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        fp.write(mp4)</span><br><span class="line">    print(<span class="string">'下载完成！'</span>)</span><br></pre></td></tr></table></figure><h1 id="requests高级"><a href="#requests高级" class="headerlink" title="requests高级"></a>requests高级</h1><ul><li>下面介绍的本质上也是针对反爬机制做出的策略。</li></ul><h2 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h2><ul><li><p>概念：代理服务器</p></li><li><p>代理的作用：</p><ul><li>请求和响应的转发（拦截请求和响应）</li></ul></li><li><p>代理和爬虫之间的关联是什么？</p><ul><li>可以基于代理实现更换爬虫程序请求的ip地址</li></ul></li><li><p>代理ip的网站</p><ul><li>西祠代理 <code>https://www.xicidaili.com/nn</code></li><li>快代理</li><li><a href="http://www.goubanjia.com" target="_blank" rel="noopener">www.goubanjia.com</a></li><li>代理精灵</li></ul></li><li><p>代理的匿名度</p><ul><li>高匿名：不知道是否使用代理服务器，也无法知道最终的ip</li><li>匿名：使用了代理服务器，但不知道最终ip</li><li>透明：</li></ul></li><li><p>类型</p><ul><li>http：只能转发http协议的请求</li><li>https：可以转发https的请求</li></ul></li><li><p>chrome添加代理</p><ul><li>设置搜索 代理</li><li>在连接下，点击局域网设置，点击代理服务器并进行配置。</li></ul></li><li><p>目标：在requests使用代理</p><ul><li>proxies参数: <code>{ &#39;https&#39; : &#39;ip:port&#39; }</code></li></ul></li></ul><h3 id="使用代理ip"><a href="#使用代理ip" class="headerlink" title="使用代理ip"></a>使用代理ip</h3><ul><li>我是在<a href="http://www.jinglingdaili.com/" target="_blank" rel="noopener">代理精灵</a>买的，6块300个，每个可以用5-25分钟。</li><li>先尝试一个，然后爬取 <code>百度搜索ip页面</code> 保存到本地，查看ip是否发生变化。</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在http://www.jinglingdaili.com/ </span></span><br><span class="line">url = <span class="string">'https://www.baidu.com/s?wd=ip'</span></span><br><span class="line">page_text = requests.get(url,headers=headers,proxies=&#123;<span class="string">'https'</span>:<span class="string">'140.250.89.43:31799'</span>&#125;).text</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'./ip.html'</span>,<span class="string">'w'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    fp.write(page_text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># note: 这个代理会查看当前用户ip，如果用户ip不在白名单则无法使用，引起ProxyError</span></span><br></pre></td></tr></table></figure><h3 id="搭建付费的代理池"><a href="#搭建付费的代理池" class="headerlink" title="搭建付费的代理池"></a>搭建付费的代理池</h3><ul><li>需求：还是前面的买的那些ip，给代理池中放50个ip</li><li>首先在代理精灵中生成API链接，有了这个链接，我们就可以直接爬取了</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">url = <span class="string">'http://ip.11jsq.com/index.php/api/entry?method=proxyServer.generate_api_url&amp;packid=2&amp;fa=0&amp;fetch_key=&amp;groupid=0&amp;qty=50&amp;time=1&amp;pro=&amp;city=&amp;port=1&amp;format=txt&amp;ss=1&amp;css=&amp;dt=1&amp;specialTxt=3&amp;specialJson=&amp;usertype=2'</span></span><br><span class="line">page_text = requests.get(url,headers=headers).text</span><br><span class="line">tree = etree.HTML(page_text)</span><br><span class="line">ip_pools = tree.xpath(<span class="string">'//body//text()'</span>)[<span class="number">0</span>].split(<span class="string">'\r\n'</span>)  </span><br><span class="line"><span class="comment"># ip_pools = tree.xpath('//pre/text()')    # 一个疑惑：为什么 //pre/text() 没有结果呢？ 因为你的page_text 和你看到的网页不同</span></span><br><span class="line">print(len(ip_pools))</span><br></pre></td></tr></table></figure><p>note：如果提取不到说句，说明你的xpath表达式不正确，我们参考page_text的输出进行编写。</p><h3 id="搭建一个免费的代理池"><a href="#搭建一个免费的代理池" class="headerlink" title="搭建一个免费的代理池"></a>搭建一个免费的代理池</h3><ul><li>需求：将 <a href="https://www.xicidaili.com/nn" target="_blank" rel="noopener">西祠代理</a> 上面展示的 ip，端口以及类型进行爬取。</li><li>当然，这些数据其实还需要进行测试，待补充！！！</li></ul><p>不使用代理，本机IP直接尝试，但是不到50页就会被封掉IP</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">url = <span class="string">'https://www.xicidaili.com/nn/%s'</span>    <span class="comment"># 通用的url模板(不可变)</span></span><br><span class="line">all_ips = []</span><br><span class="line"><span class="keyword">for</span> page <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">30</span>):</span><br><span class="line">    new_url = format(url%page)</span><br><span class="line">    page_text = requests.get(new_url,headers=headers).text</span><br><span class="line">    tree = etree.HTML(page_text)</span><br><span class="line">    <span class="comment"># 在xpath表达式中不可以出现tbody标签</span></span><br><span class="line"><span class="comment">#     tr_list = tree.xpath('//*[@id="ip_list"]/tbody/tr')[1:]   # 过滤掉第1个无效的</span></span><br><span class="line">    tr_list = tree.xpath(<span class="string">'//*[@id="ip_list"]//tr'</span>)[<span class="number">1</span>:]   <span class="comment"># 过滤掉第1个无效的</span></span><br><span class="line">    <span class="keyword">for</span> tr <span class="keyword">in</span> tr_list:</span><br><span class="line">        ip = tr.xpath(<span class="string">'./td[2]/text()'</span>)[<span class="number">0</span>]</span><br><span class="line">        port = tr.xpath(<span class="string">'./td[3]/text()'</span>)[<span class="number">0</span>]</span><br><span class="line">        ip_type = tr.xpath(<span class="string">'./td[6]/text()'</span>)[<span class="number">0</span>]</span><br><span class="line">        all_ips.append(&#123;</span><br><span class="line">            <span class="string">'ip'</span>:ip,</span><br><span class="line">            <span class="string">'port'</span>:port,</span><br><span class="line">            <span class="string">'type'</span>:ip_type,</span><br><span class="line">        &#125;)</span><br><span class="line">print(len(all_ips))    </span><br><span class="line">fin_ips = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接下来对放在列表中的元素进行测试，如果不行就排除</span></span><br><span class="line">test_url = <span class="string">'https://www.baidu.com/'</span></span><br><span class="line"><span class="keyword">for</span> ip_dic <span class="keyword">in</span> all_ips:  </span><br><span class="line">    r = requests.get(test_url,headers=headers,proxies=&#123;ip_dic[<span class="string">'type'</span>]:ip_dic[<span class="string">'ip'</span>] + <span class="string">':'</span> + ip_dic[<span class="string">'port'</span>]&#125;)</span><br><span class="line">    <span class="keyword">if</span> r.status_code == <span class="number">200</span>:</span><br><span class="line">        fin_ips.append(ip_dic)</span><br><span class="line">print(len(all_ips))</span><br><span class="line">print(len(fin_ips))</span><br></pre></td></tr></table></figure><p>为了爬取大量数据，我们借助上面搭建的代理池再次尝试！</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 构建付费的代理池</span></span><br><span class="line">url = <span class="string">'http://ip.11jsq.com/index.php/api/entry?method=proxyServer.generate_api_url&amp;packid=2&amp;fa=0&amp;fetch_key=&amp;groupid=0&amp;qty=50&amp;time=1&amp;pro=&amp;city=&amp;port=1&amp;format=txt&amp;ss=1&amp;css=&amp;dt=1&amp;specialTxt=3&amp;specialJson=&amp;usertype=2'</span></span><br><span class="line">page_text = requests.get(url,headers=headers).text</span><br><span class="line">tree = etree.HTML(page_text)</span><br><span class="line">ip_pools = tree.xpath(<span class="string">'//body//text()'</span>)[<span class="number">0</span>].split(<span class="string">'\r\n'</span>)  </span><br><span class="line"><span class="comment"># ip_pools = tree.xpath('//pre/text()')    # 一个疑惑：为什么 //pre/text() 没有结果呢？ 因为你的page_text 和你看到的网页不同</span></span><br><span class="line">print(len(ip_pools))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用代理池中的代理，来解决ip限制</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通用url</span></span><br><span class="line">xici_url = <span class="string">'https://www.xicidaili.com/nn/%s'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从西祠代理爬取到的IP池，包含ip，port，type</span></span><br><span class="line">all_ips = []</span><br><span class="line"><span class="keyword">for</span> page <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line">    new_url = format(xici_url%page)</span><br><span class="line">    page_text = requests.get(new_url,headers=headers,proxies=&#123;<span class="string">'https'</span>:random.choice(ip_pools)&#125;).text</span><br><span class="line">    tree = etree.HTML(page_text)</span><br><span class="line">    <span class="comment"># 在xpath表达式中不可以出现tbody标签</span></span><br><span class="line"><span class="comment">#     tr_list = tree.xpath('//*[@id="ip_list"]/tbody/tr')[1:]   # 过滤掉第1个无效的</span></span><br><span class="line">    tr_list = tree.xpath(<span class="string">'//*[@id="ip_list"]//tr'</span>)[<span class="number">1</span>:]   <span class="comment"># 过滤掉第1个无效的</span></span><br><span class="line">    <span class="keyword">for</span> tr <span class="keyword">in</span> tr_list:</span><br><span class="line">        ip = tr.xpath(<span class="string">'./td[2]/text()'</span>)[<span class="number">0</span>]</span><br><span class="line">        port = tr.xpath(<span class="string">'./td[3]/text()'</span>)[<span class="number">0</span>]</span><br><span class="line">        ip_type = tr.xpath(<span class="string">'./td[6]/text()'</span>)[<span class="number">0</span>]</span><br><span class="line">        all_ips.append(&#123;</span><br><span class="line">            <span class="string">'ip'</span>:ip,</span><br><span class="line">            <span class="string">'port'</span>:port,</span><br><span class="line">            <span class="string">'type'</span>:ip_type,</span><br><span class="line">        &#125;)</span><br><span class="line">print(len(all_ips)) </span><br><span class="line"><span class="comment"># 接下来对放在列表中的元素进行测试，如果不行就排除</span></span><br><span class="line">test_url = <span class="string">'https://www.baidu.com/'</span></span><br><span class="line"><span class="keyword">for</span> ip_dic <span class="keyword">in</span> all_ips:  </span><br><span class="line">    r = requests.get(test_url,headers=headers,proxies=&#123;ip_dic[<span class="string">'type'</span>]:ip_dic[<span class="string">'ip'</span>] + <span class="string">':'</span> + ip_dic[<span class="string">'port'</span>]&#125;)</span><br><span class="line">    <span class="keyword">if</span> r.status_code == <span class="number">200</span>:</span><br><span class="line">        fin_ips.append(ip_dic)</span><br><span class="line">print(len(all_ips))</span><br><span class="line">print(len(fin_ips))</span><br></pre></td></tr></table></figure><h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><p>爬虫中怎样处理cookie？</p><ul><li><p>手动处理：</p><ul><li>将cookie写在headers中，（不涉及有效时长以及动态变化）</li></ul></li><li><p>自动处理：</p><ul><li>使用session对象：requests.Session()，它也被称为 <a href="https://requests.kennethreitz.org/zh_CN/latest/user/advanced.html#session-objects" target="_blank" rel="noopener">会话对象</a><ul><li>会话对象让你能够跨请求保持某些参数。它也会在同一个 Session 实例发出的所有请求之间保持 cookie</li></ul></li><li>作用：<ul><li>session对象和requests对象都可以对指定的url进行请求发送。只不过使用session进行请求发送的过程中，如果产生了cookie则cookie会被自动存储到session对象中。</li></ul></li></ul></li></ul><h3 id="爬取雪球网的新闻和内容"><a href="#爬取雪球网的新闻和内容" class="headerlink" title="爬取雪球网的新闻和内容"></a>爬取雪球网的新闻和内容</h3><ul><li>地址：<code>https://xueqiu.com</code></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 错误尝试</span></span><br><span class="line"><span class="comment"># 首先我们发现它是一个动态加载的，找到url，尝试拿到这条新闻</span></span><br><span class="line">url = <span class="string">'https://xueqiu.com/v4/statuses/public_timeline_by_category.json?since_id=-1&amp;max_id=20352368&amp;count=15&amp;category=-1'</span></span><br><span class="line">dic = requests.get(url,headers=headers).json()</span><br><span class="line">print(dic)</span><br><span class="line"><span class="comment"># 输出如下：</span></span><br><span class="line"><span class="comment"># &#123;'error_description': '遇到错误，请刷新页面或者重新登录帐号后再试', 'error_uri': '/v4/statuses/public_timeline_by_category.json', 'error_data': None, 'error_code': '400016'&#125;</span></span><br></pre></td></tr></table></figure><p>​ 有了这种提示，说明我们需要使用cookie了，为什么呢？因为你访问的这个地址并不是首页，而是在首页的基础上给后端发送 ajax 请求，所以有了基于cookie的反爬。</p><ul><li>那我们该怎么做呢？是需要实例化 requests.Session() 对象，同requests的使用方式，进行使用。</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建会话对象</span></span><br><span class="line">s = requests.Session()</span><br><span class="line">s.get(<span class="string">'https://xueqiu.com'</span>,headers=headers)</span><br><span class="line"></span><br><span class="line">url = <span class="string">'https://xueqiu.com/v4/statuses/public_timeline_by_category.json?since_id=-1&amp;max_id=20352368&amp;count=15&amp;category=-1'</span></span><br><span class="line"><span class="comment"># 保证该次请求携带的cookie 才可以请求成功</span></span><br><span class="line">dic = s.get(url,headers=headers).json()</span><br><span class="line">print(dic)</span><br></pre></td></tr></table></figure><p>这回就可以拿到数据了。但是如果由 cookie 检测的时候才会选择使用会话对象，毕竟存在效率问题。</p><h2 id="验证码的识别"><a href="#验证码的识别" class="headerlink" title="验证码的识别"></a>验证码的识别</h2><p>对于验证码我们大多使用在线打码平台，给大家推荐几个：</p><ul><li>超级鹰（正在用）</li><li>云打码</li></ul><p>打码平台（超级鹰）的使用：</p><ul><li>注册</li><li>登录<ul><li>创建一个软件，复制软件ID</li><li>下载示例代码《开发文档》</li></ul></li></ul><p>所以我们需要做的就是将验证码爬取下来，使用打码平台的API的到结果。</p><p>下面这个是超级鹰的内部实现：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chaojiying_Client</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, username, password, soft_id)</span>:</span></span><br><span class="line">        self.username = username</span><br><span class="line">        password =  password.encode(<span class="string">'utf8'</span>)</span><br><span class="line">        self.password = md5(password).hexdigest()</span><br><span class="line">        self.soft_id = soft_id</span><br><span class="line">        self.base_params = &#123;</span><br><span class="line">            <span class="string">'user'</span>: self.username,</span><br><span class="line">            <span class="string">'pass2'</span>: self.password,</span><br><span class="line">            <span class="string">'softid'</span>: self.soft_id,</span><br><span class="line">        &#125;</span><br><span class="line">        self.headers = &#123;</span><br><span class="line">            <span class="string">'Connection'</span>: <span class="string">'Keep-Alive'</span>,</span><br><span class="line">            <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0)'</span>,</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">PostPic</span><span class="params">(self, im, codetype)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        im: 图片字节</span></span><br><span class="line"><span class="string">        codetype: 题目类型 参考 http://www.chaojiying.com/price.html</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        params = &#123;</span><br><span class="line">            <span class="string">'codetype'</span>: codetype,</span><br><span class="line">        &#125;</span><br><span class="line">        params.update(self.base_params)</span><br><span class="line">        files = &#123;<span class="string">'userfile'</span>: (<span class="string">'ccc.jpg'</span>, im)&#125;</span><br><span class="line">        r = requests.post(<span class="string">'http://upload.chaojiying.net/Upload/Processing.php'</span>, data=params, files=files, headers=self.headers)</span><br><span class="line">        <span class="keyword">return</span> r.json()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ReportError</span><span class="params">(self, im_id)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        im_id:报错题目的图片ID</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        params = &#123;</span><br><span class="line">            <span class="string">'id'</span>: im_id,</span><br><span class="line">        &#125;</span><br><span class="line">        params.update(self.base_params)</span><br><span class="line">        r = requests.post(<span class="string">'http://upload.chaojiying.net/Upload/ReportError.php'</span>, data=params, headers=self.headers)</span><br><span class="line">        <span class="keyword">return</span> r.json()</span><br></pre></td></tr></table></figure><p>将打码工具封装：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_code</span><span class="params">(img_path,ctype)</span>:</span></span><br><span class="line">    chaojiying = Chaojiying_Client(<span class="string">'用户名'</span>, <span class="string">'密码'</span>, <span class="string">'901824'</span>)        <span class="comment">#用户中心&gt;&gt;软件ID 生成一个替换 96001</span></span><br><span class="line">    im = open(img_path, <span class="string">'rb'</span>).read()</span><br><span class="line">    <span class="keyword">return</span> chaojiying.PostPic(im, ctype)[<span class="string">'pic_str'</span>]  <span class="comment">#1902 验证码类型  官方网站&gt;&gt;价格体系 3.4+版 print 后要加()</span></span><br></pre></td></tr></table></figure><h2 id="模拟登录"><a href="#模拟登录" class="headerlink" title="模拟登录"></a>模拟登录</h2><p>攻克了验证码来尝试一下模拟登录哈！</p><ul><li>地址为：<code>https://so.gushiwen.org/user/login.aspx?from=http://so.gushiwen.org/user/collect.aspx</code></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 得到验证码的图片，并存储到本地</span></span><br><span class="line">main_url = <span class="string">'https://so.gushiwen.org/user/login.aspx?from=http://so.gushiwen.org/user/collect.aspx'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化会话对象</span></span><br><span class="line">s = requests.Session()</span><br><span class="line">page_text = s.get(main_url,headers=headers).text</span><br><span class="line">tree = etree.HTML(page_text)</span><br><span class="line">img_url = <span class="string">'https://so.gushiwen.org'</span> + tree.xpath(<span class="string">'//*[@id="imgCode"]/@src'</span>)[<span class="number">0</span>] </span><br><span class="line"><span class="comment"># 当然如果我们直接拿验证码的图片会发现，这个地址是直接可以随机生成验证码的 </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用超级鹰解决验证码</span></span><br><span class="line">img_data = s.get(img_url).content     <span class="comment"># 这里是坑，原本以为访问首页就能拿到cookie，这里不用会话对象，可实际上cookie是在这里产生的。</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'./code.jpg'</span>,<span class="string">'wb'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    fp.write(img_data)</span><br><span class="line">code = get_code(<span class="string">'./code.jpg'</span>,<span class="number">1004</span>)</span><br><span class="line">print(code)</span><br><span class="line">__VIEWSTATE = tree.xpath(<span class="string">'//*[@id="__VIEWSTATE"]/@value'</span>)[<span class="number">0</span>]</span><br><span class="line">__VIEWSTATEGENERATOR = tree.xpath(<span class="string">'//*[@id="__VIEWSTATEGENERATOR"]/@value'</span>)[<span class="number">0</span>]</span><br><span class="line">print(__VIEWSTATE)</span><br><span class="line">print(__VIEWSTATEGENERATOR)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只需要给这个地址发post请求</span></span><br><span class="line">login_url = <span class="string">'https://so.gushiwen.org/user/login.aspx?from=http%3a%2f%2fso.gushiwen.org%2fuser%2fcollect.aspx'</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">'__VIEWSTATE'</span>: __VIEWSTATE,    <span class="comment"># 动态数据，隐藏在前面标签内</span></span><br><span class="line">    <span class="string">'__VIEWSTATEGENERATOR'</span>: __VIEWSTATEGENERATOR,</span><br><span class="line">    <span class="string">'from'</span>: <span class="string">'http://so.gushiwen.org/user/collect.aspx'</span>,</span><br><span class="line">    <span class="string">'email'</span>: <span class="string">'用户名'</span>,</span><br><span class="line">    <span class="string">'pwd'</span>: <span class="string">'密码'</span>,</span><br><span class="line">    <span class="string">'code'</span>: code,</span><br><span class="line">    <span class="string">'denglu'</span>: <span class="string">'登录'</span>,</span><br><span class="line">&#125;</span><br><span class="line">ret = s.post(login_url,data=data,headers=headers).text</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'./gushi.html'</span>,<span class="string">'w'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    <span class="comment"># 存储到本地并以此判断我们是否成功登录</span></span><br><span class="line">    fp.write(ret)</span><br></pre></td></tr></table></figure><p>这里设计的坑：</p><ol><li>验证码</li><li>动态参数 __VIEWSTATE 等是隐藏在前端页面源码中的</li><li>需要携带cookie才能成功，而设置cookie的地方却在请求验证码。</li></ol><p>所以如果涉及cookie，觉得不确定就都用会话对象处理。</p><h1 id="遇到的错误以及解决方式"><a href="#遇到的错误以及解决方式" class="headerlink" title="遇到的错误以及解决方式"></a>遇到的错误以及解决方式</h1><h2 id="超时"><a href="#超时" class="headerlink" title="超时"></a>超时</h2><ul><li>headers中加 Connection:’close’</li></ul><h2 id="代理错误"><a href="#代理错误" class="headerlink" title="代理错误"></a>代理错误</h2><p><strong>ProxyError</strong>: HTTPSConnectionPool(host=’<a href="http://www.baidu.com&#39;" target="_blank" rel="noopener">www.baidu.com&#39;</a>, port=443): Max retries exceeded with url: /s?tn=80035161_2_dg&amp;wd=ip (Caused by ProxyError(‘Cannot connect to proxy.’, OSError(‘Tunnel connection failed: 503 Service Unavailable’)))</p><ul><li>我的代理并没有生效，这个代理是绑定本机ip的，但是我的ip不再白名单中。</li></ul>]]></content>
      <categories>
        <category>网络爬虫</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>python</tag>
        <tag>网络爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>爬虫概述</title>
    <url>/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/20190920-Web_Spider__2.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>本篇介绍爬虫的基本概念以及遇到的反爬机制与反反爬策略。</p></blockquote><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="爬虫是什么？"><a href="#爬虫是什么？" class="headerlink" title="爬虫是什么？"></a>爬虫是什么？</h2><ul><li>就是通过编写程序<strong>模拟</strong>浏览器上网，然后让其去互联网中<strong>爬取</strong>数据的过程<ul><li>模拟<ul><li>通过url来请求资源</li></ul></li><li>爬取<ul><li>整张页面</li><li>局部的指定的特定的（数据解析）</li></ul></li></ul></li></ul><h2 id="爬虫的分类"><a href="#爬虫的分类" class="headerlink" title="爬虫的分类"></a>爬虫的分类</h2><ul><li>通用爬虫：爬取一整张页面源码数据。搜索引擎（抓取系统 ==》内部封装的一套爬虫程序）中重点使用的是该种形式的爬虫</li><li>聚焦爬虫：抓取的页面中指定的局部数据。</li><li>增量式爬虫：<strong>监测</strong>网站数据更新的情况。抓取的是网站最新更新出来的数据。区别于通用爬虫（一次性的），增加了去重的特点。</li></ul><h2 id="爬虫安全性的探究"><a href="#爬虫安全性的探究" class="headerlink" title="爬虫安全性的探究"></a>爬虫安全性的探究</h2><ul><li>风险所在<ul><li>爬虫干扰了被访问网址的正常运营</li><li>爬取到了收法律保护的特定类型的数据或信息</li></ul></li><li>如何规避风险<ul><li>严格遵守网站设置的robots协议；</li><li>在规避反爬虫措施的同时，需要优化自己的代码，避免干扰被访问网站的正常运行；</li><li>在使用、传播抓取到的信息时，应审查所抓取的内容，如发现属于用户的个人信息、隐私或者他人的商业秘密的，应及时停止并删除</li></ul></li></ul><h1 id="HTTP与HTTPS"><a href="#HTTP与HTTPS" class="headerlink" title="HTTP与HTTPS"></a>HTTP与HTTPS</h1><p>既然爬虫是模拟浏览器上网，那么就需要了解 HTTP/HTTPS 与爬虫相关的那部分细节。</p><h2 id="什么是HTTP协议"><a href="#什么是HTTP协议" class="headerlink" title="什么是HTTP协议"></a>什么是HTTP协议</h2><p>客户端与服务器进行数据交互的某种形式。</p><h2 id="什么是HTTPS协议"><a href="#什么是HTTPS协议" class="headerlink" title="什么是HTTPS协议"></a>什么是HTTPS协议</h2><ul><li><p>HTTPS是安全（数据加密）的http协议。</p></li><li><p>HTTPS并非是应用层的一种新协议。只是HTTP通信接口部分（应用层与网络层之间）用 SSL（SecureSocket Layer）和 TLS（Transport Layer Security）协议代替而已。</p></li></ul><p><img src="%E7%88%AC%E8%99%AB%E6%A6%82%E8%BF%B0%5Chttps%E5%8D%8F%E8%AE%AE.jpg" alt="https协议"></p><p>​ TLS / SSL由Internet协议套件（TCP / IP）的应用程序层中的两层组成。</p><h2 id="常用的头信息"><a href="#常用的头信息" class="headerlink" title="常用的头信息"></a>常用的头信息</h2><ul><li>user-agent: 请求载体（不同的浏览器，爬虫代码）的身份标识</li><li>Connection：’keep-alive’长链接，没有的话就是短链接。 ‘close’表示请求成功后立即关闭</li><li>content-type：</li></ul><h1 id="HTTPS的加密方式"><a href="#HTTPS的加密方式" class="headerlink" title="HTTPS的加密方式"></a>HTTPS的加密方式</h1><h2 id="铺垫"><a href="#铺垫" class="headerlink" title="铺垫"></a>铺垫</h2><p><img src="%E7%88%AC%E8%99%AB%E6%A6%82%E8%BF%B0/https%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.png" alt="https的工作流程"></p><p>基本分为三个阶段：</p><ul><li><p><strong>认证服务器</strong>：</p><ul><li>客户端判断服务器是否可信。</li><li>浏览器内置一个<strong>受信任的CA机构列表</strong>，并保存了这些CA机构的证书。第一阶段服务器会提供经CA机构认证颁发的服务器证书，如果认证该服务器证书的CA机构，存在于浏览器的受信任CA机构列表中，并且服务器证书中的信息与当前正在访问的网站（域名等）一致，那么浏览器就认为服务端是可信的，并从服务器证书中取得服务器公钥，用于后续流程。否则，浏览器将提示用户，根据用户的选择，决定是否继续。当然，我们可以管理这个受信任CA机构列表，添加我们想要信任的CA机构，或者移除我们不信任的CA机构。</li></ul></li><li><p><strong>协商会话密钥</strong>：</p><ul><li>客户端得到服务端的公钥。客户端生成公钥和私钥后，利用服务端的公钥加密自己的公钥并发送给服务端，这样两边都有了公钥，就可以加密信息了。</li><li>客户端在认证完服务器，获得服务器的公钥之后，利用该公钥与服务器进行加密通信，协商出两个会话密钥，分别是用于<u>加密客户端往服务端发送数据的客户端会话密钥</u>，用于<u>加密服务端往客户端发送数据的服务端会话密钥</u>。在已有服务器公钥，可以加密通讯的前提下，还要协商两个对称密钥的原因，是因为非对称加密相对复杂度更高，在数据传输过程中，使用对称加密，可以节省计算资源。另外，会话密钥是随机生成，每次协商都会有不一样的结果，所以安全性也比较高。</li></ul></li><li><p><strong>加密通讯</strong>：</p><ul><li>客户端使用服务端的公钥加密信息，服务端使用客户端的公钥加密信息。</li><li>此时客户端服务器双方都有了本次通讯的会话密钥，之后传输的所有Http数据，都通过会话密钥加密。这样网路上的其它用户，将很难窃取和篡改客户端和服务端之间传输的数据，从而保证了数据的私密性和完整性。</li></ul></li></ul><h1 id="反爬机制与相应的反反爬策略"><a href="#反爬机制与相应的反反爬策略" class="headerlink" title="反爬机制与相应的反反爬策略"></a>反爬机制与相应的反反爬策略</h1><ul><li>反爬机制：应用在网站中</li><li>反反爬策略：应用在爬虫程序中</li></ul><h2 id="第一组-robots协议"><a href="#第一组-robots协议" class="headerlink" title="第一组(robots协议)"></a>第一组(robots协议)</h2><h3 id="反爬机制"><a href="#反爬机制" class="headerlink" title="反爬机制"></a>反爬机制</h3><p>robots协议：纯文本的协议</p><ul><li>例如：<a href="https://www.taobao.com/robots.txt" target="_blank" rel="noopener">https://www.taobao.com/robots.txt</a></li><li>特点：防君子不防小人</li></ul><h2 id="第二组-UA检测"><a href="#第二组-UA检测" class="headerlink" title="第二组(UA检测)"></a>第二组(UA检测)</h2><h3 id="反爬机制-1"><a href="#反爬机制-1" class="headerlink" title="反爬机制"></a>反爬机制</h3><p>UA检测：检测请求头信息的headers中的 <code>User-Agent</code></p><h3 id="反反爬策略"><a href="#反反爬策略" class="headerlink" title="反反爬策略"></a>反反爬策略</h3><p>添加UA：请求头信息的headers中添加 <code>User-Agent</code></p><h2 id="第三组-Cookie检测"><a href="#第三组-Cookie检测" class="headerlink" title="第三组(Cookie检测)"></a>第三组(Cookie检测)</h2><h3 id="反爬机制-2"><a href="#反爬机制-2" class="headerlink" title="反爬机制"></a>反爬机制</h3><p>Cookie检测：检测请求头信息的headers中的 <code>Cookie</code></p><h3 id="反反爬策略-1"><a href="#反反爬策略-1" class="headerlink" title="反反爬策略"></a>反反爬策略</h3><ul><li><p>手动：添加Cookie：请求头信息的headers中添加 <code>Cookie</code></p></li><li><p>自动：使用session发起请求会将服务器发回的cookie保留下来。详见<a href="https://chennq.com/网络爬虫/20190921-Web_Spider_3.html">基于requests的爬虫</a></p></li></ul><h2 id="第四组（图片懒加载）"><a href="#第四组（图片懒加载）" class="headerlink" title="第四组（图片懒加载）"></a>第四组（图片懒加载）</h2><h3 id="反爬机制-3"><a href="#反爬机制-3" class="headerlink" title="反爬机制"></a>反爬机制</h3><p>图片懒加载</p><ul><li><p>原本图片的属性 src 伪装成 src2</p></li><li><p>如果在可视区域内，js就将src2变成src</p></li><li><p>不在可视区域内就不请求这张图片</p></li></ul><h3 id="反反爬策略-2"><a href="#反反爬策略-2" class="headerlink" title="反反爬策略"></a>反反爬策略</h3><ul><li>拿到 src2 而不是 src，当然要根据爬取到的页面而定。</li></ul><h2 id="第五组（代理）"><a href="#第五组（代理）" class="headerlink" title="第五组（代理）"></a>第五组（代理）</h2><h3 id="反爬机制-4"><a href="#反爬机制-4" class="headerlink" title="反爬机制"></a>反爬机制</h3><ul><li>ip被封</li></ul><h3 id="反反爬策略-3"><a href="#反反爬策略-3" class="headerlink" title="反反爬策略"></a>反反爬策略</h3><ul><li>使用代理服务器</li></ul><p>代理ip的网站</p><ul><li>西祠代理 <code>https://www.xicidaili.com/nn/</code></li><li>快代理</li><li><code>www.goubanjia.com</code></li><li>代理精灵</li></ul><h2 id="第六组（登录限制）"><a href="#第六组（登录限制）" class="headerlink" title="第六组（登录限制）"></a>第六组（登录限制）</h2><p>登录限制</p><ul><li><p>拿到post提交的url地址进行登录。</p></li><li><p>使用selenium</p></li></ul><h2 id="第七组（动态加载的数据）"><a href="#第七组（动态加载的数据）" class="headerlink" title="第七组（动态加载的数据）"></a>第七组（动态加载的数据）</h2><h3 id="反爬机制-5"><a href="#反爬机制-5" class="headerlink" title="反爬机制"></a>反爬机制</h3><p>想要爬取的数据并不在当前请求页面的url</p><h3 id="反反爬策略-4"><a href="#反反爬策略-4" class="headerlink" title="反反爬策略"></a>反反爬策略</h3><ol><li>找到真正的请求url，发出请求即可</li><li>使用selenium实现可见即可得</li></ol><h2 id="第八组（动态变化的请求参数）"><a href="#第八组（动态变化的请求参数）" class="headerlink" title="第八组（动态变化的请求参数）"></a>第八组（动态变化的请求参数）</h2><h3 id="反爬机制-6"><a href="#反爬机制-6" class="headerlink" title="反爬机制"></a>反爬机制</h3><p>提交的参数是动态变化的，如果不正确则无法通过。</p><h3 id="反反爬策略-5"><a href="#反反爬策略-5" class="headerlink" title="反反爬策略"></a>反反爬策略</h3><p>通常可在页面的源码中找到。</p><h2 id="第九组（js混淆）"><a href="#第九组（js混淆）" class="headerlink" title="第九组（js混淆）"></a>第九组（js混淆）</h2><h3 id="反爬机制-7"><a href="#反爬机制-7" class="headerlink" title="反爬机制"></a>反爬机制</h3><p>经过js加密的代码称为js混淆。</p><h3 id="反反爬策略-6"><a href="#反反爬策略-6" class="headerlink" title="反反爬策略"></a>反反爬策略</h3><ul><li><p>反混淆的地址：<a href="http://www.bm8.com.cn/jsConfusion/" target="_blank" rel="noopener">http://www.bm8.com.cn/jsConfusion/</a></p></li><li><p>将接收到的js代码进行反混淆</p></li></ul><p>例子： 空气质量数据爬取</p><h2 id="第十组（js加密）"><a href="#第十组（js加密）" class="headerlink" title="第十组（js加密）"></a>第十组（js加密）</h2><h3 id="反爬机制-8"><a href="#反爬机制-8" class="headerlink" title="反爬机制"></a>反爬机制</h3><p>请求或返回的数据是进过加密的</p><h3 id="反反爬策略-7"><a href="#反反爬策略-7" class="headerlink" title="反反爬策略"></a>反反爬策略</h3><p>找到相应的js代码进行解密</p><p>例子： 空气质量数据爬取</p>]]></content>
      <categories>
        <category>网络爬虫</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>网络爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>爬虫学习目录</title>
    <url>/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/20190920-Web_Spider_1.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>网络爬虫学习目录</p></blockquote><a id="more"></a><h1 id="基础篇"><a href="#基础篇" class="headerlink" title="基础篇"></a>基础篇</h1><h2 id="爬虫概述"><a href="#爬虫概述" class="headerlink" title="爬虫概述"></a><a href="https://chennq.com/网络爬虫/20190920-Web_Spider__2.html">爬虫概述</a></h2><h2 id="Jupyter-Notebook介绍"><a href="#Jupyter-Notebook介绍" class="headerlink" title="Jupyter Notebook介绍"></a><a href="https://chennq.com/Jupyter-Notebook/20191008-Jupyter-Notebook-1.html">Jupyter Notebook介绍</a></h2><h2 id="基于requests的爬虫"><a href="#基于requests的爬虫" class="headerlink" title="基于requests的爬虫"></a><a href="https://chennq.com/网络爬虫/20190921-Web_Spider_3.html">基于requests的爬虫</a></h2><hr><h1 id="进阶篇"><a href="#进阶篇" class="headerlink" title="进阶篇"></a>进阶篇</h1><h2 id="单线程-多任务的异步协程"><a href="#单线程-多任务的异步协程" class="headerlink" title="单线程-多任务的异步协程"></a><a href="https://chennq.com/网络爬虫/20190923-Web_Spider_4.html">单线程-多任务的异步协程</a></h2><h2 id="使用asyncio和aiohttp加速爬取"><a href="#使用asyncio和aiohttp加速爬取" class="headerlink" title="使用asyncio和aiohttp加速爬取"></a><a href="https://chennq.com/网络爬虫/20190924-Web_Spider_5.html">使用asyncio和aiohttp加速爬取</a></h2><h2 id="可见即可的Selenium"><a href="#可见即可的Selenium" class="headerlink" title="可见即可的Selenium"></a><a href="https://chennq.com/网络爬虫/20190926-Web_Spider_6.html">可见即可的Selenium</a></h2><h2 id="基于scrapy框架的爬虫"><a href="#基于scrapy框架的爬虫" class="headerlink" title="基于scrapy框架的爬虫"></a><a href="https://chennq.com/网络爬虫/20190929-Web_Spider_7.html">基于scrapy框架的爬虫</a></h2><h3 id="使用CrawlSpider爬取数据"><a href="#使用CrawlSpider爬取数据" class="headerlink" title="使用CrawlSpider爬取数据"></a><a href="https://chennq.com/网络爬虫/20191001-Web_Spider_8.html">使用CrawlSpider爬取数据</a></h3><h3 id="Scrapy-redis实现分布式爬虫"><a href="#Scrapy-redis实现分布式爬虫" class="headerlink" title="Scrapy+redis实现分布式爬虫"></a><a href="https://chennq.com/网络爬虫/20191002-Web_Spider_9.html">Scrapy+redis实现分布式爬虫</a></h3><h3 id="基于Scrapy框架的增量式爬虫"><a href="#基于Scrapy框架的增量式爬虫" class="headerlink" title="基于Scrapy框架的增量式爬虫"></a><a href="https://chennq.com/网络爬虫/20191003-Web_Spider_10.html">基于Scrapy框架的增量式爬虫</a></h3><h2 id="爬取存在js加密与js混淆的页面"><a href="#爬取存在js加密与js混淆的页面" class="headerlink" title="爬取存在js加密与js混淆的页面"></a><a href="https://chennq.com/网络爬虫/20191005-Web_Spider_11.html">爬取存在js加密与js混淆的页面</a></h2>]]></content>
      <categories>
        <category>网络爬虫</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>网络爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>git的简单使用</title>
    <url>/git/20190901-git_1_basic_use.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>本篇介绍git的基础命令，以及三个场景下的使用流程。</p></blockquote><a id="more"></a><p>通过这篇文章，你能了解到：</p><ul><li>git的基础命令</li><li>个人开发场景下的流程（待补充）</li><li>公司和家配合开发场景下的流程（待补充）</li><li>协同开发（待补充）</li></ul><p>推荐学习 <a href="https://oschina.gitee.io/learn-git-branching/" target="_blank" rel="noopener">学习Git分支</a> ，本文大部分内容也来自此</p><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="版本控制有什么作用？"><a href="#版本控制有什么作用？" class="headerlink" title="版本控制有什么作用？"></a>版本控制有什么作用？</h2><ol><li><p>防止代码冲突，相互覆盖</p></li><li><p>帮助后面的人员快速了解整个项目的开发过程</p></li><li><p>如果出现需求变更，方便还原代码</p></li></ol><h2 id="代码版本控制软件"><a href="#代码版本控制软件" class="headerlink" title="代码版本控制软件"></a>代码版本控制软件</h2><p>git，svn（老旧的项目），csv（比svn还早，银行）</p><p>SVN的缺点：如果中央服务器挂了，只能停工了。</p><p>git：分布式的版本控制，每个节点平等。本地的可以充当中央服务器。</p><ul><li>先提交到本地（commit），在推送到线上（push）。</li><li>既充当服务器也充当客户端</li></ul><h1 id="Git基础命令"><a href="#Git基础命令" class="headerlink" title="Git基础命令"></a>Git基础命令</h1><h2 id="90"><a href="#90" class="headerlink" title="90%"></a>90%</h2><h3 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h3><ul><li>Git 仓库中的<strong>提交记录</strong>保存的是你的目录下所有文件的<strong>快照</strong>。</li><li>每次进行提交时，它并不会盲目地复制整个目录。条件允许的情况下，它会将当前版本与仓库中的上一个版本进行对比，并把所有的<strong>差异</strong>打包到一起作为一个提交记录。</li><li>Git 还保存了提交的<strong>历史记录</strong>。这也是为什么大多数提交记录的上面都有父节点的原因。</li></ul><h3 id="git-branch"><a href="#git-branch" class="headerlink" title="git branch"></a>git branch</h3><ul><li><p>Git 的分支非常轻量。它们只是简单地指向某个提交纪录：早建分支！多用分支！</p></li><li><p>分支的作用：我想基于这个提交以及它所有的父提交进行新的工作。</p></li></ul><figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line">git branch <span class="keyword">new</span><span class="type">Image</span>   	创建一个到名为 <span class="keyword">new</span><span class="type">Image</span> 的分支</span><br><span class="line">git chechout &lt;name&gt;		在提交修改之前切换到新分支上</span><br><span class="line">git checkout -b &lt;your-branch-name&gt;	创建一个新的分支同时切换到新创建的分支</span><br></pre></td></tr></table></figure><h3 id="分支与合并"><a href="#分支与合并" class="headerlink" title="分支与合并"></a>分支与合并</h3><p><strong>Git Merge</strong>（第一种）</p><ul><li>在 Git 中合并两个分支时会产生一个特殊的提交记录，它有两个父节点。</li><li>翻译成自然语言相当于：“我要把这两个父节点本身及它们所有的祖先都包含进来。”</li></ul><p><img src="/git/20190901-git_1_basic_use/merge%E8%BF%87%E7%A8%8B.png" alt="merge过程"></p><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">第一个箭头：</span><br><span class="line">	git merge bugFix;      	将bugFix合并到当前分支上（<span class="literal">master</span>）</span><br><span class="line">第二个箭头：</span><br><span class="line">	git checkout bugFix;  	切换分支</span><br><span class="line">	git merge <span class="literal">master</span>;     	把 <span class="keyword">master</span> <span class="title">分支合并到 bugFix</span></span><br></pre></td></tr></table></figure><p>解释：</p><p>第一个箭头：</p><ul><li><code>master</code> 现在指向了一个拥有两个父节点的提交记录。</li><li>假如从 <code>master</code> 开始沿着箭头向上看，在到达起点的路上会经过所有的提交记录。这意味着 <code>master</code> 包含了对代码库的所有修改。</li></ul><p>第二个箭头：</p><ul><li><p>因为 <code>master</code> 继承自 <code>bugFix</code>，Git 什么都不用做，只是简单地把 <code>bugFix</code> 移动到 <code>master</code> 所指向的那个提交记录。</p></li><li><p>现在所有提交记录的颜色都一样了，这表明每一个分支都包含了代码库的所有修改！</p></li></ul><p>命令补充：</p><p>git分支改名：</p><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line">如果对于分支不是当前分支：</span><br><span class="line">	git <span class="keyword">branch </span>-m 原名 新</span><br><span class="line">如果是当前，那么可以使用加上新名字：</span><br><span class="line">	git <span class="keyword">branch </span>-m 原名</span><br></pre></td></tr></table></figure><p><strong>Git Rebase</strong> （第二种）</p><ul><li><p>Rebase 实际上就是取出一系列的提交记录，“复制”它们，然后在另外一个地方逐个的放下去。</p></li><li><p>Rebase 的优势就是可以<strong>创造更线性的提交历史</strong>，如果只允许使用 Rebase 的话，代码库的提交历史将会变得异常清晰。</p></li></ul><p><img src="/git/20190901-git_1_basic_use/rebase%E8%BF%87%E7%A8%8B.png" alt="rebase过程"></p><p>目标：</p><ul><li>我们想要<strong>把 bugFix 分支里的工作直接移到 master 分支上</strong>。移动以后会使得两个分支的功能看起来像是按顺序开发，但实际上它们是并行开发的。</li></ul><p>命令：</p><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">第一个箭头：</span><br><span class="line">	git rebase <span class="keyword">master</span>      	<span class="title">把当前分支（bugFix</span>）rebase到<span class="literal">master</span>分支上</span><br><span class="line">第二个箭头：</span><br><span class="line">	git checkout <span class="keyword">master</span> 	<span class="title">切换到master</span></span><br><span class="line">	git rebase bugFix		把当前分支（<span class="literal">master</span>）rebase到bugFix分支上。</span><br></pre></td></tr></table></figure><p>解释：</p><p>第一个箭头：</p><ul><li>bugFix 分支上的工作在 master 的最顶端，同时我们也得到了一个更线性的提交序列。</li><li>提交记录 C3 依然存在（树上那个半透明的节点），而 C3’ 是我们 Rebase 到 master 分支上的 C3 的副本。</li></ul><p>第二个箭头：</p><ul><li>由于 <code>bugFix</code> 继承自 <code>master</code>，所以 Git 只是简单的把 <code>master</code> 分支的引用向前移动了一下而已。</li></ul><h2 id="在提交树上移动"><a href="#在提交树上移动" class="headerlink" title="在提交树上移动"></a>在提交树上移动</h2><h3 id="HEAD"><a href="#HEAD" class="headerlink" title="HEAD"></a><strong>HEAD</strong></h3><ul><li>HEAD 是一个对当前检出记录的符号引用，也就是<strong>指向</strong>你正在其基础上<strong>进行工作的提交记录</strong>。</li></ul><p><img src="/git/20190901-git_1_basic_use/git%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%5CHEAD%E8%BF%87%E7%A8%8B.png" alt="HEAD过程"></p><p>命令：</p><figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">git checkout C1<span class="comment">;</span></span><br><span class="line">git checkout master<span class="comment">;</span></span><br><span class="line">git commit<span class="comment">;</span></span><br><span class="line">git checkout C2<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>解释：</p><ul><li>HEAD 指向了 <code>master</code>，随着提交向前移动。</li><li>这些命令并不是真正查看 HEAD 指向，补充命令如下：</li></ul><p>补充命令：</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">查看HEAD指向：</span></span><br><span class="line"><span class="attr">cat</span> <span class="string">.git/HEAD</span></span><br><span class="line"><span class="attr">git</span> <span class="string">symbolic-ref HEAD</span></span><br></pre></td></tr></table></figure><h3 id="分离的-HEAD"><a href="#分离的-HEAD" class="headerlink" title="分离的 HEAD"></a><strong>分离的 HEAD</strong></h3><ul><li>分离的 HEAD 就是让其<strong>指向了某个具体的提交记录</strong>而不是分支名。</li></ul><p><img src="/git/20190901-git_1_basic_use/%E5%88%86%E7%A6%BBHEAD.png" alt="分离HEAD"></p><p>命令：</p><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">git</span> checkout <span class="built_in">C1</span></span><br></pre></td></tr></table></figure><p>在命令执行之前的状态如下所示：</p><ul><li><p>HEAD -&gt; master -&gt; C1</p></li><li><p>HEAD 指向 master， master 指向 C1</p></li></ul><p>执行命令后：</p><ul><li>HEAD -&gt; C1</li></ul><p>note：图中C1，C2 指得是哈希值，通过哈希值指定提交记录。</p><h3 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a>git log</h3><ul><li>查看提交记录的哈希值（基于 SHA-1，共 40 位）。</li><li>虽然哈希值有些长~，但是Git 对哈希的处理很智能。你只需要提供能够唯一标识提交记录的前几个字符即可。</li></ul><h3 id="相对引用"><a href="#相对引用" class="headerlink" title="相对引用"></a>相对引用</h3><ul><li>正如前面，通过哈希值指定提交记录很不方便，所以 Git 引入了相对引用。这个就很厉害了!</li><li>使用相对引用的话，你就可以从一个易于记忆的地方（比如 <code>bugFix</code> 分支或 <code>HEAD</code>）开始计算。</li></ul><p>第一种用法：</p><p>使用 <code>^</code> 向上移动 1 个提交记录</p><ul><li>操作符 (^)：把这个符号加在引用名称的后面，表示让 Git 寻找指定提交记录的父提交。</li></ul><p><img src="/git/20190901-git_1_basic_use/%E4%BD%BF%E7%94%A8%5E%E5%9C%A8.png" alt="使用^在"></p><p>命令：</p><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">git checkout C3<span class="comment">;</span></span><br><span class="line">git checkout HEAD^<span class="comment">;</span></span><br><span class="line">git checkout HEAD^<span class="comment">;</span></span><br><span class="line">git checkout HEAD^<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">也可以写为：</span><br><span class="line">git checkout C3<span class="comment">;</span></span><br><span class="line">git checkout HEAD^^^<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>第二种用法:</p><ul><li><p>显然如果向上移动很多步的话，敲那么多 <code>^</code> 貌似也挺烦人的，所以Git又引入了操作符 <code>~</code>。</p></li><li><p>使用 <code>~&lt;num&gt;</code> 向上移动多个提交记录，如 <code>~3</code></p></li></ul><p>上面的命令就可以改为：</p><figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">也可以写为：</span><br><span class="line">git checkout HEAD<span class="symbol">~4</span>;</span><br></pre></td></tr></table></figure><h3 id="强制修改分支位置"><a href="#强制修改分支位置" class="headerlink" title="强制修改分支位置"></a><strong>强制修改分支位置</strong></h3><p>使用相对引用最多的就是移动分支。可以直接使用 <code>-f</code> 选项让分支指向另一个提交。</p><p>例如: 上例中，将 master 分支强制指向 HEAD 的第 3 级父提交。</p><p><img src="/git/20190901-git_1_basic_use/%E5%BC%BA%E5%88%B6%E4%BF%AE%E6%94%B9%E5%88%86%E6%94%AF%E4%BD%8D%E7%BD%AE.png" alt="强制修改分支位置"></p><p>命令：</p><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">git branch -f <span class="keyword">master</span> <span class="title">HEAD</span>~<span class="number">3</span></span><br></pre></td></tr></table></figure><h2 id="撤销变更"><a href="#撤销变更" class="headerlink" title="撤销变更"></a>撤销变更</h2><ul><li><p>在 Git 里撤销变更的方法很多。和提交一样，撤销变更由底层部分（暂存区的独立文件或者片段）和上层部分（变更到底是通过哪种方式被撤销的）组成。</p></li><li><p>这里关注的是后者</p></li></ul><h3 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a>git reset</h3><ul><li><code>git reset</code> 通过把分支记录回退几个提交记录来实现撤销改动。你可以将这想象成“改写历史”。<code>git reset</code> 向上移动分支，原来指向的提交记录就跟从来没有提交过一样。</li></ul><p><img src="/git/20190901-git_1_basic_use/reset%E8%BF%87%E7%A8%8B.png" alt="reset过程"></p><p>命令：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">reset</span> <span class="keyword">HEAD</span>~<span class="number">1</span></span><br></pre></td></tr></table></figure><p>解释：</p><ul><li>Git 把 master 分支移回到 <code>C1</code>；现在我们的本地代码库根本就不知道有 <code>C2</code> 这个提交了。</li><li>在reset后， <code>C2</code> 所做的变更还在，但是处于未加入暂存区状态。</li></ul><h3 id="git-revert"><a href="#git-revert" class="headerlink" title="git revert"></a>git revert</h3><ul><li>虽然在你的本地分支中使用 <code>git reset</code> 很方便，但是这种“改写历史”的方法对大家一起使用的远程分支是无效的哦！</li><li>为了撤销更改并<strong>分享</strong>给别人，我们需要使用 <code>git revert</code>。来看演示：</li></ul><p><img src="/git/20190901-git_1_basic_use/revert%E8%BF%87%E7%A8%8B.png" alt="revert过程"></p><p>命令：</p><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">git</span> <span class="keyword">revert </span>HEAD</span><br></pre></td></tr></table></figure><p>解释：</p><ul><li>不同于reset的回退，revert后多了一个新提交，在这个新提交记录 <code>C2&#39;</code> 引入了<strong>更改</strong> —— 这些更改刚好是用来撤销 <code>C2</code> 这个提交的。也就是说 <code>C2&#39;</code> 的状态与 <code>C1</code> 是相同的。</li></ul><h2 id="10"><a href="#10" class="headerlink" title="10%"></a>10%</h2><p>待补充！！！</p><p>通用流程如下：</p><p><img src="/git/20190901-git_1_basic_use/%E9%80%9A%E7%94%A8%E6%B5%81%E7%A8%8B.png" alt="通用流程"></p>]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Neo4j-初识</title>
    <url>/Neo4j%E5%AD%A6%E4%B9%A0/20190801-configure_Neo4j_and_use.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>本篇为在win10中配置Neo4j数据库以及简单使用。</p></blockquote><a id="more"></a><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>Neo4j是世界领先的图数据库。</p><p>启动方式：</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">neo4j<span class="selector-class">.bat</span> console</span><br></pre></td></tr></table></figure><p>查看帮助</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:<span class="built_in">help</span> 待查询内容</span><br><span class="line">:<span class="built_in">help</span> cypher</span><br></pre></td></tr></table></figure><p>创建节点</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">create</span> (<span class="selector-pseudo">:Job</span>&#123;<span class="attribute">name</span>:<span class="string">"WebDev"</span>&#125;),(<span class="selector-pseudo">:Job</span>&#123;<span class="attribute">name</span>:<span class="string">"AtuoOffice"</span>&#125;),</span><br><span class="line">(<span class="selector-pseudo">:Job</span>&#123;<span class="attribute">name</span>:<span class="string">"SpiderWorker"</span>&#125;),(<span class="selector-pseudo">:Knowledge</span>&#123;<span class="attribute">name</span>:<span class="string">"Python"</span>&#125;),</span><br><span class="line">(<span class="selector-pseudo">:Knowledge</span>&#123;<span class="attribute">name</span>:<span class="string">"FileDispose"</span>&#125;),(<span class="selector-pseudo">:Knowledge</span>&#123;<span class="attribute">name</span>:<span class="string">'Linux'</span>&#125;),</span><br><span class="line">(<span class="selector-pseudo">:Knowledge</span>&#123;<span class="attribute">name</span>:<span class="string">"Requests"</span>&#125;)</span><br></pre></td></tr></table></figure><p>查询节点</p><p>MATCH</p><p>方法1：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">match</span>(<span class="selector-tag">n</span><span class="selector-pseudo">:Job</span>&#123;<span class="attribute">name</span>:<span class="string">"WebDev"</span>&#125;) <span class="selector-tag">return</span> <span class="selector-tag">n</span></span><br></pre></td></tr></table></figure><p>方法2：</p><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">match (n:Job) <span class="keyword">where</span> n.<span class="built_in">name</span>=<span class="string">"WebDev"</span> <span class="literal">return</span> n</span><br></pre></td></tr></table></figure><p>查询关系</p><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">match</span>(<span class="attribute">j</span>:Job)<span class="selector-tag">-</span><span class="selector-attr">[]</span><span class="selector-tag">-</span>(<span class="attribute">k</span>:Knowledge) <span class="selector-tag">return</span> <span class="selector-tag">j</span>,<span class="selector-tag">k</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">MATCH</span> (<span class="selector-tag">a</span><span class="selector-pseudo">:Job</span>&#123;<span class="attribute">name</span>:<span class="string">"AutoOffice"</span>&#125;),(<span class="selector-tag">p</span><span class="selector-pseudo">:Knowledge</span>&#123;<span class="attribute">name</span>:<span class="string">"Python"</span>&#125;) <span class="selector-tag">create</span> (<span class="selector-tag">a</span>)<span class="selector-tag">-</span><span class="selector-attr">[:AUTOOFFICESTUDYPATH]</span> <span class="selector-tag">-</span>&gt; (<span class="selector-tag">p</span>) <span class="selector-tag">return</span> <span class="selector-tag">a</span>,<span class="selector-tag">p</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">match</span> (<span class="selector-tag">p</span><span class="selector-pseudo">:Knowledge</span>&#123;<span class="attribute">name</span>:<span class="string">"Python"</span>&#125;),(<span class="selector-tag">f</span><span class="selector-pseudo">:Knowledge</span>&#123;<span class="attribute">name</span>:<span class="string">"FileDispose"</span>&#125;) <span class="selector-tag">create</span> (<span class="selector-tag">p</span>)<span class="selector-tag">-</span><span class="selector-attr">[a:AUTOOFFICESTUDYPATH]</span><span class="selector-tag">-</span>&gt;(<span class="selector-tag">f</span>)</span><br></pre></td></tr></table></figure><p>别名需要在本次查询中唯一。</p><p>修改属性</p><p>先匹配在修改</p><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">match (d:Dog) <span class="keyword">set</span> d.<span class="built_in">name</span> = <span class="string">"dahuang"</span> <span class="literal">return</span> d</span><br></pre></td></tr></table></figure><p>删除</p><p>节点删除、属性删除</p><p>remove 、 delete</p><p>先匹配：</p><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">match</span> (<span class="attribute">a</span>:Job)<span class="selector-tag">-</span><span class="selector-attr">[r:AUTOOFFICESTUDYPATH]</span> <span class="selector-tag">-</span>&gt; (<span class="attribute">k</span>:Knowledge) <span class="selector-tag">return</span> <span class="selector-tag">a</span>,<span class="selector-tag">r</span>,<span class="selector-tag">k</span></span><br></pre></td></tr></table></figure><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">match</span> (<span class="attribute">a</span>:Job)<span class="selector-tag">-</span><span class="selector-attr">[r:AUTOOFFICESTUDYPATH]</span> <span class="selector-tag">-</span>&gt; (<span class="attribute">k</span>:Knowledge) <span class="selector-tag">delete</span> <span class="selector-tag">a</span>,<span class="selector-tag">r</span></span><br></pre></td></tr></table></figure><h1 id="知识图谱"><a href="#知识图谱" class="headerlink" title="知识图谱"></a>知识图谱</h1><h2 id="数据分析、大数据"><a href="#数据分析、大数据" class="headerlink" title="数据分析、大数据"></a>数据分析、大数据</h2><ul><li>知识图谱本质上是一种<strong>语义网络</strong></li><li>知识图谱也叫做多关系图，有多种类型的<strong>节点</strong>和多种类型的<strong>边</strong>来组成</li><li>通俗的讲，知识图谱就是把所有不同种类的信息连接在一起而得到的一个关系网络</li><li>知识图谱提供了从“<strong>关系</strong>”的角度去分析问题的能力</li></ul><h2 id="图数据"><a href="#图数据" class="headerlink" title="图数据"></a>图数据</h2><ul><li>实体（嘎子）</li><li>关系（线）</li></ul><h2 id="应用领域"><a href="#应用领域" class="headerlink" title="应用领域"></a>应用领域</h2><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>google</p><h3 id="推荐系统"><a href="#推荐系统" class="headerlink" title="推荐系统"></a>推荐系统</h3><p>电商，同系列推荐</p><h3 id="金融风控"><a href="#金融风控" class="headerlink" title="金融风控"></a>金融风控</h3><h1 id="构建知识体系的知识图谱"><a href="#构建知识体系的知识图谱" class="headerlink" title="构建知识体系的知识图谱"></a>构建知识体系的知识图谱</h1><p>待补充！！！</p>]]></content>
      <categories>
        <category>Neo4j学习</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>Neo4j</tag>
      </tags>
  </entry>
  <entry>
    <title>Next主题下gitalk踩坑记</title>
    <url>/Hexo/20190729-hexo-next-gitalk.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>在hexo下的next主题添加gitalk评论，第一部分为初步配置，第二部分是我踩过的坑。</p></blockquote><a id="more"></a><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="Register-Application"><a href="#Register-Application" class="headerlink" title="Register Application"></a>Register Application</h2><p>在GitHub上注册新应用，链接：<a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">https://github.com/settings/applications/new</a></p><p>填些时注意：</p><p>Application name：guestbook # 我新建了一个名为guestbook的Repositories来存放这些Issues。<br>Homepage URL： # 网站URL，如<code>https://atlasnq.github.io/</code><br>Application description # 描述，随意<br>Authorization callback URL：# 网站URL，<code>https://atlasnq.github.io/</code></p><p>点击确定后会跳转到一个页面，记录 <code>client id</code>和<code>secret</code></p><h2 id="gitalk-swig"><a href="#gitalk-swig" class="headerlink" title="gitalk.swig"></a><code>gitalk.swig</code></h2><p>新建<code>/layout/_third-party/comments/gitalk.swig</code>文件，并添加内容：</p><figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> page.comments &amp;&amp; theme.gitalk.enable %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://unpkg.com/gitalk/dist/gitalk.css"</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/gitalk/dist/gitalk.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"gitalk-container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/js/src/md5.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    var gitalk = new Gitalk(&#123;</span></span><br><span class="line"><span class="xml">      clientID: '</span><span class="template-variable">&#123;&#123; theme.gitalk.clientID &#125;&#125;</span><span class="xml">',</span></span><br><span class="line"><span class="xml">      clientSecret: '</span><span class="template-variable">&#123;&#123; theme.gitalk.clientSecret &#125;&#125;</span><span class="xml">',</span></span><br><span class="line"><span class="xml">      repo: '</span><span class="template-variable">&#123;&#123; theme.gitalk.repo &#125;&#125;</span><span class="xml">',</span></span><br><span class="line"><span class="xml">      owner: '</span><span class="template-variable">&#123;&#123; theme.gitalk.owner &#125;&#125;</span><span class="xml">',</span></span><br><span class="line"><span class="xml">      admin: ['</span><span class="template-variable">&#123;&#123; theme.gitalk.admin &#125;&#125;</span><span class="xml">'],</span></span><br><span class="line"><span class="xml">      id: md5(location.pathname),</span></span><br><span class="line"><span class="xml">      distractionFreeMode: '</span><span class="template-variable">&#123;&#123; theme.gitalk.distractionFreeMode &#125;&#125;</span><span class="xml">'</span></span><br><span class="line"><span class="xml">    &#125;)</span></span><br><span class="line"><span class="xml">    gitalk.render('gitalk-container')</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure><h2 id="comments-swig"><a href="#comments-swig" class="headerlink" title="comments.swig"></a>comments.swig</h2><p>修改<code>/layout/_partials/comments.swig</code>，添加下面内容：</p><figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name">elseif</span> theme.gitalk.enable %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"gitalk-container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure><p><img src="/Hexo/20190729-hexo-next-gitalk/comment.png" alt="comment"></p><h2 id="index-swig"><a href="#index-swig" class="headerlink" title="index.swig"></a>index.swig</h2><p>修改<code>layout/_third-party/comments/index.swig</code>，在最后一行添加内容：</p><figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">include</span></span> 'gitalk.swig' %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure><h2 id="gitalk-styl"><a href="#gitalk-styl" class="headerlink" title="gitalk.styl"></a>gitalk.styl</h2><p>新建<code>/source/css/_common/components/third-party/gitalk.styl</code>文件，添加内容：</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.gt-header</span> <span class="selector-tag">a</span>, <span class="selector-class">.gt-comments</span> <span class="selector-tag">a</span>, <span class="selector-class">.gt-popup</span> a</span><br><span class="line">  <span class="attribute">border-bottom</span>: none;</span><br><span class="line"><span class="selector-class">.gt-container</span> <span class="selector-class">.gt-popup</span> <span class="selector-class">.gt-action</span><span class="selector-class">.is--active</span>:before</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0.7em</span>;</span><br></pre></td></tr></table></figure><h2 id="third-party-styl"><a href="#third-party-styl" class="headerlink" title="third-party.styl"></a>third-party.styl</h2><p>修改<code>/source/css/_common/components/third-party/third-party.styl</code>，在最后一行上添加内容，引入样式：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">import</span> <span class="string">"gitalk"</span>;</span><br></pre></td></tr></table></figure><h2 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h2><p>在主题配置文件<code>next/_config.yml</code>中添加如下内容：</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">gitalk: </span><br><span class="line">  enable: <span class="literal">true</span>   </span><br><span class="line">  clientID:<span class="built_in"> Client </span>ID   </span><br><span class="line">  clientSecret:<span class="built_in"> Client </span>Secret</span><br><span class="line">  repo: # 仓库名称 例：guestbook  # 如果想用一个新的仓库存储Issues的话，可以写这个，与OAutu设置名称一致</span><br><span class="line">  owner: # github帐号 # 指定可初始化评论账户  例如 atlasnq</span><br><span class="line">  admin: # github帐号 # 指定可初始化评论账户  例如 atlasnq</span><br><span class="line">  distractionFreeMode: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>以上为Next主题下gitalk评论的配置，第二部分为自己实践中遇到的问题。</p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h2 id="问题一：gitalk无法登录github-重定向到主页"><a href="#问题一：gitalk无法登录github-重定向到主页" class="headerlink" title="问题一：gitalk无法登录github,重定向到主页"></a>问题一：gitalk无法登录github,重定向到主页</h2><p>参考<a href="https://github.com/gitalk/gitalk/issues/102" target="_blank" rel="noopener">https://github.com/gitalk/gitalk/issues/102</a>初步检查一下，总结一下，有可能配置写错了，还有可能就是你的链接是有问题的，我当时犯的错误是我原本的url链接中是含有空格的，改成空格后这个问题就解决了。</p><h2 id="问题二：gitalk-Error-Validation-Failed"><a href="#问题二：gitalk-Error-Validation-Failed" class="headerlink" title="问题二：gitalk Error: Validation Failed."></a>问题二：gitalk Error: Validation Failed.</h2><p>当把问题一解决后每一秒，就发现我有的文章出现了新的问题Error: Validation Failed. 现在<a href="https://github.com/gitalk/gitalk/issues/102" target="_blank" rel="noopener">Issues</a>浏览了一会儿，解决这个问题的简单的一个办法是通过md5加密来 <code>github issue lables 50 字符</code>限制。</p><ol><li><p>打开<a href="https://www.bootcdn.cn/blueimp-md5/" target="_blank" rel="noopener">https://www.bootcdn.cn/blueimp-md5/</a>点击<code>复制&lt;script&gt;标签</code>完成对这个js的复制，在next主题文件夹下的<code>source\js\src</code>目录下新建名字为<code>md5.min.js</code>的文件后，粘贴。</p><p><img src="/Hexo/20190729-hexo-next-gitalk/%E7%B2%98%E8%B4%B4md5.png" alt="粘贴md5"></p></li><li><p>接下来在<code>layout/_third-party/comments/gitalk.swig</code>配置文件中修改或添加代码 <code>&lt;script src=&quot;/js/src/md5.min.js&quot;&gt;&lt;/script&gt;</code>和 <code>id: md5(location.pathname),</code></p><p><img src="/Hexo/20190729-hexo-next-gitalk/%E4%BF%AE%E6%94%B9.png" alt="修改"></p></li></ol>]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Next主题</tag>
      </tags>
  </entry>
  <entry>
    <title>Django-自定义一、二级菜单</title>
    <url>/django/20190727-django_17_Custom_menu.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>本篇将自定义可重用的一、二级菜单。</p></blockquote><a id="more"></a><p>通过这篇文章，你能了解到：</p><ul><li>定义一、二级菜单的思路</li><li>核心代码</li></ul><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>本篇是在自定义 RBAC组件 的基础上进行的补充，RBAC见<del>~</del></p><h2 id="一级菜单"><a href="#一级菜单" class="headerlink" title="一级菜单"></a>一级菜单</h2><p>思路：</p><p>在登陆验证中，我们需要将用户信息写入到session中，需要写入的信息有：is_login（登录状态）、permission（权限信息/该用户可访问的 <code>url</code> 地址）、menu_list（菜单信息）。</p><h2 id="二级菜单"><a href="#二级菜单" class="headerlink" title="二级菜单"></a>二级菜单</h2><p>目标：</p><p>一级菜单做展示，二级菜单做跳转。</p><p>思路：</p><ul><li>在一级菜单，我们是将菜单信息写在Permission表中的，但是对于二级菜单的话，写在Permission中就不太合适了，重新定义一个Menu表，这个表中有两个字段：title（一级菜单标题）、icon（图标）</li><li>定义了model之后，就可以在一级菜单的基础上进行改进。</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Menu</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    icon = models.CharField(max_length=<span class="number">50</span>, verbose_name=<span class="string">'图标'</span>, blank=<span class="literal">True</span>, null=<span class="literal">True</span>)</span><br><span class="line">    title = models.CharField(max_length=<span class="number">32</span>, verbose_name=<span class="string">'一级菜单标题'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.title</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Permission</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    menu_id  有menu_id  当前的权限是一个二级菜单</span></span><br><span class="line"><span class="string">             没有menu_id   当前的权限时一个普通的权限</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    url = models.CharField(max_length=<span class="number">108</span>, verbose_name=<span class="string">'权限'</span>)</span><br><span class="line">    title = models.CharField(max_length=<span class="number">32</span>, verbose_name=<span class="string">'标题'</span>)</span><br><span class="line">    menu = models.ForeignKey(<span class="string">'Menu'</span>, verbose_name=<span class="string">'一级菜单'</span>, blank=<span class="literal">True</span>, null=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.title</span><br></pre></td></tr></table></figure><p>数据结构</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="string">'menu_id'</span>: &#123;</span><br><span class="line">		<span class="string">'title'</span>: <span class="string">'menu_title'</span>,</span><br><span class="line">		<span class="string">'icon'</span>: <span class="string">'fa-connectdevelop'</span>,</span><br><span class="line">		<span class="string">'children'</span>: [&#123;</span><br><span class="line">			<span class="string">'title'</span>: <span class="string">'title'</span>,</span><br><span class="line">			<span class="string">'url'</span>: <span class="string">'url'</span></span><br><span class="line">		&#125;]</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="string">'menu_id'</span>: &#123;</span><br><span class="line">		<span class="string">'title'</span>: <span class="string">'menu_title'</span>,</span><br><span class="line">		<span class="string">'icon'</span>: <span class="string">'fa-code-fork'</span>,</span><br><span class="line">		<span class="string">'children'</span>: [&#123;</span><br><span class="line">			<span class="string">'title'</span>: <span class="string">'title'</span>,</span><br><span class="line">			<span class="string">'url'</span>: <span class="string">'url'</span></span><br><span class="line">		&#125;]</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">具体如下：</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">'1'</span>: &#123;</span><br><span class="line">		<span class="string">'title'</span>: <span class="string">'账单管理'</span>,</span><br><span class="line">		<span class="string">'icon'</span>: <span class="string">'fa-code-fork'</span>,</span><br><span class="line">		<span class="string">'children'</span>: [&#123;</span><br><span class="line">			<span class="string">'title'</span>: <span class="string">'支付信息'</span>,</span><br><span class="line">			<span class="string">'url'</span>: <span class="string">'/payment/list/'</span></span><br><span class="line">		&#125;]</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="string">'2'</span>: &#123;</span><br><span class="line">		<span class="string">'title'</span>: <span class="string">'客户管理'</span>,</span><br><span class="line">		<span class="string">'icon'</span>: <span class="string">'fa-connectdevelop'</span>,</span><br><span class="line">		<span class="string">'children'</span>: [&#123;</span><br><span class="line">			<span class="string">'title'</span>: <span class="string">'客户信息'</span>,</span><br><span class="line">			<span class="string">'url'</span>: <span class="string">'/customer/list/'</span></span><br><span class="line">		&#125;]</span><br><span class="line">	&#125;,</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">menu_dict = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">    <span class="keyword">if</span> i[<span class="string">'permissions__menu_id'</span>]:</span><br><span class="line">        menu_dict[i[<span class="string">'permissions__menu_id'</span>]] = menu_dict.get(i[<span class="string">'permissions__menu_id'</span>]) <span class="keyword">or</span> &#123;</span><br><span class="line">            <span class="string">'title'</span>: i[<span class="string">'permissions__menu__title'</span>],</span><br><span class="line">            <span class="string">'icon'</span>: i[<span class="string">'permissions__menu__icon'</span>],</span><br><span class="line">            <span class="string">'children'</span>: []</span><br><span class="line">        &#125;</span><br><span class="line">        menu_dict[i[<span class="string">'permissions__menu_id'</span>]][<span class="string">'children'</span>].append(</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">'title'</span>: i[<span class="string">'permissions__title'</span>],</span><br><span class="line">                <span class="string">'url'</span>: i[<span class="string">'permissions__url'</span>],</span><br><span class="line">            &#125;)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>django</category>
      </categories>
      <tags>
        <tag>django</tag>
        <tag>学习笔记</tag>
        <tag>Web前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Django-奇怪的ERRORS</title>
    <url>/django/20190726-django_16_strange-ERRORS.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>记录学习Django时，遇到的奇怪的错误以及解决方式。</p></blockquote><a id="more"></a><p>①</p><p>ERRORS:</p><p><code>&lt;class &#39;rbac.admin.PermissionAdmin&#39;&gt;: (admin.E124) The value of &#39;list_editable[0]&#39; refers to the first field in &#39;list_display&#39; (&#39;title&#39;), which cannot be used unless &#39;list_display_links&#39; is set.</code></p><p>我的model：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Permission</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    url = models.CharField(max_length=<span class="number">108</span>, verbose_name=<span class="string">'权限'</span>)</span><br><span class="line">    title = models.CharField(max_length=<span class="number">32</span>, verbose_name=<span class="string">'标题'</span>)</span><br><span class="line">    is_menu = models.BooleanField(default=<span class="literal">False</span>, verbose_name=<span class="string">'是否是菜单'</span>)</span><br><span class="line">    icon = models.CharField(max_length=<span class="number">50</span>, verbose_name=<span class="string">'图标'</span>, blank=<span class="literal">True</span>, null=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.title</span><br></pre></td></tr></table></figure><p>我的admin.py</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> rbac <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Register your models here.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PermissionAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    list_display = [<span class="string">'title'</span>, <span class="string">'url'</span>, <span class="string">'is_menu'</span>, <span class="string">'icon'</span>]</span><br><span class="line">    <span class="comment"># list_editable = ['title','url', 'is_menu', 'icon', ]</span></span><br><span class="line">    list_editable = list_display</span><br><span class="line"></span><br><span class="line">admin.site.register(models.Permission, PermissionAdmin)</span><br></pre></td></tr></table></figure><p>解决方式如下：</p><ul><li>添加一个 list_display_links</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> rbac <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Register your models here.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PermissionAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    list_display = [<span class="string">'title'</span>, <span class="string">'url'</span>, <span class="string">'is_menu'</span>, <span class="string">'icon'</span>]</span><br><span class="line">    <span class="comment"># list_editable = ['title','url', 'is_menu', 'icon', ]</span></span><br><span class="line">    list_editable = list_display</span><br><span class="line">    list_display_links = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">admin.site.register(models.Permission, PermissionAdmin)</span><br></pre></td></tr></table></figure><p>参考 <a href="https://code.djangoproject.com/ticket/22792" target="_blank" rel="noopener">Check rule for list_display_links is incorrect</a>.</p>]]></content>
      <categories>
        <category>django</category>
      </categories>
      <tags>
        <tag>django</tag>
        <tag>学习笔记</tag>
        <tag>Web前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Django-自定义权限组件(RBAC)</title>
    <url>/django/20190725-django_16_RBAC.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>当完成基础业务后，就该着手解决用户的权限问题了。</p></blockquote><a id="more"></a><p>通过这篇文章，你能了解到：</p><ul><li>RBAC是什么?</li><li>实现思路与流程</li><li>实现代码</li></ul><h2 id="RBAC是什么"><a href="#RBAC是什么" class="headerlink" title="RBAC是什么?"></a>RBAC是什么?</h2><p>在Django中，对于我们来说什么是权限呢？具体能体现在什么地方呢？</p><ul><li>有权限的话就能访问这个url，所以url对应着权限。</li></ul><p>那么权限该怎么存储呢？还需要什么呢？</p><ul><li>除了权限，我们还有用户，最初级的版本是用户与权限建立对应关系，但是随着用户的增多，很多用户具有相同的权限，这样就产生了角色（用户组）的概念；</li><li>所以我们需要权限，用户，角色，角色与权限，用户与角色五张表。</li></ul><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li>登陆验证：首先用户会进行登录，登录完成后，我们需要将这个用户的权限信息（url）写到session中；</li><li>权限校验：登陆后，当我们访问别的页面的时候，我们从session中获取该用户的权限，如果当前请求的 <code>url</code> 在权限中就可以访问，如果不在就告知无法访问。当然我们需要设置白名单，因为对于 login，register，admin 这类是不需要校验的，对于 index 这种是登录后所有人都能访问的。</li></ol><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><ol><li><p>定义视图函数：在 <code>auth.py</code> 中写登录函数，用户名密码验证通过后就查询该用户的权限，并将其放入session中，此外在session中加入登录状态（is_login）</p></li><li><p>定义中间件：在中间件这个类中，定义 <code>process_request</code> 方法，在该方法中，我们将进行权限的校验，</p><ol><li>首先，确定当前 <code>url</code> 不在白名单中（login，register，admin）；</li><li>获取登陆状态，确定当前 <code>url</code> 不在免校验名单（index ）；</li><li>获取用户权限，确定当前url在不在用户权限内，在的话就能访问，不在则不能访问。</li></ol></li></ol><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><p>模型如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Permission</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    url = models.CharField(max_length=<span class="number">108</span>, verbose_name=<span class="string">'权限'</span>)</span><br><span class="line">    title = models.CharField(max_length=<span class="number">32</span>, verbose_name=<span class="string">'标题'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.title</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Role</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    permission = models.ManyToManyField(<span class="string">'Permission'</span>, verbose_name=<span class="string">'拥有权限'</span>, related_name=<span class="string">'role'</span>, blank=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    username = models.CharField(max_length=<span class="number">32</span>, verbose_name=<span class="string">'用户名'</span>)</span><br><span class="line">    password = models.CharField(max_length=<span class="number">32</span>, verbose_name=<span class="string">'密码'</span>)</span><br><span class="line">    role = models.ManyToManyField(<span class="string">'Role'</span>, verbose_name=<span class="string">'所属角色'</span>, blank=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.username</span><br></pre></td></tr></table></figure><p>登录验证如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># auth.py</span></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render, redirect</span><br><span class="line"><span class="keyword">from</span> rbac <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        username = request.POST.get(<span class="string">'username'</span>)</span><br><span class="line">        password = request.POST.get(<span class="string">'password'</span>)</span><br><span class="line">        user_obj = models.User.objects.filter(username=username, password=password).first()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> user_obj:</span><br><span class="line">            <span class="keyword">return</span> render(request, <span class="string">'login.html'</span>, &#123;<span class="string">'error'</span>: <span class="string">'用户名或密码不存在'</span>&#125;)</span><br><span class="line">        request.session[<span class="string">'is_login'</span>] = <span class="literal">True</span>   <span class="comment"># 会进行序列化</span></span><br><span class="line">        <span class="comment"># 查询该用户拥有的权限，并放在session中</span></span><br><span class="line">        permissions = user_obj.role.filter(permission__url__isnull=<span class="literal">False</span>).values(<span class="string">'permission__url'</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> permissions:</span><br><span class="line">            request.session[<span class="string">'permission'</span>] = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            permissions = list(permissions.distinct())</span><br><span class="line">            request.session[<span class="string">'permission'</span>] = permissions</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">'index'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'login.html'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'index.html'</span>)</span><br></pre></td></tr></table></figure><p>权限校验如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># rbac.py</span></span><br><span class="line"><span class="keyword">from</span> django.utils.deprecation <span class="keyword">import</span> MiddlewareMixin</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> HttpResponse,redirect</span><br><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RbacMiddleWare</span><span class="params">(MiddlewareMixin)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self,request,*args,**kwargs)</span>:</span></span><br><span class="line">        url = request.path_info</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> settings.WHITE_LIST:</span><br><span class="line">            <span class="keyword">if</span> re.match(i,url):</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">        is_login = request.session.get(<span class="string">'is_login'</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> is_login:</span><br><span class="line">            <span class="keyword">return</span> redirect(<span class="string">'login'</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> settings.LAISSER_PASSER:</span><br><span class="line">            <span class="keyword">if</span> re.match(i, url):</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">        permission = request.session.get(<span class="string">'permission'</span>)</span><br><span class="line">        <span class="keyword">if</span> permission:</span><br><span class="line">            print(url)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> permission:</span><br><span class="line">                print(i)</span><br><span class="line">                <span class="keyword">if</span> re.match(i[<span class="string">'permission__url'</span>], url):</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">'无权访问，请通知管理员'</span>)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>django</category>
      </categories>
      <tags>
        <tag>django</tag>
        <tag>学习笔记</tag>
        <tag>Web前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Django-modelformset</title>
    <url>/django/20190724-django_15_modelformset.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>modelformset可以让我们批量操作form/modelform。</p></blockquote><a id="more"></a><p>通过这篇文章，你能了解到：</p><ul><li>使用 <code>modelformset_factory()</code> 创建表单</li></ul><h2 id="使用函数modelformset-factory-创建表单"><a href="#使用函数modelformset-factory-创建表单" class="headerlink" title="使用函数modelformset_factory()创建表单"></a>使用函数modelformset_factory()创建表单</h2><p><code>views.py</code> 内容如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.forms.models <span class="keyword">import</span> modelformset_factory</span><br><span class="line">    FormSet = modelformset_factory(model=models.StudyRecord, form=StudyRecordForm, extra=<span class="number">0</span>)</span><br><span class="line">    <span class="comment"># extra=0 表示不会额外增加一条</span></span><br><span class="line">    queryset = models.StudyRecord.objects.filter(course_record_id=course_id)</span><br><span class="line">    formset_obj = FormSet(queryset=queryset[page_obj.start:page_obj.end])</span><br><span class="line">    <span class="comment"># 接下来的用法同modelform</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        formset_obj = FormSet(data=request.POST)</span><br><span class="line">        <span class="keyword">if</span> formset_obj.is_valid():</span><br><span class="line">            formset_obj.save()</span><br><span class="line">             <span class="keyword">return</span> HttpResponse(<span class="string">'ok'</span>)</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">'error'</span>)</span><br><span class="line">   	<span class="keyword">return</span> render(request, <span class="string">'study_record_list.html'</span>,&#123;<span class="string">'formset'</span>: formset_obj&#125;)</span><br></pre></td></tr></table></figure><p><code>study_record_list.html</code> 内容如下：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    &#123;&#123; formset.management_form &#125;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-body"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>序号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>课程<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>学员<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>考勤<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>本节成绩<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>作业文件<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">                &#123;% for field in formset %&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; forloop.counter &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; field.course_record &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; field.student &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; field.attendance &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; field.score &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; field.homework &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"hidden"</span>&gt;</span>&#123;&#123; field.id &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                &#123;% endfor %&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-warning center-block"</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span>           </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但是在渲染的时候，我们需要加入 <code>formset.management_form</code> 值 以及当我们自定义输出 field 的时候我们需要手动加上主键 <code>field.id</code></p><p>其它用法：</p><p>待补充！！！！</p>]]></content>
      <categories>
        <category>django</category>
      </categories>
      <tags>
        <tag>django</tag>
        <tag>学习笔记</tag>
        <tag>Web前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Django-QueryDict</title>
    <url>/django/20190719-django_14_QueryDict.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>QueryDict 是一个类字典对象，新增的属性与方法都需要了解。</p></blockquote><a id="more"></a><p>通过这篇文章，你能了解到：</p><ul><li>QueryDict是什么？</li><li>QueryDict的属性与方法</li></ul><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>源码中 <code>QueryDict</code> 定义如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QueryDict</span><span class="params">(MultiValueDict)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    A specialized MultiValueDict which represents a query string.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    A QueryDict can be used to represent GET or POST data. It subclasses</span></span><br><span class="line"><span class="string">    MultiValueDict since keys in such data can be repeated, for instance</span></span><br><span class="line"><span class="string">    in the data from a form with a &lt;select multiple&gt; field.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    By default QueryDicts are immutable, though the copy() method</span></span><br><span class="line"><span class="string">    will always return a mutable copy.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Both keys and values set on this class are converted from the given encoding</span></span><br><span class="line"><span class="string">    (DEFAULT_CHARSET by default) to unicode.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># These are both reset in __init__, but is specified here at the class</span></span><br><span class="line">    <span class="comment"># level so that unpickling will have valid values</span></span><br><span class="line">    _mutable = <span class="literal">True</span></span><br><span class="line">    _encoding = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, query_string=None, mutable=False, encoding=None)</span>:</span></span><br><span class="line">        super(QueryDict, self).__init__()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> encoding:</span><br><span class="line">            encoding = settings.DEFAULT_CHARSET</span><br><span class="line">        self.encoding = encoding</span><br><span class="line">        query_string = query_string <span class="keyword">or</span> <span class="string">''</span></span><br><span class="line">        parse_qsl_kwargs = &#123;</span><br><span class="line">            <span class="string">'keep_blank_values'</span>: <span class="literal">True</span>,</span><br><span class="line">            <span class="string">'fields_limit'</span>: settings.DATA_UPLOAD_MAX_NUMBER_FIELDS,</span><br><span class="line">            <span class="string">'encoding'</span>: encoding,</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">        self._mutable = mutable</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_assert_mutable</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self._mutable:</span><br><span class="line">            <span class="keyword">raise</span> AttributeError(<span class="string">"This QueryDict instance is immutable"</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setitem__</span><span class="params">(self, key, value)</span>:</span></span><br><span class="line">        <span class="comment"># 当修改值时调用这个方法，</span></span><br><span class="line">        self._assert_mutable()	<span class="comment"># 会先判断是否 mutable</span></span><br><span class="line">        key = bytes_to_text(key, self.encoding)</span><br><span class="line">        value = bytes_to_text(value, self.encoding)</span><br><span class="line">        super(QueryDict, self).__setitem__(key, value)</span><br><span class="line">        </span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fromkeys</span><span class="params">(cls, iterable, value=<span class="string">''</span>, mutable=False, encoding=None)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Return a new QueryDict with keys (may be repeated) from an iterable and</span></span><br><span class="line"><span class="string">        values from value.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setlist</span><span class="params">(self, key, list_)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setlistdefault</span><span class="params">(self, key, default_list=None)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">appendlist</span><span class="params">(self, key, value)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self, key, *args)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">popitem</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clear</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setdefault</span><span class="params">(self, key, default=None)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">copy</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""Returns a mutable copy of this object."""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">urlencode</span><span class="params">(self, safe=None)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Returns an encoded string of all query string arguments.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :arg safe: Used to specify characters which do not require quoting, for</span></span><br><span class="line"><span class="string">            example::</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                &gt;&gt;&gt; q = QueryDict(mutable=True)</span></span><br><span class="line"><span class="string">                &gt;&gt;&gt; q['next'] = '/a&amp;b/'</span></span><br><span class="line"><span class="string">                &gt;&gt;&gt; q.urlencode()</span></span><br><span class="line"><span class="string">                'next=%2Fa%26b%2F'</span></span><br><span class="line"><span class="string">                &gt;&gt;&gt; q.urlencode(safe='/')</span></span><br><span class="line"><span class="string">                'next=/a%26b/'</span></span><br><span class="line"><span class="string">        """</span></span><br></pre></td></tr></table></figure><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><table><thead><tr><th>属性名</th><th>解释</th></tr></thead><tbody><tr><td><code>_mutable</code></td><td>在实例化的时候，mutable=False，默认为False，不能对键对应值进行修改，修改<code>_mutable</code>为True后就可以修改了。</td></tr><tr><td><code>_encoding</code></td><td>在实例化的时候，encoding=None，默认使用settings.DEFAULT_CHARSET进行编码</td></tr></tbody></table><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><table><thead><tr><th>方法名</th><th>解释</th></tr></thead><tbody><tr><td><code>setlist(self, key, list_)</code></td><td></td></tr><tr><td><code>setlistdefault(self, key, default_list=None)</code></td><td></td></tr><tr><td><code>appendlist(self, key, value)</code></td><td></td></tr><tr><td><code>pop(self, key, *args)</code></td><td></td></tr><tr><td><code>popitem(self)</code></td><td></td></tr><tr><td><code>clear(self)</code></td><td></td></tr><tr><td><code>setdefault(self, key, default=None)</code></td><td></td></tr><tr><td><code>copy(self)</code></td><td>深拷贝 + 可修改</td></tr><tr><td><code>urlencode(self, safe=None)</code></td><td>将所有的参数（query string）编码后拼接在一起。这样不会被request因为&amp;而进行切分。</td></tr></tbody></table><h2 id="例子（编辑之后重定向）"><a href="#例子（编辑之后重定向）" class="headerlink" title="例子（编辑之后重定向）"></a>例子（编辑之后重定向）</h2><p>背景：当我们完成编辑时，希望返回的是进入编辑前的页面，而不是其它页面，所以我们需要对展示页面中a标签的链接进行一个修改，从而完成编辑后能返回这个展示页面，目标结果如下：</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">/crm/customer_edit/<span class="number">22</span>?next=/crm/customer_search/?page=<span class="number">2</span>&amp;search=<span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li><p><code>/crm/customer_edit/22</code> 是将要打开的编辑页面</p></li><li><p><code>?next=/crm/customer_search/?page=2&amp;search=1</code> next后面记录了我们当前展示页面的url，这样在完成编辑后，就可以通过这个next，回到展示页面。</p></li></ul><p>但在实际中，新的request请求会按照&amp;进行切分，next对应的值就不完整了，所以实际中需要进行编码，效果如下</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">/crm/customer_edit/<span class="number">22</span>?next=/crm/customer_search/%<span class="number">3</span>Fpage%<span class="number">3</span>D2%<span class="number">26</span>search%<span class="number">3</span>D1</span><br></pre></td></tr></table></figure><p>方式：使用simple_tag，来生成可返回的url地址。</p><p>关键在于：<strong>url上面携带着成功后要跳转的地址</strong></p><p>定义：</p><ol><li>将待前往<strong>编辑的url</strong>，通过reverse反向解析生成</li><li>创建可变的QueryDict，并把当前完整的url 放在这个QueryDict中。</li><li>使用 <code>urlencode</code> 进行编码得到 <strong>历史url</strong>，参数safe会在url前面加一个 <code>/</code> 这样保证是从 <code>/</code> 开始</li><li>将这两个url进行拼接，中间用 <code>?</code> 连接。</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># my_tags.py</span></span><br><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> template</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> reverse</span><br><span class="line"><span class="keyword">from</span> django.http.request <span class="keyword">import</span> QueryDict</span><br><span class="line"></span><br><span class="line">register = template.Library()</span><br><span class="line"><span class="meta">@register.simple_tag</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">url_tag</span><span class="params">(request, name, *args, **kwargs)</span>:</span></span><br><span class="line">    <span class="comment"># 目标 ：将前往的url?next=/crm/customer_search/?page=2&amp;search=1  将这个进行转化 不然下一次的request请求会以&amp;进行切分</span></span><br><span class="line">    url = reverse(name, args=args, kwargs=kwargs)  <span class="comment"># 待前往编辑的url</span></span><br><span class="line">    qd = QueryDict(mutable=<span class="literal">True</span>)</span><br><span class="line">    qd[<span class="string">'next'</span>] = request.get_full_path()  <span class="comment"># 将历史url转化放在next</span></span><br><span class="line">    ret = url + <span class="string">'?'</span> + qd.urlencode(safe=<span class="string">'/'</span>)  <span class="comment"># 待前往的地址 ? next=以前的地址</span></span><br><span class="line">    print(ret)</span><br><span class="line">    <span class="keyword">return</span> ret</span><br></pre></td></tr></table></figure><p>使用：</p><p>html中使用 simple_tag</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url_tag request "</span><span class="attr">crm:customer_edit</span>" <span class="attr">q.pk</span>  %&#125;" <span class="attr">class</span>=<span class="string">"btn btn-danger btn-sm"</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br></pre></td></tr></table></figure><p>视图中只需要从request中拿到这个next参数就可以</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line">next = request.GET.get(<span class="string">'next'</span>)  </span><br><span class="line"><span class="keyword">return</span> redirect(next)</span><br></pre></td></tr></table></figure><p>效果如下：</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">/crm/customer_edit/<span class="number">38</span>?next=/crm/customer_search/%<span class="number">3</span>Fpage%<span class="number">3</span>D2%<span class="number">26</span>search%<span class="number">3</span>D1</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>django</category>
      </categories>
      <tags>
        <tag>django</tag>
        <tag>学习笔记</tag>
        <tag>Web前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Django-ModelForm</title>
    <url>/django/20190718-django_13_ModelForm.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>使用ModelForm可以大大减少我们的工作量，在model的基础上使用modelform来展示，创建和编辑表单。</p></blockquote><a id="more"></a><h2 id="form组件的缺点"><a href="#form组件的缺点" class="headerlink" title="form组件的缺点"></a>form组件的缺点</h2><p>对于定义的model来说，在自定义form组件的时候还需要重新定义一遍字段，所以ModelForm来了，它较form组件更简单，能做的也更多。</p><p>最简单的ModelForm：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RegForm</span><span class="params">(forms.ModelForm)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = models.UserProfile</span><br><span class="line">        fields = <span class="string">'__all__'</span>  <span class="comment"># 也可以使用 ['username']</span></span><br></pre></td></tr></table></figure><p>用的时候和form的用法一样。</p><h2 id="ModelForm的缺点"><a href="#ModelForm的缺点" class="headerlink" title="ModelForm的缺点"></a>ModelForm的缺点</h2><p>虽然ModelForm帮我们简化了操作，但是这样功能会减少，我们在类似CharField中只能写widget，其它关于error_message,label,min_lenght都是不行的。</p><ul><li>这样的话只能自定义了。</li><li>或者改变settings中的默认语言为 zh-hans 凑合着用。</li></ul><h2 id="添加自定义字段"><a href="#添加自定义字段" class="headerlink" title="添加自定义字段"></a>添加自定义字段</h2><ul><li>在ModelForm中添加自定义字段同在form中定义字段。</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RegForm</span><span class="params">(forms.ModelForm)</span>:</span></span><br><span class="line">    <span class="comment"># 这里添加自定义字段</span></span><br><span class="line">    re_password = forms.CharField(widget=forms.PasswordInput(attrs=&#123;<span class="string">'class'</span>: <span class="string">'form-control input-medium'</span>&#125;))</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = models.UserProfile</span><br><span class="line">        fields = <span class="string">'__all__'</span>  <span class="comment"># 也可以使用 ['username']</span></span><br></pre></td></tr></table></figure><h3 id="重写-init-方法"><a href="#重写-init-方法" class="headerlink" title="重写 __init__ 方法"></a>重写 <code>__init__</code> 方法</h3><ul><li>想把bootstrap的样式应用进去就需要添加，手动添加属性太过繁琐，重写 <code>__init__</code> 方法来批量添加属性。</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># froms.py</span></span><br><span class="line"><span class="keyword">from</span> multiselectfield.forms.fields <span class="keyword">import</span> MultiSelectFormField</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomerForm</span><span class="params">(forms.ModelForm)</span>:</span></span><br><span class="line">    <span class="string">'''Customer相关'''</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,*args,**kwargs)</span>:</span></span><br><span class="line">        super().__init__(*args,**kwargs)</span><br><span class="line">        <span class="comment"># 自定义操作 添加属性class = form-control</span></span><br><span class="line">        <span class="keyword">for</span> name,field <span class="keyword">in</span> self.fields.items():</span><br><span class="line">            <span class="comment"># print(name,field)</span></span><br><span class="line">            <span class="keyword">if</span> isinstance(field,MultiSelectFormField):</span><br><span class="line">                field.widget.attrs[<span class="string">'class'</span>] = <span class="string">'list-inline'</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            field.widget.attrs[<span class="string">'class'</span>] = <span class="string">'form-control'</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = models.Customer</span><br><span class="line">        fields = <span class="string">'__all__'</span></span><br><span class="line">        exclude = [<span class="string">'last_consult_date'</span>]</span><br></pre></td></tr></table></figure><h2 id="增加与编辑"><a href="#增加与编辑" class="headerlink" title="增加与编辑"></a>增加与编辑</h2><ul><li>利用modelform来增加和编辑数据是很简单的。</li><li>对于增加只需要实例化一个空的modelform，渲染后在前端填充完毕，后端通过校验后只需要 save 就可以保存这条记录。</li><li>对于编辑，实例化的时候将需要待编辑的这个model 传给 instance参数，渲染完毕后在前端进行修改，后端实例化 <code>(新数据, 原始数据)</code> ，通过校验后只需要 save 就可以保存编辑。</li><li>所以增加与编辑的不同之处在于是否使用 <code>instance</code></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">customer_change</span><span class="params">(request, pk=None)</span>:</span></span><br><span class="line">    cus_obj = models.Customer.objects.filter(pk=pk).first()</span><br><span class="line">    form_obj = CustomerForm(instance=cus_obj)</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        form_obj = CustomerForm(request.POST, instance=cus_obj)</span><br><span class="line">        <span class="keyword">if</span> form_obj.is_valid():</span><br><span class="line">            form_obj.save()</span><br><span class="line">            <span class="keyword">return</span> redirect(<span class="string">'crm:my_customer'</span>)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'customer_change.html'</span>, &#123;<span class="string">'form_obj'</span>: form_obj&#125;)</span><br></pre></td></tr></table></figure><p>note：</p><ul><li>上面代码可以实现这两个功能的一个前提是: 在 <code>BaseModelForm</code> 的 <code>__init__</code>中 <code>instance=None</code> 。</li></ul><h3 id="动态创建表单"><a href="#动态创建表单" class="headerlink" title="动态创建表单"></a>动态创建表单</h3><ul><li>在HTML中，我们只需要遍历ModelForm对象，就可以把所有字段创建出来。</li><li>field.field.required 用来判断这个字段是否是必填字段</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">class</span>=<span class="string">"form-horizontal col-lg-6 col-lg-offset-2"</span> <span class="attr">novalidate</span>&gt;</span></span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    &#123;% for field in form_obj %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group &#123;% if field.errors %&#125;has-success&#123;% endif %&#125;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"&#123;&#123; field.id_for_label &#125;&#125;"</span> <span class="attr">class</span>=<span class="string">"col-sm-2 control-label"</span></span></span><br><span class="line"><span class="tag">                    &#123;% <span class="attr">if</span> <span class="attr">not</span> <span class="attr">field.field.required</span> %&#125; <span class="attr">style</span>=<span class="string">"color:gray;"</span>&#123;% <span class="attr">endif</span> %&#125;&gt;</span>&#123;&#123; field.label &#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-10"</span>&gt;</span></span><br><span class="line">                &#123;&#123; field &#125;&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"help-block"</span>&gt;</span>&#123;&#123; field.errors.0 &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default btn-sm col-lg-offset-5"</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="源码剖析"><a href="#源码剖析" class="headerlink" title="源码剖析"></a>源码剖析</h2><ul><li>为什么不是 <code>field.required</code> ，而是 <code>field.field.required</code> ？</li></ul><p>找到 <code>BaseForm</code> 中的 <code>__iter__</code> 方法和 <code>__getitem__</code> 方法</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> self.fields:</span><br><span class="line">        <span class="keyword">yield</span> self[name] </span><br><span class="line">    <span class="comment"># self[name] 调用 __getitem__ 方法</span></span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">    <span class="string">"Returns a BoundField with the given name."</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        field = self.fields[name]</span><br><span class="line">    <span class="keyword">except</span> KeyError:</span><br><span class="line">        <span class="keyword">raise</span> KeyError(</span><br><span class="line">            <span class="string">"Key '%s' not found in '%s'. Choices are: %s."</span> % (</span><br><span class="line">                name,</span><br><span class="line">                self.__class__.__name__,</span><br><span class="line">                <span class="string">', '</span>.join(sorted(f <span class="keyword">for</span> f <span class="keyword">in</span> self.fields)),</span><br><span class="line">            )</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">if</span> name <span class="keyword">not</span> <span class="keyword">in</span> self._bound_fields_cache:</span><br><span class="line">        self._bound_fields_cache[name] = field.get_bound_field(self, name)</span><br><span class="line">    <span class="keyword">return</span> self._bound_fields_cache[name]</span><br><span class="line">	<span class="comment"># 这里不再返回字段的field话，field.required就是正确的，这里缓存了字段，所以采用field.field.required</span></span><br></pre></td></tr></table></figure><p>点击进入get_bound_field</p><ul><li>其中的self 是 Field 对象。</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_bound_field</span><span class="params">(self, form, field_name)</span>:</span></span><br><span class="line">	<span class="string">"""</span></span><br><span class="line"><span class="string">	Return a BoundField instance that will be used when accessing the form</span></span><br><span class="line"><span class="string">    field in a template.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> BoundField(form, self, field_name)</span><br></pre></td></tr></table></figure><p>点击进入 BoundField</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BoundField</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"A Field plus data"</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, form, field, name)</span>:</span></span><br><span class="line">        self.form = form</span><br><span class="line">        self.field = field</span><br><span class="line">        self.name = name</span><br><span class="line">        self.html_name = form.add_prefix(name)</span><br><span class="line">        self.html_initial_name = form.add_initial_prefix(name)</span><br><span class="line">        self.html_initial_id = form.add_initial_prefix(self.auto_id)</span><br></pre></td></tr></table></figure><p>(form, self, field_name) —&gt; (self, form, field, name)</p><p>form —&gt; form</p><p>self （Field对象） —&gt; field</p><p>field_name —&gt; name</p><p>self.field = field (self ) （是一个Field）<br>这里就相当于做了一次缓存，所以，使用 field.field.required才能找到。</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>实现一个用户注册</p><p>相比于以前我们需要将每个字段进行校验，然后在创建这一行数据，ModelForm为我们简化了很多很多！</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms</span><br><span class="line"><span class="keyword">from</span> django.core.validators <span class="keyword">import</span> RegexValidator</span><br><span class="line"><span class="keyword">from</span> django.core.exceptions <span class="keyword">import</span> ValidationError</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RegForm</span><span class="params">(forms.ModelForm)</span>:</span></span><br><span class="line">    password = forms.CharField(</span><br><span class="line">        min_length=<span class="number">6</span>,</span><br><span class="line">        widget=forms.PasswordInput(attrs=&#123;<span class="string">'class'</span>: <span class="string">'form-control input-medium'</span>, <span class="string">'placeholder'</span>: <span class="string">'密码'</span>&#125;),</span><br><span class="line">        error_messages=&#123;</span><br><span class="line">            <span class="string">'min_length'</span>: <span class="string">'密码长度要大于6位'</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    re_password = forms.CharField(</span><br><span class="line">        min_length=<span class="number">6</span>,</span><br><span class="line">        widget=forms.PasswordInput(attrs=&#123;<span class="string">'class'</span>: <span class="string">'form-control input-medium'</span>, <span class="string">'placeholder'</span>: <span class="string">'确认密码'</span>&#125;),</span><br><span class="line">        error_messages=&#123;</span><br><span class="line">            <span class="string">'min_length'</span>: <span class="string">'密码长度要大于6位'</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    mobile = forms.CharField(validators=[RegexValidator(<span class="string">'^1[3-9]\d&#123;9&#125;$'</span>, <span class="string">'手机号格式不正确'</span>)], widget=forms.TextInput(</span><br><span class="line">        attrs=&#123;<span class="string">'class'</span>: <span class="string">'form-control input-medium'</span>, <span class="string">'placeholder'</span>: <span class="string">'手机号'</span>&#125;))  <span class="comment"># 会覆盖下面的mobile</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = models.UserProfile</span><br><span class="line">        fields = <span class="string">'__all__'</span>              <span class="comment"># 也可以使用 ['username']</span></span><br><span class="line">        exclude = [<span class="string">'is_active'</span>]         <span class="comment"># 这里排除了就可以使用models中的default默认了</span></span><br><span class="line">        widgets = &#123;                     <span class="comment"># 自定义字段标签，可以加属性</span></span><br><span class="line">            <span class="string">'username'</span>: forms.EmailInput(</span><br><span class="line">                attrs=&#123;<span class="string">'class'</span>: <span class="string">'form-control input-medium'</span>, <span class="string">'placeholder'</span>: <span class="string">'用户名'</span>, <span class="string">'autocomplete'</span>: <span class="string">'off'</span>&#125;),</span><br><span class="line">            <span class="string">'password'</span>: forms.PasswordInput(</span><br><span class="line">                attrs=&#123;<span class="string">'class'</span>: <span class="string">'form-control input-medium'</span>, <span class="string">'placeholder'</span>: <span class="string">'密码'</span>, <span class="string">'autocomplete'</span>: <span class="string">'off'</span>&#125;),</span><br><span class="line">            <span class="string">'name'</span>: forms.TextInput(</span><br><span class="line">                attrs=&#123;<span class="string">'class'</span>: <span class="string">'form-control input-medium'</span>, <span class="string">'placeholder'</span>: <span class="string">'姓名'</span>, <span class="string">'autocomplete'</span>: <span class="string">'off'</span>&#125;),</span><br><span class="line">            <span class="string">'department'</span>: forms.Select(</span><br><span class="line">                attrs=&#123;<span class="string">'class'</span>: <span class="string">'form-control input-medium'</span>, <span class="string">'placeholder'</span>: <span class="string">'部门'</span>, <span class="string">'autocomplete'</span>: <span class="string">'off'</span>&#125;),</span><br><span class="line">            <span class="string">'mobile'</span>: forms.TextInput(</span><br><span class="line">                attrs=&#123;<span class="string">'class'</span>: <span class="string">'form-control input-medium'</span>, <span class="string">'placeholder'</span>: <span class="string">'手机号'</span>, <span class="string">'autocomplete'</span>: <span class="string">'off'</span>&#125;),</span><br><span class="line">        &#125;</span><br><span class="line">        error_messages = &#123;</span><br><span class="line">            <span class="string">"username"</span>: &#123;</span><br><span class="line">                <span class="string">"unique"</span>: <span class="string">"邮箱已存在"</span></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clean</span><span class="params">(self)</span>:</span></span><br><span class="line">        self._validate_unique = <span class="literal">True</span></span><br><span class="line">        pwd1 = self.cleaned_data.get(<span class="string">'password'</span>)</span><br><span class="line">        pwd2 = self.cleaned_data.get(<span class="string">'re_password'</span>)</span><br><span class="line">        <span class="keyword">if</span> pwd1 == pwd2:</span><br><span class="line">            <span class="keyword">if</span> pwd1:</span><br><span class="line">                md5 = hashlib.md5()</span><br><span class="line">                md5.update(pwd1.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">                self.cleaned_data[<span class="string">'password'</span>] = md5.hexdigest()</span><br><span class="line">            <span class="keyword">return</span> self.cleaned_data</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.add_error(<span class="string">'re_password'</span>, <span class="string">'两次密码不一致'</span>)</span><br><span class="line">            <span class="keyword">raise</span> ValidationError(<span class="string">'两次密码不一致'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 存在缺陷：具有 Username 的 用户信息 已存在。这回暴露字段名，这种该怎么办？？？ 有一个key叫做unique</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">(request)</span>:</span></span><br><span class="line">    form_obj = RegForm()</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        form_obj = RegForm(request.POST)</span><br><span class="line">        <span class="keyword">if</span> form_obj.is_valid():</span><br><span class="line">            form_obj.save()</span><br><span class="line">            <span class="keyword">return</span> redirect(<span class="string">'crm:login'</span>)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'register.html'</span>, &#123;<span class="string">'form_obj'</span>: form_obj&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>django</category>
      </categories>
      <tags>
        <tag>django</tag>
        <tag>学习笔记</tag>
        <tag>Web前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Django-实现分页</title>
    <url>/django/20190717-django_13_Paginator.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>在展示数据的时候，分页是一个不可或缺的的功能，本篇在Django中实现分页并封装成类，方便以后使用。</p></blockquote><a id="more"></a><p>通过这篇文章，你能了解到：</p><ul><li>自定义分页的流程</li><li>可重用的分页代码</li></ul><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><ol><li><p>整个流程是从当前页码（page）开始，页码决定了数据的开头结尾，所以有了它我们可以将数据分页展示；</p></li><li><p>接下来设计页码，对于页码来说，想得到它的开头结尾，这样页码的数量将是固定的（max_show）</p></li><li><p>将页码在后端生成html</p></li><li><p>将整个流程定义到类中</p></li><li><p>实例化将封装当前页码、页码起始、页码结尾、数据起始、数据结尾等。</p></li><li><p>调用方法get_html将生成的页码html返回给前端。</p></li></ol><ul><li>在前面的基础中加上了对搜索的支持</li></ul><ol><li>对于查询参数，我们需要将它们保存到链接中，这样才能去下一页。</li></ol><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.utils.safestring <span class="keyword">import</span> mark_safe</span><br><span class="line"><span class="keyword">from</span> django.http.request <span class="keyword">import</span> QueryDict</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pagenation</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, page, data_length, querydict=None, max_show=<span class="number">9</span>, max_page=<span class="number">10</span>, )</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        :param page: 当前页码</span></span><br><span class="line"><span class="string">        :param data_length: 一共有多少条数据</span></span><br><span class="line"><span class="string">        :param max_show:  最多显示多少页码</span></span><br><span class="line"><span class="string">        :param max_page: 每页最多几条数据</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            page = int(page)</span><br><span class="line">            <span class="keyword">if</span> page &lt;= <span class="number">0</span>:</span><br><span class="line">                page = <span class="number">1</span></span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            page = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> querydict:</span><br><span class="line">            querydict = QueryDict(mutable=<span class="literal">True</span>)</span><br><span class="line">        self.querydict = querydict</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 页码最大显示个数</span></span><br><span class="line">        self.max_show = max_show</span><br><span class="line">        <span class="comment"># 页码一半</span></span><br><span class="line">        half_show = max_show // <span class="number">2</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 每页最大显示数据条数</span></span><br><span class="line">        self.max_page = max_page</span><br><span class="line">        <span class="comment"># 页面总数</span></span><br><span class="line">        page_count, more = divmod(data_length, max_page)</span><br><span class="line">        self.page_count = page_count + <span class="number">1</span> <span class="keyword">if</span> more &gt; <span class="number">0</span> <span class="keyword">else</span> page_count</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> page_count &gt;= max_show:</span><br><span class="line">            <span class="comment"># 页码的起始</span></span><br><span class="line">            <span class="keyword">if</span> page - half_show &lt;= <span class="number">0</span>:</span><br><span class="line">                <span class="comment"># 当左边超过边界</span></span><br><span class="line">                page_start = <span class="number">1</span></span><br><span class="line">                page_end = max_show</span><br><span class="line">                <span class="keyword">if</span> page &lt;= <span class="number">0</span>:</span><br><span class="line">                    page = <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> page + half_show &gt;= page_count:</span><br><span class="line">                <span class="comment"># 当右边超过边界</span></span><br><span class="line">                page_end = page_count</span><br><span class="line">                page_start = page_count - max_show + <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> page &gt; page_count:</span><br><span class="line">                    <span class="comment"># 当页码超过边界时，以当前页设为最后一页</span></span><br><span class="line">                    page = page_count</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 正常情况()</span></span><br><span class="line">                page_start = page - half_show</span><br><span class="line">                <span class="comment"># 页码的结尾</span></span><br><span class="line">                page_end = page + half_show</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 总页码不够，所以不用显示那么多的页码</span></span><br><span class="line">            page_start = <span class="number">1</span></span><br><span class="line">            page_end = self.page_count</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 封装属性</span></span><br><span class="line">        self.page = page</span><br><span class="line">        self.page_start = page_start</span><br><span class="line">        self.page_end = page_end</span><br><span class="line">        <span class="comment"># 取多少条数据</span></span><br><span class="line">        self.start = (self.page - <span class="number">1</span>) * self.max_page</span><br><span class="line">        self.end = self.page * self.max_page</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_html</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 显示的数据的起点/终点</span></span><br><span class="line">        li_html = []</span><br><span class="line">        <span class="keyword">if</span> self.page == <span class="number">1</span>:</span><br><span class="line">            self.querydict[<span class="string">'page'</span>] = <span class="number">1</span></span><br><span class="line">            li_html.append(</span><br><span class="line">                <span class="string">f'&lt;li class="disabled"&gt;&lt;a href="？<span class="subst">&#123;self.querydict.urlencode()&#125;</span>"&gt;&lt;span aria-hidden="true"&gt;&amp;laquo;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.querydict[<span class="string">'page'</span>] = self.page - <span class="number">1</span></span><br><span class="line">            li_html.append(</span><br><span class="line">                <span class="string">f'&lt;li&gt;&lt;a href="?<span class="subst">&#123;self.querydict.urlencode()&#125;</span>"&gt;&lt;span aria-hidden="true"&gt;&amp;laquo;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;'</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.page_start, self.page_end + <span class="number">1</span>):</span><br><span class="line">            self.querydict[<span class="string">'page'</span>] = i</span><br><span class="line">            <span class="keyword">if</span> i == self.page:</span><br><span class="line">                li_html.append(<span class="string">f'&lt;li class="active"&gt;&lt;a href="?<span class="subst">&#123;self.querydict.urlencode()&#125;</span>"&gt;<span class="subst">&#123;i&#125;</span>&lt;/a&gt;&lt;/li&gt;'</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                li_html.append(<span class="string">f'&lt;li&gt;&lt;a href="?<span class="subst">&#123;self.querydict.urlencode()&#125;</span>"&gt;<span class="subst">&#123;i&#125;</span>&lt;/a&gt;&lt;/li&gt;'</span>)</span><br><span class="line">        <span class="keyword">if</span> self.page == self.page_count:</span><br><span class="line">            self.querydict[<span class="string">'page'</span>] = self.page_count</span><br><span class="line">            li_html.append(</span><br><span class="line">                <span class="string">f'&lt;li class="disabled"&gt;&lt;a href="?<span class="subst">&#123;self.querydict.urlencode()&#125;</span>"&gt;&lt;span aria-hidden="true"&gt;&amp;raquo;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.querydict[<span class="string">'page'</span>] = self.page + <span class="number">1</span></span><br><span class="line">            li_html.append(</span><br><span class="line">                <span class="string">f'&lt;li&gt;&lt;a href="?<span class="subst">&#123;self.querydict.urlencode()&#125;</span>"&gt;&lt;span aria-hidden="true"&gt;&amp;raquo;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;'</span>)</span><br><span class="line">        page_html = <span class="string">' '</span>.join(li_html)</span><br><span class="line">        <span class="keyword">return</span> mark_safe(page_html)</span><br></pre></td></tr></table></figure><ul><li>在调用中，只需要使用数据的开始位置，结束位置以及下面分页。</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line">data = [(<span class="string">"小强"</span>, <span class="string">f"<span class="subst">&#123;i&#125;</span>号"</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">315</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> utils.pagenation <span class="keyword">import</span> Pagenation</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(request)</span>:</span></span><br><span class="line">    page_obj = Pagenation(request.GET.get(<span class="string">'page'</span>,<span class="number">1</span>),len(data))   </span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'pagenation.html'</span>, &#123;<span class="string">'data'</span>: data[page_obj.start:page_obj.end], <span class="string">'page_html'</span>:page_obj.get_html&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>django</category>
      </categories>
      <tags>
        <tag>django</tag>
        <tag>学习笔记</tag>
        <tag>Web前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Django-form</title>
    <url>/django/20190715-django_12_form.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>对于用户输入前后端都是需要做校验的；按照以前的话我们需要对每一个输入进行校验，这样当输入内容增多，复杂度也会增加。对于这种情景Django为我们提供了form组件。</p></blockquote><a id="more"></a><hr><p>通过这篇文章，你能了解到：</p><ul><li>form组件是什么?</li><li>局部钩子与全局钩子的定义。</li><li>字段、字段参数、widget插件、后端API等表格。</li><li>源码剖析 form组件是如何校验的。</li></ul><h1 id="form组件"><a href="#form组件" class="headerlink" title="form组件"></a>form组件</h1><ul><li><p>对于一个form我们需要做很多事情：不同的类型的数据要有不同的渲染；校验数据；获取检验后的干净数据，并将数据反序列化为相应数据类型如时间对象；保存传递给处理程序等等。</p></li><li><p>Django的forms组件就完成了这些复杂的工作，提供方便的操作form的接口API给我们。</p></li></ul><h2 id="form组件的主要功能"><a href="#form组件的主要功能" class="headerlink" title="form组件的主要功能"></a>form组件的主要功能</h2><ul><li>生成页面可用的HTML标签</li><li>对用户提交的数据进行校验</li><li>保留上次输入内容（源码剖析中会提到）</li></ul><h2 id="为什么要用form组件"><a href="#为什么要用form组件" class="headerlink" title="为什么要用form组件"></a>为什么要用form组件</h2><h3 id="以前的方式"><a href="#以前的方式" class="headerlink" title="以前的方式"></a>以前的方式</h3><ul><li>写form表单以及所需input框</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"># reg1.html</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        用户名: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"&#123;&#123; user &#125;&#125;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color:red"</span>&gt;</span>&#123;&#123; user_error &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        密码: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"pwd"</span> <span class="attr">value</span>=<span class="string">"&#123;&#123; pwd &#125;&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>获取数据，然后写校验规则</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">"POST"</span>:</span><br><span class="line">        user = request.POST.get(<span class="string">'user'</span>)</span><br><span class="line">        pwd = request.POST.get(<span class="string">'pwd'</span>)</span><br><span class="line">        <span class="comment"># 对数据做校验</span></span><br><span class="line">        <span class="keyword">if</span> len(user) &lt;= <span class="number">6</span>:</span><br><span class="line">            user_error = <span class="string">'用户名太短了'</span></span><br><span class="line">            <span class="keyword">return</span> render(request, <span class="string">'register.html'</span>, &#123;<span class="string">'user'</span>: user, <span class="string">'pwd'</span>: pwd, <span class="string">'user_error'</span>: user_error&#125;)</span><br><span class="line">        <span class="comment"># 校验成功 保存数据库</span></span><br><span class="line">        <span class="comment"># 校验不成，返回填写的数据，错误提示</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'register.html'</span>)</span><br></pre></td></tr></table></figure><p>缺点：当需要校验的内容多了，就会复杂</p><h2 id="引例"><a href="#引例" class="headerlink" title="引例"></a>引例</h2><p>生成页面可用的HTML标签</p><ul><li>与前面相比，只需要在form表单内写待渲染的字段就可以</li></ul><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment"># reg2.html</span></span><br><span class="line">&lt;form action=<span class="string">""</span> method=<span class="string">"post"</span> novalidate&gt;</span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">	&#123;&#123; form_obj.as_p &#125;&#125;</span><br><span class="line">    &lt;button&gt;注册&lt;/button&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>对用户提交的数据进行校验</p><ul><li>定义一个继承Form类的子类，很像orm中定义model的方式，我们定义form表单内相关元素（input，radio等等）的字段，字段参数是我们对该字段定义的规则。</li><li>对于GET请求返回页面的时候，只需要实例化定义的这个Form类</li><li>对于POST请求，将 <code>request.POST</code> 这个QueryDict作为参数重新实例化，有了这个对象就可以进行校验</li><li>通过 <code>对象.is_valid()</code> 的方法来进行校验</li><li>如果用户输入不符合该字段的规则，就会有提示产生。</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RegForm</span><span class="params">(forms.Form)</span>:</span></span><br><span class="line">    user = forms.CharField(label=<span class="string">'用户名'</span>, min_length=<span class="number">6</span>,max_length=<span class="number">12</span>,) </span><br><span class="line">    pwd = forms.CharField(label=<span class="string">'密码'</span>, widget=forms.PasswordInput)  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reg2</span><span class="params">(request)</span>:</span></span><br><span class="line">    form_obj = RegForm()</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        form_obj = RegForm(data=request.POST)  <span class="comment"># data是第一个位置参数</span></span><br><span class="line">        <span class="keyword">if</span> form_obj.is_valid():  <span class="comment"># 做校验，校验之后有数据和错误信息</span></span><br><span class="line">            <span class="comment"># 插入数据库</span></span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">'ok'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'reg2.html'</span>, &#123;<span class="string">"form_obj"</span>: form_obj&#125;)</span><br></pre></td></tr></table></figure><p>通过这个例子我们就要开始学习django为我们提供的这个方便工具。</p><h1 id="完善引例"><a href="#完善引例" class="headerlink" title="完善引例"></a>完善引例</h1><p>我们显然需要更加细粒度的操作：</p><ul><li>我们想要定义label的名字；错误提示信息；</li><li>对提交内容自定义校验；</li><li>使用全局钩子来做密码与确认密码的一致性检验；</li><li>当注册成功后，注册下一个的时候信息已经更新，而不是重启项目来更新数据。</li></ul><h2 id="渲染"><a href="#渲染" class="headerlink" title="渲染"></a>渲染</h2><h3 id="自动渲染"><a href="#自动渲染" class="headerlink" title="自动渲染"></a>自动渲染</h3><p>引例中使用的 &#123;&#123;form_obj.as_p }} 是自动渲染的方式，按照P段落渲染,将所有的表单元素包裹在P标签内，效果如下图所示：</p><p><img src="/django/20190715-django_12_form/%E8%87%AA%E5%8A%A8%E6%B8%B2%E6%9F%93.png" alt="自动渲染"></p><p>更详细的自动渲染见后文 FORM后端API</p><h3 id="自定义错误信息"><a href="#自定义错误信息" class="headerlink" title="自定义错误信息"></a>自定义错误信息</h3><ul><li>在该字段的参数内覆写error_messages</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">user = forms.CharField(</span><br><span class="line">    label=<span class="string">'用户名'</span>,</span><br><span class="line">    min_length=<span class="number">6</span>,</span><br><span class="line">    max_length=<span class="number">10</span>,</span><br><span class="line">    error_messages=&#123;</span><br><span class="line">        <span class="string">'required'</span>: <span class="string">'该字段是必填的~'</span>,</span><br><span class="line">        <span class="string">'min_length'</span>:<span class="string">'至少是6位'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    widget=[check_user],</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="手动渲染"><a href="#手动渲染" class="headerlink" title="手动渲染"></a>手动渲染</h3><ul><li>自定义p标签和label标签，label标签的内容为 &#123;&#123; field.label }}</li><li>标签后跟 &#123;&#123; field }}</li><li>span标签内放产生错误的信息 &#123;&#123; field.errors.0 &#125;&#125; 由于本例中错误只会产生一个，取第一个就可以</li><li>这样这样变量就会被渲染</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">novalidate</span>&gt;</span></span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"&#123;&#123; form_obj.user.id_for_label &#125;&#125;"</span>&gt;</span>&#123;&#123; form_obj.user.label &#125;&#125;: <span class="tag">&lt;/<span class="name">label</span>&gt;</span>&#123;&#123; form_obj.user &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; form_obj.user.errors.0 &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"&#123;&#123; form_obj.phone.id_for_label &#125;&#125;"</span>&gt;</span>&#123;&#123; form_obj.phone.label &#125;&#125;: <span class="tag">&lt;/<span class="name">label</span>&gt;</span>&#123;&#123; form_obj.phone &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; form_obj.phone.errors.0 &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"&#123;&#123; form_obj.Email.id_for_label &#125;&#125;"</span>&gt;</span>&#123;&#123; form_obj.Email.label &#125;&#125;: <span class="tag">&lt;/<span class="name">label</span>&gt;</span>&#123;&#123; form_obj.Email &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; form_obj.Email.errors.0 &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"&#123;&#123; form_obj.birth_day.id_for_label &#125;&#125;"</span>&gt;</span>&#123;&#123; form_obj.birth_day.label &#125;&#125;: <span class="tag">&lt;/<span class="name">label</span>&gt;</span>&#123;&#123; form_obj.birth_day &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; form_obj.birth_day.errors.0 &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"&#123;&#123; form_obj.gender.id_for_label &#125;&#125;"</span>&gt;</span>&#123;&#123; form_obj.gender.label &#125;&#125;: <span class="tag">&lt;/<span class="name">label</span>&gt;</span>&#123;&#123; form_obj.gender &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; form_obj.gender.errors.0 &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"&#123;&#123; form_obj.pwd.id_for_label &#125;&#125;"</span>&gt;</span>&#123;&#123; form_obj.pwd.label &#125;&#125;: <span class="tag">&lt;/<span class="name">label</span>&gt;</span>&#123;&#123; form_obj.pwd &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; form_obj.pwd.errors.0 &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"&#123;&#123; form_obj.re_pwd.id_for_label &#125;&#125;"</span>&gt;</span>&#123;&#123; form_obj.re_pwd.label &#125;&#125;: <span class="tag">&lt;/<span class="name">label</span>&gt;</span>&#123;&#123; form_obj.re_pwd &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; form_obj.re_pwd.errors.0 &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>完善常用注册需要的字段</li><li>使用 is_valid方法进行校验</li></ul><h2 id="校验"><a href="#校验" class="headerlink" title="校验"></a>校验</h2><h3 id="内置校验器"><a href="#内置校验器" class="headerlink" title="内置校验器"></a>内置校验器</h3><ul><li>使用内置校验器RegexValidator 完成对手机号的校验</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.core.validators <span class="keyword">import</span> RegexValidator</span><br><span class="line">phone = forms.CharField(label=<span class="string">'手机'</span>,validators=[RegexValidator(<span class="string">'^1[3-9]\d&#123;9&#125;$'</span>,<span class="string">'手机号格式不正确'</span>)])</span><br></pre></td></tr></table></figure><h3 id="自定义校验器"><a href="#自定义校验器" class="headerlink" title="自定义校验器"></a>自定义校验器</h3><p>字段参数中有一个是validators 这个参数是自定义校验器需要附加的。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="keyword">from</span> django.core.exceptions <span class="keyword">import</span> ValidationError</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">phone_check</span><span class="params">(value)</span>:</span></span><br><span class="line">    phone_re = re.compile(<span class="string">'^1[3-9]\d&#123;9&#125;$'</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> phone_re.match(value):</span><br><span class="line">        <span class="keyword">raise</span> ValidationError(<span class="string">'手机号格式不正确'</span>)</span><br><span class="line">        </span><br><span class="line">对于 phone字段只需要添加就可以</span><br><span class="line">phone = forms.CharField(label=<span class="string">'手机'</span>,validators=[phone_check])</span><br></pre></td></tr></table></figure><h2 id="钩子"><a href="#钩子" class="headerlink" title="钩子"></a>钩子</h2><h3 id="局部钩子"><a href="#局部钩子" class="headerlink" title="局部钩子"></a>局部钩子</h3><p>局部钩子就是在子类中重写父类的 <code>clean_field</code> 方法</p><ul><li><p>没有参数，通过self.cleaned_data来获取字段值</p></li><li><p>如果不通过建议抛出ValidationError</p></li><li><p>通过校验必须返回当前字段的值</p></li></ul><p>例子：</p><ul><li>继续写对手机的校验</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RegForm</span><span class="params">(forms.Form)</span>:</span>	</span><br><span class="line">    其它字段同前面所以省略...</span><br><span class="line">    phone = forms.CharField(label=<span class="string">'手机'</span>, )</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clean_phone</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 局部(针对一个字段)钩子</span></span><br><span class="line">        v = self.cleaned_data.get(<span class="string">'phone'</span>)</span><br><span class="line">        phone_re = re.compile(<span class="string">'^1[3-9]\d&#123;9&#125;$'</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> phone_re.match(v):</span><br><span class="line">            <span class="comment"># # 不通过校验 抛出异常</span></span><br><span class="line">            <span class="keyword">raise</span> ValidationError(<span class="string">'手机号格式不正确'</span>)</span><br><span class="line">        <span class="comment"># 通过校验, 必须返回当前字段的值</span></span><br><span class="line">        <span class="keyword">return</span> v</span><br></pre></td></tr></table></figure><p>为什么要返回当前字段的值呢？</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_clean_fields</span><span class="params">(self)</span>:</span></span><br><span class="line">    前面省略...    </span><br><span class="line">    <span class="keyword">if</span> hasattr(self, <span class="string">'clean_%s'</span> % name):    <span class="comment"># 局部钩子，</span></span><br><span class="line">        value = getattr(self, <span class="string">'clean_%s'</span> % name)()</span><br><span class="line">        self.cleaned_data[name] = value</span><br></pre></td></tr></table></figure><p>更多细节见后文源码剖析。</p><h3 id="全局钩子"><a href="#全局钩子" class="headerlink" title="全局钩子"></a>全局钩子</h3><p>定义全局钩子：</p><ul><li>没有参数，通过self.cleaned_data来获取字段值</li></ul><p>例子：判断密码和确认密码是否一致</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RegForm</span><span class="params">(forms.Form)</span>:</span>	</span><br><span class="line">    其它字段同前面所以省略...</span><br><span class="line">     pwd = forms.CharField(label=<span class="string">'密码'</span>, widget=forms.PasswordInput)</span><br><span class="line">    re_pwd = forms.CharField(label=<span class="string">'确认密码'</span>, widget=forms.PasswordInput)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clean</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 全局钩子</span></span><br><span class="line">        pwd = self.cleaned_data.get(<span class="string">'pwd'</span>)</span><br><span class="line">        re_pwd = self.cleaned_data.get(<span class="string">'re_pwd'</span>)</span><br><span class="line">        <span class="keyword">if</span> pwd <span class="keyword">and</span> pwd != re_pwd:</span><br><span class="line">            self.add_error(<span class="string">'re_pwd'</span>, <span class="string">'两次密码不一致'</span>)  <span class="comment"># 不在这写这个，错误显示的key为 __all__,不容易找 ，在&#123;&#123; form_obj.non_field_errors &#125;&#125; 里</span></span><br><span class="line">            <span class="keyword">raise</span> ValidationError(<span class="string">'两次密码不一致'</span>)</span><br><span class="line">        <span class="keyword">return</span> self.cleaned_data</span><br></pre></td></tr></table></figure><h2 id="随着数据库更新而更新"><a href="#随着数据库更新而更新" class="headerlink" title="随着数据库更新而更新"></a>随着数据库更新而更新</h2><p>有些字段是会随着数据库的更新而更新</p><p>例如：ModelChoiceField(QuerySet)</p><ul><li>在定义一个字段</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line">hobby = forms.ModelChoiceField(models.Hobby.objects.all())</span><br></pre></td></tr></table></figure><ul><li>models中写写入这个类</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># models.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hobby</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">12</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br></pre></td></tr></table></figure><ul><li>这样页面中的信息会随着数据库中该字段的改变而改变</li></ul><h1 id="表格汇总"><a href="#表格汇总" class="headerlink" title="表格汇总"></a>表格汇总</h1><h2 id="常用字段"><a href="#常用字段" class="headerlink" title="常用字段"></a>常用字段</h2><table><thead><tr><th>字段名称</th><th>默认插件</th><th>错误使用参数</th><th>解释</th></tr></thead><tbody><tr><td>BooleanField</td><td>CheckboxInput</td><td>required</td><td>所有field的子类默认都设置了required=True.而布尔字段没有选中意味着False,会触发requird错误。<br>因此在布尔字段上要特别设置required=False</td></tr><tr><td>CharField</td><td>TextInput</td><td>required, max_length, min_length</td><td>得到一个unicode字符串,<br>如果设置最大和最小长度,在HTML内就会验证.如果不设置最大和最小,任何输入都可以通过验证<br>参数strip,默认为True,表示去除输入前后空格.</td></tr><tr><td>ChoiceField</td><td>Select</td><td>required, invalid_choice</td><td>用于单选的字段,更改默认的widget时候必须注意搭配,<br>choices的参数必须是可迭代的序列,每一个元素是一个2个元素的元组,第一个元素是值,第二个是显示的内容.如choices=((1, ‘男’), (2, ‘女’))</td></tr><tr><td>DateField</td><td>DateInput</td><td>required, invalid</td><td>返回一个Python的 datetime.date 对象,HTML表现形式是一个日期输入框.可以用input_formats字符串格式化参数指定具体样式<br>forms.DateField(input_formats=[‘%Y-%m’])</td></tr><tr><td>DateTimeField</td><td>DateTimeInput</td><td>required, invalid</td><td>与DateField类似.也有input_formats字符串格式化参数<br>如input_formats=[‘%Y-%m’]</td></tr><tr><td>DecimalField</td><td>NumberInput或TextInput</td><td>required, invalid, max_value, min_value, max_digits, max_decimal_places, max_whole_digits</td><td>十进制浮点数字段,返回Python的decimal对象,可选参数是最大值,最小值,最大位数,最大小数位数</td></tr><tr><td>DurationField</td><td>TextInput</td><td>required, invalid</td><td>返回一个Python timedelta对象,表示间隔.</td></tr><tr><td>EmailField</td><td>EmailInput</td><td>required, invalid</td><td>返回unicode字符串的邮件地址.可选参数是 max_length min_length.</td></tr><tr><td>FileField</td><td>ClearableFileInput</td><td>required, invalid, missing, empty, max_length</td><td>上传文件.返回一个Uploadfile对象,包含文件名和文件内容.两个可选参数max_length和allow_empty_file.上传文件的时候还需要<a href="https://docs.djangoproject.com/en/1.11/ref/forms/api/#binding-uploaded-files" target="_blank" rel="noopener">对form元素进行设置</a>.</td></tr><tr><td>FilePathField</td><td>Select</td><td>required, invalid, max_value, min_value</td><td>选择文件上传,有一个必须参数path来指定想要开始选择的目录.具体看<a href="https://docs.djangoproject.com/en/1.11/ref/forms/fields/#filepathfield" target="_blank" rel="noopener">这里</a></td></tr><tr><td>FloatField</td><td>NumberInput或TextInput</td><td>required, invalid</td><td>可选参数为max_value 和 min_value,控制最大和最小值.</td></tr><tr><td>ImageField</td><td>ClearableFileInput</td><td>required, invalid, missing, empty, invalid_image</td><td>与上传文件类似,但使用ImageField需要安装pillow库.</td></tr><tr><td>IntegerField</td><td>NumberInput或TextInput</td><td>required, invalid, max_value, min_value</td><td>可选参数是max_value 和 min_value</td></tr><tr><td>MultipleChoiceField</td><td>SelectMultiple</td><td>required,<br>invalid_choice, invalid_list</td><td>使用choices属性传入选择项.用于多选.更改默认对应的widget时候注意搭配</td></tr></tbody></table><p>所有字段可在 <code>django.forms.fields</code> 下查看</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># django.forms.fields.py</span></span><br><span class="line">__all__ = (</span><br><span class="line">    <span class="string">'Field'</span>, <span class="string">'CharField'</span>, <span class="string">'IntegerField'</span>,</span><br><span class="line">    <span class="string">'DateField'</span>, <span class="string">'TimeField'</span>, <span class="string">'DateTimeField'</span>, <span class="string">'DurationField'</span>,</span><br><span class="line">    <span class="string">'RegexField'</span>, <span class="string">'EmailField'</span>, <span class="string">'FileField'</span>, <span class="string">'ImageField'</span>, <span class="string">'URLField'</span>,</span><br><span class="line">    <span class="string">'BooleanField'</span>, <span class="string">'NullBooleanField'</span>, <span class="string">'ChoiceField'</span>, <span class="string">'MultipleChoiceField'</span>,</span><br><span class="line">    <span class="string">'ComboField'</span>, <span class="string">'MultiValueField'</span>, <span class="string">'FloatField'</span>, <span class="string">'DecimalField'</span>,</span><br><span class="line">    <span class="string">'SplitDateTimeField'</span>, <span class="string">'GenericIPAddressField'</span>, <span class="string">'FilePathField'</span>,</span><br><span class="line">    <span class="string">'SlugField'</span>, <span class="string">'TypedChoiceField'</span>, <span class="string">'TypedMultipleChoiceField'</span>, <span class="string">'UUIDField'</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="字段参数"><a href="#字段参数" class="headerlink" title="字段参数"></a>字段参数</h2><ul><li><p>验证相关的条件</p></li><li><p>参考<a href="https://docs.djangoproject.com/en/1.11/ref/forms/fields/#core-field-arguments" target="_blank" rel="noopener">Core field arguments 核心字段属性</a>,这些Core field arguments是建立Form对象里的fields时一定要包含的属性</p></li></ul><table><thead><tr><th>属性名</th><th>解释</th></tr></thead><tbody><tr><td>Field.required</td><td>默认设置为True,表示一定要输入内容,None或者空字符串都会引发错误.</td></tr><tr><td>Field.label</td><td>用于生成HTML代码对应该输入元素的label标签的text内容.</td></tr><tr><td>Field.label_suffix</td><td>用于覆盖整个表单级别的label_suffix,就是给label的text部分加上后缀</td></tr><tr><td>Field.initial</td><td>设置初始化的值,也就是设置标签的value属性.<br>注意,不同的field,initial需要被设置成对应的对象,比如时间字段就必须用datetime系列对象赋值给initial属性</td></tr><tr><td>Field.widget</td><td>设置对应的widget类,用于控制具体的HTML代码</td></tr><tr><td>Field.help_text</td><td>在HTML中显示帮助文本信息</td></tr><tr><td>Field.error_messages</td><td>用于覆盖默认的错误信息,需要采用error_messages={‘required’: ‘Please enter your name’}类似的方法来传入,前边的键就是<strong>错误键的名称</strong>,值是自定义的<strong>错误信息</strong>.</td></tr><tr><td>Field.validators</td><td>选择针对该字段的验证器,验证器的详细看<a href="https://docs.djangoproject.com/en/1.11/ref/validators/" target="_blank" rel="noopener">这里</a></td></tr><tr><td>Field.localize</td><td>和本地化有关,控制结果的本地化输出.</td></tr><tr><td>Field.disabled</td><td>设置表单元素的属性是否为disabled</td></tr><tr><td>Field.has_changed()</td><td>检测元素的值是否从initial值发生了变化,返回布尔类型.</td></tr><tr><td>Field.choices</td><td>choices的参数必须是可迭代的序列,每一个元素是一个2个元素的元组,第一个元素是值,第二个是显示的内容.如choices=((1, ‘男’), (2, ‘女’))</td></tr><tr><td>Field.min_length</td><td>字段最短长度</td></tr><tr><td>Field.max_length</td><td>字段最长长度</td></tr></tbody></table><h3 id="error-messages中的key"><a href="#error-messages中的key" class="headerlink" title="error_messages中的key"></a>error_messages中的key</h3><p><code>null</code>, <code>blank</code>, <code>invalid</code>, <code>invalid_choice</code>, <code>unique</code>, <code>unique_for_date</code> and <code>invalid_date</code></p><h3 id="内置validators"><a href="#内置validators" class="headerlink" title="内置validators"></a>内置validators</h3><table><thead><tr><th>校验器</th><th>解释</th></tr></thead><tbody><tr><td><code>RegexValidator</code>( <strong><em>regex=None</em></strong>, <em>message=None</em> <strong>,</strong> <em>code=None</em>,…)</td><td>正则校验器<br>regex正则表达式<br>message：错误提示<br>code用于覆盖原来</td></tr><tr><td><code>EmailValidator</code>( <em>message=None</em> )</td><td>邮箱校验器<br>message：错误提示</td></tr><tr><td><code>URLValidator</code>(<em>schemes=None<strong>*,</strong> <em>regex=None**</em>,** *message=None</em>,…)</td><td>URL校验器<br>默认schemes是<code>[&#39;http&#39;, &#39;https&#39;, &#39;ftp&#39;, &#39;ftps&#39;]</code></td></tr><tr><td><code>validate_email</code></td><td>一个 EmailValidator 的不带任何参数的实例</td></tr><tr><td><code>validate_slug</code></td><td>一个正则表达式验证器的实例,仅能验证字母,数字,减号和下划线的组合</td></tr><tr><td><code>validate_unicode_slug</code></td><td>一个正则表达式验证器的实例,仅能验证UNICODE的字母,数字,减号和下划线的组合</td></tr><tr><td><code>validate_ipv4_address</code></td><td>一个正则表达式验证器的实例,验证合法的ipv4地址</td></tr><tr><td><code>validate_ipv6_address</code></td><td>这是一个用了django.utils.ipv6 模块的ipv6地址的验证器</td></tr><tr><td><code>validate_ipv46_address</code></td><td>实际上是同时使用了前边两个验证器的实例</td></tr><tr><td>validate_comma_separated_integer_list</td><td>一个正则表达式验证器的实例,验证逗号分割的数字</td></tr><tr><td><code>MaxValueValidator(max_value, message=None)</code></td><td>最大值验证器,max_value参数默认使用该验证器</td></tr><tr><td><code>MinValueValidator(min_value, message=None)</code></td><td>最小值验证器</td></tr><tr><td><code>MaxLengthValidator(max_length, message=None)</code></td><td>最大长度验证器</td></tr><tr><td><code>MinLengthValidator(min_length, message=None</code></td><td>最小长度验证器</td></tr><tr><td><code>DecimalValidator(max_digits, decimal_places)</code></td><td>Decimal类型验证器<br>max_digits 是总的最长位数<br>decimal_places 是小数的位数</td></tr></tbody></table><p>更多详见 <a href="https://docs.djangoproject.com/en/1.11/ref/validators/" target="_blank" rel="noopener">django-validators</a></p><h2 id="Widgets-插件"><a href="#Widgets-插件" class="headerlink" title="Widgets 插件"></a>Widgets 插件</h2><ul><li><p>渲染成想要的HTML。</p></li><li><p><a href="https://docs.djangoproject.com/en/1.11/ref/forms/widgets/" target="_blank" rel="noopener">widget</a>,官方文档的原话是: A widget is Django’s representation of an HTML input element.也就是说一个插件就对应着一段HTML代码.</p></li><li><p>通过fields可以知道要拿到哪一种数据类型,通过<strong>字段参数</strong>可以得到验证相关的条件,widget则是最后一步,即<strong>将字段的逻辑通过HTML展示出来</strong>.同时widget也有各种属性可以设置,用于更好的控制具体HTML代码.</p></li><li><p>所有的widget类都继承自 Widget 和 MultiWidget 两个类,其中Widget有<strong>attrs属性</strong>,用来设置HTML标签的各种属性,常用的是设置css类从而应用样式.</p></li></ul><table><thead><tr><th align="center">内建的Widget类</th><th align="center"></th></tr></thead><tbody><tr><td align="center">类名</td><td align="center">解释</td></tr><tr><td align="center">TextInput</td><td align="center">输入类型是text,渲染的时候按照&lt;input type=”text” …&gt;渲染</td></tr><tr><td align="center">NumberInput</td><td align="center">输入类型是number,渲染的时候是number类型的input标签</td></tr><tr><td align="center">EmailInput</td><td align="center">渲染的时候是email类型的input标签</td></tr><tr><td align="center">URLInput</td><td align="center">URL类型的input标签</td></tr><tr><td align="center">PasswordInput</td><td align="center">password类型的input标签,可以带一个额外属性是render_value,表示验证失败之后填写在密码框内的值,默认是False即保留原来的值</td></tr><tr><td align="center">HiddenInput</td><td align="center">类型是hidden 的input标签</td></tr><tr><td align="center">DateInput</td><td align="center">类型是text的input标签,可以使用额外参数format来控制格式化</td></tr><tr><td align="center">DateTimeInput</td><td align="center">类型是text的input标签,同样有format属性</td></tr><tr><td align="center">TimeInput</td><td align="center">类型是text的input标签,同样有format属性</td></tr><tr><td align="center">Textarea</td><td align="center">渲染为textarea标签</td></tr><tr><td align="center">CheckboxInput</td><td align="center">渲染为checkbox对象,有一个调用方法是check_test,检查是否应该选中这个值</td></tr><tr><td align="center">Select</td><td align="center">渲染为select及内嵌的option标签.有choices属性用于设置各个选项</td></tr><tr><td align="center">SelectMultiple</td><td align="center">多选,渲染为<code>&lt;select multiple=&quot;multiple&quot;&gt;</code></td></tr><tr><td align="center">RadioSelect</td><td align="center">渲染成一个ul,每个li内部包含一个radio类型的input,模板内的标签使用方法比较多,具体看<a href="https://docs.djangoproject.com/en/1.11/ref/forms/widgets/#radioselect" target="_blank" rel="noopener">这里</a></td></tr><tr><td align="center">CheckboxSelectMultiple</td><td align="center">渲染成一个ul,每个li内包含一个类型是checkbox的input标签</td></tr><tr><td align="center">FileInput</td><td align="center">渲染成&lt;input type=”file” …&gt;</td></tr></tbody></table><p>例如：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">gender = forms.ChoiceField(choices=((<span class="number">1</span>, <span class="string">'男'</span>), (<span class="number">2</span>, <span class="string">'女'</span>)),widget=forms.RadioSelect)</span><br></pre></td></tr></table></figure><h2 id="form后端API"><a href="#form后端API" class="headerlink" title="form后端API"></a>form后端API</h2><table><thead><tr><th align="center">Form API</th><th align="center"></th></tr></thead><tbody><tr><td align="center">属性或方法名</td><td align="center">解释</td></tr><tr><td align="center">Form.is_bound</td><td align="center">如果没有任何数据传入而新建Form对象,这是一个没有绑定的Form对象,如果传入了数据比如request.POST,这就是一个绑定了一个具体表单的数据,这个方法返回Form对象是否是一个绑定的对象</td></tr><tr><td align="center">Form.clean()</td><td align="center">执行校验；使用clean方法意味着调用<code>is_valid()</code>方法然后返回一个布尔值</td></tr><tr><td align="center">Form.errors</td><td align="center">返回<strong>错误键与错误内容的字典</strong>.调用该属性和is_valid()方法都会触发对Form对象的校验.</td></tr><tr><td align="center">Form.errors.as_data()</td><td align="center">错误键不变,值变成原始的错误对象</td></tr><tr><td align="center">Form.errors.as_json(escape_html=False)</td><td align="center">将错误序列化为JSON对象,可加上 escape_html=True进行转义以便直接在HTML内使用</td></tr><tr><td align="center">Form.initial</td><td align="center">用字典的形式设置初始值,如果Form对象通过initial属性和字段的initial属性都设置了初始值,以Form对象的优先.</td></tr><tr><td align="center">Form.get_initial_for_field(field, field_name)</td><td align="center">取得初始值,按照先取Form.initial,再取fields.initial的顺序,如果初始值需要求值也会被求值.</td></tr><tr><td align="center">Form.has_changed()</td><td align="center">整个表单的初始值是否改变,需要先设置Form的initial属性,然后调用该方法即可查看是否改变.</td></tr><tr><td align="center">Form.changed_data</td><td align="center">返回一个列表,包含所有与初始值有变化的字段名称.</td></tr><tr><td align="center">Form.fields</td><td align="center">直接用对象的字段变量名就可以访问该字段.之后再用field的那些arguments就可以访问字段的各种属性</td></tr><tr><td align="center">Form.cleaned_data</td><td align="center">当is_valid()或其他触发验证的动作实行后,如果通过了验证,则所有的数据会被包含在这个属性对应的一个字典里.而且所有的数据都被整理过,比如从前边可以知道,时间类型默认对应的widget是text类型,但是在cleaned_data中,时间类型的数据会被整理成datetime类型.其他的数据类型可以参考field部分的表格.</td></tr><tr><td align="center">Form.as_p()</td><td align="center">按照P段落渲染,将所有的表单元素包裹在P标签内.改变的是直接print(Form对象)的结果.</td></tr><tr><td align="center">Form.as_ul()</td><td align="center">将每一个表单元素放进一个ul的li元素中,影响print结果</td></tr><tr><td align="center">Form.as_table()</td><td align="center">包裹在tr th标签里,但是table元素需要页面来提供,一般不采用该方法.</td></tr><tr><td align="center">Form.label_suffix</td><td align="center">这个属性的内容会在渲染的时候追加到所有的label 的text内容之后.</td></tr><tr><td align="center">Form.use_required_attribute</td><td align="center">这个属性被设置成True的时候,所有必须填写的表单元素标签内都会带有required 的HTML 5 属性.</td></tr></tbody></table><h2 id="在模板内使用Form对象"><a href="#在模板内使用Form对象" class="headerlink" title="在模板内使用Form对象"></a>在模板内使用Form对象</h2><ul><li>表单的关键,是展示提示,输入框以及错误信息.<a href="https://docs.djangoproject.com/en/2.0/ref/forms/api/#ref-forms-api-outputting-html" target="_blank" rel="noopener">Form对象如何在HTML中展示</a></li></ul><h3 id="自动渲染-1"><a href="#自动渲染-1" class="headerlink" title="自动渲染"></a>自动渲染</h3><p>自动渲染就是一次性将整个form按照某种形式渲染出来,不单独操作表单的各个元素.</p><ul><li>&#123;&#123; form.as_table }}</li><li>&#123;&#123; form.as_p }}</li><li>&#123;&#123; form.as_ul }}</li></ul><p>如果在对象内不做任何设置,那么元素的id会被自动设置成id_属性名.这种方法可自定义的部分较少,需要后期慢慢配样式.一般采用第二种方法.</p><h3 id="手动渲染-1"><a href="#手动渲染-1" class="headerlink" title="手动渲染"></a>手动渲染</h3><p>手动渲染就是将传入模板的form对象的各个字段和错误信息取出,自行编写.</p><ul><li>&#123;&#123; form.name_of_field }} 表示渲染表单中的一个输入元素.</li><li>&#123;&#123; form.name_of_field.label }}表示 该字段对应的label标签.</li><li>&#123;&#123; form.name_of_field.errors }}表示经过验证后的该字段对应的错误消息.由于错误信息只会同时有一个,所以一般用&#123;&#123; form.name_of_field.errors.0 }}取出错误信息.</li></ul><p>例如：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"&#123;&#123; form_obj.user.id_for_label &#125;&#125;"</span>&gt;</span>&#123;&#123; form_obj.user.label &#125;&#125;: <span class="tag">&lt;/<span class="name">label</span>&gt;</span>&#123;&#123; form_obj.user &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; form_obj.user.errors.0 &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="模板内的操作列表"><a href="#模板内的操作列表" class="headerlink" title="模板内的操作列表"></a>模板内的操作列表</h3><ul><li>user字段 = form_obj.user</li></ul><table><thead><tr><th align="center">Form对象在模板内的操作</th><th align="center"></th></tr></thead><tbody><tr><td align="center">tag名称</td><td align="center">解释</td></tr><tr><td align="center"></td><td align="center">字段的label属性的内容,就是一个字符串</td></tr><tr><td align="center"></td><td align="center">一个完整的label标签,推荐使用该tag与field搭配</td></tr><tr><td align="center"></td><td align="center">这个字段使用的id</td></tr><tr><td align="center"></td><td align="center">字段的值,提交表单之后会动态根据当前值改变</td></tr><tr><td align="center"></td><td align="center">html的name属性值</td></tr><tr><td align="center"></td><td align="center">帮助信息</td></tr><tr><td align="center"></td><td align="center">当前字段的错误信息,如果验证通过则不会有错误信息.可以对其迭代取出所有错误或者用.0取第一个错误内容<br>如何过当前对象的话就是所有字段的错误</td></tr><tr><td align="center"></td><td align="center">判断当前字段是否是隐藏的</td></tr><tr><td align="center"></td><td align="center">这里注意之前的是field的属性,这里是form的属性,表示表单内的全部hidden字段,可以迭代取出具体字段</td></tr><tr><td align="center"></td><td align="center">这个是所有的可视字段.</td></tr></tbody></table><p>推荐阅读 <a href="http://www.conyli.cc/archives/1325" target="_blank" rel="noopener">Django 14 Django进阶-Django Form组件</a></p><h1 id="源码剖析"><a href="#源码剖析" class="headerlink" title="源码剖析"></a>源码剖析</h1><h2 id="第一块"><a href="#第一块" class="headerlink" title="第一块"></a>第一块</h2><p>回到最开始！我们使用 is_valid() 进行校验 点击进入</p><ul><li>is_valid 返回布尔值</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># django\forms\forms.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_valid</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Returns True if the form has no errors. Otherwise, False. If errors are</span></span><br><span class="line"><span class="string">        being ignored, returns False.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> self.is_bound <span class="keyword">and</span> <span class="keyword">not</span> self.errors</span><br></pre></td></tr></table></figure><p>点击进入 self.errors</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@property</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">errors</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">"Returns an ErrorDict for the data provided for the form"</span></span><br><span class="line">    <span class="keyword">if</span> self._errors <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="comment"># 如果还是初始化 调用这个方法</span></span><br><span class="line">        self.full_clean()</span><br><span class="line">    <span class="keyword">return</span> self._errors</span><br></pre></td></tr></table></figure><p>点击进入full_clean</p><ul><li>self._errors 是一个存放错误信息的字典</li><li>self.cleaned_data 是一个存放通过校验的数据字典</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">full_clean</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Cleans all of self.data and populates self._errors and</span></span><br><span class="line"><span class="string">    self.cleaned_data.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    self._errors = ErrorDict() <span class="comment"># 定义一个存放错误信息的字典</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> self.is_bound:  <span class="comment"># Stop further processing.</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    self.cleaned_data = &#123;&#125;  <span class="comment"># 校验完成之后，存放通过校验的数据</span></span><br><span class="line">    <span class="comment"># If the form is permitted to be empty, and none of the form data has</span></span><br><span class="line">    <span class="comment"># changed from the initial data, short circuit any validation.</span></span><br><span class="line">    <span class="keyword">if</span> self.empty_permitted <span class="keyword">and</span> <span class="keyword">not</span> self.has_changed():</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    self._clean_fields()</span><br><span class="line">    self._clean_form()</span><br><span class="line">    self._post_clean()</span><br></pre></td></tr></table></figure><h2 id="第二块"><a href="#第二块" class="headerlink" title="第二块"></a>第二块</h2><p>点击进入_clean_fields</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">_clean_fields</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="comment"># 校验字段</span></span><br><span class="line">      <span class="keyword">for</span> name, field <span class="keyword">in</span> self.fields.items():</span><br><span class="line">          <span class="comment"># print(name, field)  # self.fields是一个有序字典，</span></span><br><span class="line">          <span class="comment"># field是一个对象</span></span><br><span class="line">          <span class="comment"># value_from_datadict() gets the data from the data dictionaries.</span></span><br><span class="line">          <span class="comment"># Each widget type knows how to retrieve its own data, because some</span></span><br><span class="line">          <span class="comment"># widgets split data over several HTML fields.</span></span><br><span class="line">          <span class="keyword">if</span> field.disabled:</span><br><span class="line">              <span class="comment"># 从这个字段去拿初始值，而不去前端拿，提高了安全性</span></span><br><span class="line">              <span class="comment"># 这里也是最开始提到的保留上次输入内容</span></span><br><span class="line">              <span class="comment"># 应用场景：确认信息</span></span><br><span class="line">              value = self.get_initial_for_field(field, name)</span><br><span class="line">          <span class="keyword">else</span>:</span><br><span class="line">              <span class="comment"># 可以编辑的话从前端的input去拿</span></span><br><span class="line">              value = field.widget.value_from_datadict(self.data, self.files, self.add_prefix(name))</span><br><span class="line">          <span class="keyword">try</span>:</span><br><span class="line">              <span class="keyword">if</span> isinstance(field, FileField):</span><br><span class="line">                  initial = self.get_initial_for_field(field, name)</span><br><span class="line">                  value = field.clean(value, initial)</span><br><span class="line">              <span class="keyword">else</span>:</span><br><span class="line">                  value = field.clean(value)  <span class="comment"># 当前字段内置的校验以及校验器的校验</span></span><br><span class="line">              self.cleaned_data[name] = value  <span class="comment"># 给局部钩子使用的，因为局部钩子没有传参</span></span><br><span class="line">              <span class="keyword">if</span> hasattr(self, <span class="string">'clean_%s'</span> % name):    <span class="comment"># 局部钩子，</span></span><br><span class="line">                  value = getattr(self, <span class="string">'clean_%s'</span> % name)()</span><br><span class="line">                  self.cleaned_data[name] = value</span><br><span class="line">          <span class="keyword">except</span> ValidationError <span class="keyword">as</span> e:</span><br><span class="line">              self.add_error(name, e)</span><br></pre></td></tr></table></figure><p>点击 value = field.clean(value) 进入clean</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clean</span><span class="params">(self, value)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Validates the given value and returns its "cleaned" value as an</span></span><br><span class="line"><span class="string">    appropriate Python object.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Raises ValidationError for any errors.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    value = self.to_python(value)</span><br><span class="line">    self.validate(value)        <span class="comment"># 内置校验方法，校验是否为空或者是否是必填字段</span></span><br><span class="line">    self.run_validators(value)  <span class="comment"># 校验器</span></span><br><span class="line">    <span class="keyword">return</span> value</span><br></pre></td></tr></table></figure><p>点击进入validate</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">validate</span><span class="params">(self, value)</span>:</span></span><br><span class="line">      <span class="keyword">if</span> value <span class="keyword">in</span> self.empty_values <span class="keyword">and</span> self.required:</span><br><span class="line">          <span class="keyword">raise</span> ValidationError(self.error_messages[<span class="string">'required'</span>], code=<span class="string">'required'</span>)</span><br></pre></td></tr></table></figure><p>返回，然后点击进入run_validators</p><ul><li>对一个字段，遍历这个字段的校验器并执行</li><li>校验器出现异常会抛出ValidationError 异常</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_validators</span><span class="params">(self, value)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> value <span class="keyword">in</span> self.empty_values:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    errors = []</span><br><span class="line">    <span class="keyword">for</span> v <span class="keyword">in</span> self.validators:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            v(value)    <span class="comment"># 这里也不接受返回值，所以我们的校验器不需要返回值</span></span><br><span class="line">        <span class="keyword">except</span> ValidationError <span class="keyword">as</span> e:</span><br><span class="line">            <span class="comment"># 所以自定义的validator只能检测ValidationError异常</span></span><br><span class="line">            <span class="keyword">if</span> hasattr(e, <span class="string">'code'</span>) <span class="keyword">and</span> e.code <span class="keyword">in</span> self.error_messages:</span><br><span class="line">                e.message = self.error_messages[e.code]</span><br><span class="line">            errors.extend(e.error_list)</span><br><span class="line">    <span class="keyword">if</span> errors:</span><br><span class="line">        <span class="keyword">raise</span> ValidationError(errors)</span><br></pre></td></tr></table></figure><p>返回到_clean_fields这里</p><ul><li><p><code>self.cleaned_data[name] = value</code> 是为了给局部钩子使用的，因为局部钩子没有传参</p></li><li><p>clean_%s 就是我们定义局部钩子的所在，为什么局部钩子必须返回该字段的值呢? 因为 成功的话会给cleaned_data添加这个键值对。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">value = getattr(self, <span class="string">'clean_%s'</span> % name)()</span><br><span class="line">self.cleaned_data[name] = value</span><br></pre></td></tr></table></figure></li></ul><p>点击进入 add_error</p><ul><li>对于未绑定字段，就会存放在non_field_errors中</li><li>删除未通过局部钩子的无效字段 <code>del self.cleaned_data[field]</code></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_error</span><span class="params">(self, field, error)</span>:</span></span><br><span class="line">   </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> isinstance(error, ValidationError):</span><br><span class="line">        <span class="comment"># Normalize to ValidationError and let its constructor</span></span><br><span class="line">        <span class="comment"># do the hard work of making sense of the input.</span></span><br><span class="line">        error = ValidationError(error)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> hasattr(error, <span class="string">'error_dict'</span>):</span><br><span class="line">        <span class="keyword">if</span> field <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">raise</span> TypeError(</span><br><span class="line">                <span class="string">"The argument `field` must be `None` when the `error` "</span></span><br><span class="line">                <span class="string">"argument contains errors for multiple fields."</span></span><br><span class="line">            )</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            error = error.error_dict</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        error = &#123;field <span class="keyword">or</span> NON_FIELD_ERRORS: error.error_list&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> field, error_list <span class="keyword">in</span> error.items():</span><br><span class="line">        <span class="keyword">if</span> field <span class="keyword">not</span> <span class="keyword">in</span> self.errors:</span><br><span class="line">            <span class="keyword">if</span> field != NON_FIELD_ERRORS <span class="keyword">and</span> field <span class="keyword">not</span> <span class="keyword">in</span> self.fields:</span><br><span class="line">                <span class="keyword">raise</span> ValueError(</span><br><span class="line">                    <span class="string">"'%s' has no field named '%s'."</span> % (self.__class__.__name__, field))</span><br><span class="line">            <span class="keyword">if</span> field == NON_FIELD_ERRORS:</span><br><span class="line">                <span class="comment"># 如果没有绑定字段，就会存放在non_field_errors中，例如全局变量中做两个密码的校验，如果不绑定字段会把错误放在这里</span></span><br><span class="line">                self._errors[field] = self.error_class(error_class=<span class="string">'nonfield'</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self._errors[field] = self.error_class()</span><br><span class="line">        self._errors[field].extend(error_list)  <span class="comment"># 添加错误信息</span></span><br><span class="line">        <span class="comment"># print(error_list)</span></span><br><span class="line">        <span class="keyword">if</span> field <span class="keyword">in</span> self.cleaned_data:</span><br><span class="line">            <span class="comment"># self.cleaned_data[name] = value 删除未通过局部钩子的无效字段</span></span><br><span class="line">            <span class="keyword">del</span> self.cleaned_data[field]</span><br></pre></td></tr></table></figure><p>关于_clean_fields就结束了</p><h2 id="第三块"><a href="#第三块" class="headerlink" title="第三块"></a>第三块</h2><p>返回到full_clean 中，点击进入_clean_form</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_clean_form</span><span class="params">(self)</span>:</span></span><br><span class="line">       <span class="keyword">try</span>:</span><br><span class="line">           cleaned_data = self.clean()</span><br><span class="line">       <span class="keyword">except</span> ValidationError <span class="keyword">as</span> e:</span><br><span class="line">           self.add_error(<span class="literal">None</span>, e)</span><br><span class="line">       <span class="keyword">else</span>:</span><br><span class="line">           <span class="keyword">if</span> cleaned_data <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">               self.cleaned_data = cleaned_data</span><br></pre></td></tr></table></figure><p>点击进入clean</p><ul><li>这里就是我们<strong>定义全局钩子</strong>的地方啦</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clean</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="comment"># 全局钩子</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Hook for doing any extra form-wide cleaning after Field.clean() has been</span></span><br><span class="line"><span class="string">    called on every field. Any ValidationError raised by this method will</span></span><br><span class="line"><span class="string">    not be associated with a particular field; it will have a special-case</span></span><br><span class="line"><span class="string">    association with the field named '__all__'.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> self.cleaned_data</span><br></pre></td></tr></table></figure><p>返回_clean_form ， 由于 使用cleaned_data接收结果，所以我们在定义全局钩子的时候当校验成功必须返回cleaned_data。所以这里的思想就是我们要对通过校验的字段，再一次使用全局钩子进行校验。</p><p>再次返回到full_clean 中，点击进入_post_clean</p><ul><li>这也是一个额外的钩子，在form cleaning之后再次进行校验，用于与model进行校验</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_post_clean</span><span class="params">(self)</span>:</span></span><br><span class="line">       <span class="string">"""</span></span><br><span class="line"><span class="string">       An internal hook for performing additional cleaning after form cleaning</span></span><br><span class="line"><span class="string">       is complete. Used for model validation in model forms.</span></span><br><span class="line"><span class="string">       """</span></span><br><span class="line">       <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>到此，我们的full_clean 方法执行完毕，errors方法执行完毕，返回错误信息这个字典（ErrorDict）</p><p>到此is_valid执行结束。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ol><li>is_valid()中要执行full_clean()：<ol><li>self._errors ={} 定义一个存放错误信息的字典</li><li>self.cleaned_data = {} # 定义一个存放有效的数据</li></ol></li><li>执行self._clean_fields()<ol><li>先执行内置的校验和校验器的校验</li><li>有局部钩子，执行局部钩子</li></ol></li><li>执行 self.clean() 全局钩子</li></ol>]]></content>
      <categories>
        <category>django</category>
      </categories>
      <tags>
        <tag>django</tag>
        <tag>学习笔记</tag>
        <tag>Web前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Django-AJAX</title>
    <url>/django/20190713-django_11_ajax.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>本篇介绍ajax的概念与用法。</p></blockquote><a id="more"></a><p>通过这篇文章，你能了解到：</p><ul><li>ajax是什么?</li><li>传输数据的json</li><li>ajax的两个例子（注册与文件上传）</li></ul><h1 id="铺垫"><a href="#铺垫" class="headerlink" title="铺垫"></a>铺垫</h1><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><p>什么是 JSON ？</p><ul><li><p>JSON 指的是 JavaScript 对象表示法（JavaScript Object Notation）</p></li><li><p>JSON 是轻量级的文本<strong>数据</strong>交换<strong>格式</strong></p></li><li><p>JSON 独立于语言</p></li><li><p>JSON 具有自我描述性，更易理解</p></li><li><p>序列化与反序列化是实现方式</p></li></ul><p>下图为python与JavaScript的数据交换。</p><p><img src="/django/20190713-django_11_ajax/json.jpg" alt="json"></p><h1 id="ajax"><a href="#ajax" class="headerlink" title="ajax"></a>ajax</h1><p>回顾之前用到的请求：</p><ol><li>浏览器地址栏输入 get请求</li><li>a标签 get请求</li><li>form表单 get/post</li></ol><p>它们都是返回一个完整的页面，我们的请求也是同步的。</p><h2 id="例子1"><a href="#例子1" class="headerlink" title="例子1"></a>例子1</h2><ul><li>在注册页面，当我们输入用户名，input框失去焦点的时候，对用户名进行判断是否在数据库中重复。如果重复提示用户名重复，不存在提示可以使用</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'register.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">userval</span><span class="params">(request)</span>:</span></span><br><span class="line">    print(<span class="number">666</span>)</span><br><span class="line">    user = request.POST.get(<span class="string">'user'</span>,<span class="literal">None</span>)</span><br><span class="line">    <span class="keyword">if</span> user:</span><br><span class="line">        obj = models.User.objects.filter(username=user).first()</span><br><span class="line">        <span class="keyword">if</span> obj:</span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">'该用户名已存在'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">'可以使用'</span>)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'请输入用户名'</span>)</span><br></pre></td></tr></table></figure><p>在 return 返回的时候</p><ul><li><p>render：返回整个页面 （span标签中也将填充这个页面的代码）</p></li><li><p>redirect 去重定向的地址找东西，然后将这个地址的内容返回；如果想让前端跳转的话可以设置 <code>locaiton.href = res</code></p></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"># register.html</span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    &#123;% load static %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">placeholder</span>=<span class="string">'请输入用户名'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"user_res"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"&#123;% static 'jquery.min.js' %&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">'#user'</span>).blur(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $.ajax(&#123;</span></span><br><span class="line"><span class="actionscript">            url:<span class="string">'/userval/'</span>,</span></span><br><span class="line"><span class="actionscript">            type:<span class="string">'post'</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line"><span class="javascript">                <span class="string">'user'</span>:$(<span class="string">'#user'</span>).val()</span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            success:<span class="function"><span class="keyword">function</span> <span class="params">(res)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">                $(<span class="string">'#user_res'</span>).text(res)</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>结果返回 Forbidden (CSRF token missing or incorrect.): /register/userval</li><li>对于ajax提交的POST请求，我们需要通过csrf校验。</li></ul><h2 id="ajax通过django的csrf校验的方式"><a href="#ajax通过django的csrf校验的方式" class="headerlink" title="ajax通过django的csrf校验的方式"></a>ajax通过django的csrf校验的方式</h2><ul><li><p>网页中渲染</p><figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">csrf_token</span></span> %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure></li></ul><h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h3><ul><li>将这个<code>csrfmiddlewaretoken</code>对应的值添加到<code>data</code>中</li></ul><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="string">'#user'</span>).blur(function () &#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url:<span class="string">'/userval/'</span>,</span><br><span class="line">            type:<span class="string">'post'</span>,</span><br><span class="line">            data:&#123;</span><br><span class="line">                <span class="string">'user'</span>:$(<span class="string">'#user'</span>).val(),</span><br><span class="line">                <span class="string">'csrfmiddlewaretoken'</span>:$(<span class="string">'[name="csrfmiddlewaretoken"]'</span>).val()</span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line">            success:function (res) &#123;</span><br><span class="line">                $(<span class="string">'#user_res'</span>).text(res)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h3><ul><li>将这个<code>csrfmiddlewaretoken</code>对应的值添加到<code>headers</code>的 <code>x-csrftoken</code> 键对应的值中。</li><li>note: 这里是headers不是header哦！！！</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">'#user'</span>).blur(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $.ajax(&#123;</span></span><br><span class="line"><span class="actionscript">            url:<span class="string">'/userval/'</span>,</span></span><br><span class="line"><span class="actionscript">            type:<span class="string">'post'</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line"><span class="javascript">                <span class="string">'user'</span>:$(<span class="string">'#user'</span>).val(),              </span></span><br><span class="line">            &#125;,</span><br><span class="line">            headers:&#123;</span><br><span class="line"><span class="javascript">              <span class="string">'x-csrftoken'</span>:$(<span class="string">'[name="csrfmiddlewaretoken"]'</span>).val()</span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            success:<span class="function"><span class="keyword">function</span> <span class="params">(res)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">                $(<span class="string">'#user_res'</span>).text(res)</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在这里可能会有个疑问，这个Cookie中的csrftoken值是什么时候有的呢？</p><ul><li><p>当我们不设置 &#123;&#37; csrf_token %} 的时候，请求与响应中是没有的。</p></li><li><p>当我们的页面中有 &#123;&#37; csrf_token %} 的时候，在我们发GET请求的时候，响应头中有一个 <code>Set-Cookie: csrftoken=T30RX7O0E...</code>。</p></li><li><p>用源码解释：</p><ul><li>这段代码的重点在于对CSRF_COOKIE_USED的检查，如果没有设置，middleware会直接返回response而不在cookie里设置csrftoken。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># django/middleware/csrf.py</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">process_response</span><span class="params">(self, request, response)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> getattr(request, <span class="string">'csrf_cookie_needs_reset'</span>, <span class="literal">False</span>):</span><br><span class="line">            <span class="keyword">if</span> getattr(response, <span class="string">'csrf_cookie_set'</span>, <span class="literal">False</span>):</span><br><span class="line">                <span class="keyword">return</span> response</span><br><span class="line">        <span class="comment"># 如果没有设置，middleware会直接返回response而不在cookie里设置csrftoken。</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> request.META.get(<span class="string">"CSRF_COOKIE_USED"</span>, <span class="literal">False</span>):</span><br><span class="line">            <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Set the CSRF cookie even if it's already set, so we renew</span></span><br><span class="line">        <span class="comment"># the expiry timer.</span></span><br><span class="line">        self._set_token(request, response)</span><br><span class="line">        response.csrf_cookie_set = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><h2 id="例子2"><a href="#例子2" class="headerlink" title="例子2"></a>例子2</h2><p>使用ajax上传文件</p><ul><li>从post请求中可以拿出filename这个键值对</li><li>从request.FILES 可以拿出这个文件</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">file_recv</span><span class="params">(request)</span>:</span></span><br><span class="line">    print(request.POST.get(<span class="string">'filename'</span>))</span><br><span class="line">    file_name = request.POST.get(<span class="string">'filename'</span>)</span><br><span class="line">    f1 = request.FILES.get(<span class="string">'f1'</span>)</span><br><span class="line">    <span class="keyword">with</span> open(file_name,mode=<span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> f1.chunks():</span><br><span class="line">            f.write(i)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'上传成功'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'upload.html'</span>)</span><br></pre></td></tr></table></figure><ul><li>对于file文件，我们可以创建一个FormData对象（字典），来存放键值对，这个对象的好处是会帮你在headers中加 Content-Type: multipart/form-data;</li><li>我们还需要加入两个信息：processData:false, contentType:false,来告诉js维持原状，不进行处理。</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    &#123;% load static %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"&#123;% static 'jquery.min.js' %&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">&#123;% csrf_token %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">id</span>=<span class="string">"file"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"bt"</span>&gt;</span>上传<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"re"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">'#bt'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> form = <span class="keyword">new</span> FormData();</span></span><br><span class="line"><span class="actionscript">        form.append(<span class="string">'filename'</span>,<span class="string">'xxxx'</span>);</span></span><br><span class="line"><span class="javascript">        form.append(<span class="string">'f1'</span>,$(<span class="string">'#file'</span>)[<span class="number">0</span>].files[<span class="number">0</span>]);</span></span><br><span class="line"><span class="javascript">        form.append(<span class="string">'csrfmiddlewaretoken'</span>,$(<span class="string">'[name="csrfmiddlewaretoken"]'</span>).val());</span></span><br><span class="line"><span class="javascript">        $.ajax(&#123;</span></span><br><span class="line"><span class="actionscript">            url:<span class="string">'/file_recv/'</span>,</span></span><br><span class="line"><span class="actionscript">            type:<span class="string">'post'</span>,</span></span><br><span class="line"><span class="actionscript">            processData:<span class="literal">false</span>,</span></span><br><span class="line"><span class="actionscript">            contentType:<span class="literal">false</span>,</span></span><br><span class="line">            data:form,</span><br><span class="line"><span class="actionscript">            success:<span class="function"><span class="keyword">function</span> <span class="params">(res)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">                $(<span class="string">'#re'</span>).text(res)</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>note: FormData 只能用post发送，get不行。</p><p>例子3：</p><p>Ajax与modelform配合使用：</p><ul><li>再modelform中需要重写 <code>__init__</code> 方法来为显示的标签添加 bootstrap 样式。</li><li>使用 JsonResponse 来进行回复。</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render, HttpResponse, reverse</span><br><span class="line"><span class="keyword">from</span> django.http.response <span class="keyword">import</span> JsonResponse</span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentForm</span><span class="params">(forms.ModelForm)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = models.Student</span><br><span class="line">        fields = <span class="string">"__all__"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        super().__init__(*args, **kwargs)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> self.fields.values():</span><br><span class="line">            i.widget.attrs[<span class="string">'class'</span>] = <span class="string">'form-control'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">student_list</span><span class="params">(request)</span>:</span></span><br><span class="line">    all_students = models.Student.objects.all()</span><br><span class="line"></span><br><span class="line">    form_obj = StudentForm()</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'student_list.html'</span>, &#123;<span class="string">'form_obj'</span>: form_obj, <span class="string">'all_students'</span>: all_students&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">student_add</span><span class="params">(request)</span>:</span></span><br><span class="line">    form_obj = StudentForm(request.GET)</span><br><span class="line">    <span class="keyword">if</span> form_obj.is_valid():</span><br><span class="line">        form_obj.save()</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(&#123;<span class="string">'status'</span>: <span class="number">200</span>, <span class="string">'url'</span>: reverse(<span class="string">'student_list'</span>)&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> JsonResponse(&#123;<span class="string">'status'</span>: <span class="number">404</span>, <span class="string">"data"</span>: form_obj.as_p()&#125;)</span><br></pre></td></tr></table></figure><p>页面中：</p><ul><li><code>serialize()</code> 方法通过序列化表单值，创建 URL 编码文本字符串。然后将这个拼接到 url 的后面即可。</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--模态框内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-content"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"padding: 30px"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"form-horizontal"</span> <span class="attr">id</span>=<span class="string">"form_1"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"as_p"</span>&gt;</span></span><br><span class="line">                &#123;&#123; form_obj.as_p &#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-offset-2 col-sm-10"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"sub"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>新增<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    $(<span class="string">'#sub'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log($(<span class="string">'#form_1'</span>).serialize());</span></span><br><span class="line"><span class="javascript">        $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">            url: <span class="string">'/student_add/?'</span>+$(<span class="string">'#form_1'</span>).serialize(),</span></span><br><span class="line"><span class="actionscript">            type: <span class="string">'get'</span>,</span></span><br><span class="line"><span class="actionscript">            processData: <span class="literal">false</span>,</span></span><br><span class="line"><span class="actionscript">            contentType: <span class="literal">false</span>,</span></span><br><span class="line">            &#123;#data: $('#form_1').serialize(),#&#125;</span><br><span class="line"><span class="actionscript">            success: <span class="function"><span class="keyword">function</span> <span class="params">(data)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> status = data.status;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">if</span> (status == <span class="number">200</span>) &#123;</span></span><br><span class="line">                    location.href = data.url</span><br><span class="line">                &#125;</span><br><span class="line"><span class="actionscript">                <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> as_p = $(<span class="string">'#as_p'</span>);</span></span><br><span class="line">                    as_p.html(data.data)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>django</category>
      </categories>
      <tags>
        <tag>django</tag>
        <tag>学习笔记</tag>
        <tag>Web前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Django-csrf中间件</title>
    <url>/django/20190712-django_10_csrf.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>本篇介绍csrf相关的装饰器，中间件，以及对部分源码进行分析。</p></blockquote><a id="more"></a><h1 id="csrf相关的装饰器"><a href="#csrf相关的装饰器" class="headerlink" title="csrf相关的装饰器"></a>csrf相关的装饰器</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views.decorators.csrf <span class="keyword">import</span> csrf_exempt,csrf_protect</span><br><span class="line"><span class="comment"># csrf_exempt  豁免csrf校验</span></span><br><span class="line">	csrf_exempt要加在CBV上，只能加dispatch上</span><br><span class="line"><span class="comment"># csrf_protect 强制进行csrf校验</span></span><br></pre></td></tr></table></figure><h2 id="csrf-exempt"><a href="#csrf-exempt" class="headerlink" title="csrf_exempt"></a>csrf_exempt</h2><ul><li>豁免csrf校验</li></ul><h3 id="FBV"><a href="#FBV" class="headerlink" title="FBV"></a>FBV</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"># home.html</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"小伙子"</span> <span class="attr">value</span>=<span class="string">"欢迎回家"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>只要添加 <code>csrf_exempt</code> 这个装饰器就可以豁免csrf校验</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views.decorators.csrf <span class="keyword">import</span> csrf_exempt</span><br><span class="line"><span class="meta">@csrf_exempt</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home1</span><span class="params">(request)</span>:</span>    </span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'home.html'</span>)</span><br></pre></td></tr></table></figure><h3 id="CBV"><a href="#CBV" class="headerlink" title="CBV"></a>CBV</h3><p>关于 <code>csrf_exempt</code> 两种无效的使用：</p><ul><li>不用 method_decorator 是会报错的</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views.decorators.csrf <span class="keyword">import</span> csrf_exempt</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Home2</span><span class="params">(View)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">'home.html'</span>)</span><br><span class="line"><span class="meta">    @csrf_exempt   # 直接这样添加是会报错的</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">'home.html'</span>)</span><br></pre></td></tr></table></figure><ul><li>使用method_decorator 直接加在方法上也不行</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views.decorators.csrf <span class="keyword">import</span> csrf_exempt</span><br><span class="line"><span class="keyword">from</span> django.utils.decorators <span class="keyword">import</span> method_decorator</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Home2</span><span class="params">(View)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">'home.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @method_decorator(csrf_exempt)  # 这样还是不行</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">'home.html'</span>)</span><br></pre></td></tr></table></figure><p>关于给视图函数添加装饰器，详见 <a href="https://atlasnq.github.io/django/20190704-django_5.html" target="_blank" rel="noopener">Django的View</a></p><p>正确的姿势：</p><ul><li>给dispatch方法添加<code>csrf_exempt</code> 装饰器</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@method_decorator(csrf_exempt,name='dispatch')</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Home2</span><span class="params">(View)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">'home.html'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">'home.html'</span>)</span><br></pre></td></tr></table></figure><h2 id="csrf-protect"><a href="#csrf-protect" class="headerlink" title="csrf_protect"></a>csrf_protect</h2><ul><li>强制进行csrf校验</li></ul><h3 id="FBV-1"><a href="#FBV-1" class="headerlink" title="FBV"></a>FBV</h3><ul><li>先在settings中注释掉关于csrf的中间件</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views.decorators.csrf <span class="keyword">import</span> csrf_protect</span><br><span class="line"><span class="meta">@csrf_protect</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home1</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'home.html'</span>)</span><br></pre></td></tr></table></figure><p>CBV</p><ul><li>不用method_decorator 是不行的。</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Home2</span><span class="params">(View)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">'home.html'</span>)</span><br><span class="line">    <span class="comment"># @csrf_protect 这种方式不行，会报 'Home2' object has no attribute 'COOKIES'</span></span><br><span class="line"><span class="meta">    @method_decorator(csrf_protect)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">'home.html'</span>)</span><br></pre></td></tr></table></figure><h2 id="ensure-csrf-cookie"><a href="#ensure-csrf-cookie" class="headerlink" title="ensure_csrf_cookie"></a>ensure_csrf_cookie</h2><p>待补充</p><h1 id="csrf中间件"><a href="#csrf中间件" class="headerlink" title="csrf中间件"></a>csrf中间件</h1><p>有两个token</p><ul><li>一个是Cookie中的csrftoken</li></ul><p><img src="/django/20190712-django_10_csrf/csrftoken.png" alt="csrftoken"></p><ul><li>一个是 input标签，名字为 <code>csrfmiddlewaretoken</code>，value是64位</li></ul><p><img src="/django/20190712-django_10_csrf/csrfmiddlewaretoken.png" alt="csrfmiddlewaretoken"></p><p>cookie中的csrf token是不变的， input标签内的token是变化的。</p><p>想要通过csrf校验的先提条件，必须有csrftoken的cookie</p><ol><li><figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml">设置</span><span class="template-tag">&#123;% <span class="name">csrf</span> %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure><p>后面的源码分析中也会解释，有了它，就会在response的Cookie中设置csrftoken</p></li><li><p>ensure_csrf_cookie 这个装饰器，有了它，会在每次请求的response的Cookie中设置csrftoken</p></li></ol><p>然后会把这两个token值作比较</p><ol><li>从cookie中获取csrftoken的值与post请求提交的数据中的csrfmiddlewaretoken的值做对比。</li><li>如果request.POST中获取不到csrfmiddlewaretoken这个值，会尝试从请求头中获取 x-csrftoken的值，并且拿这个值与csrftoken做对比，对比成功也能通过校验。</li></ol><h1 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h1><ul><li>设置csrf_exempt = True , 会在 <code>CsrfViewMiddleware</code> 的 <code>process_view</code> 中使用</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># django\views\decorators\csrf.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">csrf_exempt</span><span class="params">(view_func)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Marks a view function as being exempt from the CSRF view protection.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># We could just do view_func.csrf_exempt = True, but decorators</span></span><br><span class="line">    <span class="comment"># are nicer if they don't have side-effects, so we return a new</span></span><br><span class="line">    <span class="comment"># function.</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapped_view</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> view_func(*args, **kwargs)</span><br><span class="line">    wrapped_view.csrf_exempt = <span class="literal">True</span>    </span><br><span class="line">    <span class="keyword">return</span> wraps(view_func, assigned=available_attrs(view_func))(wrapped_view)</span><br></pre></td></tr></table></figure><ul><li>CsrfViewMiddleware中间件的定义</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># django\middleware\csrf.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CsrfViewMiddleware</span><span class="params">(MiddlewareMixin)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="comment"># 该函数将Cookie中的csrftoken值添加到 request.META中</span></span><br><span class="line">        csrf_token = self._get_token(request)</span><br><span class="line">        <span class="keyword">if</span> csrf_token <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="comment"># Use same token next time.</span></span><br><span class="line">            request.META[<span class="string">'CSRF_COOKIE'</span>] = csrf_token</span><br><span class="line">            </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_view</span><span class="params">(self, request, callback, callback_args, callback_kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> getattr(request, <span class="string">'csrf_processing_done'</span>, <span class="literal">False</span>):</span><br><span class="line">            <span class="comment"># 如果处理完成了，直接结束</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Wait until request.META["CSRF_COOKIE"] has been manipulated before</span></span><br><span class="line">        <span class="comment"># bailing out, so that get_token still works</span></span><br><span class="line">        <span class="keyword">if</span> getattr(callback, <span class="string">'csrf_exempt'</span>, <span class="literal">False</span>):</span><br><span class="line">            <span class="comment"># 如果由csrf_exempt豁免，也直接结束</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Assume that anything not defined as 'safe' by RFC7231 needs protection</span></span><br><span class="line">        <span class="comment"># 没有标识安全的都将强制校验</span></span><br><span class="line">        <span class="keyword">if</span> request.method <span class="keyword">not</span> <span class="keyword">in</span> (<span class="string">'GET'</span>, <span class="string">'HEAD'</span>, <span class="string">'OPTIONS'</span>, <span class="string">'TRACE'</span>):...   </span><br><span class="line">            <span class="comment"># 如果不是这些方法</span></span><br><span class="line">           省略...</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self._accept(request)</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">process_response</span><span class="params">(self, request, response)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> getattr(request, <span class="string">'csrf_cookie_needs_reset'</span>, <span class="literal">False</span>):</span><br><span class="line">            <span class="keyword">if</span> getattr(response, <span class="string">'csrf_cookie_set'</span>, <span class="literal">False</span>):</span><br><span class="line">                <span class="keyword">return</span> response</span><br><span class="line">        <span class="comment"># 如果没有设置CSRF_COOKIE_USED，middleware会直接返回response而不在cookie里设置csrftoken。</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> request.META.get(<span class="string">"CSRF_COOKIE_USED"</span>, <span class="literal">False</span>):</span><br><span class="line">            <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Set the CSRF cookie even if it's already set, so we renew</span></span><br><span class="line">        <span class="comment"># the expiry timer.</span></span><br><span class="line">        self._set_token(request, response)</span><br><span class="line">        response.csrf_cookie_set = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>django</category>
      </categories>
      <tags>
        <tag>django</tag>
        <tag>学习笔记</tag>
        <tag>Web前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Django的MIDDLEWARE</title>
    <url>/django/20190710-django_9_middleware.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>本篇介绍Django的中间件(middleware)与Django处理请求的流程。</p></blockquote><a id="more"></a><h1 id="Django’s-request-response-processing"><a href="#Django’s-request-response-processing" class="headerlink" title="Django’s request/response processing"></a>Django’s request/response processing</h1><p>​ 在上一篇中，我们给视图函数加装饰器来判断是用户是否登录，把没有登录的用户请求跳转到登录页面。我们通过给几个特定视图函数加装饰器实现了这个需求。但是以后添加的视图函数可能也需要加上装饰器，这样是不是稍微有点繁琐，我们需要更合适的手段。</p><p>​ 在前面的使用中，固定的套路是写urls.py，写views.py，写models.py,写模板中的页面。然后运行就OK了！但是在背后Django为我们所做的远远不止这么简单，一个Http请求所经历的也不仅仅是通过url进入views然后处理完成返回结果。例如，开始学习的时候，为了成功提交form表单，我们先将settings中MIDDLEWARE（中间件）中关于csrf那一条进行注释。这样我们就可以成功提交form表单。回头分析注释的这一条，有了它，Django就可以给客户端发送带有csrf_token 的表单，如果回执中没有这个 csrf_token ，则不做接收。所以Http请求也会经过中间件，那么一个Http请求的生命周期是怎样的呢？先给出结果，然后一步一步进行分析。</p><p><img src="/django/20190710-django_9_middleware/%E8%AF%B7%E6%B1%82%E4%B8%8E%E5%93%8D%E5%BA%94.png" alt="请求与响应"></p><ul><li>图中中间件的顺序是有原因的，有些中间件之间存在依赖关系，后面的中间件依赖于前面的中间件，如对于 <code>AuthenticationMiddleware</code> 来说，它依赖于 <code>SessionMiddleware</code> 。</li><li>我们可以把它看成一个<strong>洋葱</strong>，每个中间件是一层（layer），里面包裹着视图（view）（核心）。</li></ul><h1 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h1><h2 id="为什么要有中间件？"><a href="#为什么要有中间件？" class="headerlink" title="为什么要有中间件？"></a>为什么要有中间件？</h2><p>​ Each middleware component is responsible for doing some specific function.</p><p>​ 每一个中间件实现一个特定的功能，有了中间件，人们可以专注于业务，而不用在业务之外分太多精力。</p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><blockquote><p>Middleware is a framework of hooks into Django’s request/response processing. It’s a light, low-level “plugin” system for globally altering Django’s input or output.</p></blockquote><ul><li><p>中间件是一个用来处理Django的请求和响应的框架级别的钩子。它是一个轻量、低级别的插件系统，用于在全局范围内改变Django的输入和输出。每个中间件组件都负责做一些特定的功能。</p></li><li><p><strong>在http请求 到达视图函数之前 和视图函数return之后，django会根据自己的规则在合适的时机执行中间件中相应的方法</strong>。因为改变的是全局，所以需要谨慎实用，用不好会影响到性能。</p></li></ul><blockquote><p>A middleware factory is a callable that takes a <code>get_response</code> callable and returns a middleware. A middleware is a callable that takes a request and returns a response, just like a view.</p></blockquote><ul><li>中间件是可调用的，像视图一样，它接受一个request对象并返回response对象。</li></ul><h3 id="函数形式"><a href="#函数形式" class="headerlink" title="函数形式"></a>函数形式</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">simple_middleware</span><span class="params">(get_response)</span>:</span></span><br><span class="line">    <span class="comment"># One-time configuration and initialization.</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">middleware</span><span class="params">(request)</span>:</span></span><br><span class="line">        <span class="comment"># Code to be executed for each request before</span></span><br><span class="line">        <span class="comment"># the view (and later middleware) are called.</span></span><br><span class="line">		<span class="comment"># 执行视图函数之前</span></span><br><span class="line">        response = get_response(request)</span><br><span class="line">		<span class="comment"># 执行视图函数之后</span></span><br><span class="line">        <span class="comment"># Code to be executed for each request/response after</span></span><br><span class="line">        <span class="comment"># the view is called.</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> middleware</span><br></pre></td></tr></table></figure><h3 id="可调用的实例"><a href="#可调用的实例" class="headerlink" title="可调用的实例"></a>可调用的实例</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SimpleMiddleware</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, get_response)</span>:</span></span><br><span class="line">        self.get_response = get_response</span><br><span class="line">        <span class="comment"># One-time configuration and initialization.</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="comment"># Code to be executed for each request before</span></span><br><span class="line">        <span class="comment"># the view (and later middleware) are called.</span></span><br><span class="line">		<span class="comment"># 执行视图函数之前</span></span><br><span class="line">        response = self.get_response(request)</span><br><span class="line">		<span class="comment"># 执行视图函数之后</span></span><br><span class="line">        <span class="comment"># Code to be executed for each request/response after</span></span><br><span class="line">        <span class="comment"># the view is called.</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><p>重要的事情说三遍，对于中间件把它理解成一颗洋葱，一颗洋葱，一颗洋葱。可以使用装饰器来包裹，也可以在类中定义 <code>__call__</code> 方法来包裹。</p><h1 id="五个方法，四个特征"><a href="#五个方法，四个特征" class="headerlink" title="五个方法，四个特征"></a>五个方法，四个特征</h1><h3 id="process-request-self-request"><a href="#process-request-self-request" class="headerlink" title="process_request(self,request)"></a>process_request(self,request)</h3><p>执行时间：</p><ul><li>执行视图函数之前，也在路由匹配之前。</li></ul><p>参数：</p><ul><li>request ： 请求对象和视图中的是同一个。</li></ul><p>执行的顺序：</p><ul><li>按照中间件的注册顺序，顺序执行。</li></ul><p>返回值：</p><ul><li>None：正常流程</li><li>HttpResponse ： 当前中间件之后的中间件的process_request，路由匹配，视图函数都不执行，直接执行当前中间件的process_response的方法，倒序执行之前的process_response方法，最终返回给浏览器。</li></ul><h3 id="process-response-self-request-response"><a href="#process-response-self-request-response" class="headerlink" title="process_response(self, request,response):"></a>process_response(self, request,response):</h3><p>执行时间：</p><ul><li>执行视图函数之后(或者其它特殊情况)</li></ul><p>参数：</p><ul><li>request ： 请求对象和视图中的是一个</li><li>response：返回的对象（视图，中间件）</li></ul><p>执行的顺序：</p><ul><li>按照中间件的注册顺序，倒序执行。</li></ul><p>返回值：</p><ul><li>HttpResponse ： 必须返回response对象</li></ul><h3 id="process-view-self-request-view-func-view-args-view-kwargs"><a href="#process-view-self-request-view-func-view-args-view-kwargs" class="headerlink" title="process_view(self,request, view_func, view_args, view_kwargs)"></a>process_view(self,request, view_func, view_args, view_kwargs)</h3><p>执行时间：</p><ul><li>执行视图函数之前，路由之后</li></ul><p>参数：</p><ul><li>request ： 请求对象和视图中的是一个</li><li>view_func：视图函数</li><li>view_args：传递给视图函数的位置参数，如分组。</li><li>view_kwargs：传递给视图函数的关键字参数，如分组命名。</li></ul><p>执行的顺序：</p><ul><li>按照中间件的注册顺序，顺序执行</li></ul><p>返回值：</p><ul><li>None：正常流程。</li><li>HttpResponse：当前中间件之后的中间件的process_view，视图函数都不执行，直接执行最后一个中间件的process_response的方法，然后倒序执行之前的process_response方法，最终返回给浏览器。</li></ul><h3 id="process-exception-self-request-exception"><a href="#process-exception-self-request-exception" class="headerlink" title="process_exception(self,request,exception)"></a>process_exception(self,request,exception)</h3><p>执行时间（触发条件）：</p><ul><li>视图层面中出现异常时才会执行</li></ul><p>参数：</p><ul><li>request ： 请求对象和视图中的是一个</li><li>exception：错误对象</li></ul><p>执行的顺序：（视图函数之后执行的都是倒序）</p><ul><li>按照中间件的注册顺序，倒序执行。</li></ul><p>返回值：</p><ul><li>None：当前中间件处理不了，交给下一个中间件处理异常，所有的中间件都没有处理，将给django。</li><li>HttpResponse：当前中间件处理了错误，之前中间件的process_exception不在执行，直接执行最后一个中间件的process_response的方法，然后倒序执行之前的process_response方法，最终返回给浏览器。</li></ul><p>大黄页是 django帮你处理的这个异常。</p><h3 id="process-template-response-self-request-response"><a href="#process-template-response-self-request-response" class="headerlink" title="process_template_response(self,request,response)"></a>process_template_response(self,request,response)</h3><p>执行时间（触发条件）：</p><ul><li>视图返回的response 是一个 template_response对象</li></ul><p>参数：</p><ul><li>request ： 请求对象和视图中的是一个</li><li>response：响应对象</li></ul><p>执行的顺序：（视图函数之后执行的都是倒序）</p><ul><li>按照中间件的注册顺序，倒序执行</li></ul><p>返回值：</p><ul><li>HttpResponse：必须返回</li></ul><h3 id="render-与-process-template-response-的区别："><a href="#render-与-process-template-response-的区别：" class="headerlink" title="render 与 process_template_response 的区别："></a>render 与 process_template_response 的区别：</h3><ul><li><p>render直接做好字符串的替换（渲染完成）</p></li><li><p>process_template_response 执行完成之后，才会执行字符串的替换，比render更加灵活。</p></li></ul><p>如果定义了process_template_response 方法，就会在该方法执行结束后进行render，所以相当于一种延时的渲染。</p><h1 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h1><h2 id="中间件的执行流程"><a href="#中间件的执行流程" class="headerlink" title="中间件的执行流程"></a>中间件的执行流程</h2><p><img src="/django/20190710-django_9_middleware/%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%9A%84%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.png" alt="中间件的执行流程"></p><h2 id="Django的请求流程"><a href="#Django的请求流程" class="headerlink" title="Django的请求流程"></a>Django的请求流程</h2><p><img src="/django/20190710-django_9_middleware/Django%E7%9A%84%E8%AF%B7%E6%B1%82%E6%B5%81%E7%A8%8B.png" alt="Django的请求流程"></p><h1 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h1><p>练习1：限制访问频率（5s内只能访问3次）</p><ul><li>通过IP</li><li>通过session</li></ul><p>方法一：通过IP</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">VISIT_HISTORY = &#123;</span><br><span class="line">        <span class="comment"># ip：[time1(新),time2,time3(旧),]</span></span><br><span class="line">        <span class="comment"># ip：[time1(新),time2,time3(旧),]</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Throttle</span><span class="params">(MiddlewareMixin)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        IP = request.META[<span class="string">'REMOTE_ADDR'</span>]</span><br><span class="line">        history = VISIT_HISTORY.get(IP, [])</span><br><span class="line">        print(history)</span><br><span class="line">        <span class="keyword">while</span> len(history) &gt; <span class="number">0</span> <span class="keyword">and</span> time.time() - history[<span class="number">-1</span>] &gt; <span class="number">5</span>:</span><br><span class="line">            history.pop()</span><br><span class="line">        <span class="keyword">if</span> len(history) &gt; <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">'太频繁了少年'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            history.append(time.time())</span><br><span class="line">            VISIT_HISTORY[IP] = history</span><br></pre></td></tr></table></figure><p>方法二：通过session</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Throttle</span><span class="params">(MiddlewareMixin)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="comment"># [time1(新),time2,time3(旧),]  访问的时候，当有时间过期了，就pop</span></span><br><span class="line">        history = request.session.get(<span class="string">'history'</span>, [])</span><br><span class="line">        print(history)</span><br><span class="line">        <span class="keyword">while</span> len(history) &gt; <span class="number">0</span> <span class="keyword">and</span> time.time() - history[<span class="number">-1</span>] &gt; <span class="number">5</span>:</span><br><span class="line">            history.pop()</span><br><span class="line">            <span class="keyword">if</span> len(history) &gt; <span class="number">3</span>:</span><br><span class="line">                <span class="keyword">return</span> HttpResponse(<span class="string">'太频繁了'</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                history.append(time.time())</span><br><span class="line">                request.session[<span class="string">'history'</span>] = history</span><br></pre></td></tr></table></figure><p>练习2：使用中间件来验证是否登录，并给request对象封装当前登录的用户</p><ul><li><p>装饰器是用来验证登录的一种方式，不过它需要一个一个的加在视图上。</p></li><li><p>中间件较之更为合理方便。</p></li></ul><p>定义类AuthCheck类，定义process_request方法：</p><ul><li>在这个方法中，建立白名单来使登录，注册，admin等通过，其它未登录的进行拦截。</li><li>登陆状态并存在该用户的时候，将该用户对象封装到request请求中，方便再视图中使用。</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AuthCheck</span><span class="params">(MiddlewareMixin)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        is_login = request.session.get(<span class="string">'is_login'</span>)</span><br><span class="line">        <span class="keyword">if</span> request.path_info <span class="keyword">in</span> [reverse(<span class="string">'crm:login'</span>), reverse(<span class="string">'crm:register'</span>)]:</span><br><span class="line">            <span class="comment"># 白名单：如果是login或register就通过，其它未登录的都拦截</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">elif</span> request.path_info.startswith(<span class="string">'/admin'</span>):</span><br><span class="line">            <span class="comment"># 也要让admin通过</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> is_login != <span class="string">'1'</span>:</span><br><span class="line">            <span class="comment"># 对于白名单以外的都将拦截</span></span><br><span class="line">            <span class="keyword">return</span> redirect(<span class="string">'crm:login'</span>)</span><br><span class="line">        <span class="comment"># 处于登录状态，就将获取用户的主键信息，找到并创建用户对象</span></span><br><span class="line">        pk = request.session.get(<span class="string">'pk'</span>)</span><br><span class="line">        obj = models.UserProfile.objects.filter(pk=pk).first()</span><br><span class="line">        <span class="keyword">if</span> obj:</span><br><span class="line">            <span class="comment"># 访问其它页面的时候将该用户对象封装到request中</span></span><br><span class="line">            <span class="comment"># 这里不能使用 request.user ，它已经被Auth等中间件使用了，如果覆盖的话将不能使用admin等。</span></span><br><span class="line">            request.user_obj = obj</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 对于session有问题的重新登录</span></span><br><span class="line">            <span class="keyword">return</span> redirect(<span class="string">'crm:login'</span>)</span><br></pre></td></tr></table></figure><p>note：重要的事情说三遍：定义完中间件别忘了再settings中注册呦！！！</p><h1 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h1><h2 id="MiddlewareMixin"><a href="#MiddlewareMixin" class="headerlink" title="MiddlewareMixin"></a>MiddlewareMixin</h2><p>ctrl+鼠标左键点击我们继承的 <code>MiddlewareMixin</code> 这个类，这是一个可调用的对象，分析如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># django/utils/deprecation.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MiddlewareMixin</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, get_response=None)</span>:</span></span><br><span class="line">        self.get_response = get_response</span><br><span class="line">        super(MiddlewareMixin, self).__init__()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        response = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">if</span> hasattr(self, <span class="string">'process_request'</span>):	</span><br><span class="line">            <span class="comment"># 如果中间件中定义了process_request，就调用它。正常流程是返回None；</span></span><br><span class="line">            <span class="comment"># 如果返回response对象则请求不在进入后面的中间件。</span></span><br><span class="line">            response = self.process_request(request)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> response:		</span><br><span class="line">            <span class="comment"># 如果process_request没有返回response，即正常流程下，调用视图</span></span><br><span class="line">            response = self.get_response(request)</span><br><span class="line">        <span class="keyword">if</span> hasattr(self, <span class="string">'process_response'</span>):</span><br><span class="line">            <span class="comment"># 如果中间件中定义了process_request，就调用它。</span></span><br><span class="line">            response = self.process_response(request, response)</span><br><span class="line">        <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><p>​ 通过这段代码我们明白了自定义的 <code>process_request</code> 与 <code>process_response</code>的细节，然后产生了新的疑问，那就是谁在调用中间件，怎么调用中间件，其它的方法的细节在哪儿呢？</p><h2 id="core-handlers"><a href="#core-handlers" class="headerlink" title="core/handlers"></a>core/handlers</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">django</span><br><span class="line">├── core        </span><br><span class="line">│   ├── handlers  </span><br><span class="line">│   │     ├── base.py		<span class="comment"># BaseHandler类</span></span><br><span class="line">│   │     ├── exception.py	<span class="comment"># convert_exception_to_response 处理异常</span></span><br><span class="line">│   │     └── wsgi.py  		<span class="comment"># WSGIHandler类继承BaseHandler类，添加了 __call__方法</span></span><br><span class="line">│   │  </span><br><span class="line">│   ├── servers 	</span><br><span class="line">│   │     └── basehttp.py   <span class="comment"># 用于开发测试的server模块。WSGIServer、ServerHandler、 </span></span><br><span class="line">│   │						<span class="comment"># WSGIRequestHandler类</span></span><br><span class="line">│   │</span><br><span class="line">│   ├── wsgi.py 			<span class="comment"># get_wsgi_application，启动server，传入application</span></span><br><span class="line">│   └── ...</span><br><span class="line">└── ...</span><br></pre></td></tr></table></figure><p>django内置的server基本包括两部分：django.core.servers和django.core.handlers</p><ul><li><p>servers.basehttp是django自身提供的一个用于开发测试的server模块，其中提供的WSGIServer、ServerHandler、WSGIRequestHandler其实都是属于WSGI server，django只不过是对python内置的WSGI模块simple_server做的一层包装。WSGIServer 中携带了 django.core.handlers.wsgi 的 WSGIHandler 类的一个实例，通过 WSGIHandler 来处理由 Web 服务器（比如 Apache，Lighttpd 等）传过来的请求。</p></li><li><p>handlers package包括 <code>base.py</code> 、 <code>wsgi.py</code> 和<code>exception.py</code>三个模块。</p><ul><li><code>base.py</code> 中只定义了一个BaseHandler类，涉及加载中间件，处理异常，获取响应数据等。</li><li><code>wsgi.py</code> 中的WSGIHandler类，它继承了base.py中的BaseHandler，只添加了一个<code>__call__</code>方法，它是请求的入口，调用BaseHandler中定义的方法去执行加载中间件等一系列操作和异常处理，除此之外，WSGIHandler还会处理cookie、触发signal等。</li><li><code>exception.py</code>中的 <code>convert_exception_to_response(get_response)</code> 函数，对response对象进行处理（包裹），所有的已知异常都会被转换成对应的4XX异常，如(Http404,PermissionDenied, MultiPartParserError, SuspiciousOperation),其它异常都会转换为500错误，这个装饰器自动应用到所有到中间件，确保中间件内部异常不会泄露而影响到后面到代码运行，然后下一个中间件可以继续处理上一个中间件返回的response,而不是抛出的异常。</li></ul></li></ul><h3 id="BaseHandler"><a href="#BaseHandler" class="headerlink" title="BaseHandler"></a>BaseHandler</h3><ul><li>加载中间件，处理异常，获取响应数据</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># django\core\handlers\base.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseHandler</span><span class="params">(object)</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span>        </span><br><span class="line">        self._request_middleware = <span class="literal">None</span></span><br><span class="line">        self._view_middleware = <span class="literal">None</span></span><br><span class="line">        self._template_response_middleware = <span class="literal">None</span></span><br><span class="line">        self._response_middleware = <span class="literal">None</span></span><br><span class="line">        self._exception_middleware = <span class="literal">None</span></span><br><span class="line">        self._middleware_chain = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">load_middleware</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Populate middleware lists from settings.MIDDLEWARE (or the deprecated</span></span><br><span class="line"><span class="string">        MIDDLEWARE_CLASSES).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Must be called after the environment is fixed (see __call__ in subclasses).</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self._request_middleware = []</span><br><span class="line">        self._view_middleware = []</span><br><span class="line">        self._template_response_middleware = []</span><br><span class="line">        self._response_middleware = []</span><br><span class="line">        self._exception_middleware = []</span><br><span class="line">        <span class="comment"># 哇，在这里找到了，五大方法的影子，他们是一个个列表!!!</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> settings.MIDDLEWARE <span class="keyword">is</span> <span class="literal">None</span>:      </span><br><span class="line">            warnings.warn(</span><br><span class="line">                <span class="string">"Old-style middleware using settings.MIDDLEWARE_CLASSES is "</span></span><br><span class="line">                <span class="string">"deprecated. Update your middleware and use settings.MIDDLEWARE "</span></span><br><span class="line">                <span class="string">"instead."</span>, RemovedInDjango20Warning</span><br><span class="line">            )</span><br><span class="line">            handler = convert_exception_to_response(self._legacy_get_response)</span><br><span class="line">            <span class="keyword">for</span> middleware_path <span class="keyword">in</span> settings.MIDDLEWARE_CLASSES:</span><br><span class="line">                mw_class = import_string(middleware_path)</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    mw_instance = mw_class()</span><br><span class="line">                <span class="keyword">except</span> MiddlewareNotUsed <span class="keyword">as</span> exc:</span><br><span class="line">                    <span class="keyword">if</span> settings.DEBUG:</span><br><span class="line">                        <span class="keyword">if</span> six.text_type(exc):</span><br><span class="line">                            logger.debug(<span class="string">'MiddlewareNotUsed(%r): %s'</span>, middleware_path, exc)</span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            logger.debug(<span class="string">'MiddlewareNotUsed: %r'</span>, middleware_path)</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">				</span><br><span class="line">                <span class="comment"># 将五大方法分别加到各自的列表中，request和view是尾插，另外三个是头插</span></span><br><span class="line">                <span class="keyword">if</span> hasattr(mw_instance, <span class="string">'process_request'</span>):</span><br><span class="line">                    self._request_middleware.append(mw_instance.process_request)</span><br><span class="line">                <span class="keyword">if</span> hasattr(mw_instance, <span class="string">'process_view'</span>):</span><br><span class="line">                    self._view_middleware.append(mw_instance.process_view)</span><br><span class="line">                <span class="keyword">if</span> hasattr(mw_instance, <span class="string">'process_template_response'</span>):</span><br><span class="line">                    self._template_response_middleware.insert(<span class="number">0</span>, mw_instance.process_template_response)</span><br><span class="line">                <span class="keyword">if</span> hasattr(mw_instance, <span class="string">'process_response'</span>):</span><br><span class="line">                    self._response_middleware.insert(<span class="number">0</span>, mw_instance.process_response)</span><br><span class="line">                <span class="keyword">if</span> hasattr(mw_instance, <span class="string">'process_exception'</span>):</span><br><span class="line">                    self._exception_middleware.insert(<span class="number">0</span>, mw_instance.process_exception)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            handler = convert_exception_to_response(self._get_response)</span><br><span class="line">            <span class="keyword">for</span> middleware_path <span class="keyword">in</span> reversed(settings.MIDDLEWARE):</span><br><span class="line">                middleware = import_string(middleware_path)</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    mw_instance = middleware(handler)</span><br><span class="line">                <span class="keyword">except</span> MiddlewareNotUsed <span class="keyword">as</span> exc:</span><br><span class="line">                    <span class="keyword">if</span> settings.DEBUG:</span><br><span class="line">                        <span class="keyword">if</span> six.text_type(exc):</span><br><span class="line">                            logger.debug(<span class="string">'MiddlewareNotUsed(%r): %s'</span>, middleware_path, exc)</span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            logger.debug(<span class="string">'MiddlewareNotUsed: %r'</span>, middleware_path)</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> mw_instance <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                    <span class="keyword">raise</span> ImproperlyConfigured(</span><br><span class="line">                        <span class="string">'Middleware factory %s returned None.'</span> % middleware_path</span><br><span class="line">                    )</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> hasattr(mw_instance, <span class="string">'process_view'</span>):</span><br><span class="line">                    self._view_middleware.insert(<span class="number">0</span>, mw_instance.process_view)</span><br><span class="line">                <span class="keyword">if</span> hasattr(mw_instance, <span class="string">'process_template_response'</span>):</span><br><span class="line">                    self._template_response_middleware.append(mw_instance.process_template_response)</span><br><span class="line">                <span class="keyword">if</span> hasattr(mw_instance, <span class="string">'process_exception'</span>):</span><br><span class="line">                    self._exception_middleware.append(mw_instance.process_exception)</span><br><span class="line"></span><br><span class="line">                handler = convert_exception_to_response(mw_instance)</span><br><span class="line">                <span class="comment"># 装饰到每个中间件前面</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># We only assign to this when initialization is complete as it is used</span></span><br><span class="line">        <span class="comment"># as a flag for initialization being complete.</span></span><br><span class="line">        self._middleware_chain = handler</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">      </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_response</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="comment"># 含有process_request 的逻辑</span></span><br><span class="line">        <span class="string">"""Return an HttpResponse object for the given HttpRequest."""</span></span><br><span class="line">        省略...</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_get_response</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="comment"># process_view 的逻辑</span></span><br><span class="line">        <span class="comment"># views.py 自己定义的业务逻辑</span></span><br><span class="line">        <span class="comment"># process_template_response 的逻辑</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Resolve and call the view, then apply view, exception, and</span></span><br><span class="line"><span class="string">        template_response middleware. This method is everything that happens</span></span><br><span class="line"><span class="string">        inside the request/response middleware.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        省略...</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_exception_by_middleware</span><span class="params">(self, exception, request)</span>:</span></span><br><span class="line">        <span class="comment"># process_exception 的逻辑</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Pass the exception to the exception middleware. If no middleware</span></span><br><span class="line"><span class="string">        return a response for this exception, raise it.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">for</span> middleware_method <span class="keyword">in</span> self._exception_middleware:</span><br><span class="line">            response = middleware_method(request, exception)</span><br><span class="line">            <span class="keyword">if</span> response:</span><br><span class="line">                <span class="keyword">return</span> response</span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_legacy_get_response</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="comment"># 先执行process_request，在执行_get_response包括（process_view, views.py ,process_template_response,process_exception）</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Apply process_request() middleware and call the main _get_response(),</span></span><br><span class="line"><span class="string">        if needed. Used only for legacy MIDDLEWARE_CLASSES.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        response = <span class="literal">None</span></span><br><span class="line">        <span class="comment"># Apply request middleware</span></span><br><span class="line">        <span class="keyword">for</span> middleware_method <span class="keyword">in</span> self._request_middleware:</span><br><span class="line">            response = middleware_method(request)</span><br><span class="line">            <span class="keyword">if</span> response:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> response <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            response = self._get_response(request)</span><br><span class="line">        <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><h3 id="WSGIHandler"><a href="#WSGIHandler" class="headerlink" title="WSGIHandler"></a>WSGIHandler</h3><ul><li>当有 HTTP 请求来时，WSGIHandler 就开始工作了，它从 BaseHandler 继承而来。WSGIHandler 为每个请求创建一个 WSGIRequest 实例，它相对于BaseHandler来说，只添加了一个 <code>__call__</code>方法，这是因为WSGI规范规定application是callable的。（callable包括函数、方法以及定义了 <code>__call__</code> 方法的对象）</li><li>执行BaseHandler中定义的方法。</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># django\core\handlers\wsgi.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WSGIHandler</span><span class="params">(base.BaseHandler)</span>:</span></span><br><span class="line">    request_class = WSGIRequest</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        super(WSGIHandler, self).__init__(*args, **kwargs)</span><br><span class="line">        self.load_middleware()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, environ, start_response)</span>:</span></span><br><span class="line">        set_script_prefix(get_script_name(environ))</span><br><span class="line">        signals.request_started.send(sender=self.__class__, environ=environ)</span><br><span class="line">        request = self.request_class(environ)</span><br><span class="line">        response = self.get_response(request)</span><br><span class="line"></span><br><span class="line">        response._handler_class = self.__class__</span><br><span class="line"></span><br><span class="line">        status = <span class="string">'%d %s'</span> % (response.status_code, response.reason_phrase)</span><br><span class="line">        response_headers = [(str(k), str(v)) <span class="keyword">for</span> k, v <span class="keyword">in</span> response.items()]</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> response.cookies.values():</span><br><span class="line">            response_headers.append((str(<span class="string">'Set-Cookie'</span>), str(c.output(header=<span class="string">''</span>))))</span><br><span class="line">        start_response(force_str(status), response_headers)</span><br><span class="line">        <span class="keyword">if</span> getattr(response, <span class="string">'file_to_stream'</span>, <span class="literal">None</span>) <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> environ.get(<span class="string">'wsgi.file_wrapper'</span>):</span><br><span class="line">            response = environ[<span class="string">'wsgi.file_wrapper'</span>](response.file_to_stream)</span><br><span class="line">        <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><ul><li>我们一共有process_request、process_response、process_view、自定义的CBV或FBV、process_template_response、process_exception 6个过程，当然还有url解析等。</li><li>从调用WSGIHandler开始，初始化的时候执行 <code>load_middleware</code> 将各个中间件通过get_response链接起来。</li><li><code>_middleware_chain</code>是职责链</li><li>执行 <code>WSGIHandler</code> 中的 <code>__call__</code> 方法，其中 <code>get_response</code> 分为两部分一部分是request请求顺序通过中间件依次进行处理（类似递归）：<ul><li>其中在 <code>BaseHandler</code>类中的 <code>_legacy_get_response</code> 方法中：先执行 <code>process_request</code>，正常流程中返回None，然后执行 <code>_get_response</code>方法（它是真正处理request的函数）；在 <code>_get_response</code> 方法中：先执行 <code>process_view</code> ，在执行 <code>自定义的CBV或FBV</code> ，在执行 <code>process_template_response</code> 如果遇到异常就会执行 <code>process_exception</code> 。</li></ul></li><li>另一部分是执行 <code>process_response</code> 方法以及异常处理。</li></ul><p>到此，我们大致明白了这颗洋葱，那么在这些之前还有哪些动作呢?</p><ol><li><p>加载配置</p><ul><li>django 的配置都在 “Project/settings.py” 中定义，可以是 django 的配置，也可以是自定义的配置，并且都通过 django.conf.settings 访问，非常方便。</li></ul></li><li><p>启动</p><ul><li>最核心动作的是通过 django.core.management.commands.runfcgi 的 Command 来启动，它运行 django.core.servers.fastcgi 中的 runfastcgi，runfastcgi 使用了 flup 的 WSGIServer 来启动 fastcgi 。而 WSGIServer 中携带了 django.core.handlers.wsgi 的 WSGIHandler 类的一个实例，通过 WSGIHandler 来处理由 Web 服务器（比如 Apache，Lighttpd 等）传过来的请求，此时才是真正进入 Django 的世界。</li></ul></li></ol><p>推荐阅读 <a href="https://blog.csdn.net/geekleee/article/details/73658549" target="_blank" rel="noopener">Django源码分析之server</a></p><p>推荐阅读 <a href="https://blog.csdn.net/WitsMakeMen/article/details/19609835" target="_blank" rel="noopener">wsgi， flup和Django</a></p><p>推荐阅读 <a href="https://jianpengzhang.github.io/2019/01/16/2019011601/" target="_blank" rel="noopener">Django 源码阅读：服务启动(wsgi)</a></p>]]></content>
      <categories>
        <category>django</category>
      </categories>
      <tags>
        <tag>django</tag>
        <tag>学习笔记</tag>
        <tag>Web前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Django的cookie与session</title>
    <url>/django/20190709-django_8_cookie_session.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>本篇介绍Django的Cookie和Session。</p></blockquote><a id="more"></a><h1 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul><li>Cookie指的是一小段信息，它是保存在浏览器的一组组键值对 key:value 。</li></ul><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>cookie的工作原理是：由服务器产生内容，浏览器收到请求后保存在本地；当浏览器再次访问时，浏览器会自动带上Cookie，这样服务器就能通过Cookie的内容来判断这个是“谁”了。</p><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ol><li><p>服务器让浏览器进行设置，浏览器也有权不设置</p></li><li><p>保存在浏览器本地</p></li><li><p>下次访问时自动携带对应的cookie</p></li></ol><h3 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h3><ul><li>因为<a href="https://zh.wikipedia.org/wiki/HTTP" target="_blank" rel="noopener">HTTP协议</a>是<strong>无状态</strong>的，即<a href="https://zh.wikipedia.org/wiki/服务器" target="_blank" rel="noopener">服务器</a>不知道用户上一次做了什么，这严重阻碍了<a href="https://zh.wikipedia.org/wiki/交互式Web应用程序" target="_blank" rel="noopener">交互式Web应用程序</a>的实现。所以凭借Cookie可以保存状态信息，如是否登录，购物车信息等。</li></ul><h3 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h3><ol><li>Cookie会被附加在每个HTTP请求中，所以无形中增加了流量。</li><li>由于在HTTP请求中的Cookie是明文传递的，所以安全性成问题，除非用HTTPS。</li><li>Cookie的大小限制在4KB左右，对于复杂的存储需求来说是不够用的。</li></ol><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><ol><li>登录</li><li>购物车</li><li>记录网页的浏览习惯</li></ol><h1 id="django中操作cookie"><a href="#django中操作cookie" class="headerlink" title="django中操作cookie"></a>django中操作cookie</h1><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p>cookie是服务器产生的一段随机的字符串，发送给客户端，随后客户端便保存cookie，并使用这个cookie附带进后续的请求</p><ol><li>客户端发起一个请求连接（如HTTP GET）。</li><li>服务器在http响应头上加上<code>Set-Cookie</code>，里面存放字符串的键值对。</li><li>客户端随后的http请求头加上<code>Cookie</code>首部，它包含了之前服务器响应中设置cookie的信息。</li></ol><h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><h3 id="两种设置方式"><a href="#两种设置方式" class="headerlink" title="两种设置方式"></a>两种设置方式</h3><ol><li><p>普通的cookie</p><p>response.set_cookie(k1,v1)</p><p>本质是 <code>ret[&#39;Set-Cookie&#39;] = &#39;is_login=1000; path=/&#39;</code></p></li><li><p>加密的cookie</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ret.set_signed_cookie(<span class="string">'is_login'</span>,<span class="string">'yes'</span>,salt=<span class="string">'super'</span>)</span><br></pre></td></tr></table></figure></li></ol><h3 id="设置cookie的参数："><a href="#设置cookie的参数：" class="headerlink" title="设置cookie的参数："></a>设置cookie的参数：</h3><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>key</td><td>键</td></tr><tr><td>value</td><td>值</td></tr><tr><td>max_age=None</td><td>超时时间， 如5秒后超时，max_age=5</td></tr><tr><td>expires=None</td><td>超时时间(IE requires expires, so set it if hasn’t been already.)</td></tr><tr><td>path=’/home/‘</td><td>Cookie生效的路径，例如：只有访问 home才会带着cookie，其它页面不会带着。 一般情况设置为 ‘/‘</td></tr><tr><td>domain=None</td><td>Cookie生效的域名</td></tr><tr><td>secure=True</td><td>https传输的时候才会携带cookie，http传输不会携带</td></tr><tr><td>httponly=False</td><td>只能http协议传输，无法被JavaScript获取（不是绝对，底层抓包可以获取到也可以被覆盖）</td></tr></tbody></table><h2 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h2><h3 id="普通的"><a href="#普通的" class="headerlink" title="普通的"></a>普通的</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">request.COOKIES.get(<span class="string">'is_login'</span>)</span><br></pre></td></tr></table></figure><h3 id="加密的"><a href="#加密的" class="headerlink" title="加密的"></a>加密的</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">request.get_signed_cookie(<span class="string">'is_login'</span>,default=<span class="string">''</span>,salt=<span class="string">'super'</span>)</span><br></pre></td></tr></table></figure><p>加密只是在原来的基础后面加一段。</p><p>get_signed_cookie方法的参数：</p><ul><li>default: 默认值</li><li>salt: 加密盐</li><li>max_age: 后台控制过期时间</li></ul><h2 id="删除-（注销）"><a href="#删除-（注销）" class="headerlink" title="删除 （注销）"></a>删除 （注销）</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logout</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># 删除is_login</span></span><br><span class="line">    ret = redirect(<span class="string">'/login/'</span>)</span><br><span class="line">    ret.delete_cookie(<span class="string">'is_login'</span>)  <span class="comment"># 删除用户浏览器上之前设置的user的cookie值</span></span><br><span class="line">    <span class="keyword">return</span> ret</span><br></pre></td></tr></table></figure><h2 id="浏览器中分析"><a href="#浏览器中分析" class="headerlink" title="浏览器中分析"></a>浏览器中分析</h2><p>login/：</p><p>Response Headers： Set-Cookie: is_login=yes; Path=/</p><p><img src="/django/20190709-django_8_cookie_session/%E5%9B%9E%E7%9A%84cookie.png" alt="回的cookie"></p><p>home/</p><p>Cookie:</p><p>Request Headers</p><p><img src="/django/20190709-django_8_cookie_session/%E8%AF%B7%E6%B1%82%E6%90%BA%E5%B8%A6%E7%9A%84cookie.png" alt="请求携带的cookie"></p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>实现登录，跳转，注销。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(request)</span>:</span></span><br><span class="line">    error = <span class="string">''</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        user = request.POST.get(<span class="string">'user'</span>)</span><br><span class="line">        pwd = request.POST.get(<span class="string">'password'</span>)</span><br><span class="line">        <span class="keyword">if</span> user == <span class="string">'atlas'</span> <span class="keyword">and</span> pwd == <span class="string">'123'</span>:</span><br><span class="line">            ret = redirect(<span class="string">'/home/'</span>)  <span class="comment"># 这里写死了，应该返回原来所在的位置，后面会改动</span></span><br><span class="line">            <span class="comment"># 校验成功设置登陆状态</span></span><br><span class="line">            <span class="comment"># 设置cookie</span></span><br><span class="line">            ret.set_cookie(<span class="string">'is_login'</span>,<span class="string">'yes'</span>)</span><br><span class="line">            <span class="comment"># ret['Set-Cookie'] = &#123;'is_login':'yes'&#125;</span></span><br><span class="line">            <span class="keyword">return</span> ret</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            error = <span class="string">'用户名或密码错误'</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'login.html'</span>, &#123;<span class="string">'error'</span>: error&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logout</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># 删除is_login</span></span><br><span class="line">    ret = redirect(<span class="string">'/login/'</span>)</span><br><span class="line">    ret.delete_cookie(<span class="string">'is_login'</span>)</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># 读取cookie</span></span><br><span class="line">    print(request.COOKIES)</span><br><span class="line">    is_login = request.COOKIES.get(<span class="string">'is_login'</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> is_login:</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">'/login/'</span>)</span><br><span class="line">    <span class="comment"># 判断是否登录</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'home ok'</span>)</span><br></pre></td></tr></table></figure><h3 id="完善功能"><a href="#完善功能" class="headerlink" title="完善功能"></a>完善功能</h3><ul><li>增加装饰器<ul><li>对于其它页面的cookie验证，使用一个装饰器来进行检测，而不用在每个函数内增加逻辑。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login_required</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(request,*args,**kwargs)</span>:</span></span><br><span class="line">        print(request.COOKIES)</span><br><span class="line">        is_login = request.COOKIES.get(<span class="string">'is_login'</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> is_login:</span><br><span class="line">            <span class="keyword">return</span> redirect(<span class="string">f'/login/?returnurl=<span class="subst">&#123;request.path_info&#125;</span>'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ret = func(request,*args,**kwargs)</span><br><span class="line">            <span class="keyword">return</span> ret</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(request)</span>:</span></span><br><span class="line">    request.clear_expired()</span><br><span class="line">    error = <span class="string">''</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        user = request.POST.get(<span class="string">'user'</span>)</span><br><span class="line">        pwd = request.POST.get(<span class="string">'password'</span>)</span><br><span class="line">        <span class="keyword">if</span> user == <span class="string">'atlas'</span> <span class="keyword">and</span> pwd == <span class="string">'123'</span>:</span><br><span class="line">            <span class="comment"># ret = redirect('/home/')  # 这里写死了，应该返回原来所在的位置</span></span><br><span class="line">            <span class="comment"># 校验成功设置登陆状态          </span></span><br><span class="line">                <span class="comment"># 获取要跳转的地址</span></span><br><span class="line">            returnurl = request.GET.get(<span class="string">'returnurl'</span>)</span><br><span class="line">            <span class="keyword">if</span> returnurl:</span><br><span class="line">                ret = redirect(returnurl)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                ret = redirect(<span class="string">'/home/'</span>)</span><br><span class="line">            <span class="comment"># 设置cookie</span></span><br><span class="line">            ret.set_cookie(<span class="string">'is_login'</span>,<span class="string">'yes'</span>)	<span class="comment"># 本质上是添加Set-Cookie键值对</span></span><br><span class="line">            <span class="comment"># ret['Set-Cookie'] = &#123;'is_login':'yes'&#125;</span></span><br><span class="line">            <span class="keyword">return</span> ret</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            error = <span class="string">'用户名或密码错误'</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'login.html'</span>, &#123;<span class="string">'error'</span>: error&#125;)      <span class="comment"># 只是返回内容</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'home ok'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'index ok'</span>)</span><br></pre></td></tr></table></figure><ul><li>解释：</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 装饰器中</span></span><br><span class="line">redirect(<span class="string">f'/login/?returnurl=<span class="subst">&#123;request.path_info&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># login函数中</span></span><br><span class="line">returnurl = request.GET.get(<span class="string">'returnurl'</span>)</span><br><span class="line"><span class="keyword">if</span> returnurl:</span><br><span class="line">    ret = redirect(returnurl)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        ret = redirect(<span class="string">'/home/'</span>)</span><br></pre></td></tr></table></figure><p>这样改是为了，如果我们从其它页面点击登录，登陆成功后可以回到该页面，如从index到登录，然后再回到index。</p><ul><li>补充：</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>action=&quot;&quot;</code>会携带后面的 <code>?returnurl</code>，但如果form表单中的 action属性中 写了 /login/ 则只会返回到home页面，因为写死了，从index到登录，但回不到index了。</p><ul><li>补充：</li></ul><p>如果从index点击登录，登陆的时候，用户名密码输入错误，登陆失败，那么url后面的参数returnurl还携带吗？</p><p>会的，因为render只是返回一个页面，如果form中没有设置action，登陆成功后依然会跳转到原来的页面（index）</p><h1 id="session"><a href="#session" class="headerlink" title="session"></a>session</h1><p>定义:</p><ul><li>保存在服务器的一组组键值对，但是必须依赖于cookie 。</li></ul><p>为什么要用session</p><ul><li>cookie保存在浏览器上，存在安全问题。</li><li>浏览器对cookie的大小有限制。</li></ul><h1 id="django中操作session"><a href="#django中操作session" class="headerlink" title="django中操作session"></a>django中操作session</h1><h2 id="流程-1"><a href="#流程-1" class="headerlink" title="流程"></a>流程</h2><p><img src="/django/20190709-django_8_cookie_session/session%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B.png" alt="session处理流程"></p><p>session是一个QueryDict（类字典，多了getlist方法）</p><h2 id="设置-1"><a href="#设置-1" class="headerlink" title="设置"></a>设置</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">request.session[<span class="string">'is_login'</span>] = <span class="string">'1000'</span></span><br></pre></td></tr></table></figure><p>session默认保存到数据库中。</p><p>设置后需要执行 migrate命令，在数据库中建表。</p><h2 id="获取-1"><a href="#获取-1" class="headerlink" title="获取"></a>获取</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">is_login = request.session.get(<span class="string">'is_login'</span>)</span><br></pre></td></tr></table></figure><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><ul><li><p>del request.session[key]</p></li><li><p>request.session.pop(‘key’)</p></li><li><p><code>request.session.delete()</code> 删除数据库中的session数据，不删除cookie，但是登陆后也会重新设置cookie。</p></li><li><p><code>request.session.flush()</code> 删除数据库中的session数据，删除cookie</p></li></ul><h2 id="其它操作"><a href="#其它操作" class="headerlink" title="其它操作"></a>其它操作</h2><p>将所有Session失效日期小于当前日期的数据删除</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">request.session.clear_expired()</span><br></pre></td></tr></table></figure><p>设置会话Session和Cookie的超时时间</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">request.session.set_expiry(value)</span><br></pre></td></tr></table></figure><ul><li>0 浏览器关闭的时候结束</li><li>可以设置datetime</li><li>可以设置多少秒</li><li>None 不超时</li></ul><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="session设置"><a href="#session设置" class="headerlink" title="session设置"></a>session设置</h3><p>from django.conf import global_settings</p><p>去这里找session配置</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Cache to store session data if using the cache session backend.</span></span><br><span class="line">SESSION_CACHE_ALIAS = <span class="string">'default'</span></span><br><span class="line"><span class="comment"># Cookie name. This can be whatever you want.</span></span><br><span class="line">SESSION_COOKIE_NAME = <span class="string">'sessionid'</span>	<span class="comment"># cookie的名字</span></span><br><span class="line"><span class="comment"># Age of cookie, in seconds (default: 2 weeks).</span></span><br><span class="line">SESSION_COOKIE_AGE = <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">7</span> * <span class="number">2</span>		<span class="comment"># 超时时间</span></span><br><span class="line"><span class="comment"># A string like ".example.com", or None for standard domain cookie.</span></span><br><span class="line">SESSION_COOKIE_DOMAIN = <span class="literal">None</span></span><br><span class="line"><span class="comment"># Whether the session cookie should be secure (https:// only).</span></span><br><span class="line">SESSION_COOKIE_SECURE = <span class="literal">False</span></span><br><span class="line"><span class="comment"># The path of the session cookie.</span></span><br><span class="line">SESSION_COOKIE_PATH = <span class="string">'/'</span></span><br><span class="line"><span class="comment"># Whether to use the non-RFC standard httpOnly flag (IE, FF3+, others)</span></span><br><span class="line">SESSION_COOKIE_HTTPONLY = <span class="literal">True</span></span><br><span class="line"><span class="comment"># Whether to save the session data on every request.</span></span><br><span class="line">SESSION_SAVE_EVERY_REQUEST = <span class="literal">False</span>	<span class="comment"># 每次访问都保存session数据（更新超时时间）</span></span><br><span class="line"><span class="comment"># Whether a user's session cookie expires when the Web browser is closed.</span></span><br><span class="line">SESSION_EXPIRE_AT_BROWSER_CLOSE = <span class="literal">False</span>	<span class="comment"># 浏览器关闭就会失效（箱子还在钥匙没了）（数据库中还有记录）</span></span><br><span class="line"><span class="comment"># The module to store session data</span></span><br><span class="line">SESSION_ENGINE = <span class="string">'django.contrib.sessions.backends.db'</span></span><br><span class="line"><span class="comment"># Directory to store session files if using the file session module. If None,</span></span><br><span class="line"><span class="comment"># the backend will use a sensible default.</span></span><br><span class="line">SESSION_FILE_PATH = <span class="literal">None</span></span><br><span class="line"><span class="comment"># class to serialize session data</span></span><br><span class="line">SESSION_SERIALIZER = <span class="string">'django.contrib.sessions.serializers.JSONSerializer'</span>  <span class="comment"># session_data 先json序列化再加密</span></span><br></pre></td></tr></table></figure><p>session_key是根据<strong>浏览器</strong>来设置的，如果在登录的基础上再登录，session_key是不会变的；换一个浏览器，会再表中增加一条新的记录，新的session_key。</p><h3 id="其他类型的session"><a href="#其他类型的session" class="headerlink" title="其他类型的session"></a>其他类型的session</h3><p>settings.py 中 ‘django.contrib.sessions’, 按着ctril + 鼠标左键，就可以到达。在sessions文件夹的backends中。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 数据库Session</span><br><span class="line">SESSION_ENGINE = <span class="string">'django.contrib.sessions.backends.db'</span>   <span class="comment"># 引擎（默认）</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 缓存Session</span><br><span class="line">SESSION_ENGINE = <span class="string">'django.contrib.sessions.backends.cache'</span>  <span class="comment"># 引擎</span></span><br><span class="line">SESSION_CACHE_ALIAS = <span class="string">'default'</span>                            <span class="comment"># 使用的缓存别名（默认内存缓存，也可以是memcache），此处别名依赖缓存的设置</span></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 文件Session</span><br><span class="line">SESSION_ENGINE = <span class="string">'django.contrib.sessions.backends.file'</span>    <span class="comment"># 引擎</span></span><br><span class="line">SESSION_FILE_PATH = <span class="literal">None</span>                                    <span class="comment"># 缓存文件路径，如果为None，则使用tempfile模块获取一个临时地址tempfile.gettempdir() </span></span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> 缓存+数据库</span><br><span class="line">SESSION_ENGINE = <span class="string">'django.contrib.sessions.backends.cached_db'</span>        <span class="comment"># 引擎</span></span><br><span class="line"></span><br><span class="line"><span class="number">5.</span> 加密Cookie Session</span><br><span class="line">SESSION_ENGINE = <span class="string">'django.contrib.sessions.backends.signed_cookies'</span>   <span class="comment"># 引擎</span></span><br></pre></td></tr></table></figure><p>所以Django的cookie与session归功于settings</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">apps</span><br><span class="line"><span class="string">'django.contrib.sessions'</span>,</span><br><span class="line"></span><br><span class="line">中间件</span><br><span class="line"><span class="string">'django.contrib.sessions.middleware.SessionMiddleware'</span>,</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>django</category>
      </categories>
      <tags>
        <tag>django</tag>
        <tag>学习笔记</tag>
        <tag>Web前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Django的ORM</title>
    <url>/django/20190707-django_7_orm.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>本篇介绍Django的ORM。</p></blockquote><a id="more"></a><p>通过这篇文章，你能了解到：</p><ul><li>ORM是什么以及它的优缺点</li><li>ORM语句的使用</li></ul><h1 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h1><h2 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h2><ul><li><p>对象关系映射（Object Relational Mapping，简称ORM）模式是一种为了解决面向对象与关系数据库存在的互不匹配的现象的技术。</p></li><li><p>Django的orm操作本质上会根据对接的数据库引擎，翻译成对应的sql语句；所有使用Django开发的项目无需关心程序底层使用的是MySQL、Oracle、sqlite….，如果数据库迁移，只需要更换Django的数据库引擎即可。</p></li></ul><p><img src="/django/20190707-django_7_orm/ORM.png" alt="ORM"></p><h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><p>使用 ORM 最大的优点就是快速开发，让我们将更多的精力放在业务上而不是数据库上，下面是 ORM 的几个优点</p><ul><li>隐藏了数据访问细节，使通用数据库交互变得简单易行。同时 ORM 避免了不规范、冗余、风格不统一的 SQL 语句，可以避免很多人为的 bug，方便编码风格的统一和后期维护。</li><li>ORM提供了对数据库的映射，不用直接编写SQL代码，只需操作对象就能对数据库操作数据。</li><li>方便数据库的迁移。当需要迁移到新的数据库时，不需要修改对象模型，只需要修改数据库的配置。</li></ul><h2 id="劣势"><a href="#劣势" class="headerlink" title="劣势"></a>劣势</h2><p>ORM 的最令人诟病的地方就是<strong>性能</strong>问题，不过现在已经提高了很多，下面是 ORM 的几个缺点</p><ul><li>性能问题<ul><li>自动化进行数据库关系的映射需要消耗系统资源</li><li>程序员编码</li><li>在处理多表联查、where 条件复杂的查询时，ORM 可能会生成的效率低下的 SQL</li><li>通过 Lazy load 和 Cache 很大程度上改善了性能问题</li></ul></li><li>SQL 调优，SQL 语句是由 ORM 框架自动生成，虽然减少了 SQL 语句错误的发生，但是也给 SQL 调优带来了困难。</li><li>越是功能强大的 ORM 越消耗内存，因为一个 ORM Object 会带有很多成员变量和成员函数。</li><li>对象和关系之间并不是完美映射</li></ul><p>一般来说 ORM 足以满足我们的需求，如果对性能要求特别高或者查询十分复杂，可以考虑使用原生 SQL 和 ORM 共用的方式</p><h2 id="Django的ORM"><a href="#Django的ORM" class="headerlink" title="Django的ORM"></a>Django的ORM</h2><ul><li><p>Django ORM用到三个类：<code>Manager</code>、<code>QuerySet</code>、<code>Model</code>。</p></li><li><p>Manager定义表级方法（表级方法就是影响一条或多条记录的方法），我们可以以<code>models.Manager</code> 为父类，定义自己的manager，增加表级方法；</p></li><li><p>QuerySet：Manager类的一些方法会返回QuerySet实例，QuerySet是一个可遍历结构，包含一个或多个元素，每个元素都是一个Model 实例，它里面的方法也是表级方法，前面说了，Django给我们提供了增加表级方法的途径，那就是自定义manager类，而不是自定义QuerySet类，一般的我们没有自定义QuerySet类的必要；</p></li><li><p>Manager类的绝大部分方法是基于Queryset的。一个QuerySet包含一个或多个model instance。QuerySet类似于Python中的list，list的一些方法QuerySet也有，比如切片，遍历。</p></li><li><p>django.db.models模块中的Model类，我们定义表的model时，就是继承它，它的功能很强大，通过自定义model的instance可以获取外键实体等，它的方法都是记录级方法（都是实例方法，貌似无类方法），不要在里面定义类方法，比如计算记录的总数，查看所有记录，这些应该放在自定义的manager类中。</p></li></ul><h2 id="测试方式"><a href="#测试方式" class="headerlink" title="测试方式"></a>测试方式</h2><p>以前，我们不能直接运行一个py文件，因为会有环境约束，那我们还想在这个环境下，直接一段代码该怎么办？</p><h3 id="console控制台"><a href="#console控制台" class="headerlink" title="console控制台"></a>console控制台</h3><p>在django项目中，点击Python Console，就可以使用Django环境。</p><ul><li>优点：无需额外创建py文件</li><li>缺点：结果无法保存</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Python <span class="number">3.6</span><span class="number">.5</span> (v3<span class="number">.6</span><span class="number">.5</span>:f59c0932b4, Mar <span class="number">28</span> <span class="number">2018</span>, <span class="number">17</span>:<span class="number">00</span>:<span class="number">18</span>) [MSC v<span class="number">.1900</span> <span class="number">64</span> bit (AMD64)] on win32</span><br><span class="line">Django <span class="number">1.11</span><span class="number">.23</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> app01 <span class="keyword">import</span> models</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>models.Publisher.objects.all()</span><br></pre></td></tr></table></figure><h3 id="自定义py文件"><a href="#自定义py文件" class="headerlink" title="自定义py文件"></a>自定义py文件</h3><p>在django项目下自定义一个py文件，写入如下内容，就可以在django环境下使用。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.environ.setdefault(<span class="string">"DJANGO_SETTINGS_MODULE"</span>, <span class="string">"about_orm.settings"</span>)</span><br><span class="line"><span class="keyword">import</span> django</span><br><span class="line">django.setup()</span><br></pre></td></tr></table></figure><h3 id="admin管理后台"><a href="#admin管理后台" class="headerlink" title="admin管理后台"></a>admin管理后台</h3><p>可以使用的原因：</p><ul><li>url中有，而且在apps中也注册了</li></ul><p>对表进行增删查改</p><ol><li><p>创建超级用户</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">python manage<span class="selector-class">.py</span> createsuperuser</span><br></pre></td></tr></table></figure><ul><li>然后，输入用户名密码</li></ul></li><li><p>注册</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># app下的admin.py</span></span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line">admin.site.register(models.Person)</span><br><span class="line"><span class="comment"># 注册了多个model，当编辑这个model是需要其它model（外键，多对多），但其它model内容为空就可以从当前页面打开创建其它model。</span></span><br></pre></td></tr></table></figure></li><li><p>登录</p><ul><li>127.0.0.1:8000/admin</li></ul></li><li><p>对于ManyToManyField字段 ，想避过admin校验（必填），可以加 <code>blank = True</code></p></li></ol><p>定制额外的功能</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> rbac <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Register your models here.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PermissionAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    list_display = [<span class="string">'title'</span>, <span class="string">'url'</span>, <span class="string">'is_menu'</span>, <span class="string">'icon'</span>]</span><br><span class="line">    list_editable = [<span class="string">'title'</span>, <span class="string">'url'</span>, <span class="string">'is_menu'</span>, <span class="string">'icon'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">admin.site.register(models.Role)</span><br><span class="line">admin.site.register(models.Permission, PermissionAdmin)</span><br><span class="line">admin.site.register(models.User)</span><br><span class="line"></span><br><span class="line">但是这样运行的时候出现了如下错误：</span><br><span class="line">ERRORS:</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">rbac</span>.<span class="title">admin</span>.<span class="title">PermissionAdmin</span>'&gt;:</span> (admin.E124) The value of <span class="string">'list_editable[0]'</span> refers to the first field <span class="keyword">in</span> <span class="string">'list_display'</span> (<span class="string">'title'</span>), which cannot be used unless <span class="string">'list_display_links'</span> <span class="keyword">is</span> set.</span><br><span class="line">解决方法如下：</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PermissionAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    list_display = [<span class="string">'title'</span>, <span class="string">'url'</span>, <span class="string">'is_menu'</span>, <span class="string">'icon'</span>]</span><br><span class="line">    <span class="comment"># list_editable = ['title','url', 'is_menu', 'icon', ]</span></span><br><span class="line">    list_editable = list_display</span><br><span class="line">    list_display_links = <span class="literal">None</span></span><br><span class="line">设置 list_display_links 就好</span><br></pre></td></tr></table></figure><h3 id="打印sql语句"><a href="#打印sql语句" class="headerlink" title="打印sql语句"></a>打印sql语句</h3><p>在settings.py中，添加如下配置，即可在使用orm查询数据库的时候，输出对应的sql语句。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">LOGGING = &#123;</span><br><span class="line">    <span class="string">'version'</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">'disable_existing_loggers'</span>: <span class="literal">False</span>,</span><br><span class="line">    <span class="string">'handlers'</span>: &#123;</span><br><span class="line">        <span class="string">'console'</span>:&#123;</span><br><span class="line">            <span class="string">'level'</span>:<span class="string">'DEBUG'</span>,</span><br><span class="line">            <span class="string">'class'</span>:<span class="string">'logging.StreamHandler'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'loggers'</span>: &#123;</span><br><span class="line">        <span class="string">'django.db.backends'</span>: &#123;</span><br><span class="line">            <span class="string">'handlers'</span>: [<span class="string">'console'</span>],</span><br><span class="line">            <span class="string">'propagate'</span>: <span class="literal">True</span>,</span><br><span class="line">            <span class="string">'level'</span>:<span class="string">'DEBUG'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="字段"><a href="#字段" class="headerlink" title="字段"></a>字段</h1><h2 id="常用字段"><a href="#常用字段" class="headerlink" title="常用字段"></a>常用字段</h2><h3 id="数值"><a href="#数值" class="headerlink" title="数值"></a>数值</h3><p><u><strong>AutoField</strong></u>(Field)</p><ul><li><p>int自增列，必须填入参数 primary_key=True</p></li><li><p>一个model不能有两个AutoField</p></li></ul><p>BigAutoField(AutoField)</p><ul><li>bigint自增列，必须填入参数 primary_key=True</li></ul><p>note：当model中如果没有自增列，则自动会创建一个列名为id的列</p><p>SmallIntegerField(IntegerField):</p><ul><li>小整数 -32768 ～ 32767</li></ul><p>PositiveSmallIntegerField(PositiveIntegerRelDbTypeMixin, IntegerField)</p><ul><li>正小整数 0 ～ 32767</li></ul><p><strong><u>IntegerField</u></strong>(Field)</p><ul><li>整数列(有符号的) -2147483648 ～ 2147483647</li><li>不要用它来存手机号（char）</li></ul><p>PositiveIntegerField(PositiveIntegerRelDbTypeMixin, IntegerField)</p><ul><li>正整数 0 ～ 2147483647</li></ul><p>BigIntegerField(IntegerField):</p><pre><code>- 长整型(有符号的) -9223372036854775808 ～ 9223372036854775807</code></pre><p>FloatField(Field)</p><ul><li>浮点型</li></ul><p><u><strong>DecimalField</strong></u>(Field)</p><ul><li>10进制小数</li><li>参数：<br>max_digits，小数总长度<br>decimal_places，小数位长度</li></ul><p>BinaryField(Field)</p><ul><li>二进制类型</li></ul><h3 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h3><p><strong><u>BooleanField</u></strong>(Field)</p><ul><li>布尔值类型</li></ul><p>NullBooleanField(Field):</p><ul><li>可以为空的布尔值</li></ul><h3 id="字符"><a href="#字符" class="headerlink" title="字符"></a>字符</h3><p><strong><u>CharField</u></strong>(Field)</p><pre><code>- 字符类型
- 必须提供max_length参数， max_length表示字符长度</code></pre><p>TextField(Field)</p><ul><li>文本类型</li></ul><h3 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h3><p><strong><u>DateTimeField</u></strong>(DateField)</p><ul><li>日期+时间格式 <code>YYYY-MM-DD HH:MM[:ss[.uuuuuu]][TZ]</code></li><li>auto_now_add=True 只保存新增的那个时间</li><li>auto_now 保存新增和修改的时间</li></ul><p><u><strong>DateField</strong></u>(DateTimeCheckMixin, Field)</p><ul><li>日期格式 YYYY-MM-DD，相当于Python中的datetime.date的实例。</li><li>auto_now：每次修改时修改为当前日期时间。</li><li>auto_now_add：新创建对象时自动添加当前日期时间。</li></ul><p>note：<code>auto_now</code> 、<code>auto_now_add</code> 、<code>default</code> 是互斥的</p><p>TimeField(DateTimeCheckMixin, Field)</p><ul><li>时间格式 HH:MM[:ss[.uuuuuu]]</li></ul><p>DurationField(Field)</p><ul><li>长整数，时间间隔，数据库中按照bigint存储，ORM中获取的值为datetime.timedelta类型</li></ul><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>EmailField(CharField)：</p><ul><li>字符串类型，Django Admin以及ModelForm中提供验证机制</li></ul><p>IPAddressField(Field)</p><ul><li>字符串类型，Django Admin以及ModelForm中提供验证 IPV4 机制</li></ul><p>GenericIPAddressField(Field)</p><ul><li>字符串类型，Django Admin以及ModelForm中提供验证 Ipv4和Ipv6</li><li>参数：<br>protocol，用于指定Ipv4或Ipv6， ‘both’,”ipv4”,”ipv6”<br>unpack_ipv4， 如果指定为True，则输入::ffff:192.0.2.1时候，可解析为192.0.2.1，开启此功能，需要protocol=”both”</li></ul><p>URLField(CharField)</p><ul><li>字符串类型，Django Admin以及ModelForm中提供验证 URL</li></ul><p>SlugField(CharField)</p><ul><li>字符串类型，Django Admin以及ModelForm中提供验证支持 字母、数字、下划线、连接符（减号）</li></ul><p>CommaSeparatedIntegerField(CharField)</p><ul><li>字符串类型，格式必须为逗号分割的数字</li></ul><p>UUIDField(Field)</p><ul><li>字符串类型，Django Admin以及ModelForm中提供对UUID格式的验证</li></ul><p>FilePathField(Field)</p><ul><li>字符串，Django Admin以及ModelForm中提供读取文件夹下文件的功能</li><li>参数：<br>path, 文件夹路径<br>match=None, 正则匹配<br>recursive=False, 递归下面的文件夹<br>allow_files=True, 允许文件<br>allow_folders=False, 允许文件夹</li></ul><p>FileField(Field)</p><ul><li>字符串，路径保存在数据库，文件上传到指定目录</li><li>参数：<br>upload_to = “” 上传文件的保存路径<br>storage = None 存储组件，默认django.core.files.storage.FileSystemStorage</li></ul><p>ImageField(FileField)</p><ul><li>字符串，路径保存在数据库，文件上传到指定目录</li><li>参数：<br>upload_to = “” 上传文件的保存路径<br>storage = None 存储组件，默认django.core.files.storage.FileSystemStorage<br>width_field=None, 上传图片的高度保存的数据库字段名（字符串）<br>height_field=None 上传图片的宽度保存的数据库字段名（字符串）</li></ul><p>推荐阅读: <a href="https://docs.djangoproject.com/en/1.11/ref/models/fields/#field-types" target="_blank" rel="noopener">field-types</a></p><h2 id="自定义字段"><a href="#自定义字段" class="headerlink" title="自定义字段"></a>自定义字段</h2><p>例子：自定义char类型</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCharField</span><span class="params">(models.Field)</span>:</span></span><br><span class="line">    <span class="string">'''自定义char类型的字段'''</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,max_length, *args, **kwargs)</span>:</span></span><br><span class="line">        self.max_length = max_length</span><br><span class="line">        super().__init__(max_length=max_length, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">db_type</span><span class="params">(self, connection)</span>:</span></span><br><span class="line">        <span class="string">'''限定生成数据库表的字段类型为char，长度为max_length指定的值'''</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f'char(<span class="subst">&#123;self.max_length&#125;</span>)'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="comment"># 使用自定义char类型字段</span></span><br><span class="line">    phone = MyCharField(max_length=<span class="number">11</span>)</span><br></pre></td></tr></table></figure><h1 id="字段参数"><a href="#字段参数" class="headerlink" title="字段参数"></a>字段参数</h1><h2 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h2><p><strong>null</strong></p><ul><li>该字段可以为空</li></ul><p><strong>blank</strong></p><ul><li>设置字段后，使用admin管理的表中该字段可以不填</li><li>校验时可以为空（使用admin管理的表中可以不填）</li></ul><p>default</p><ul><li>数据库中字段的默认值</li></ul><p><strong>primary_key</strong></p><ul><li>数据库中字段是否为主键</li></ul><p>db_index</p><ul><li>数据库中字段是否可以建立索引</li></ul><p>unique</p><ul><li>数据库中字段是否可以建立唯一索引</li></ul><p>unique_for_date</p><ul><li>数据库中字段【日期】部分是否可以建立唯一索引</li></ul><p>unique_for_month</p><ul><li>数据库中字段【月】部分是否可以建立唯一索引</li></ul><p>unique_for_year</p><ul><li>数据库中字段【年】部分是否可以建立唯一索引</li></ul><h2 id="model-form-系列"><a href="#model-form-系列" class="headerlink" title="model form 系列"></a>model form 系列</h2><p>verbose_name</p><ul><li>Admin中显示的字段名称</li></ul><p>blank</p><ul><li>Admin中是否允许用户输入为空</li></ul><p>editable</p><ul><li>Admin中是否可以编辑</li></ul><p>help_text</p><ul><li>Admin中该字段的提示信息</li></ul><p><strong><u>choices</u></strong></p><ul><li><p>Admin中显示选择框的内容，用不变动的数据放在内存中从而避免跨表操作</p></li><li><p>例子：</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 元组中，左边是真实存放的值，右边是显示的值</span></span><br><span class="line">gender = models.IntegerField(choices=[(<span class="number">0</span>, <span class="string">'男'</span>), (<span class="number">1</span>, <span class="string">'女'</span>)])</span><br></pre></td></tr></table></figure><p>对于choices字段：</p><p><code>对象.get_字段名_display()</code> 来显示对应的值，而不是数据库中的值</p><p>error_messages</p><ul><li>自定义错误信息（字典类型），从而定制想要显示的错误信息；</li><li>字典健：null, blank, invalid, invalid_choice, unique, and unique_for_date</li><li>如：{‘null’: “不能为空.”, ‘invalid’: ‘格式错误’}</li></ul><p>validators</p><ul><li>自定义错误验证（列表类型），从而定制想要的验证规则</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.core.validators <span class="keyword">import</span> RegexValidator</span><br><span class="line"><span class="keyword">from</span> django.core.validators <span class="keyword">import</span> EmailValidator, URLValidator, DecimalValidator, MaxLengthValidator, MinLengthValidator, MaxValueValidator, MinValueValidator</span><br><span class="line">    <span class="comment"># 如：</span></span><br><span class="line">test = models.CharField(</span><br><span class="line">    max_length=<span class="number">32</span>,</span><br><span class="line">    error_messages=&#123;</span><br><span class="line">        <span class="string">'c1'</span>: <span class="string">'优先错信息1'</span>,</span><br><span class="line">        <span class="string">'c2'</span>: <span class="string">'优先错信息2'</span>,</span><br><span class="line">        <span class="string">'c3'</span>: <span class="string">'优先错信息3'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    validators=[</span><br><span class="line">        RegexValidator(regex=<span class="string">'root_\d+'</span>, message=<span class="string">'错误了'</span>, code=<span class="string">'c1'</span>),</span><br><span class="line">        RegexValidator(regex=<span class="string">'root_112233\d+'</span>, message=<span class="string">'又错误了'</span>, code=<span class="string">'c2'</span>),</span><br><span class="line">        EmailValidator(message=<span class="string">'又错误了'</span>, code=<span class="string">'c3'</span>), ]</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p>推荐阅读 <a href="https://docs.djangoproject.com/en/1.11/ref/models/fields/#field-options" target="_blank" rel="noopener">field-options</a></p><h2 id="Model-Meta参数"><a href="#Model-Meta参数" class="headerlink" title="Model Meta参数"></a>Model Meta参数</h2><p>推荐阅读 <a href="https://docs.djangoproject.com/en/1.11/ref/models/options/#model-meta-options" target="_blank" rel="noopener">model meta options</a></p><ul><li><p>改变Admin中显示的内容：</p></li><li><p>改表名，显示名称</p></li><li><p>联合索引</p></li><li><p>联合唯一索引</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    pid = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)  <span class="comment"># 旧版本按字节  varchar(32)</span></span><br><span class="line">    age = models.IntegerField(null=<span class="literal">True</span>, blank=<span class="literal">True</span>)</span><br><span class="line">    birth = models.DateTimeField(auto_now=<span class="literal">True</span>, null=<span class="literal">True</span>)</span><br><span class="line">    gender = models.IntegerField(choices=[(<span class="number">0</span>, <span class="string">'男'</span>), (<span class="number">1</span>, <span class="string">'女'</span>)])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        <span class="comment"># 数据库中生成的表名称 默认 app名称 + 下划线 + 类名</span></span><br><span class="line">        db_table = <span class="string">"app01_person"</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># admin中显示的表名称</span></span><br><span class="line">        verbose_name = <span class="string">'个人信息'</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># verbose_name加s</span></span><br><span class="line">        verbose_name_plural = <span class="string">'所有用户信息'</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 联合索引</span></span><br><span class="line">        index_together = [</span><br><span class="line">            (<span class="string">"name"</span>, <span class="string">"age"</span>),  <span class="comment"># 应为两个存在的字段</span></span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 联合唯一索引</span></span><br><span class="line">        unique_together = ((<span class="string">"name"</span>, <span class="string">"phone"</span>),)  <span class="comment"># 应为两个存在的字段</span></span><br></pre></td></tr></table></figure><p>当我们在settings.py 设置</p><p>LANGUAGE_CODE= ‘zh-Hans’</p><p>Admin 内的内容就翻译成中文了</p><h1 id="Manager"><a href="#Manager" class="headerlink" title="Manager"></a>Manager</h1><ul><li>在创建完 Model 对象之后，Django 会自动为其关联一个 <strong>Manager 对象</strong>，该对象是 Model <strong>进行数据库操作的接口</strong>。默认的 Manager 对象名称为 objects。</li><li>表级</li><li>Manager 对象也可以自定义。</li></ul><h2 id="更改Manager对象的名称"><a href="#更改Manager对象的名称" class="headerlink" title="更改Manager对象的名称"></a>更改Manager对象的名称</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># models.py</span></span><br><span class="line"><span class="comment"># 更改Manager对象的名称</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    people = models.Manager()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 自定义的py文件中</span></span><br><span class="line">ret = models.Person.people.all()</span><br><span class="line">print(ret)</span><br></pre></td></tr></table></figure><h2 id="自定义Manager对象"><a href="#自定义Manager对象" class="headerlink" title="自定义Manager对象"></a>自定义Manager对象</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># models.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewManager</span><span class="params">(models.Manager)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(self, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">from</span> django.db <span class="keyword">import</span> connection</span><br><span class="line">        cursor = connection.cursor()</span><br><span class="line">        condition = <span class="string">''</span></span><br><span class="line">        <span class="keyword">if</span> kwargs.get(<span class="string">'pid'</span>, <span class="literal">None</span>):</span><br><span class="line">            condition = <span class="string">f"a.pid = <span class="subst">&#123;kwargs[<span class="string">'pid'</span>]&#125;</span> and"</span></span><br><span class="line">        query = <span class="string">f'''</span></span><br><span class="line"><span class="string">                    SELECT a.name,a.age </span></span><br><span class="line"><span class="string">                    FROM app01_person a WHERE <span class="subst">&#123;condition&#125;</span> TRUE</span></span><br><span class="line"><span class="string">                    GROUP BY a.pid</span></span><br><span class="line"><span class="string">                '''</span></span><br><span class="line">        <span class="comment"># print(query)</span></span><br><span class="line">        cursor.execute(query)</span><br><span class="line">        result_list = cursor.fetchall()</span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">for</span> i,j <span class="keyword">in</span> result_list:</span><br><span class="line">            res.append(<span class="string">f"<span class="subst">&#123;i&#125;</span>今年<span class="subst">&#123;j&#125;</span>岁"</span>)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="comment"># people = models.Manager()</span></span><br><span class="line">    people = NewManager()   <span class="comment"># 实例化自定义Manager对象</span></span><br><span class="line">    pid = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)  <span class="comment"># 旧版本按字节  varchar(32)</span></span><br><span class="line">    age = models.IntegerField(null=<span class="literal">True</span>, blank=<span class="literal">True</span>)</span><br><span class="line">    birth = models.DateTimeField(auto_now=<span class="literal">True</span>, null=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f'<span class="subst">&#123;self.pk&#125;</span> <span class="subst">&#123;self.name&#125;</span>'</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 自定义的py文件中</span></span><br><span class="line">ret = models.Person.people.func()</span><br><span class="line">ret = models.Person.people.func(pid=<span class="number">1</span>)</span><br><span class="line">print(ret)</span><br></pre></td></tr></table></figure><h1 id="QuerySet"><a href="#QuerySet" class="headerlink" title="QuerySet"></a>QuerySet</h1><ul><li>从数据库中查询出来的结果一般是一个集合，这个集合称为 QuerySet。</li><li>QuerySet 有两种来源：通过 Manager 的方法获取、通过 QuerySet 自身的方法获得。</li><li>字段级</li><li>Manager 的查询方法和 QuerySet 的方法大部分同名、同意（Manager的就是基于 QuerySet 的实现的，所有两者会有相同的部分），例如 相同的有：filter, exclude等，但两者也有不同的方法，例如 Manager 的 create、get_or_create，QuerySet 的 delete 等。</li></ul><h2 id="限制QuerySet"><a href="#限制QuerySet" class="headerlink" title="限制QuerySet"></a>限制QuerySet</h2><p>在MySQL查询时，我们往往可以限制显示的数量， <code>LIMIT</code>，那再ORM中是如何表达呢? 切片！！！</p><p>对于QuerySet，我们可以时候python中的索引，切片，来限制输出，一个场景就是用于分页。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示前3个元素</span></span><br><span class="line">ret = models.Person.objects.all()[:<span class="number">3</span>]</span><br><span class="line">print(ret)</span><br></pre></td></tr></table></figure><ul><li>看到这里可能会有一个疑惑，这有些low吧。查了所有，然后只显示前3个，其实并不是这样的，因为有Lazy load机制。</li></ul><h2 id="Lazy-load"><a href="#Lazy-load" class="headerlink" title="Lazy load"></a>Lazy load</h2><p>QuerySet 是惰性加载的，创建查询集不会访问数据库，只有查询集需要<strong>求值</strong>时，才会真正运行这个查询。</p><p>在下面的例子中只有执行 <code>print ret</code> 才会真正的去查询数据库。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ret = models.Person.objects.all()</span><br><span class="line">print(ret)</span><br></pre></td></tr></table></figure><p>关联对象也是惰性加载，只有用到了关联对象的值才会访问数据库</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ret = models.Person.objects.get(pk=<span class="number">1</span>)</span><br><span class="line">print(ret)</span><br></pre></td></tr></table></figure><p>真正访问数据库的几种情况：</p><ul><li>迭代：在首次迭代查询集时会执行数据库查询</li><li>切片(限制查询集)：对查询集执行切片操作时或指定 step 参数</li><li>序列化／缓存</li><li>repr：对查询集调用 repr 函数</li><li>len：对查询集调用 len 函数</li><li>list: 对查询集调用 list() 方法强制求值</li><li>bool:测试一个查询集的布尔值，例如使用bool(), or, and 或者 if 语句都将导致查询集的求值</li></ul><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><p>每个 QuerySet 都包含一个缓存来最小化对数据库的访问</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 访问两次数据库</span></span><br><span class="line">print([obj.name <span class="keyword">for</span> obj <span class="keyword">in</span> models.Person.objects.all()])</span><br><span class="line">print([obj.age <span class="keyword">for</span> obj <span class="keyword">in</span> models.Person.objects.all()])</span><br><span class="line"><span class="comment"># 访问一次数据库</span></span><br><span class="line">ret = models.Person.objects.all()</span><br><span class="line">print([obj.name <span class="keyword">for</span> obj <span class="keyword">in</span> ret])</span><br><span class="line">print([obj.age <span class="keyword">for</span> obj <span class="keyword">in</span> ret])</span><br></pre></td></tr></table></figure><ul><li><p>在一个新的 QuerySet 中，缓存为空。当首次对 QuerySet 的所有实例进行求值时（代码中是print），会将查询结果保存到 QuerySet 的缓冲中。</p></li><li><p>当再访问该 QuerySet 时，会直接从缓冲中取数据。</p></li></ul><h1 id="必知必会13条（查询）"><a href="#必知必会13条（查询）" class="headerlink" title="必知必会13条（查询）"></a>必知必会13条（查询）</h1><h2 id="返回QuerySet"><a href="#返回QuerySet" class="headerlink" title="返回QuerySet"></a>返回<code>QuerySet</code></h2><p><strong>8 个</strong></p><ul><li>all</li><li>filter</li><li>exclude</li><li>values</li><li>values_list</li><li>order_by</li><li>reverse</li><li>distinct</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1. all 获取所有数据，返回QuerySet（对象列表）</span></span><br><span class="line">ret = models.Person.objects.all()</span><br><span class="line"></span><br><span class="line"><span class="comment">#2. filter 获取所有满足条件的数据，返回QuerySet（对象列表）</span></span><br><span class="line">ret = models.Person.objects.filter(pk=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#3. exclude 获取所有不满足条件的数据，返回QuerySet（对象列表）</span></span><br><span class="line">ret = models.Person.objects.exclude(pk=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#4. orderby  按照字段进行排序，返回QuerySet。默认升序，加 - 表示降序</span></span><br><span class="line">ret = models.Person.objects.all().order_by(<span class="string">'-pid'</span>)</span><br><span class="line"><span class="comment"># 还可以按多个字段进行排序，前面的字段相同则按照后面的字段排序</span></span><br><span class="line">ret = models.Person.objects.all().order_by(<span class="string">'age'</span>, <span class="string">'-pid'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#5. reverse 对已经排序的queryset进行翻转（只是结果反过来）。 要求:在排序过的，才能执行翻转;</span></span><br><span class="line">ret = models.Person.objects.all().order_by(<span class="string">'pid'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#6. values 获取对象的字段名和字段值。返回QuerySet，QuerySet中包含字典。没有参数表示所有字段; 有参数获取指定字段。</span></span><br><span class="line">ret = models.Person.objects.all().values()</span><br><span class="line"><span class="comment"># ret = models.Person.objects.all().values('pid')</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#7. values_list 获取对象的字段值，返回QuerySet，QuerySet中包含元组。  没有参数时指所有字段；按顺序设置字段得到对应顺序的字段值。</span></span><br><span class="line">ret = models.Person.objects.all().values_list()</span><br><span class="line">ret = models.Person.objects.all().values_list(<span class="string">'name'</span>,<span class="string">'pid'</span>)</span><br><span class="line">ret = models.Person.objects.all().values_list(<span class="string">'pid'</span>,<span class="string">'name'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#8.  distict 按照元素去重，如果元素是对象的话，需对象一样才能去重。不能直接按字段去重</span></span><br><span class="line">ret = models.Person.objects.all().distinct()</span><br><span class="line">	<span class="comment"># 按指定字段去重 </span></span><br><span class="line">ret = models.Person.objects.values(<span class="string">'age'</span>).distinct()</span><br></pre></td></tr></table></figure><h2 id="返回对象"><a href="#返回对象" class="headerlink" title="返回对象"></a>返回对象</h2><p><strong>3个</strong></p><ul><li>get</li><li>first</li><li>last</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># get 获取一个满足条件的数据,返回对象  要求:存在且唯一,其它情况报错</span></span><br><span class="line">ret = models.Person.objects.get(pk=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># first 获取第一个元素，如果不存在返回None</span></span><br><span class="line">ret = models.Person.objects.filter(pk=<span class="number">100</span>).first()</span><br><span class="line">ret = models.Person.objects.filter(pk=<span class="number">1</span>).first()</span><br><span class="line"></span><br><span class="line"><span class="comment"># last 获取最后一个元素，如果不存在返回None</span></span><br><span class="line">ret = models.Person.objects.filter(pk=<span class="number">100</span>).last()</span><br><span class="line">ret = models.Person.objects.filter(pk=<span class="number">1</span>).last()</span><br></pre></td></tr></table></figure><h2 id="返回bool"><a href="#返回bool" class="headerlink" title="返回bool"></a>返回bool</h2><ul><li>exists</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># exists  判断数据是否存在,存在这条记录，返回True,否则返回False</span></span><br><span class="line">ret = models.Person.objects.filter(pk=<span class="number">1</span>).exists()</span><br></pre></td></tr></table></figure><h2 id="返回数字"><a href="#返回数字" class="headerlink" title="返回数字"></a>返回数字</h2><ul><li>count</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># count 计数,比len的效率高一些，因为len会真正的去数据库中进行查询</span></span><br><span class="line">ret = models.Person.objects.all().count()</span><br><span class="line">print(len(models.Person.objects.all()))</span><br></pre></td></tr></table></figure><h1 id="单表的双下划线"><a href="#单表的双下划线" class="headerlink" title="单表的双下划线"></a>单表的双下划线</h1><p>双下划线是python的一个特色，在ORM中通常用于显式分隔<strong>过滤关键字</strong> (filter key name) 的各个部分。在底层，字符串用这些下划线分割开，然后这些标记分开处理。<code>name__contains</code> 被替换成 <code>attribute: name, filter: contains</code>。</p><h2 id="范围"><a href="#范围" class="headerlink" title="范围"></a>范围</h2><h3 id="大于，大于等于，小于，小于等于"><a href="#大于，大于等于，小于，小于等于" class="headerlink" title="大于，大于等于，小于，小于等于"></a>大于，大于等于，小于，小于等于</h3><ul><li><code>__gt</code></li><li><code>__gte</code></li><li><code>__lt</code></li><li><code>__lte</code></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ret = models.Person.objects.filter(pk__gt=<span class="number">1</span>)  <span class="comment"># greater than</span></span><br><span class="line">ret = models.Person.objects.filter(pk__gte=<span class="number">1</span>)  <span class="comment"># greater than equal</span></span><br><span class="line">ret = models.Person.objects.filter(pk__lt=<span class="number">1</span>)  <span class="comment"># less than</span></span><br><span class="line">ret = models.Person.objects.filter(pk__lte=<span class="number">1</span>)  <span class="comment"># less than equal</span></span><br><span class="line">ret = models.Person.objects.filter(pk=<span class="number">1</span>)  <span class="comment"># equal</span></span><br></pre></td></tr></table></figure><h3 id="具体区间"><a href="#具体区间" class="headerlink" title="具体区间"></a>具体区间</h3><p>（闭区间）</p><ul><li><code>__range</code></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ret = models.Person.objects.filter(pk__range=[<span class="number">1</span>, <span class="number">3</span>])  <span class="comment"># 表示范围</span></span><br></pre></td></tr></table></figure><h3 id="成员判断"><a href="#成员判断" class="headerlink" title="成员判断"></a>成员判断</h3><ul><li><code>__in</code></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ret = models.Person.objects.filter(pk__in=[<span class="number">1</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">9</span>])  <span class="comment"># 取出这几个</span></span><br></pre></td></tr></table></figure><h2 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h2><h3 id="包含"><a href="#包含" class="headerlink" title="包含"></a>包含</h3><ul><li><code>__contains</code></li><li><code>__icontains</code></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ret = models.Person.objects.filter(name__contains=<span class="string">'a'</span>)  <span class="comment"># like  包含/模糊查询</span></span><br><span class="line">ret = models.Person.objects.filter(name__icontains=<span class="string">'A'</span>)  <span class="comment"># like  包含/模糊查询  ignore 忽略大小写</span></span><br></pre></td></tr></table></figure><h3 id="以什么开头"><a href="#以什么开头" class="headerlink" title="以什么开头"></a>以什么开头</h3><ul><li><code>__startswith</code></li><li><code>__istartswith</code></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ret = models.Person.objects.filter(name__startswith=<span class="string">'x'</span>)  <span class="comment"># 以什么开头</span></span><br><span class="line">ret = models.Person.objects.filter(name__istartswith=<span class="string">'x'</span>)  <span class="comment"># 以什么开头  忽略大小写</span></span><br></pre></td></tr></table></figure><h3 id="以什么结尾"><a href="#以什么结尾" class="headerlink" title="以什么结尾"></a>以什么结尾</h3><ul><li><code>__endswith</code></li><li><code>__iendswith</code></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ret = models.Person.objects.filter(name__endswith=<span class="string">'x'</span>)  <span class="comment"># 以什么结尾</span></span><br><span class="line">ret = models.Person.objects.filter(name__iendswith=<span class="string">'X'</span>)  <span class="comment"># 以什么结尾  忽略大小写</span></span><br></pre></td></tr></table></figure><h3 id="年份"><a href="#年份" class="headerlink" title="年份"></a>年份</h3><ul><li><code>__year</code></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ret = models.Person.objects.filter(birth__year=<span class="number">2019</span>)  <span class="comment"># 查询年份是2019</span></span><br><span class="line">ret = models.Person.objects.filter(birth__month=<span class="number">9</span>)  <span class="comment"># 对于datetime是查不到的</span></span><br></pre></td></tr></table></figure><ul><li><code>__month</code></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ret = models.Person.objects.filter(birth__month=<span class="number">9</span>) <span class="comment"># 对于date类型是可以查到的</span></span><br></pre></td></tr></table></figure><ul><li>使用模糊查询来查月份（会有警告，不过还是可以查到）</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ret = models.Person.objects.filter(birth__contains=<span class="number">9</span>)</span><br><span class="line">ret = models.Person.objects.filter(birth__contains=<span class="string">'2019-09'</span>)</span><br></pre></td></tr></table></figure><h3 id="为空"><a href="#为空" class="headerlink" title="为空"></a>为空</h3><ul><li><code>__isnull</code></li></ul><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">ret = models<span class="selector-class">.Person</span><span class="selector-class">.objects</span><span class="selector-class">.filter</span>(age__isnull=True)</span><br></pre></td></tr></table></figure><h1 id="外键的查询"><a href="#外键的查询" class="headerlink" title="外键的查询"></a>外键的查询</h1><h2 id="模型定义"><a href="#模型定义" class="headerlink" title="模型定义"></a>模型定义</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Publisher</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f"<span class="subst">&#123;self.pk&#125;</span>  <span class="subst">&#123;self.name&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    pub = models.ForeignKey(to=<span class="string">'Publisher'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f"<span class="subst">&#123;self.pk&#125;</span>  <span class="subst">&#123;self.title&#125;</span>"</span></span><br></pre></td></tr></table></figure><p>note：对于Book想要删除pub 只需要 Book.pub = None 就欧克了</p><h3 id="自关联"><a href="#自关联" class="headerlink" title="自关联"></a>自关联</h3><ul><li>表内自关联是指表内数据相关联的对象和表是相同字段，这样我们就直接用表内关联将外键关联设置成自身表的字段。同样表内关联也分一对多字段和多对多字段。</li></ul><h3 id="伪外键"><a href="#伪外键" class="headerlink" title="伪外键"></a>伪外键</h3><p>db_constraint = False 数据库中不加这个外键约束，相当于伪约束。</p><h2 id="基于对象的查询"><a href="#基于对象的查询" class="headerlink" title="基于对象的查询"></a>基于对象的查询</h2><p>基于对象的查询： 正向查询，反向查询</p><h3 id="不指定related-name"><a href="#不指定related-name" class="headerlink" title="不指定related_name"></a>不指定related_name</h3><ol><li>正向查询： 通过Book对象来查Publisher</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">book_obj = models.Book.objects.all().first()</span><br><span class="line">print(book_obj.pub)</span><br><span class="line">print(book_obj.pub_id)	</span><br><span class="line">print(book_obj.pub.name)	<span class="comment"># 非id的其它字段就只能连续 . 了</span></span><br></pre></td></tr></table></figure><ol start="2"><li>反向查询：通过Publisher对象来查询Book<ul><li>关系管理对象名称：类名小写 加 <code>_set</code></li></ul></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pub_obj = models.Publisher.objects.get(pk=<span class="number">1</span>)</span><br><span class="line">print(pub_obj.name)</span><br><span class="line">print(pub_obj.book_set,type(pub_obj.book_set))	<span class="comment"># 关系管理对象</span></span><br><span class="line">print(pub_obj.book_set.all())	<span class="comment"># 查询关联的所有对象</span></span><br></pre></td></tr></table></figure><h3 id="指定related-name"><a href="#指定related-name" class="headerlink" title="指定related_name"></a>指定related_name</h3><p>在外键字段中 添加 <code>related_name=&#39;book&#39;</code></p><ol><li>正向查询：通过Book对象来查Publisher<ul><li>同前面，略。</li></ul></li></ol><ol><li>反向查询：通过Publisher对象来查询Book<ul><li>不同之处在于，关系管理对象的名字</li><li>关系管理对象名称： <code>book</code></li></ul></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ret = pub_obj.book.all()</span><br></pre></td></tr></table></figure><h2 id="基于字段的查询"><a href="#基于字段的查询" class="headerlink" title="基于字段的查询"></a>基于字段的查询</h2><h3 id="不指定related-name-1"><a href="#不指定related-name-1" class="headerlink" title="不指定related_name"></a>不指定related_name</h3><ol><li><p>给出版社的名字，查书籍（通过外键）</p><ul><li><p>pub__name表示从 book表跨到publisher</p></li><li><p>__ 表示跨表，在sql语句中，就是要进行连表操作。</p></li></ul></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">book = models.Book.objects.filter(pub__name=<span class="string">'变强出版社'</span>)</span><br><span class="line">print(book)</span><br></pre></td></tr></table></figure><ol start="2"><li><p>给书名查出版社</p><ul><li><p>Publisher对象 通过 book (类名小写) 来跨表</p></li><li><p>类名小写__字段</p></li></ul></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ret = models.Publisher.objects.filter(book__title=<span class="string">'Mysql删库到跑路'</span>)</span><br><span class="line">print(ret)</span><br></pre></td></tr></table></figure><h3 id="指定related-name-1"><a href="#指定related-name-1" class="headerlink" title="指定related_name"></a>指定related_name</h3><p>外键定义中添加 related_name=’books’</p><ol><li>给出版社的名字，查书籍（通过外键）<ul><li>同前面，不涉及related_name。</li></ul></li><li>给书名查出版社<ul><li>通过定义的 books 来进行跨表</li><li>关系管理对象名称：<code>books</code></li></ul></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ret = models.Publisher.objects.filter(books__title=<span class="string">'Mysql删库到跑路'</span>)</span><br><span class="line">print(ret)</span><br></pre></td></tr></table></figure><h3 id="指定related-query-name"><a href="#指定related-query-name" class="headerlink" title="指定related_query_name"></a>指定related_query_name</h3><p>外键定义中添加 related_query_name=’xxx’</p><ol><li>给出版社的名字，查书籍（通过外键）<ul><li>同前面，不涉及related_name。</li></ul></li><li>给书名查出版社<ul><li>通过定义的 xxx 来进行跨表</li><li>关系管理对象名称：xxx</li><li>且只能用在基于字段查询，不能用在基于对象查询</li></ul></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ret = models.Publisher.objects.filter(xxx__title=<span class="string">'Mysql删库到跑路'</span>)</span><br><span class="line">print(ret)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过对象是查不到的</span></span><br><span class="line">pub_obj = models.Publisher.objects.all().first()</span><br><span class="line">print(pub_obj.xxx)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 即使 写了related_name 参数，仍优先使用related_query_name</span></span><br></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>​ 设置了外键后，我们可以通过外键来正向查询所关联的对象，名称为外键名（<code>pub =models.ForeignKey(to=&#39;Publisher&#39;)</code>），使用外键名与双下划线（<code>pub__</code>）就可以进行跨表查询，通过book对象，来查询出版社的信息。</p><p>​ 那么对于出版社来说，通过出版社对象查询书籍的过程被称为反向操作(没有设置外键/少的一方 —&gt;设置外键/多的一方)，具体如下：</p><ul><li>在没有指定related_name的时候，我们通过设置外键的那个类的类名小写与双下划线结合( <code>book__</code> )来进行跨表查询；</li><li>设置了 related_name 后，我们不再用类名小写，而是用 related_name 的值；</li><li>在基于字段查询的过程中，如果设置了related_query_name，则优先使用related_query_name的值。</li><li>所以 related_name 和 related_query_name 都是反向查询时，关系管理对象可用的名字</li></ul><h2 id="关系管理对象的方法"><a href="#关系管理对象的方法" class="headerlink" title="关系管理对象的方法"></a>关系管理对象的方法</h2><ul><li><p>通过关系管理对象来进行增删查改</p></li><li><p>针对出版社与书籍这个一对多关系</p></li></ul><p>all</p><ul><li>获取所关联的所有对象</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 正向</span></span><br><span class="line">book = models.Book.objects.all().first()</span><br><span class="line">print(book.pub)</span><br><span class="line"><span class="comment"># 反向</span></span><br><span class="line">publish = models.Publisher.objects.all().first()</span><br><span class="line">print(publish.book_set.all())</span><br></pre></td></tr></table></figure><p>set</p><ul><li><p>设置一对多关系</p></li><li><p>只能用对象或对象列表，不能用id</p></li><li><p>set(QuerySet)</p></li><li><p>当为外键设置 null=True 时，才可以减少（减少意味着，有些就为null了）；没有设置null=True 则不会改变。</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 正向 ： 一本书对应一个出版社</span></span><br><span class="line"><span class="comment"># 对于正向来说，pub是关联的对象，而不是关系管理对象，所以不能使用这些方法。</span></span><br><span class="line">book = models.Book.objects.all().first()</span><br><span class="line">print(book.pub) <span class="comment"># None</span></span><br><span class="line"><span class="comment"># book.pub.set(models.Publisher.objects.filter(pk=2))  # 报错， 当没有设置关联对象时，是没有set方法可以使用的。</span></span><br><span class="line">book.pub = models.Publisher.objects.filter(pk=<span class="number">2</span>).first()</span><br><span class="line">book.save()</span><br><span class="line">print(book.pub)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 反向 ：一个出版社可以对应很多书</span></span><br><span class="line">publish = models.Publisher.objects.all().first()</span><br><span class="line">print(publish.book_set.all())</span><br><span class="line">publish.book_set.set(models.Book.objects.filter(pk__in=[<span class="number">3</span>]))</span><br><span class="line">print(publish.book_set.all())</span><br></pre></td></tr></table></figure><p>add</p><ul><li><p>添加一对多关系</p></li><li><p>add(对象, 对象)</p></li><li><p>add( *QuerySet) 列表打散</p></li><li><p>理解上也是：我的少的一方可以指定多的一方（一个出版社可以对应很多书）</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 正向</span></span><br><span class="line">user_obj.customers.add(*models.Customer.objects.filter(pk__in=opt_cus))</span><br></pre></td></tr></table></figure><p>remove/clear</p><ul><li><p>remove(*QuerySet)</p></li><li><p>当你干掉这两个字段后，为null，如果字段不允许为空就会报错</p></li><li><p>外键字段设置可以为空 null=True 后，才能用remove/clear</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 反向：</span></span><br><span class="line">publish = models.Publisher.objects.all().first()</span><br><span class="line">print(publish.book_set.all())</span><br><span class="line">publish.book_set.clear()      <span class="comment"># 这一条</span></span><br><span class="line">print(publish.book_set.all())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 正向</span></span><br><span class="line">user_obj.customers.remove(*models.Customer.objects.filter(pk__in=opt_cus))</span><br></pre></td></tr></table></figure><p>create</p><ul><li>新增一个所关联的对象，并且建立一对多的关系(少的一方创建多的一方)</li><li>小差别</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过关系管理对象，创建一本书。</span></span><br><span class="line">publish = models.Publisher.objects.all().first()</span><br><span class="line">publish.book_set.create(title=<span class="string">'祥龙宝典'</span>)</span><br><span class="line">print(publish.book_set.all())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这也会给别的出版社添加一本书</span></span><br><span class="line">publish = models.Publisher.objects.all().first()</span><br><span class="line">publish.book_set.create(title=<span class="string">'万象森罗'</span>,pub_id=<span class="number">3</span>)</span><br><span class="line">print(publish.book_set.all())</span><br></pre></td></tr></table></figure><p>update</p><ul><li>使用<code>update()</code>方法可以批量为QuerySet中所有的对象进行更新操作。</li><li>增加外键：</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 反向</span></span><br><span class="line">models.Customer.objects.filter(pk__in=opt_cus).update(consultant=user_obj)</span><br></pre></td></tr></table></figure><ul><li>删除外键：</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 反向</span></span><br><span class="line">models.Customer.objects.filter(pk__in=opt_cus).update(consultant=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><h1 id="多对多关系"><a href="#多对多关系" class="headerlink" title="多对多关系"></a>多对多关系</h1><h2 id="模型定义-1"><a href="#模型定义-1" class="headerlink" title="模型定义"></a>模型定义</h2><p>继续在models.py 中定义新类 Author， Author 与 Book 是多对多关系。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Publisher</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f"<span class="subst">&#123;self.pk&#125;</span>  <span class="subst">&#123;self.name&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    pub = models.ForeignKey(to=<span class="string">'Publisher'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f"<span class="subst">&#123;self.pk&#125;</span>  <span class="subst">&#123;self.title&#125;</span>"</span></span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Author</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    books = models.ManyToManyField(to=<span class="string">'Book'</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f"<span class="subst">&#123;self.pk&#125;</span>  <span class="subst">&#123;self.name&#125;</span>"</span></span><br></pre></td></tr></table></figure><h2 id="基于对象的查询-1"><a href="#基于对象的查询-1" class="headerlink" title="基于对象的查询"></a>基于对象的查询</h2><h3 id="不指定related-name-2"><a href="#不指定related-name-2" class="headerlink" title="不指定related_name"></a>不指定related_name</h3><ol><li>正向查询：</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">author = models.Author.objects.all().first()</span><br><span class="line">print(author.name)</span><br><span class="line">print(author.books,type(author.books))  <span class="comment"># 关系管理对象</span></span><br><span class="line">print(author.books.all())	<span class="comment"># 查询该作者关联的所有书籍</span></span><br></pre></td></tr></table></figure><ol start="2"><li>反向查询：<ul><li>关系管理对象名称：类名小写 加 <code>_set</code> （<code>author_set</code>）</li></ul></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">book_obj = models.Book.objects.all().first()</span><br><span class="line">print(book_obj)</span><br><span class="line">print(book_obj.author_set.all())	<span class="comment"># 查询该书关联的所有作者</span></span><br></pre></td></tr></table></figure><h3 id="指定related-name-2"><a href="#指定related-name-2" class="headerlink" title="指定related_name"></a>指定related_name</h3><ol><li>正向：<ul><li>相似，略。（不涉及related_name）</li></ul></li></ol><ol start="2"><li>反向查询：<ul><li>在ManyToManyField设置 related_name 为authors</li><li>关系管理对象名称： authors</li></ul></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">book_obj = models.Book.objects.all().first()</span><br><span class="line">print(book_obj)</span><br><span class="line">print(type(book_obj.authors))	<span class="comment"># 关系管理对象</span></span><br><span class="line">print(book_obj.authors.all())	<span class="comment"># 查询该书关联的所有作者</span></span><br></pre></td></tr></table></figure><h2 id="基于字段的查询-1"><a href="#基于字段的查询-1" class="headerlink" title="基于字段的查询"></a>基于字段的查询</h2><h3 id="不指定related-name-3"><a href="#不指定related-name-3" class="headerlink" title="不指定related_name"></a>不指定related_name</h3><ol><li><p>通过书籍去查作者</p><ul><li><p>正向查询（设置ManyToManyField）</p></li><li><p>Author —&gt; Book</p></li></ul></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">author = models.Author.objects.filter(books__title=<span class="string">'Mysql删库到跑路'</span>)</span><br><span class="line">print(author)</span><br></pre></td></tr></table></figure><ol start="2"><li>通过作者去查书籍<ul><li>查询这个作者写的书（反向查询）</li><li>Book —&gt; Author</li></ul></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">books = models.Book.objects.filter(author__name=<span class="string">'光头强'</span>)</span><br><span class="line">print(books)</span><br></pre></td></tr></table></figure><h3 id="指定related-name-3"><a href="#指定related-name-3" class="headerlink" title="指定related_name"></a>指定related_name</h3><p>在 ManyToManyField 定义中，添加 <code>related_name = &#39;authors&#39;</code></p><ol><li><p>通过书籍去查作者</p><ul><li>同前面， related_name 不影响正向</li></ul></li><li><p>通过作者去查书籍</p><ul><li>关系管理对象名称： authors</li></ul></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">books = models.Book.objects.filter(authors__name=<span class="string">'光头强'</span>)</span><br><span class="line">print(books)</span><br></pre></td></tr></table></figure><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><p>基于对象的查询与基于字段的查询：</p><ul><li>基于字段的查询，名称是写在 filter 内部，当关键字参数；而基于对象的查询，是通过 <code>对象.关联对象小写__set</code> 这个关系管理对象来进行操作。</li></ul><h2 id="关系管理对象的方法-1"><a href="#关系管理对象的方法-1" class="headerlink" title="关系管理对象的方法"></a>关系管理对象的方法</h2><ul><li><p>通过关系管理对象来进行增删查改</p></li><li><p>针对书籍与作者这个多对多关系</p></li><li><p>也分为正反向，反向也可以使用 related_name , 明确用对的关系管理对象名称就行。</p></li></ul><p>all</p><ul><li>获取所关联的所有对象</li></ul><p>set</p><ul><li><p>设置多对多关系（先删除该对象原有的，在添加新的）</p></li><li><p>[id, id, id]</p></li><li><p>[对象, 对象, 对象] 或 QuerySet，最终还是转成id</p></li><li><p>为什么可以做到呢? 因为这个表里共三个字段，id不用管，book_id 是你当前对象携带的，所以只需要指定 author_id 就行。</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">book_obj = models.Book.objects.all().first()</span><br><span class="line">print(book_obj.authors.all())   <span class="comment"># 原来是&lt;QuerySet [&lt;Author: 1  光头强&gt;, &lt;Author: 2  小灰&gt;]&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过id 修改</span></span><br><span class="line">book_obj.authors.set([<span class="number">2</span>,<span class="number">3</span>])     <span class="comment"># 通过Book对象，在 author_book表中，进行修改，先删除原来的关系，在添加新的关系</span></span><br><span class="line">print(book_obj.authors.all())   <span class="comment"># 改为&lt;QuerySet [&lt;Author: 2  小灰&gt;, &lt;Author: 3  小光&gt;]&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过 QuerySet 修改</span></span><br><span class="line">ret = book_obj.authors.set(models.Author.objects.filter(pk__in=[<span class="number">2</span>]))</span><br><span class="line">print(ret)	<span class="comment"># 打印None</span></span><br><span class="line">print(book_obj.authors.all())	<span class="comment"># 成功修改</span></span><br></pre></td></tr></table></figure><p>add</p><ul><li><p>添加多对多关系（不在用列表了）</p></li><li><p>add(id, id)</p></li><li><p>add(对象, 对象)</p></li><li><p>add( *QuerySet) 列表打散</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">book_obj = models.Book.objects.all().first()</span><br><span class="line">print(book_obj.authors.all())</span><br><span class="line"><span class="comment"># 通过 id 添加</span></span><br><span class="line">book_obj.authors.add(<span class="number">1</span>, <span class="number">3</span>)	<span class="comment"># 这里不再是列表了</span></span><br><span class="line">print(book_obj.authors.all())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打散QuerySet添加</span></span><br><span class="line">print(book_obj.authors.all())</span><br><span class="line">book_obj.authors.add(*models.Author.objects.filter(pk__in=[<span class="number">1</span>,<span class="number">3</span>]))</span><br><span class="line">print(book_obj.authors.all())</span><br></pre></td></tr></table></figure><p>remove</p><ul><li>删除多对多关系 (有则删除，无则不变，不会报错)</li><li>remove(id, id)</li><li>remove(对象, 对象)</li><li>remove( *QuerySet) 列表打散</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">book_obj = models.Book.objects.all().first()</span><br><span class="line">print(book_obj.authors.all())</span><br><span class="line">book_obj.authors.remove(<span class="number">1</span>)</span><br><span class="line">print(book_obj.authors.all())</span><br></pre></td></tr></table></figure><p>clear</p><ul><li><p>清空多对多关系</p></li><li><p>对象.关系管理对象.clear()</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">book_obj = models.Book.objects.all().first()</span><br><span class="line">print(book_obj.authors.all())</span><br><span class="line">book_obj.authors.clear()</span><br><span class="line">print(book_obj.authors.all())</span><br></pre></td></tr></table></figure><p>create</p><ul><li>新增一个所关联的对象，并且建立多对多的关系(通过作者去造一本书，并自动添加关系)</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 正向  通过作者对象，来创建一本书，并自动添加关系</span></span><br><span class="line">author = models.Author.objects.all().first()</span><br><span class="line">print(author.books.all())</span><br><span class="line">author.books.create(title=<span class="string">'降龙十八掌'</span>, pub_id=<span class="number">2</span>)</span><br><span class="line">print(author.books.all())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 反向  通过书籍对象，创造一个作者，并自动添加关系</span></span><br><span class="line">book_obj = models.Book.objects.all().first()</span><br><span class="line">print(book_obj.authors.all())</span><br><span class="line">book_obj.authors.create(name=<span class="string">'小强'</span>)</span><br><span class="line">print(book_obj.authors.all())</span><br></pre></td></tr></table></figure><h3 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h3><p>对于外键中关于关系管理对象的方法 和 多对多关系中关系管理对象的方法 它们的一个差别在于后者可以直接使用 id 来进行增删查改，而前者只能通过对象。</p><h1 id="聚合查询和分组查询"><a href="#聚合查询和分组查询" class="headerlink" title="聚合查询和分组查询"></a>聚合查询和分组查询</h1><h2 id="聚合查询"><a href="#聚合查询" class="headerlink" title="聚合查询"></a>聚合查询</h2><ul><li><p>从 django.db.models 导入聚合函数，这些聚合函数是类</p></li><li><p>aggregate 是终止子句，执行后得到的是一个字典</p></li></ul><p>例子:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Max,Min,Count,Avg,Sum</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.统计书中最高的价格</span></span><br><span class="line">	<span class="comment"># 默认是对 all()的结果进行聚合,all可以省略。</span></span><br><span class="line">ret = models.Book.objects.aggregate(Max(<span class="string">'price'</span>))</span><br><span class="line">print(ret)</span><br><span class="line">	<span class="comment"># 完整写法，</span></span><br><span class="line">ret = models.Book.objects.all().aggregate(max=Max(<span class="string">'price'</span>))</span><br><span class="line">print(ret)</span><br><span class="line">	<span class="comment"># 可以同时查最大，最小，等等。</span></span><br><span class="line">ret = models.Book.objects.aggregate(max=Max(<span class="string">'price'</span>),min=Min(<span class="string">'price'</span>))</span><br><span class="line">print(ret)</span><br><span class="line">    <span class="comment"># 也可以对筛选后的结果进行聚合，下面两个语句sql语句是一样的。</span></span><br><span class="line">ret = models.Book.objects.filter(pk__range=[<span class="number">3</span>,<span class="number">5</span>]).aggregate(max=Max(<span class="string">'price'</span>),min=Min(<span class="string">'price'</span>))</span><br><span class="line">print(ret)</span><br><span class="line">ret = models.Book.objects.filter(pk__range=[<span class="number">3</span>,<span class="number">5</span>]).values().aggregate(max=Max(<span class="string">'price'</span>),min=Min(<span class="string">'price'</span>))</span><br><span class="line">print(ret)</span><br></pre></td></tr></table></figure><h2 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h2><ul><li>分组查询需要和聚合一起使用，不然没多大意义</li><li>annotate 是<strong>注释</strong>的意思（额外添加信息），将结果封装对象的属性，翻译成sql语句，里面是有group by的。</li><li>annotate 默认以该对象的id，进行分组，如果想更改分组条件，可以先使用values进行筛选，然后使用annotate，添加注释。 见例中方法二。 当然使用values筛选建议筛选这个类（表）</li></ul><p>例子:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 统计每一本书的作者个数</span></span><br><span class="line">	<span class="comment"># 使用annotate后给对象添加一个新属性，authors__count</span></span><br><span class="line">ret = models.Book.objects.annotate(Count(<span class="string">'authors'</span>))</span><br><span class="line">ret = models.Book.objects.annotate(Count(<span class="string">'authors'</span>)).values()</span><br><span class="line">print(ret)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ret:</span><br><span class="line">    print(i)	</span><br><span class="line">    <span class="comment"># print(i['authors__count'])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计出每个出版社最便宜的书</span></span><br><span class="line">	<span class="comment"># 方法一： (按出版社进行分组) （一个出版社对应多本书，从少的一方）</span></span><br><span class="line">ret = models.Publisher.objects.annotate(Min(<span class="string">'book__price'</span>))</span><br><span class="line">ret = models.Publisher.objects.values().annotate(Min(<span class="string">'book__price'</span>)).values()   <span class="comment"># 加了values 会更清晰</span></span><br><span class="line">print(ret)</span><br><span class="line">	<span class="comment"># 方法二：（从多的一方入手）</span></span><br><span class="line">ret = models.Book.objects.values(<span class="string">'pub__name'</span>).annotate(Min(<span class="string">'price'</span>))</span><br><span class="line">ret = models.Book.objects.values(<span class="string">'pub__name'</span>).annotate(Min(<span class="string">'price'</span>)).values(<span class="string">'title'</span>)  <span class="comment"># 不再前面出现的字段，如.values('title')，会作为一个新的分组条件（sql语句中）</span></span><br><span class="line">ret = models.Book.objects.values(<span class="string">'pub__name'</span>).annotate(Min(<span class="string">'price'</span>)).values(<span class="string">'price'</span>)  <span class="comment"># 前面出现的字段，做筛选，不会作为新的分组条件</span></span><br><span class="line">print(ret)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计不止一个作者图书</span></span><br><span class="line">ret = models.Book.objects.annotate(count=Count(<span class="string">'authors'</span>)).filter(count__gt=<span class="number">1</span>).values()</span><br><span class="line">print(ret)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询各个作者出的书的总价格</span></span><br><span class="line">ret = models.Author.objects.annotate(sum=Sum(<span class="string">'books__price'</span>)).values()</span><br><span class="line">print(ret)</span><br></pre></td></tr></table></figure><h1 id="F查询与Q查询"><a href="#F查询与Q查询" class="headerlink" title="F查询与Q查询"></a>F查询与Q查询</h1><p>F查询：字段之间的比较；动态获取字段的值。</p><p>Q查询是为了弥补 OR</p><h2 id="模型定义-2"><a href="#模型定义-2" class="headerlink" title="模型定义"></a>模型定义</h2><p>为了丰富查询，增加列</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    price = models.DecimalField(max_digits=<span class="number">5</span>,decimal_places=<span class="number">2</span>,default=<span class="number">5</span>)</span><br><span class="line">    sale = models.IntegerField()</span><br><span class="line">    memo = models.IntegerField()</span><br><span class="line">    pub = models.ForeignKey(to=<span class="string">'Publisher'</span>,null=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f"<span class="subst">&#123;self.pk&#125;</span>  <span class="subst">&#123;self.title&#125;</span>"</span></span><br></pre></td></tr></table></figure><h2 id="F查询"><a href="#F查询" class="headerlink" title="F查询"></a>F查询</h2><h3 id="字段之间的比较"><a href="#字段之间的比较" class="headerlink" title="字段之间的比较"></a>字段之间的比较</h3><p>以前在filter内写多个条件，用逗号隔开，这是与的意思。</p><p>例如：</p><p>我们查询销量大于50且库存大于30的</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ret = models.Book.objects.filter(sale__gt=<span class="number">50</span>, memo__gt=<span class="number">30</span>)   <span class="comment"># sale &gt;50 且 memo &gt; 30</span></span><br><span class="line">print(ret)</span><br></pre></td></tr></table></figure><p>如果我们想查销量大于库存的行有哪些（同一行的不同字段间的比较），通过以前的方式是做不了的，所以引入F查询</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> F</span><br><span class="line"></span><br><span class="line">ret = models.Book.objects.filter(sale__gt=F(<span class="string">'memo'</span>))</span><br><span class="line">print(ret)</span><br></pre></td></tr></table></figure><h3 id="动态获取字段的值"><a href="#动态获取字段的值" class="headerlink" title="动态获取字段的值"></a>动态获取字段的值</h3><p>假如我们想刷一下销量，按照以前的做法，可以这样做：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ret = models.Book.objects.all()</span><br><span class="line"><span class="keyword">for</span> book <span class="keyword">in</span> ret:</span><br><span class="line">    book.sale += <span class="number">10</span></span><br><span class="line">    book.save()</span><br></pre></td></tr></table></figure><ul><li>logging打印的sql语句：</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(<span class="number">0.001</span>) UPDATE `app01_book` SET `title` = <span class="string">'祥龙宝典'</span>, `price` = <span class="string">'5.00'</span>, `sale` = <span class="number">400</span>, `memo` = <span class="number">50</span>, `pub_id` = <span class="number">1</span> WHERE `app01_book`.`id` = <span class="number">7</span>; args=(<span class="string">'祥龙宝典'</span>, <span class="string">'5.00'</span>, <span class="number">400</span>, <span class="number">50</span>, <span class="number">1</span>, <span class="number">7</span>)</span><br><span class="line">(<span class="number">0.001</span>) UPDATE `app01_book` SET `title` = <span class="string">'万象森罗'</span>, `price` = <span class="string">'5.00'</span>, `sale` = <span class="number">400</span>, `memo` = <span class="number">50</span>, `pub_id` = <span class="number">3</span> WHERE `app01_book`.`id` = <span class="number">9</span>; args=(<span class="string">'万象森罗'</span>, <span class="string">'5.00'</span>, <span class="number">400</span>, <span class="number">50</span>, <span class="number">3</span>, <span class="number">9</span>)</span><br></pre></td></tr></table></figure><p>使用F查询就很简单</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ret = models.Book.objects.update(sale=F(<span class="string">'sale'</span>) * <span class="number">2</span> + <span class="number">10</span>)</span><br><span class="line">print(ret)</span><br></pre></td></tr></table></figure><ul><li>logging打印的sql语句</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(<span class="number">0.001</span>) UPDATE `app01_book` SET `sale` = ((`app01_book`.`sale` * <span class="number">2</span>) + <span class="number">10</span>); args=(<span class="number">2</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>update与save比较：</p><p>save会把所有内容取出重新赋值，而update只会把需要修改的内容进行修改，效率上，这两个差异很大。</p><h2 id="Q查询"><a href="#Q查询" class="headerlink" title="Q查询"></a>Q查询</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 取 2&lt; pk &lt; 5</span></span><br><span class="line">ret = models.Book.objects.filter(pk__gt=<span class="number">2</span>, pk__lt=<span class="number">5</span>) </span><br><span class="line"><span class="comment"># 那么如果是小于2或大于5呢？ exclue 能解决，但有些复杂了</span></span><br><span class="line">ret = models.Book.objects.exclude(pk__gte=<span class="number">2</span>, pk__lte=<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>引入Q查询，来解决 OR</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Q</span><br><span class="line"></span><br><span class="line">ret = models.Book.objects.filter(Q(pk__gt=<span class="number">5</span>) | Q(pk__lt=<span class="number">2</span>))  <span class="comment"># &gt;5 或 &lt;2</span></span><br><span class="line">print(ret)</span><br><span class="line">ret = models.Book.objects.filter(~Q(pk__gt=<span class="number">5</span>) | Q(pk__lt=<span class="number">2</span>))  <span class="comment"># &lt;=5  或 &lt;2</span></span><br><span class="line">ret = models.Book.objects.filter(~Q(~Q(pk__gt=<span class="number">5</span>) | Q(pk__lt=<span class="number">2</span>)))  <span class="comment"># &gt;5</span></span><br></pre></td></tr></table></figure><p>几种清空：</p><ul><li><p>Q(条件)</p></li><li><p>Q(条件)&amp;Q(条件) 与</p></li><li><p>Q(条件)|Q(条件) 或</p></li><li><p>~Q(条件) 非</p></li></ul><h3 id="Q对象的新写法"><a href="#Q对象的新写法" class="headerlink" title="Q对象的新写法"></a>Q对象的新写法</h3><p>当我们使用搜索功能时，希望对搜索条件有一个更好的封装，而不是直接写一堆Q()</p><ul><li>小试牛刀</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">q = Q()</span><br><span class="line">q.connector = <span class="string">'OR'</span>  <span class="comment"># 里面的内容是或的关系</span></span><br><span class="line">q.children.append(Q(qq__contains=search))			<span class="comment"># 以前这样写</span></span><br><span class="line">q.children.append(Q((<span class="string">'qq_name__contains'</span>,search)))  <span class="comment"># 这里还需要括号包一层，这样的话不再是关键字参数，我们就可以进行变量的拼接</span></span><br><span class="line">print(q)</span><br><span class="line">query = models.Customer.objects.filter(q)</span><br><span class="line">print(query)</span><br></pre></td></tr></table></figure><ul><li>整理简化</li></ul><p>定义：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">local_search</span><span class="params">(self, field_list, search)</span>:</span></span><br><span class="line">    q = Q()</span><br><span class="line">    q.connector = <span class="string">'OR'</span></span><br><span class="line">    <span class="keyword">for</span> field <span class="keyword">in</span> field_list:</span><br><span class="line">        q.children.append(Q((<span class="string">f'<span class="subst">&#123;field&#125;</span>__contains'</span>, search)))</span><br><span class="line">        <span class="comment"># print(q)</span></span><br><span class="line">    <span class="keyword">return</span> q</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">search = request.GET.get(<span class="string">'local_search'</span>, <span class="string">''</span>)</span><br><span class="line">field_list = [<span class="string">'qq_name'</span>, <span class="string">'phone'</span>, <span class="string">'name'</span>, <span class="string">'qq'</span>]</span><br><span class="line">q = self.local_search(field_list, search)</span><br></pre></td></tr></table></figure><h1 id="bulk-create"><a href="#bulk-create" class="headerlink" title="bulk_create"></a>bulk_create</h1><p>一次性插入多条</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 批量插入数据</span></span><br><span class="line"><span class="comment"># 内存中生成</span></span><br><span class="line">studyrecords_list = []</span><br><span class="line">studyrecords_list.append(实例化)</span><br><span class="line"><span class="comment"># 使用bulk_create批量插入</span></span><br><span class="line">models.StudyRecord.object.bulk_create(studyrecords_list)  <span class="comment"># 批量插入</span></span><br></pre></td></tr></table></figure><h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><p>一系列操作，当作一个操作。要么都成功，要么都失败。</p><p>格式：</p><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">with transation.atomic<span class="params">()</span>:</span><br><span class="line">    <span class="comment"># 设置事务回滚的标记点</span></span><br><span class="line">    sid1 = transation.savepoint<span class="params">()</span></span><br><span class="line"></span><br><span class="line">    <span class="string">....</span> <span class="comment"># 增删改等数据库操作</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">    <span class="string">....</span></span><br><span class="line">    except:</span><br><span class="line">    transation.savepoint_rallback<span class="params">(sid1)</span></span><br></pre></td></tr></table></figure><p>例1：</p><p>a同学给b同学转账100元</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rom django.db <span class="keyword">import</span> transaction</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> transaction.atomic():</span><br><span class="line">        <span class="comment"># orm 操作</span></span><br><span class="line">        a = models.People.objects.filter(pk=<span class="number">2</span>).select_for_update()</span><br><span class="line">        b = models.People.objects.filter(pk=<span class="number">3</span>).select_for_update()       </span><br><span class="line">        <span class="keyword">if</span> a.account<span class="number">-100</span> &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> Exception</span><br><span class="line">        a.account -= <span class="number">100</span></span><br><span class="line">        a.save()</span><br><span class="line">        <span class="comment"># int('ssss')</span></span><br><span class="line">        b.account += <span class="number">100</span></span><br><span class="line">        b.save()</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br></pre></td></tr></table></figure><ul><li><p><code>with transaction.atomic()</code> 开启事务</p></li><li><p><code>.select_for_update()</code> 开启行级锁</p></li></ul><h1 id="执行原生SQL"><a href="#执行原生SQL" class="headerlink" title="执行原生SQL"></a>执行原生SQL</h1><p>例子：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> connection, connections</span><br><span class="line">cursor = connection.cursor()  <span class="comment"># cursor = connections['default'].cursor()</span></span><br><span class="line">cursor.execute(<span class="string">"""SELECT * from app01_person where pid = %s"""</span>, [<span class="number">1</span>])</span><br><span class="line">row = cursor.fetchone()</span><br><span class="line">print(row)</span><br></pre></td></tr></table></figure><h1 id="小结-3"><a href="#小结-3" class="headerlink" title="小结"></a>小结</h1><ol><li><p>写orm语句的时候，可以正向，可以反向，根据要求中出现的表名出发，两种写出来进行比较。</p></li><li><p>正向查询后继续反向回查会多连一次表。例子如下：</p></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查找书名是“小灰机”的书的出版社出版的其他书籍的名字和价格</span></span><br><span class="line">ret = models.Book.objects.filter(publisher__book__title=<span class="string">'小灰机'</span>).exclude(title=<span class="string">'小灰机'</span>)</span><br><span class="line"><span class="comment"># 从book 到 publisher 在回到 book </span></span><br><span class="line"><span class="comment"># 在sql语句中是 将book表与publisher进行内连接，在与book表进行内连接。</span></span><br></pre></td></tr></table></figure><ol start="3"><li><p>先values在filter 与 先filter在values是不一样的</p><ul><li><p>先filter在values，这样列少一些（少一些连表），信息会缺。</p></li><li><p>先filter在values，先增加列信息，然后再进行筛选，这也不会缺失信息。（这个作者它的所有书籍都在一行，而不是一本书是一条行）</p></li></ul></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查找书名是“小灰机”的书的作者们的姓名以及出版的所有书籍名称和价钱 </span></span><br><span class="line"><span class="comment"># orm语句</span></span><br><span class="line">ret = models.Author.objects.filter(book__title=<span class="string">'小灰机'</span>).values(<span class="string">'name'</span>, <span class="string">'book__title'</span>, <span class="string">'book__price'</span>)</span><br><span class="line">print(ret)</span><br><span class="line"><span class="comment"># 打印的sql语句</span></span><br><span class="line">SELECT `app01_author`.`name`, `app01_book`.`title`, `app01_book`.`price`</span><br><span class="line">FROM `app01_author` INNER JOIN `app01_book_author` ON (`app01_author`.`id` = `app01_book_author`.`author_id`)</span><br><span class="line">                    INNER JOIN `app01_book` ON (`app01_book_author`.`book_id` = `app01_book`.`id`)</span><br><span class="line">WHERE `app01_book`.`title` = <span class="string">'小灰机'</span> LIMIT <span class="number">21</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># orm语句</span></span><br><span class="line">ret = models.Author.objects.values(<span class="string">'name'</span>, <span class="string">'book__title'</span>, <span class="string">'book__price'</span>).filter(book__title=<span class="string">'小灰机'</span>)</span><br><span class="line">print(ret)</span><br><span class="line"><span class="comment"># 打印的sql语句</span></span><br><span class="line">SELECT `app01_author`.`name`, `app01_book`.`title`, `app01_book`.`price`</span><br><span class="line">FROM `app01_author` LEFT OUTER JOIN `app01_book_author` ON (`app01_author`.`id` = `app01_book_author`.`author_id`)</span><br><span class="line">                    LEFT OUTER JOIN `app01_book` ON (`app01_book_author`.`book_id` = `app01_book`.`id`)</span><br><span class="line">                    INNER JOIN `app01_book_author` T4 ON (`app01_author`.`id` = T4.`author_id`)</span><br><span class="line">                    INNER JOIN `app01_book` T5 ON (T4.`book_id` = T5.`id`)</span><br><span class="line">WHERE T5.`title` = <span class="string">'小灰机'</span> LIMIT <span class="number">21</span>;</span><br></pre></td></tr></table></figure><ol start="4"><li>null 和 空 的判断方式是不一样的，但对于查一个字段是否为空，需要将两者结合</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查找memo字段是空的书 </span></span><br><span class="line">ret = models.Book.objects.filter(Q(memo__isnull=<span class="literal">True</span>) | Q(memo=<span class="string">''</span>))</span><br><span class="line">print(ret)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>django</category>
      </categories>
      <tags>
        <tag>django</tag>
        <tag>学习笔记</tag>
        <tag>Web前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Pytorch-激活函数与Loss的梯度</title>
    <url>/Pytorch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20190707-learning_PyTorch_11_gradient.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"></blockquote><a id="more"></a><p>持续更新中！！！</p>]]></content>
      <categories>
        <category>Pytorch学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>Pytorch</tag>
        <tag>Deep Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>Django的路由系统</title>
    <url>/django/20190705-django_6_url.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>本篇介绍Django的路由系统。</p></blockquote><a id="more"></a><p>通过这篇文章，你能了解到：</p><ul><li>Django中的URL是什么？</li><li>路由分发、命名URL与URL的反向解析</li><li>名称空间的使用</li></ul><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>URL配置(URLconf)就像Django所支撑网站的目录。它的本质是URL与要为该URL调用的视图函数之间的映射表。</p><h2 id="URLconf配置"><a href="#URLconf配置" class="headerlink" title="URLconf配置"></a>URLconf配置</h2><ul><li>基本格式</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line">urlpattern = [</span><br><span class="line">	url(正则表达式,视图,参数,别名)</span><br><span class="line">]</span><br><span class="line"><span class="comment"># 这个参数可以是一个字典，如&#123;'foo': 'bar'&#125;</span></span><br><span class="line"><span class="comment"># 当传递额外参数的字典中的参数和URL中捕获值的命名关键字参数同名时，函数调用时将使用的是字典中的参数，而不是URL中捕获的参数。</span></span><br></pre></td></tr></table></figure><ul><li>Django是如何识别这个URL呢？settings中有设置：</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ROOT_URLCONF = <span class="string">'项目名.urls'</span></span><br></pre></td></tr></table></figure><ul><li>在Django2.0中用 re_path 来代替 url</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path，re_path</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'articles/2003/'</span>, views.special_case_2003),</span><br><span class="line">    path(<span class="string">'articles/&lt;int:year&gt;/'</span>, views.year_archive),</span><br><span class="line">    path(<span class="string">'articles/&lt;int:year&gt;/&lt;int:month&gt;/'</span>, views.month_archive),</span><br><span class="line">    path(<span class="string">'articles/&lt;int:year&gt;/&lt;int:month&gt;/&lt;slug:slug&gt;/'</span>, views.article_detail),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>note：</p><ol><li>urlpatterns中的元素按照书写顺序从上往下逐一匹配正则表达式，一旦匹配成功则不再继续。</li><li>若要从URL中捕获一个值，只需要在它周围放置一对圆括号（分组匹配）。</li><li>不需要添加一个前导的反斜杠，因为每个URL 都有。例如，应该是^articles 而不是 ^/articles。</li><li>每个正则表达式前面的’r’ 是可选的但是建议加上。</li></ol><h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><h2 id="常用规则"><a href="#常用规则" class="headerlink" title="常用规则"></a>常用规则</h2><ul><li>开头不能加 <code>/</code></li><li>从上到下匹配，匹配到一个就执行函数（$结尾，防止截胡）</li><li>使用 r 表示原生字符串，不转义</li><li>^ $ []{} \d \w ? + * .</li><li>更多规则详见 <a href="https://chennq.com/learn-python/20190407-Regular_Expression_and_Python_Re_module.html">正则匹配与Re模块</a></li></ul><h2 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h2><ul><li>正则中捕获到的参数传递给视图函数</li><li>将捕获的参数按照<strong>位置参数</strong>传递给视图</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^articles/2003/$'</span>, views.special_case_2003),</span><br><span class="line">    url(<span class="string">r'^articles/([0-9]&#123;4&#125;)/$'</span>, views.year_archive),</span><br><span class="line">    url(<span class="string">r'^articles/([0-9]&#123;4&#125;)/([0-9]&#123;2&#125;)/$'</span>, views.month_archive),</span><br><span class="line">    url(<span class="string">r'^articles/([0-9]&#123;4&#125;)/([0-9]&#123;2&#125;)/([0-9]+)/$'</span>, views.article_detail),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">例如：</span><br><span class="line">① 对于 /articles/<span class="number">2005</span>/<span class="number">03</span>/ 来说，它将调用 views.month_archive(request, <span class="string">'2005'</span>, <span class="string">'03'</span>) ,而且在它成功匹配后，也不再与后面的进行匹配。</span><br><span class="line">② 对于 /articles/<span class="number">2003</span>/<span class="number">03</span>/<span class="number">03</span>/ 将调用： views.article_detail(request, <span class="string">'2003'</span>, <span class="string">'03'</span>, <span class="string">'03'</span>)</span><br></pre></td></tr></table></figure><h2 id="命名分组"><a href="#命名分组" class="headerlink" title="命名分组"></a>命名分组</h2><ul><li><code>?P&lt;name&gt;</code></li><li>按照 <strong>关键字参数</strong> 传递视图</li><li>更加明确，参数的顺序可以改变，但是这是在牺牲简洁的条件下完成的。</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^articles/2003/$'</span>, views.special_case_2003),</span><br><span class="line">    url(<span class="string">r'^articles/([0-9]&#123;4&#125;)/$'</span>, views.year_archive),</span><br><span class="line">    url(<span class="string">r'^articles/([0-9]&#123;4&#125;)/([0-9]&#123;2&#125;)/$'</span>, views.month_archive),</span><br><span class="line">    url(<span class="string">r'^articles/([0-9]&#123;4&#125;)/([0-9]&#123;2&#125;)/([0-9]+)/$'</span>, views.article_detail),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">① 对于 /articles/<span class="number">2005</span>/<span class="number">03</span>/ 来说，它将调用 views.month_archive(request, year=<span class="string">'2005'</span>, month=<span class="string">'03'</span>) ,而且在它成功匹配后，也不再与后面的进行匹配。</span><br><span class="line">② 对于 /articles/<span class="number">2003</span>/<span class="number">03</span>/<span class="number">03</span>/ 将调用： views.article_detail(request, year=<span class="string">'2003'</span>, month=<span class="string">'03'</span>, day=<span class="string">'03'</span>)</span><br></pre></td></tr></table></figure><p>note：<strong>捕获的参数永远都是字符串</strong>。</p><h1 id="路由分发"><a href="#路由分发" class="headerlink" title="路由分发"></a>路由分发</h1><ul><li>include （去包含另一个urlConf）</li><li>ROOT__URLCONF这个配置</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^admin/'</span>, admin.site.urls),</span><br><span class="line">    url(<span class="string">r'^app01/'</span>, include(<span class="string">'app01.urls'</span>, namespace=<span class="string">'app01'</span>)),</span><br><span class="line">    url(<span class="string">r'^app02/'</span>, include(<span class="string">'app02.urls'</span>, namespace=<span class="string">'app02'</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在前面我们的目标是在urls.py中路由时给view函数传递参数，这是正向的过程。</p><p>反向解析：</p><ul><li>在模板中：使用url模板标签。</li><li>在Python 代码中：使用django.core.urlresolvers.reverse() 函数。</li><li>在更高层的与处理Django 模型实例相关的代码中：使用get_absolute_url() 方法。</li></ul><p>反向解析是为了得到这个URL，然后使用redirect，href，等等。</p><h1 id="命名URL和URL反向解析"><a href="#命名URL和URL反向解析" class="headerlink" title="命名URL和URL反向解析"></a>命名URL和URL反向解析</h1><h1 id="静态路由"><a href="#静态路由" class="headerlink" title="静态路由"></a>静态路由</h1><ul><li>命名<ul><li>设置name参数</li></ul></li><li>模板中使用：<ul><li>url ‘name参数对应的值’</li></ul></li><li>py文件：<ul><li><code>from django.urls import reverse</code></li><li><code>reverse(&#39;name参数对应的值&#39;)</code></li></ul></li></ul><h2 id="URL命名"><a href="#URL命名" class="headerlink" title="URL命名"></a>URL命名</h2><p>在url函数的第四个参数， 设置name 别名</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">url(<span class="string">r'^blog/$'</span>, views.blog, name=<span class="string">'blog'</span>),</span><br></pre></td></tr></table></figure><h2 id="反向解析"><a href="#反向解析" class="headerlink" title="反向解析"></a>反向解析</h2><p>通过name 拿到 url 路径，如果是在路由分下的情况下，也会把它给带上。</p><h3 id="模板中"><a href="#模板中" class="headerlink" title="模板中"></a>模板中</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% url 'blog' %&#125; ---&gt; 'url地址'  # 将来替换成以前写死的地址</span><br></pre></td></tr></table></figure><h3 id="views中"><a href="#views中" class="headerlink" title="views中"></a>views中</h3><p>shortcuts import reverse</p><p>快捷键</p><p>reverse 最终是在 urls 中</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">reverse('blog')  ---&gt; '/blog/'</span><br></pre></td></tr></table></figure><p>在redirect，可以直接用别名，而不用reverse，它里面写到过这种情况</p><h1 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h1><ul><li><p>传参</p></li><li><p>分组：</p></li><li><p>命名分组：多一种方式</p></li></ul><h2 id="分组-1"><a href="#分组-1" class="headerlink" title="分组"></a>分组</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">url(<span class="string">r'^blog/([0-9]&#123;4&#125;)/([0-9]&#123;2&#125;)'</span>, views.blogs,name=<span class="string">'blogs'</span>),</span><br></pre></td></tr></table></figure><h3 id="模板中-1"><a href="#模板中-1" class="headerlink" title="模板中"></a>模板中</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;a href="&#123;% url 'blogs' '2019' '07' %&#125;"&gt;xxx&lt;/a&gt;</span><br></pre></td></tr></table></figure><h3 id="views文件中"><a href="#views文件中" class="headerlink" title="views文件中"></a>views文件中</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">reverse(<span class="string">'blogs'</span>,<span class="string">'2019'</span>,<span class="string">'07'</span>)</span><br></pre></td></tr></table></figure><p>分组与参数要一一对应</p><h2 id="命名分组-1"><a href="#命名分组-1" class="headerlink" title="命名分组"></a>命名分组</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">url(<span class="string">r'^blog/(?P&lt;year&gt;[0-9]&#123;4&#125;)/(?P&lt;month&gt;[0-9]&#123;2&#125;)'</span>, views.blogs,name=<span class="string">'blogs'</span>),</span><br></pre></td></tr></table></figure><h3 id="模板中-2"><a href="#模板中-2" class="headerlink" title="模板中"></a>模板中</h3><ul><li>顺序得对应</li></ul><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;a href="&#123;% url 'blogs' '2019' '07' %&#125;"&gt;xxx&lt;/a&gt;</span><br></pre></td></tr></table></figure><h3 id="views中-1"><a href="#views中-1" class="headerlink" title="views中"></a>views中</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">reverse(<span class="string">'blogs'</span>,<span class="string">'2019'</span>,<span class="string">'07'</span>)</span><br></pre></td></tr></table></figure><p>分组与参数要一一对应</p><h3 id="关键字传参"><a href="#关键字传参" class="headerlink" title="关键字传参"></a>关键字传参</h3><ul><li>位置顺序不受到限制了</li></ul><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;a href="&#123;% url 'blogs' month='07' year='2019' %&#125;"&gt;xxx&lt;/a&gt;</span><br></pre></td></tr></table></figure><ul><li>views中</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">reverse(<span class="string">'blogs'</span>,year=<span class="string">'2019'</span>,month=<span class="string">'07'</span>)  </span><br><span class="line">reverse(<span class="string">'blogs'</span>, kwargs=&#123;year:<span class="string">'2019'</span>,month:<span class="string">'07'</span>&#125;)</span><br></pre></td></tr></table></figure><h1 id="名称空间"><a href="#名称空间" class="headerlink" title="名称空间"></a>名称空间</h1><p>解决，app下重名而产生的覆盖现象</p><p><strong>养成习惯，路由分发后就写namespace</strong></p><ul><li><p>当都起一个相同的别名 name=’home’，这样显示的是后面的</p></li><li><p>因为从上往下解析，后面的覆盖前面的。所以这样就会产生混淆（反向解析中）。</p></li><li><p>所以需要用区分namespace，include 有namespace默认参数，修改</p></li><li><p>反向解析时： <code>名称空间:别名</code></p></li><li><p><code>根的名称空间:子的名称空间:别名</code></p></li></ul>]]></content>
      <categories>
        <category>django</category>
      </categories>
      <tags>
        <tag>django</tag>
        <tag>学习笔记</tag>
        <tag>Web前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Pytorch-常见函数的梯度</title>
    <url>/Pytorch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20190705-learning_PyTorch_10_gradient.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>本篇介绍Pytorch中常见函数的梯度。</p></blockquote><a id="more"></a><h2 id="线性模型"><a href="#线性模型" class="headerlink" title="线性模型"></a>线性模型</h2><p>$$<br>y=xw+b<br>$$</p><ul><li><p>x：参数，理解为神经网络的输入。</p></li><li><p>w与b：神经网络的参数（两个自变量），作为优化的目标。</p></li></ul><p>偏微分为：<br>$$<br>\frac{\partial y}{\partial w} = x<br>\quad , \quad<br>\frac{\partial y}{\partial b} = 1<br>\quad , \quad<br>\nabla_{(w,b)} = (x , 1)<br>$$<br>ps：这也是感知机的模型。</p><p>例如：<br>$$<br>f=[y-(xw+b)]^2<br>$$</p><p>偏微分：<br>$$<br>\frac{\partial f}{\partial w} = 2(y-(xw+b))*(-x)<br>\quad , \quad<br>\frac{\partial y}{\partial b} = 2(y-(xw+b))-1<br>$$</p><p>$$<br>\nabla_{(w,b)} = (2(y-(xw+b))*(-x), 2(y-(xw+b))-1)<br>$$</p><p>线性感知机的输出和真实label之间的均方差(loss)的导数</p><p>有了梯度公式后，对于一个点就能代入更新了。<br>$$<br>(w_0,b_0) \rightarrow (\nabla w_0, \nabla b_0)<br>$$</p><h2 id="二次模型"><a href="#二次模型" class="headerlink" title="二次模型"></a>二次模型</h2><p>$$<br>y=xw^2+b^2<br>$$</p><p>偏微分为：<br>$$<br>\frac{\partial y}{\partial w} = 2xw<br>\quad , \quad<br>\frac{\partial y}{\partial b} = 2b<br>\quad , \quad<br>\nabla_{(w,b)} = (2xw, 2b)<br>$$</p><h2 id="指数模型"><a href="#指数模型" class="headerlink" title="指数模型"></a>指数模型</h2><p>$$<br>y=xe^w+e^b<br>$$</p><p>偏微分为：<br>$$<br>\frac{\partial y}{\partial w} = xe^w<br>\quad , \quad<br>\frac{\partial y}{\partial b} = e^b<br>\quad , \quad<br>\nabla_{(w,b)} = (xe^w, e^b)<br>$$</p><h2 id="对数模型"><a href="#对数模型" class="headerlink" title="对数模型"></a>对数模型</h2><p>$$<br>f = y \log (xw+b)<br>$$<br>偏微分为：<br>$$<br>\frac{\partial f}{\partial w} = y \frac{x}{xw + b}<br>\quad , \quad<br>\frac{\partial f}{\partial b} = y \frac{1}{xw + b}<br>\quad , \quad<br>\nabla_{(w,b)} = (y \frac{x}{xw + b}, y \frac{1}{xw + b})<br>$$</p>]]></content>
      <categories>
        <category>Pytorch学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>Pytorch</tag>
        <tag>Deep Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>Django的request与response</title>
    <url>/django/20190704-django_5_1.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>在系统内部Django使用request和response对象来进行状态的传递。本篇介绍Django中的request对象与response对象</p></blockquote><a id="more"></a><hr><p>通过这篇文章，你能了解到：</p><ul><li>request是什么？</li><li>HttpRequest的属性和方法有哪些？</li><li>response是什么？</li><li>HttpResponse的属性和方法有哪些？</li></ul><h1 id="Request对象"><a href="#Request对象" class="headerlink" title="Request对象"></a>Request对象</h1><p>当浏览器发出一个请求时，Django创建一个包含request的元信息（metadata）的HttpRequest对象，他作为视图函数的第一个参数。</p><p>wsgi 给封装的对象</p><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">&lt;WSGIRequest: <span class="keyword">GET</span> <span class="string">'/func/'</span>&gt;</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">'django.core.handlers.wsgi.WSGIRequest'</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="源码剖析"><a href="#源码剖析" class="headerlink" title="源码剖析"></a>源码剖析</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HttpRequest</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""A basic HTTP request."""</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WSGIRequest</span><span class="params">(http.HttpRequest)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, environ)</span>:</span></span><br><span class="line">        script_name = get_script_name(environ)</span><br><span class="line">        path_info = get_path_info(environ)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> path_info:</span><br><span class="line">            <span class="comment"># Sometimes PATH_INFO exists, but is empty (e.g. accessing</span></span><br><span class="line">            <span class="comment"># the SCRIPT_NAME URL without a trailing slash). We really need to</span></span><br><span class="line">            <span class="comment"># operate as if they'd requested '/'. Not amazingly nice to force</span></span><br><span class="line">            <span class="comment"># the path like this, but should be harmless.</span></span><br><span class="line">            path_info = <span class="string">'/'</span></span><br><span class="line">        self.environ = environ</span><br><span class="line">        self.path_info = path_info</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><table><thead><tr><th>HttpRequest对象的属性</th><th>描述</th></tr></thead><tbody><tr><td>path</td><td>表示提交请求页面完整地址的字符串，不包括域名和后面的参数。如 “/music/bands/the_beatles/“。</td></tr><tr><td>path_info</td><td>表示提交请求页面完整地址的字符串，不包括域名和后面的参数。如 “/music/bands/the_beatles/“。</td></tr><tr><td>method</td><td>表示提交请求使用的HTTP方法。如：GET、POST</td></tr><tr><td>GET</td><td>一个类字典对象，包含所有的HTTP的GET参数的信息。见 QueryDict 文档。</td></tr><tr><td>body</td><td>请求体： bytes 类型， get没有请求体</td></tr><tr><td>POST</td><td>一个类字典对象，包含所有的HTTP的POST参数的信息。见 QueryDict 文档。<br>通过POST提交的请求有可能包含一个空的 POST 字典，也就是说， 一个通过POST方法提交的表单可能不包含数据。因此，不应该使用 if request.POST 来判断POST方法的使用，而是使用 if request.method == “POST” 。提取数据可以使用get方法。<br>request.POST实际上是从request.body提取的，如果request.POST没有值，去request.body进行检查。<br>注意： POST 并 不 包含文件上传信息。见 FILES 。</td></tr><tr><td>COOKIES</td><td>一个标准的Python字典，包含所有cookie。键和值都是字符串。</td></tr><tr><td>FILES</td><td>一个类字典对象，包含所有上传的文件。 FILES 的键来自 <code>&lt;input type=&quot;file&quot; name=&quot;&quot; /&gt;</code> 中的 name 。 FILES 的值是一个标准的Python字典，包含以下三个键：<br>filename ：字符串，表示上传文件的文件名。<br>content-type ：上传文件的内容类型。<br>content ：上传文件的原始内容。<br>注意 FILES 只在请求的方法是 POST ，并且提交的 <code>&lt;form&gt;</code> 包含enctype=”multipart/form-data” 时才包含数据。否则， FILES 只是一个空的类字典对象。我们也可以使用ajax来上传文件。</td></tr><tr><td>META</td><td>一个标准的Python字典，包含所有有效的HTTP头信息。有效的头信息与客户端和服务器有关。<br>CONTENT_LENGTH CONTENT_TYPE QUERY_STRING ：未解析的原始请求字符串。<br>REMOTE_ADDR ：客户端IP地址。<br>REMOTE_HOST ：客户端主机名。<br>SERVER_NAME ：服务器主机名。<br>SERVER_PORT ：服务器端口号。<br>在 META 中有效的任一HTTP头信息都是带有 <code>HTTP_</code> 前缀的键（把 <code>-</code> 变为 <code>_</code>），例如： HTTP_ACCEPT_ENCODING<br>HTTP_ACCEPT_LANGUAGE<br>HTTP_HOST ：客户端发送的 Host 头信息。<br>HTTP_REFERER ：被指向的页面，如果存在的。<br>HTTP_USER_AGENT ：客户端的user-agent字符串。<br>HTTP_X_BENDER ： X-Bender 头信息的值，如果已设的话。<br>HTTP_X_CSRFTOKEN：X-CSRFToken csrf值，常在ajax中使用</td></tr><tr><td>user</td><td>一个 django.contrib.auth.models.User 对象表示当前登录用户。 若当前用户尚未登录， user 会设为 django.contrib.auth.models.AnonymousUser 的一个实例。可以将它们与 is_authenticated() 区别开：<br>if request.user.is_authenticated():<br># Do something for logged-in users.<br>else:<br># Do something for anonymous users.<br>user 仅当Django激活 AuthenticationMiddleware 时有效。</td></tr><tr><td>session</td><td>一个可读写的类字典对象，表示当前session。</td></tr><tr><td>raw_post_data</td><td>POST的原始数据。 用于对数据的复杂处理。</td></tr><tr><td>request.is_ajax</td><td>判断是否是ajax</td></tr></tbody></table><h3 id="QueryDict对象"><a href="#QueryDict对象" class="headerlink" title="QueryDict对象"></a>QueryDict对象</h3><p>我们平时用的 <code>request.GET</code> 和 <code>request.POST</code> 都是QueryDict对象，这个对象继承自dict，因此用法跟dict相差无几。其中用得比较多的是get方法和getlist方法。</p><ul><li>get方法：用来获取指定key的值，如果没有这个key，默认返回None。</li><li>getlist方法：如果浏览器上传上来的key对应的值有多个，那么就需要通过这个方法获取。</li></ul><p>对于QueryDict详见 [Django-QueryDict]</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><table><thead><tr><th>HttpRequest 的方法</th><th>描述</th></tr></thead><tbody><tr><td>request.get_full_path()</td><td>获取完整的路径信息，包含查询参数，不包含ip端口</td></tr><tr><td>request.is_secure()</td><td>HTTPS 返回 True</td></tr><tr><td>request.is_ajax()</td><td>判断是否是ajax请求</td></tr></tbody></table><h3 id="例子：文件上传"><a href="#例子：文件上传" class="headerlink" title="例子：文件上传"></a>例子：文件上传</h3><p>上传文件注意的事项：</p><ol><li>form表单的属性 <code>enctype=&quot;multipart/form-data&quot;</code></li><li>input type= ‘file’</li><li>request.FILES.get 类字典对象</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 类字典对象</span></span><br><span class="line">&lt;MultiValueDict: &#123;<span class="string">'f1'</span>: [&lt;InMemoryUploadedFile: 转义.png (image/png)&gt;]&#125;&gt;</span><br></pre></td></tr></table></figure><p>设置multiple可以上传多个文件</p><ul><li>python代码，从request.FILES这个字典中取出文件对象并写到文件。</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileUpload</span><span class="params">(View)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">'file_upload.html'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        print(request.FILES)</span><br><span class="line">        file_obj = request.FILES.get(<span class="string">'f1'</span>)</span><br><span class="line">        print(file_obj)</span><br><span class="line">        <span class="keyword">with</span> open(file_obj.name, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> file_obj.chunks():</span><br><span class="line">                f.write(i)</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">'ok'</span>)</span><br></pre></td></tr></table></figure><p>chunks方法：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 源码剖析：</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">chunks</span><span class="params">(self, chunk_size=None)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Read the file and yield chunks of ``chunk_size`` bytes (defaults to</span></span><br><span class="line"><span class="string">        ``UploadedFile.DEFAULT_CHUNK_SIZE``).</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> chunk_size:</span><br><span class="line">            chunk_size = self.DEFAULT_CHUNK_SIZE</span><br><span class="line">            <span class="comment"># DEFAULT_CHUNK_SIZE = 64 * 2 ** 10 默认每次读64mb</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.seek(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">except</span> (AttributeError, UnsupportedOperation):</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            data = self.read(chunk_size)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">yield</span> data</span><br></pre></td></tr></table></figure><h1 id="response对象"><a href="#response对象" class="headerlink" title="response对象"></a>response对象</h1><h2 id="HttpResponse"><a href="#HttpResponse" class="headerlink" title="HttpResponse"></a>HttpResponse</h2><ul><li><p><code>HttpResponse</code>类定义在 <code>django.http</code> 模块中。</p></li><li><p><code>HttpRequest</code>对象由Django自动创建，而<code>HttpResponse</code>对象则由程序员手动创建.</p></li><li><p>我们编写的每个视图都要实例化、填充和返回一个<code>HttpResponse</code>，</p></li><li><p>后面提到的<code>render</code>，<code>redirect</code>和<code>JsonResponse</code>都将返回<code>HttpResponse</code>。</p></li></ul><h3 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h3><p>HttpResponse.content：响应内容，bytes类型。</p><p>HttpResponse.charset：响应内容的编码</p><p>HttpResponse.status_code：响应的状态码</p><h2 id="render"><a href="#render" class="headerlink" title="render"></a>render</h2><p>render函数的功能：</p><ul><li>字符串替换，渲染完成</li><li>还是以HttpResponse对象进行返回</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">render</span><span class="params">(request, template_name, context=None, content_type=None, status=None, using=None)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Returns a HttpResponse whose content is filled with the result of calling</span></span><br><span class="line"><span class="string">    django.template.loader.render_to_string() with the passed arguments.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    content = loader.render_to_string(template_name, context, request, using=using)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(content, content_type, status)</span><br></pre></td></tr></table></figure><h2 id="redirect"><a href="#redirect" class="headerlink" title="redirect"></a>redirect</h2><p>参数可以是：</p><ul><li>一个模型：将调用模型的<code>get_absolute_url()</code> 函数</li><li>一个视图，可以带有参数：将使用<code>urlresolvers.reverse</code> 来反向解析名称</li><li>一个绝对的或相对的URL，将原封不动的作为重定向的位置。</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">redirect</span><span class="params">(to, *args, **kwargs)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> kwargs.pop(<span class="string">'permanent'</span>, <span class="literal">False</span>):</span><br><span class="line">        redirect_class = HttpResponsePermanentRedirect</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        redirect_class = HttpResponseRedirect</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> redirect_class(resolve_url(to, *args, **kwargs))</span><br></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="symbol">HttpResponseRedirect</span>(<span class="symbol">HttpResponseRedirectBase</span>):</span><br><span class="line">    <span class="symbol">status_code</span> = <span class="symbol">302</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">class</span> <span class="symbol">HttpResponsePermanentRedirect</span>(<span class="symbol">HttpResponseRedirectBase</span>):</span><br><span class="line">    <span class="symbol">status_code</span> = <span class="symbol">301</span></span><br></pre></td></tr></table></figure><ul><li><code>self[&#39;Location&#39;] = iri_to_uri(redirect_to)</code></li><li>如果没有redirect ，只需要在HttpResponse添加Location属性</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HttpResponseRedirectBase</span><span class="params">(HttpResponse)</span>:</span></span><br><span class="line">    allowed_schemes = [<span class="string">'http'</span>, <span class="string">'https'</span>, <span class="string">'ftp'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, redirect_to, *args, **kwargs)</span>:</span></span><br><span class="line">        super(HttpResponseRedirectBase, self).__init__(*args, **kwargs)</span><br><span class="line">        self[<span class="string">'Location'</span>] = iri_to_uri(redirect_to)</span><br><span class="line">        parsed = urlparse(force_text(redirect_to))</span><br><span class="line">        <span class="keyword">if</span> parsed.scheme <span class="keyword">and</span> parsed.scheme <span class="keyword">not</span> <span class="keyword">in</span> self.allowed_schemes:</span><br><span class="line">            <span class="keyword">raise</span> DisallowedRedirect(<span class="string">"Unsafe redirect to URL with protocol '%s'"</span> % parsed.scheme)</span><br></pre></td></tr></table></figure><h3 id="301与302的区别"><a href="#301与302的区别" class="headerlink" title="301与302的区别"></a>301与302的区别</h3><p>临时重定向（响应状态码：302）和永久重定向（响应状态码：301）对普通用户来说是没什么区别的，它主要面向的是搜索引擎的机器人。</p><ul><li>A页面临时重定向到B页面，那搜索引擎收录的就是A页面。</li><li>A页面永久重定向到B页面，那搜索引擎收录的就是B页面。</li></ul><h2 id="JsonResponse"><a href="#JsonResponse" class="headerlink" title="JsonResponse"></a>JsonResponse</h2><ul><li>向前端传输数据</li><li>序列化 + content-type</li></ul><p>对于前后端分离，传的是数据，不再是页面了，所以需要新的工具</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_data</span><span class="params">(request)</span>:</span></span><br><span class="line">    data = &#123;<span class="string">'status'</span>: <span class="number">0</span>, <span class="string">'data'</span>: &#123;<span class="string">'k1'</span>:<span class="string">'v1'</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># return HttpResponse(data)   # 只显示key</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(json.dumps(data), content_type)</span><br></pre></td></tr></table></figure><p>content-Type ：普通文本，需要进行反序列化</p><p>方法一：</p><p>响应头加自动反序列化</p><figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">return HttpResponse(<span class="name">json</span>.dumps(<span class="name">data</span>), content_type='application/json')</span><br></pre></td></tr></table></figure><p>方法二：</p><figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line"><span class="meta"># ret = HttpResponse(json.dumps(data))</span></span><br><span class="line"><span class="meta"># ret[<span class="string">'content-typje'</span>] = <span class="string">'application/json'</span></span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http.response <span class="keyword">import</span> JsonResponse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_data</span><span class="params">(request)</span>:</span></span><br><span class="line">    data = &#123;<span class="string">'status'</span>: <span class="number">0</span>, <span class="string">'data'</span>: &#123;<span class="string">'k1'</span>: <span class="string">'v1'</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 方法二：</span></span><br><span class="line">    <span class="comment"># ret = HttpResponse(json.dumps(data))</span></span><br><span class="line">    <span class="comment"># ret['content-typje'] = 'application/json'		# 告诉浏览器类型，它会帮你反序列化</span></span><br><span class="line">    <span class="comment"># return HttpResponse(data)   # 只显示key</span></span><br><span class="line">    <span class="comment"># return HttpResponse(json.dumps(data), content_type='application/json')	</span></span><br><span class="line">    <span class="keyword">return</span> JsonResponse(data)</span><br></pre></td></tr></table></figure><p>对于非字典需要加safe参数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http.response <span class="keyword">import</span> JsonResponse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_data</span><span class="params">(request)</span>:</span></span><br><span class="line">    li = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">    <span class="keyword">return</span> JsonResponse(li,safe=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>django</category>
      </categories>
      <tags>
        <tag>django</tag>
        <tag>学习笔记</tag>
        <tag>Web前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo的折腾</title>
    <url>/Hexo/20190704-hexo-next-diy.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>不想局限于博客园的单页面，直到发现了Hexo，在Hexo的基础上使用了Next主题，再加上些修改。</p></blockquote><a id="more"></a><h3 id="Hexo常用命令"><a href="#Hexo常用命令" class="headerlink" title="Hexo常用命令"></a>Hexo常用命令</h3><ol><li><code>hexo clean</code></li><li><code>hexo g</code> (Generate static files)</li><li><code>hexo s</code> (Run server)</li><li><code>hexo d</code> (Deploy to remote sites)</li><li><code>hexo new page xxx</code></li><li><code>hexo new [layout] &lt;title&gt;</code> (Create a new post)</li></ol><h3 id="首页文章框产生阴影"><a href="#首页文章框产生阴影" class="headerlink" title="首页文章框产生阴影"></a>首页文章框产生阴影</h3><ol><li><p>在custom下改：</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//首页文章阴影样式</span></span><br><span class="line">.post &#123;</span><br><span class="line">    margin-top: <span class="number">0</span>px;</span><br><span class="line">    margin-bottom: <span class="number">25</span>px;</span><br><span class="line">    padding: <span class="number">30</span>px;</span><br><span class="line">    -webkit-box-shadow: <span class="number">0</span> <span class="number">0</span> <span class="number">5</span>px rgba(<span class="number">202</span>, <span class="number">203</span>, <span class="number">203</span>, <span class="number">.5</span>);</span><br><span class="line">    -moz-box-shadow: <span class="number">0</span> <span class="number">0</span> <span class="number">5</span>px #<span class="number">222</span></span><br><span class="line">    border-radius:<span class="number">25</span>px;  <span class="comment">/* 矩形有圆角 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>改成圆角矩形后效果如下</p></li></ol><p>​ <img src="/Hexo/20190704-hexo-next-diy/%E5%9C%86%E8%A7%92%E7%9F%A9%E5%BD%A2.png" alt="圆角矩形"></p><h3 id="去掉首页中文章块下面的下划线"><a href="#去掉首页中文章块下面的下划线" class="headerlink" title="去掉首页中文章块下面的下划线"></a>去掉首页中文章块下面的下划线</h3><ol><li><p>原本是：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.posts-expand</span> <span class="selector-class">.post-eof</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">15px</span> auto px;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">8%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>改为：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.posts-expand</span> <span class="selector-class">.post-eof</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="添加可爱的小姐姐（live2d插件）"><a href="#添加可爱的小姐姐（live2d插件）" class="headerlink" title="添加可爱的小姐姐（live2d插件）"></a>添加可爱的小姐姐（live2d插件）</h3><ol><li><p><a href="https://huaji8.top/post/live2d-plugin-2.0/" target="_blank" rel="noopener">图片预览</a></p></li><li><p><a href="https://github.com/EYHN/hexo-helper-live2d/blob/master/README.zh-CN.md" target="_blank" rel="noopener">官方写的很详细，直接一步一步走就好</a></p></li><li><p>效果如下</p><p><img src="/Hexo/20190704-hexo-next-diy/%E7%9C%8B%E6%9D%BF%E5%A8%98.png" alt="看板娘"></p></li></ol><h3 id="添加图片，并控制大小。"><a href="#添加图片，并控制大小。" class="headerlink" title="添加图片，并控制大小。"></a>添加图片，并控制大小。</h3><ol><li><p>出现的问题：标准的markdown是在图片后面加上” =200x300”就可以定义图片大小，但此版本的hexo不行。</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">名字</span>](<span class="link">路径 =200x</span>)</span><br></pre></td></tr></table></figure></li><li><p>解决办法：</p><ol><li><p>使用img标签，设置图片大小</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;img <span class="attribute">width</span>=200 <span class="attribute">src</span>=<span class="string">"路径"</span> &gt;</span><br></pre></td></tr></table></figure></li><li><p>使用div标签</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> align=center&gt; </span><br><span class="line">	&lt;<span class="selector-tag">img</span> <span class="attribute">width</span>=<span class="number">200</span> src=<span class="string">"路径"</span> &gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">这里的<span class="attribute">width</span>=<span class="number">200</span> 控制宽度，效果如下</span><br></pre></td></tr></table></figure></li></ol></li><li><p>效果如下：</p></li></ol><div align="center"><img width="200" src="/uploads/3.jpg"></div><h3 id="hexo的常用操作"><a href="#hexo的常用操作" class="headerlink" title="hexo的常用操作"></a>hexo的常用操作</h3><h3 id="Next主题下主页添加边框阴影效果"><a href="#Next主题下主页添加边框阴影效果" class="headerlink" title="Next主题下主页添加边框阴影效果"></a>Next主题下主页添加边框阴影效果</h3><p>打开 <code>themes/下的 source/css/_custom/custom.styl</code>,向里面添加代码：</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//首页文章阴影样式</span></span><br><span class="line">.post &#123;</span><br><span class="line">    margin-top: <span class="number">60</span>px;</span><br><span class="line">    margin-bottom: <span class="number">60</span>px;</span><br><span class="line">    padding: <span class="number">25</span>px;</span><br><span class="line">    -webkit-box-shadow: <span class="number">0</span> <span class="number">0</span> <span class="number">10</span>px rgba(<span class="number">202</span>, <span class="number">203</span>, <span class="number">203</span>, <span class="number">.5</span>);</span><br><span class="line">    -moz-box-shadow: <span class="number">0</span> <span class="number">0</span> <span class="number">10</span>px rgba(<span class="number">202</span>, <span class="number">203</span>, <span class="number">204</span>, <span class="number">.5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="右上角或左上角实现fork-me-on-GitHub"><a href="#右上角或左上角实现fork-me-on-GitHub" class="headerlink" title="右上角或左上角实现fork me on GitHub"></a>右上角或左上角实现fork me on GitHub</h3><ol><li><p>选择样式 <a href="http://tholman.com/github-corners/" target="_blank" rel="noopener">Github Corners</a> 还可以选择 <a href="https://github.blog/2008-12-19-github-ribbons/" target="_blank" rel="noopener">GitHub Ribbons</a></p></li><li><p>复制链接后修改 <code>https://github.com/you</code>为自己的GitHub链接。</p></li><li><p>打开 <code>themes/next/layout/_layout.swig</code>，把代码复制到 <code>&lt;div class=&quot;headband&quot;&gt;&lt;/div&gt;</code>下面，当然我们还需要在img标签内加入位置属性，可以参考以下设置。</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;a <span class="attribute">href</span>=<span class="string">"https://github.com/atlasnq"</span>&gt;&lt;img <span class="attribute">style</span>=<span class="string">"position: absolute; top: 0; right: 0; border: 0;"</span> <span class="attribute">width</span>=<span class="string">"149"</span> <span class="attribute">height</span>=<span class="string">"149"</span> <span class="attribute">src</span>=<span class="string">"https://github.blog/wp-content/uploads/2008/12/forkme_right_darkblue_121621.png?resize=149%2C149"</span> <span class="attribute">class</span>=<span class="string">"attachment-full size-full"</span> <span class="attribute">alt</span>=<span class="string">"Fork me on GitHub"</span> <span class="attribute">data-recalc-dims</span>=<span class="string">"1"</span>&gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure></li></ol><h4 id="换超级漂亮的字体"><a href="#换超级漂亮的字体" class="headerlink" title="换超级漂亮的字体"></a>换超级漂亮的字体</h4><p>使用这位老哥的教程<a href="https://io-oi.me/tech/noto-serif-sc-added-on-google-fonts.html" target="_blank" rel="noopener">https://io-oi.me/tech/noto-serif-sc-added-on-google-fonts.html</a></p><p>就不copy了，给大家展示一下效果，喜欢的可以详看这里的教程。</p><p><img src="/Hexo/20190704-hexo-next-diy/%E5%AD%97%E4%BD%93.png" alt="字体"></p><h4 id="添加阅读时长和字数统计"><a href="#添加阅读时长和字数统计" class="headerlink" title="添加阅读时长和字数统计"></a>添加阅读时长和字数统计</h4><ol><li><p>修改主题配置文件 <code>__config</code></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Post wordcount display settings</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/willin/hexo-wordcount</span></span><br><span class="line"><span class="attr">post_wordcount:</span></span><br><span class="line"><span class="attr">  item_text:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  wordcount:</span> <span class="literal">true</span>         <span class="comment"># 单篇 字数统计</span></span><br><span class="line"><span class="attr">  min2read:</span> <span class="literal">true</span>          <span class="comment"># 单篇 阅读时长</span></span><br><span class="line"><span class="attr">  totalcount:</span> <span class="literal">false</span>       <span class="comment"># 网站 字数统计</span></span><br><span class="line"><span class="attr">  separated_meta:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li><p>安装 hexo-wordcount插件</p><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">npm i --<span class="keyword">save</span> hexo-<span class="built_in">wordcount</span></span><br></pre></td></tr></table></figure></li><li><p>显示文字</p><p>打开 post.swig 文件，路径如下：<code>xxx_blog/themes/next/layout/_macro/post.swig</code></p><p>在block content 内添加</p><figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">title</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123; __('post.wordcount') &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; wordcount(post.content) &#125;&#125;</span><span class="xml"> 字</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">title</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123; __('post.min2read') &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; min2read(post.content) &#125;&#125;</span><span class="xml"> 分钟</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>修改完成后，重启预览就可以了。</p></li></ol><h2 id="Tag-Cloud"><a href="#Tag-Cloud" class="headerlink" title="Tag Cloud"></a>Tag Cloud</h2><p><a href="https://github.com/MikeCoder/hexo-tag-cloud/blob/master/README.ZH.md" target="_blank" rel="noopener"><strong>hexo-tag-cloud</strong></a></p><p>设置过程直接开文档就可以!</p><p>补充：在我设置颜色的时候并没有起作用，然后我发现改为 <code>textColour</code> 和 <code>outlineColour</code> 就可以了，如果遇到问题的小伙伴可以试一试！</p><p>TagCanvas 是一个基于HTML5Canvas技术开发的标签云动画。</p><p>参数说明:</p><table><thead><tr><th><strong>选项</strong></th><th><strong>默认</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>interval</td><td>20</td><td>动画帧之间的间隔，以毫秒为单位</td></tr><tr><td>maxSpeed</td><td>0.05</td><td>最大旋转速度</td></tr><tr><td>minSpeed</td><td>0.0</td><td>鼠标离开画布时的最小旋转速度</td></tr><tr><td>decel</td><td>0.95</td><td>鼠标离开画布时的减速率</td></tr><tr><td>minBrightness</td><td>0.1</td><td>最远点的标签亮度（0.0-1.0）</td></tr><tr><td>textColour</td><td>“#ff99ff”</td><td>标记文本的颜色</td></tr><tr><td>textHeight</td><td>15</td><td>标记文本字体的高度（以像素为单位）</td></tr><tr><td>textFont</td><td>“Helvetica, Arial, sans-serif”</td><td>标签文本的字体系列</td></tr><tr><td>outlineColour</td><td>“#ffff99”</td><td>活动标签周围的框的颜色</td></tr><tr><td>outlineThickness</td><td>2</td><td>轮廓的粗细（以像素为单位）</td></tr><tr><td>outlineOffset</td><td>5</td><td>轮廓与文本的距离，以像素为单位</td></tr><tr><td>pulsateTo</td><td>1.0</td><td>“脉动轮廓不透明度(0.0 - 1.0)</td></tr><tr><td>pulsateTime</td><td>3</td><td>脉搏率，以每秒的秒数为单位</td></tr><tr><td>depth</td><td>0.5</td><td>控制透视（0.0-1.0）</td></tr><tr><td>initial</td><td>null</td><td>初始旋转，水平和垂直为数组，例如[0.8，-0.3。值乘以maxSpeed。</td></tr><tr><td>freezeActive</td><td>FALSE</td><td>设置为true以在突出显示标记时暂停移动。</td></tr><tr><td>frontSelect</td><td>FALSE</td><td>设置为true以防止在云后面选择标记。</td></tr><tr><td>txtOpt</td><td>TRUE</td><td>文本优化，将文本标签转换为图像以获得更好的性能。</td></tr><tr><td>txtScale</td><td>2</td><td>在txtOpt模式下转换为图像时文本的缩放系数。</td></tr><tr><td>reverse</td><td>FALSE</td><td>设置为true以反转相对于鼠标位置的移动方向。</td></tr><tr><td>hideTags</td><td>FALSE</td><td>如果TagCanvas成功启动，则设置为true以自动隐藏标记列表元素。</td></tr><tr><td>zoom</td><td>1</td><td>调整画布中标签云的相对大小。较大的值将放大到云，较小的值将缩小。</td></tr><tr><td>wheelZoom</td><td>TRUE</td><td>使用鼠标滚轮或滚动手势可以放大和缩小云。</td></tr><tr><td>zoomStep</td><td>0.05</td><td>每次移动鼠标滚轮时缩放变焦量。</td></tr><tr><td>zoomMax</td><td>3</td><td>最大缩放值。</td></tr><tr><td>zoomMin</td><td>0.3</td><td>最小缩放值。</td></tr><tr><td>shadow</td><td>“#000000”</td><td>每个标签后面阴影的颜色。</td></tr><tr><td>shadowBlur</td><td>0</td><td>标记阴影模糊量，以像素为单位。</td></tr><tr><td>shadowOffset</td><td>[0,0]</td><td>标记阴影的X和Y偏移量，以像素为单位。</td></tr><tr><td>weight</td><td>FALSE</td><td>设置为true以打开标签的权重。</td></tr><tr><td>weightMode</td><td>“size”</td><td>用于显示标记权重的方法。应该是尺寸，颜色或两者之一。</td></tr><tr><td>weightSize</td><td>1</td><td>用于在使用大小或两者的重量模式时调整标签大小的乘数。</td></tr><tr><td>weightGradient</td><td>{0:’#f00’, 0.33:’#ff0’, 0.66:’#0f0’, 1:’#00f’}</td><td>使用颜色权重模式或两者时，用于着色标签的颜色渐变。</td></tr><tr><td>weightFrom</td><td>null</td><td>用于获取标记权重的link属性。默认值为null表示权重取自计算出的链接字体大小。</td></tr><tr><td>shape</td><td>“sphere”</td><td>目前支持的是Sphere,hcylinder 或vcylinder 三种形状显示</td></tr><tr><td>lock</td><td>null</td><td>值“x”限制云的旋转到（水平）x轴，值“y”限制旋转到（垂直）y轴。 （这些是字符串，因此需要引号）</td></tr></tbody></table><p>推荐阅读：<a href="[http://www.023xs.cn/Article/ZdPZna/TagCanvas-HTML5Canvas%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91%E7%9A%84%E6%A0%87%E7%AD%BE%E4%BA%91%E5%8A%A8%E7%94%BB](http://www.023xs.cn/Article/ZdPZna/TagCanvas-HTML5Canvas技术开发的标签云动画)">TagCanvas - HTML5 Canvas技术开发的标签云动画</a></p><h1 id="上传本地字体"><a href="#上传本地字体" class="headerlink" title="上传本地字体"></a>上传本地字体</h1><ul><li>为了使用漂亮的字体，先开始把<code>external-fonts.swig</code>这个文件的全部内容直接替换为 Google Fonts 网站生成的<code>&lt;link&gt;</code>代码，然后可以将<code>googleapis.com</code>修改为<code>loli.net</code>，来优化速度。</li><li>尝试一下上传本地字体。</li></ul><h3 id="下载字体"><a href="#下载字体" class="headerlink" title="下载字体"></a>下载字体</h3><p><a href="https://fonts.google.com/" target="_blank" rel="noopener">Google Fonts</a> 中选好自己喜欢的自己并下载，下载完成后解压到</p><p><code>\themes\next\source\fonts</code>，然后在我们的 <code>custom.style</code> 中导入即可。</p><h3 id="设置css"><a href="#设置css" class="headerlink" title="设置css"></a>设置css</h3><p>路径为：<code>source/css/_custom/custom.styl</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Font settings.</span></span><br><span class="line"></span><br><span class="line">@font-face &#123;</span><br><span class="line">	font-family: <span class="string">'Parisienne'</span>;</span><br><span class="line">	src: local(<span class="string">"Parisienne Regular"</span>),local(<span class="string">"Parisienne-Regular"</span>),url(<span class="string">"/fonts/Parisienne-Regular.ttf"</span>);</span><br><span class="line">&#125;</span><br><span class="line">@font-face &#123;</span><br><span class="line">	font-family: <span class="string">'PinyonScript'</span>;</span><br><span class="line">	src: local(<span class="string">"PinyonScript Regular"</span>),local(<span class="string">"PinyonScript-Regular"</span>),url(<span class="string">"/fonts/PinyonScript-Regular.ttf"</span>);</span><br><span class="line">&#125;</span><br><span class="line">@font-face &#123;</span><br><span class="line">	font-family: <span class="string">"Noto Serif SC"</span>;</span><br><span class="line">	src: local(<span class="string">'NotoSerifSC Regular'</span>), local(<span class="string">'NotoSerifSC-Regular'</span>), url(<span class="string">"/fonts/NotoSerifSC-Regular.otf"</span>);</span><br><span class="line">&#125;</span><br><span class="line">@font-face &#123;</span><br><span class="line">	font-family: <span class="string">"Noto Serif SC"</span>;</span><br><span class="line">	font-weight: bold;</span><br><span class="line">	src: local(<span class="string">'NotoSerifSC Bold'</span>), local(<span class="string">'NotoSerifSC-Bold'</span>), url(<span class="string">"/fonts/NotoSerifSC-Bold.otf"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于字体在css中的设置不太清楚的看官可以移动这篇 <a href="https://blog.gtwang.org/web-development/css-font-face/" target="_blank" rel="noopener">推荐阅读</a>。</p><p>修改主题下的 <code>__config.yml</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">font:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  host:</span> </span><br><span class="line"><span class="attr">  global:</span></span><br><span class="line"><span class="attr">    external:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment">#family: EB Garamond,Noto Serif SC</span></span><br><span class="line"><span class="attr">    family:</span> </span><br><span class="line"><span class="attr">    size:</span></span><br><span class="line">    </span><br><span class="line"><span class="attr">  headings:</span></span><br><span class="line"><span class="attr">    external:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment">#family: Roboto Slab</span></span><br><span class="line"><span class="attr">    family:</span> </span><br><span class="line"><span class="attr">    size:</span> </span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font settings for posts.</span></span><br><span class="line">  <span class="comment"># Fallback to `global` font settings.</span></span><br><span class="line"><span class="attr">  posts:</span></span><br><span class="line"><span class="attr">    external:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    family:</span>  </span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font settings for Logo.</span></span><br><span class="line">  <span class="comment"># Fallback to `global` font settings.</span></span><br><span class="line"><span class="attr">  logo:</span></span><br><span class="line"><span class="attr">    external:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    family:</span> </span><br><span class="line"><span class="attr">    size:</span> <span class="number">24</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font settings for &lt;code&gt; and code blocks.</span></span><br><span class="line"><span class="attr">  codes:</span></span><br><span class="line"><span class="attr">    external:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    family:</span> <span class="string">Roboto</span> <span class="string">Mono</span></span><br><span class="line"><span class="attr">    size:</span></span><br></pre></td></tr></table></figure><p>ps：如果出现问题，试着把上面 font 下的 enable 改为true。</p><h3 id="Preload"><a href="#Preload" class="headerlink" title="Preload"></a>Preload</h3><p>​ 前面上传了本地字体，emmm，由于加了太多类型，导致加载增多，速度反倒更慢了，不过也学习到一个新的东西 preload，它能够增加内容的优先级，预先加载一些内容。</p><p>​ 先看结果：</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;link <span class="attribute">rel</span>=<span class="string">"preload"</span> <span class="attribute">href</span>=<span class="string">"/lib/font-awesome/fonts/fontawesome-webfont.woff2?v=4.7.0"</span> <span class="attribute">as</span>=<span class="string">"font"</span> <span class="attribute">type</span>=<span class="string">"font/woff2"</span>  crossorigin&gt;</span><br><span class="line">&lt;link <span class="attribute">rel</span>=<span class="string">"preload"</span> <span class="attribute">href</span>=<span class="string">"/fonts/NotoSerifSC-Regular.otf"</span> <span class="attribute">as</span>=<span class="string">"font"</span> <span class="attribute">type</span>=<span class="string">"font/otf"</span> crossorigin&gt;</span><br><span class="line">&lt;link <span class="attribute">rel</span>=<span class="string">"preload"</span> <span class="attribute">href</span>=<span class="string">"/fonts/Parisienne-Regular.ttf"</span> <span class="attribute">as</span>=<span class="string">"font"</span> <span class="attribute">type</span>=<span class="string">"font/ttf"</span> crossorigin&gt;</span><br><span class="line">&lt;link <span class="attribute">rel</span>=<span class="string">"preload"</span> <span class="attribute">href</span>=<span class="string">"/fonts/PinyonScript-Regular.ttf"</span> <span class="attribute">as</span>=<span class="string">"font"</span> <span class="attribute">type</span>=<span class="string">"font/ttf"</span> crossorigin&gt;</span><br><span class="line">&lt;link <span class="attribute">rel</span>=<span class="string">"preload"</span> <span class="attribute">href</span>=<span class="string">"/fonts/EBGaramond-Regular.ttf"</span> <span class="attribute">as</span>=<span class="string">"font"</span> <span class="attribute">type</span>=<span class="string">"font/ttf"</span> crossorigin&gt;</span><br><span class="line"></span><br><span class="line">&lt;link <span class="attribute">rel</span>=<span class="string">"preload"</span> <span class="attribute">href</span>=<span class="string">"https://source.unsplash.com/random/1600x900"</span> <span class="attribute">as</span>=<span class="string">"image"</span> crossorigin&gt;</span><br></pre></td></tr></table></figure><ul><li><p>preload可以预先加载字体，图片，js文件，css样式表等等。</p></li><li><p>通常我们可以写在<code>link</code>标签中，设置 <code>rel=&quot;preload&quot;</code>，写 <code>href=&quot; &quot;</code> as属性， 如果出现重复引入可以设置crossorigin来进行合并。</p></li><li><p>下面对这些属性一一道来</p></li></ul><h4 id="preload提升了资源加载的优先级"><a href="#preload提升了资源加载的优先级" class="headerlink" title="preload提升了资源加载的优先级"></a>preload提升了资源加载的优先级</h4><ul><li>使用 preload 前，遇到资源依赖时才进行加载</li><li>使用 preload 后，不管资源是否使用都将提前加载</li><li>但我们不能滥用preload，造成资源浪费。</li></ul><h4 id="preload与prefetch"><a href="#preload与prefetch" class="headerlink" title="preload与prefetch"></a>preload与prefetch</h4><p>先做一个区分：</p><ul><li>preload是告诉浏览器一定要加载什么资源</li><li>prefetch是告诉浏览器可能需要什么资源</li></ul><h4 id="as属性"><a href="#as属性" class="headerlink" title="as属性"></a>as属性</h4><ul><li><code>audio</code>: 音频文件。</li><li><code>document</code>: 一个将要被嵌入到<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/frame" target="_blank" rel="noopener">``</a>或<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/iframe" target="_blank" rel="noopener">``</a>内部的HTML文档。</li><li><code>embed</code>: 一个将要被嵌入到<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/embed" target="_blank" rel="noopener">``</a>元素内部的资源。</li><li><code>fetch</code>: 那些将要通过fetch和XHR请求来获取的资源，比如一个ArrayBuffer或JSON文件。</li><li><code>font</code>: 字体文件。</li><li><code>image</code>: 图片文件。</li><li><code>object</code>: 一个将会被嵌入到<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/embed" target="_blank" rel="noopener">``</a>元素内的文件。</li><li><code>script</code>: JavaScript文件。</li><li><code>style</code>: 样式表。</li><li><code>track</code>: WebVTT文件。</li><li><code>worker</code>: 一个JavaScript的web worker或shared worker。</li><li><code>video</code>: 视频文件。</li></ul><h4 id="crossorigin跨域获取"><a href="#crossorigin跨域获取" class="headerlink" title="crossorigin跨域获取"></a>crossorigin跨域获取</h4><p>在没有设置这个属性之前，我们发现，我预先加载没用啊，资源加载了两遍，反倒有些浪费了，我们需要将它们合并的一个东西，所以 <code>crossorigin</code> 来了，在W3 规范是这么解释的：</p><blockquote><p>Preload links for CORS enabled resources, such as fonts or images with a crossorigin attribute, must also include a crossorigin attribute, in order for the resource to be properly used.</p></blockquote><p>所以设置这个属性后，就可以合二为一了，我们只去请求了一次。</p><p>推荐阅读<a href="https://zhuanlan.zhihu.com/p/33759023" target="_blank" rel="noopener">用 preload 预加载页面资源</a>。</p><p>ps：其实这块，算是瞎折腾了，这样的本地字体，浏览器需要下载额外的，还是用现成的CDN好。</p><hr>]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Next主题</tag>
      </tags>
  </entry>
  <entry>
    <title>Django的View</title>
    <url>/django/20190704-django_5.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>本篇介绍Django 的MTV结构中的 View。</p></blockquote><a id="more"></a><hr><p>通过这篇文章，你能了解到：</p><ul><li>view是什么?</li><li>定义视图的两种方式</li><li>给视图加装饰器，来增加额外的功能</li></ul><h1 id="View"><a href="#View" class="headerlink" title="View"></a>View</h1><p>一个视图函数（或视图类），简称视图，是一个简单的Python 函数（类），它接受Web请求并且返回Web响应。</p><p>响应可以是一张网页的HTML内容，一个重定向，一个404错误，一个XML文档，或者一张图片。</p><p>无论视图本身包含什么逻辑，都要返回响应。代码写在哪里也无所谓，只要它在你当前项目目录下面。除此之外没有更多的要求了——可以说“没有什么神奇的地方”。为了将代码放在某处，大家约定成俗将视图放置在项目（project）或应用程序（app）目录中的名为<code>views.py</code>的文件中。</p><h1 id="FBV与CBV"><a href="#FBV与CBV" class="headerlink" title="FBV与CBV"></a>FBV与CBV</h1><h2 id="FBV"><a href="#FBV" class="headerlink" title="FBV"></a>FBV</h2><p>function based view 基于函数的视图</p><p>定义FBV：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">AddPublisher</span><span class="params">(request)</span>:</span></span><br><span class="line">	<span class="string">'''功能逻辑'''</span> </span><br><span class="line">	<span class="keyword">return</span> HttpResponse(<span class="string">'ok'</span>)</span><br></pre></td></tr></table></figure><p>对应关系：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">url(<span class="string">r'^publisher_add/'</span>, views.AddPublisher),</span><br></pre></td></tr></table></figure><h2 id="CBV"><a href="#CBV" class="headerlink" title="CBV"></a>CBV</h2><p>class based view 基于类的视图</p><p>定义 CBV：</p><ul><li>较于FBV会更清晰</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> View</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddPublisher</span><span class="params">(View)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="comment"># 处理 GET 请求</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">'ok'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="comment"># 处理 POST 请求</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">'ok'</span>)</span><br></pre></td></tr></table></figure><ul><li>修改对应关系，执行as_view()方法</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">url(<span class="string">r'^publisher_add/'</span>, views.AddPublisher.as_view()),</span><br></pre></td></tr></table></figure><h2 id="源码剖析"><a href="#源码剖析" class="headerlink" title="源码剖析"></a>源码剖析</h2><ol><li><p>项目启动时，运行 urls.py ；as_view方法去执行，返回view函数</p></li><li><p>请求到来时，执行view函数</p><ol><li><p>实例化AddPublisher —&gt; self</p></li><li><p>self.request = request</p></li><li><p>执行view函数中的 self.dispatch(request, <em>args, *</em>kwargs) 方法</p><ol><li><p>判断请求方式是否被允许 <code>if request.method.lower() in self.http_method_names:</code></p><ol><li><p>允许</p><p>list中有这个方法，且在自定义的类中也写了这个方法。</p><p>通过反射获取请求方式对应的方法 —&gt; handler （重要）</p></li><li><p>不允许</p><p>list中没有该方法</p><p><code>handler = self.http_method_not_allowed</code> —&gt; handler</p></li></ol></li><li><p>执行handler，获取响应</p><ol><li><p>允许</p></li><li><p>不允许</p><p>执行 <code>http_method_not_allowed</code> ，返回一个HttpResponse</p></li></ol></li></ol></li></ol></li></ol><p>最终目标就是将我们自定义的类中的 get 或 post 方法返回！</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">view</span><span class="params">(request, *args, **kwargs)</span>:</span></span><br><span class="line">    self = cls(**initkwargs)</span><br><span class="line">    <span class="keyword">if</span> hasattr(self, <span class="string">'get'</span>) <span class="keyword">and</span> <span class="keyword">not</span> hasattr(self, <span class="string">'head'</span>):</span><br><span class="line">        self.head = self.get</span><br><span class="line">        self.request = request</span><br><span class="line">        self.args = args</span><br><span class="line">        self.kwargs = kwargs</span><br><span class="line">        <span class="keyword">return</span> self.dispatch(request, *args, **kwargs)</span><br></pre></td></tr></table></figure><p>dispatch</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dispatch</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method.lower() <span class="keyword">in</span> self.http_method_names:</span><br><span class="line">        handler = getattr(self, request.method.lower(), self.http_method_not_allowed)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        handler = self.http_method_not_allowed</span><br><span class="line">    <span class="keyword">return</span> handler(request, *args, **kwargs)</span><br></pre></td></tr></table></figure><p>handler</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">http_method_not_allowed</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">    logger.warning(</span><br><span class="line">    <span class="string">'Method Not Allowed (%s): %s'</span>, request.method, request.path,</span><br><span class="line">    extra=&#123;<span class="string">'status_code'</span>: <span class="number">405</span>, <span class="string">'request'</span>: request&#125;</span><br><span class="line">    )</span><br><span class="line"><span class="keyword">return</span> http.HttpResponseNotAllowed(self._allowed_methods())		<span class="comment"># 状态码 405</span></span><br></pre></td></tr></table></figure><h1 id="给视图加装饰器"><a href="#给视图加装饰器" class="headerlink" title="给视图加装饰器"></a>给视图加装饰器</h1><p>装饰器是在不修改源代码以及调用方式的情况下，增加新的功能。</p><h2 id="定义装饰器"><a href="#定义装饰器" class="headerlink" title="定义装饰器"></a>定义装饰器</h2><p>这里定义一个计算执行时间的装饰器</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timer</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="meta">    @wraps(func)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(*args,**kwargs)</span>:</span></span><br><span class="line">        <span class="string">'''inner'''</span></span><br><span class="line">        start_time = time.time()</span><br><span class="line">        ret = func(*args,**kwargs)</span><br><span class="line">        print(<span class="string">f'执行时间：<span class="subst">&#123;time.time() - start_time&#125;</span>'</span>)</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="meta">@timer</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">blog</span><span class="params">(request, *args, **kwargs)</span>:</span></span><br><span class="line">    <span class="string">'''blog'''</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'ok'</span>)</span><br></pre></td></tr></table></figure><p>note：对于inner函数，我们需要使用 wraps 装饰器装饰，这样可以把被装饰函数的配置信息（<code>__name__</code>, <code>__doc__</code>）等与inner函数的配置信息进行替换。</p><h2 id="添加装饰器的几种方式"><a href="#添加装饰器的几种方式" class="headerlink" title="添加装饰器的几种方式"></a>添加装饰器的几种方式</h2><p>由于视图分为FBV与CBV，对于FBV，可以给它直接加装饰器，对于CBV的绑定方法，有下列几种情况</p><h3 id="直接加（不建议）"><a href="#直接加（不建议）" class="headerlink" title="直接加（不建议）"></a>直接加（不建议）</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@timer</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request)</span>:</span></span><br><span class="line">	<span class="keyword">return</span> render(request, <span class="string">'publisher_add.html'</span>)</span><br></pre></td></tr></table></figure><h3 id="在方法的定义上使用-method-decorator-装饰"><a href="#在方法的定义上使用-method-decorator-装饰" class="headerlink" title="在方法的定义上使用 method_decorator 装饰"></a>在方法的定义上使用 <code>method_decorator</code> 装饰</h3><p>通过 <code>method_decorator</code> 可以把函数装饰器转为方法装饰器</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.utils.decorators <span class="keyword">import</span> method_decorator</span><br><span class="line"><span class="meta">@method_decorator(timer)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'publisher_add.html'</span>)</span><br></pre></td></tr></table></figure><h3 id="在类的定义上使用-method-decorator-装饰"><a href="#在类的定义上使用-method-decorator-装饰" class="headerlink" title="在类的定义上使用 method_decorator 装饰"></a>在类的定义上使用 <code>method_decorator</code> 装饰</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@method_decorator(timer, name='post')</span></span><br><span class="line"><span class="meta">@method_decorator(timer, name='get')</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddPublisher</span><span class="params">(View)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="comment"># 处理 GET请求</span></span><br><span class="line">        print(self.request <span class="keyword">is</span> request)</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">'publisher_add.html'</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        error, pub_name = <span class="string">''</span>, <span class="string">''</span></span><br><span class="line">        pub_name = request.POST.get(<span class="string">'pub_name'</span>)</span><br><span class="line">        obj = models.Publisher.objects.filter(name=pub_name)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> pub_name:</span><br><span class="line">            <span class="comment"># 提交空数据</span></span><br><span class="line">            error = <span class="string">'数据为空'</span></span><br><span class="line">        <span class="keyword">elif</span> obj:</span><br><span class="line">            <span class="comment"># 表中数据存在</span></span><br><span class="line">            error = <span class="string">'出版社名称重复'</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 正确情况下，向数据库添加,并跳转到展示页面</span></span><br><span class="line">            models.Publisher.objects.create(name=pub_name)</span><br><span class="line">            <span class="keyword">return</span> redirect(<span class="string">'/publisher_list/'</span>)</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">'publisher_add.html'</span>, &#123;<span class="string">'error'</span>: error, <span class="string">'pub_name'</span>: pub_name&#125;)</span><br></pre></td></tr></table></figure><h3 id="批量添加"><a href="#批量添加" class="headerlink" title="批量添加"></a>批量添加</h3><p>对于前面这些，都是单独给一个函数或方法来加装饰器，那如果批量添加该怎么做呢？</p><p>通过前面对源码的剖析，在 <code>dispatch</code> 方法中，它按照请求方式的不同返回不同的方法，所以我们可以给 <code>dispatch</code> 方法加上装饰器，从而达到给这些方法加上装饰器的目的。</p><h4 id="给父类的-dispatch-加装饰器-（推荐）"><a href="#给父类的-dispatch-加装饰器-（推荐）" class="headerlink" title="给父类的  dispatch  加装饰器    （推荐）"></a>给父类的 <code>dispatch</code> 加装饰器 （推荐）</h4><ul><li>当子类没有<code>dispatch</code> 方法的时候，会调用父类的 <code>dispatch</code> 方法，这样把装饰器加到了父类的 <code>dispatch</code> 上达到批量添加的目的。</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@method_decorator(timer, name='dispatch')     # 加到父类的dispatch里</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddPublisher</span><span class="params">(View)</span>:</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><h4 id="子类重写-dispatch-（不推荐）"><a href="#子类重写-dispatch-（不推荐）" class="headerlink" title="子类重写 dispatch      （不推荐）"></a>子类重写 <code>dispatch</code> （不推荐）</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@method_decorator(timer)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dispatch</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">    start_time = time.time()</span><br><span class="line">    print(<span class="string">'dispatch 前'</span>)</span><br><span class="line">    ret = super().dispatch(request, *args, **kwargs)</span><br><span class="line">    print(<span class="string">'dispatch 后'</span>)</span><br><span class="line">    print(<span class="string">f'执行时间：<span class="subst">&#123;time.time() - start_time&#125;</span>'</span>)</span><br><span class="line">    <span class="keyword">return</span> ret</span><br></pre></td></tr></table></figure><h3 id="加不加-method-decorator-的区别"><a href="#加不加-method-decorator-的区别" class="headerlink" title="加不加 method_decorator 的区别"></a>加不加 method_decorator 的区别</h3><ul><li><p>@timer直接装饰方法的话：把这个方法当作一个函数， args内的第一个参数是self，第二个参数是request对象</p></li><li><p>加上 method_decorator 把它当作绑定方法，args内的第一个参数是request对象</p></li><li><p>它们功能上没有不同，但是就参数的位置上来说是不同的。只要可以确定request对象的位置，正确使用就行。</p></li></ul><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>当了解了view之后，还需要对参数request对象和返回值response对象做一个了解，下一篇为 <a href="https://chennq.com/django/20190704-django_5_1.html">Django的request与response</a>。</p>]]></content>
      <categories>
        <category>django</category>
      </categories>
      <tags>
        <tag>django</tag>
        <tag>学习笔记</tag>
        <tag>Web前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Django图书管理系统的优化</title>
    <url>/django/20190703-django_4.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>本篇将对前面的图书管理系统进行优化：代码简化；添加分页；添加token；部分代码使用CBV；优化静态文件配置；设置名称空间，命名URL与反向解析；使用ajax来完成局部刷新。</p></blockquote><a id="more"></a><h1 id="代码简化"><a href="#代码简化" class="headerlink" title="代码简化"></a>代码简化</h1><ul><li><p>Django模板引擎中最强大、最复杂的是模板继承。通过定义一个基础的模板，在定义子模版的时候，只需要覆盖母板中的块，就可以达到简化的目的。</p></li><li><p>具体来说，对于定义的所有模板它们都是很重复的，导航相同，左侧栏相同，只有内容不同。在这个基础上，将相同的地方抽取出来作为母版 <code>base.html</code></p></li></ul><h2 id="定义母板"><a href="#定义母板" class="headerlink" title="定义母板"></a>定义母板</h2><ul><li><p><code>base.html</code> 这里包含了，导航栏，左侧栏，以及内容的一个外框架。</p></li><li><p>在需要修改的地方留下<strong>块</strong>。</p></li><li><p>具体方法 移步 <a href="https://atlasnq.github.io/django/20190701-django_3.html#more" target="_blank" rel="noopener">django模板系统</a></p></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">    &#123;% load static %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"&#123;% get_static_prefix %&#125;plugins/bootstrap-3.3.7/css/bootstrap.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"&#123;% get_static_prefix %&#125;css/dashboard.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.table</span> &gt; <span class="selector-tag">tbody</span> &gt; <span class="selector-tag">tr</span> &gt; <span class="selector-tag">td</span> &#123;</span></span><br><span class="line">            vertical-align: middle;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    &#123;% block css %&#125;</span><br><span class="line">    &#123;% endblock %&#125;</span><br><span class="line">    &#123;# 留给子代去加载自己的css，js等 #&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"navbar navbar-inverse navbar-fixed-top"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container-fluid"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar-header"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"navbar-toggle collapsed"</span> <span class="attr">data-toggle</span>=<span class="string">"collapse"</span> <span class="attr">data-target</span>=<span class="string">"#navbar"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">aria-expanded</span>=<span class="string">"false"</span> <span class="attr">aria-controls</span>=<span class="string">"navbar"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>Toggle navigation<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"navbar-brand"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>图书管理系统<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"navbar"</span> <span class="attr">class</span>=<span class="string">"navbar-collapse collapse"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav navbar-right"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Dashboard<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Settings<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Profile<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Help<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"navbar-form navbar-right"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"Search..."</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container-fluid"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-3 col-md-2 sidebar"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav nav-sidebar"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"&#123;% block pub_active %&#125;&#123;% endblock %&#125;"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/publisher_list/"</span>&gt;</span>出版社<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"&#123;% block book_active %&#125;&#123;% endblock %&#125;"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/book_list/"</span>&gt;</span>图书<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"&#123;% block auth_active %&#125;&#123;% endblock %&#125;"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/author_list/"</span>&gt;</span>作者<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-9 col-sm-offset-3 col-md-10 col-md-offset-2 main"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel-primary"</span>&gt;</span></span><br><span class="line">                &#123;% block content %&#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>母版<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">                &#123;% endblock %&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>note：这个页面在后面有些改动，会将导航栏剥离出去。</p><h2 id="子模板中导入"><a href="#子模板中导入" class="headerlink" title="子模板中导入"></a>子模板中导入</h2><ul><li>在子模板的最上方使用 <code>extends</code> 标签进行导入</li><li>在 <code>block</code> 标签中覆写。</li></ul><p>例如：在<code>author_list.html</code> 中，导入母板后，覆写了两块内容，一块是在左侧栏中，如果当前是作者页面的话改为被点击的状态；一块是对作者信息进行展示的 <code>table</code> 。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% extends 'base.html' %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block auth_active %&#125;</span><br><span class="line">    active</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-heading"</span>&gt;</span>作者管理<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-body"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/author_add"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary btn-sm"</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-striped table-hover"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>序号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>ID<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>名字<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>著作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">            &#123;% for author in all_authors %&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; forloop.counter &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; author.pk &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; author.name &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                        &#123;# author.books.all这里不加括号也是可以的#&#125;</span><br><span class="line">                        &#123;% for book in author.books.all %&#125;</span><br><span class="line">                            《&#123;&#123; book.title &#125;&#125;》</span><br><span class="line">                        &#123;% endfor %&#125;</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/author_del/?pk=&#123;&#123; author.pk &#125;&#125;"</span> <span class="attr">class</span>=<span class="string">"btn btn-danger btn-sm"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/author_edit/?pk=&#123;&#123; author.pk &#125;&#125;"</span> <span class="attr">class</span>=<span class="string">"btn btn-warning btn-sm"</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            &#123;% endfor %&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color: red"</span>&gt;</span>&#123;&#123; error &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p>对于添加和编辑页面，我们不想要左侧栏，只需要导航栏和内容框就可以，这样的话使用组件，可以达到要求。</p><h2 id="将导航栏做成组件"><a href="#将导航栏做成组件" class="headerlink" title="将导航栏做成组件"></a>将导航栏做成组件</h2><ul><li>定义 nav.html</li><li>使用导航栏的时候，只需要使用 <code>include</code> 标签就行</li><li>组件的理解：将子模版渲染并嵌入当前HTML中</li></ul><p><code>nav.html</code></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    &#123;% load static %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"&#123;% get_static_prefix %&#125;plugins/bootstrap-3.3.7/css/bootstrap.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"&#123;% get_static_prefix %&#125;css/dashboard.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.table</span> &gt; <span class="selector-tag">tbody</span> &gt; <span class="selector-tag">tr</span> &gt; <span class="selector-tag">td</span> &#123;</span></span><br><span class="line">            vertical-align: middle;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"navbar navbar-inverse navbar-fixed-top"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container-fluid"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar-header"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"navbar-toggle collapsed"</span> <span class="attr">data-toggle</span>=<span class="string">"collapse"</span> <span class="attr">data-target</span>=<span class="string">"#navbar"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">aria-expanded</span>=<span class="string">"false"</span> <span class="attr">aria-controls</span>=<span class="string">"navbar"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>Toggle navigation<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"navbar-brand"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>图书管理系统<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"navbar"</span> <span class="attr">class</span>=<span class="string">"navbar-collapse collapse"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav navbar-right"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Dashboard<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Settings<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Profile<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Help<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"navbar-form navbar-right"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"Search..."</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>author_add.html</code></p><ul><li>一部分是通过 include 导入</li><li>另一部分写剩下的内容（一个表单）</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% include 'nav.html' %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel-primary col-lg-8 col-lg-offset-2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-heading"</span>&gt;</span>添加作者<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-body"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">            &#123;% csrf_token %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"name"</span> <span class="attr">class</span>=<span class="string">"col-sm-2 col-sm-offset-2 control-label"</span>&gt;</span>名字:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-6"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">id</span>=<span class="string">"name"</span> <span class="attr">class</span>=<span class="string">"form-control"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"books"</span> <span class="attr">class</span>=<span class="string">"col-sm-2 col-sm-offset-2 form-group"</span>&gt;</span>著作:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-6"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"books"</span> <span class="attr">id</span>=<span class="string">"books"</span> <span class="attr">multiple</span> <span class="attr">class</span>=<span class="string">"form-control"</span>&gt;</span></span><br><span class="line">                        &#123;% for book in all_books %&#125;</span><br><span class="line">                            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"&#123;&#123; book.pk &#125;&#125;"</span>&gt;</span>&#123;&#123; book.title &#125;&#125;<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                        &#123;% endfor %&#125;</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary btn-sm col-sm-offset-6 "</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color: red"</span>&gt;</span>&#123;&#123; error &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编辑的做法与添加的做法相同，这里就不再重复了。</p><h2 id="修改母板"><a href="#修改母板" class="headerlink" title="修改母板"></a>修改母板</h2><p>由于开始定义母版的时候是把导航栏放在里面的，我们把它剥离出来。</p><p><code>base.html</code></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">    &#123;% block css %&#125;</span><br><span class="line">    &#123;% endblock %&#125;</span><br><span class="line">    &#123;# 留给子代去加载自己的css，js等 #&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">&#123;% include 'nav.html' %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container-fluid"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-3 col-md-2 sidebar"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav nav-sidebar"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"&#123;% block pub_active %&#125;&#123;% endblock %&#125;"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/publisher_list/"</span>&gt;</span>出版社<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"&#123;% block book_active %&#125;&#123;% endblock %&#125;"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/book_list/"</span>&gt;</span>图书<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"&#123;% block auth_active %&#125;&#123;% endblock %&#125;"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/author_list/"</span>&gt;</span>作者<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-9 col-sm-offset-3 col-md-10 col-md-offset-2 main"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel-primary"</span>&gt;</span></span><br><span class="line">                &#123;% block content %&#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>母版<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">                &#123;% endblock %&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>以上对于相同部分，我们做成母版只定义一次。从而达到简化代码的效果。</p><h1 id="添加分页"><a href="#添加分页" class="headerlink" title="添加分页"></a>添加分页</h1><p>分页是直接使用的bootstrap中的分页组件</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">aria-label</span>=<span class="string">"Page navigation"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"pagination"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">aria-label</span>=<span class="string">"Previous"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span>&amp;laquo;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">aria-label</span>=<span class="string">"Next"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span>&amp;raquo;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在开始之前做一个区分，前面将导航栏做成组件的方法可以用来实现分页吗？不行，因为分页的数量不是固定的。</p><h2 id="inclusion-tag"><a href="#inclusion-tag" class="headerlink" title="inclusion_tag"></a>inclusion_tag</h2><p>使用 <code>inclusion_tag</code> 可以返回一个动态的页面</p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ol><li><p>先做<strong>app01</strong>下创建一个python包，名为 <code>templatestags</code></p></li><li><p>在这个包内创建py文件，文件名可以自定义 my_tags.py</p></li><li><p>在这个创建的py文件内写入：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> template</span><br><span class="line">register = template.Library()   <span class="comment"># register的名字不能变</span></span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"><span class="keyword">from</span> django.template <span class="keyword">import</span> Library</span><br><span class="line">register = Library()</span><br></pre></td></tr></table></figure></li><li><p>定义函数 + 装饰器</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@register.inclusion_tag('page.html')	# 这里必须指定模板</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">page</span><span class="params">(num)</span>:</span></span><br><span class="line">	<span class="keyword">return</span> &#123;<span class="string">'num'</span>:range(<span class="number">1</span>,num+<span class="number">1</span>)&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ul><li>在 <code>author_list.html</code> 的 table 下方导入</li><li>分为3页</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% load my_tags %&#125;</span><br><span class="line">&#123;% my_page 3 %&#125;</span><br></pre></td></tr></table></figure><h1 id="添加token"><a href="#添加token" class="headerlink" title="添加token"></a>添加token</h1><ul><li><p>在前面我们将settings.py的中间件中关于csrf注释了，这是因为在提交post请求时没有携带token，服务器拒绝接收。</p></li><li><p>那我们只需要在form表单中写如下内容即可：</p><figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span>	</span></span><br><span class="line"><span class="xml">	</span><span class="template-tag">&#123;% <span class="name"><span class="name">csrf_token</span></span> %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li><li><p>放在form标签后，form表单中产生有一个隐藏的标签 name = ‘csrfmiddlewaretoken’ ，这个标签的name:value 会在表单提交的时候一并提交。</p></li></ul><h1 id="优化静态文件配置"><a href="#优化静态文件配置" class="headerlink" title="优化静态文件配置"></a>优化静态文件配置</h1><ul><li>如果我们修改了settings.py 中的 <code>STATIC_URL = &#39;/static/&#39;</code>那么其它文件的导入都需要修改，那么怎样能避免修改呢？</li></ul><figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml">加载：	</span></span><br><span class="line"><span class="xml">	</span><span class="template-tag">&#123;% <span class="name"><span class="name">load</span></span> static %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">方式一：</span></span><br><span class="line"><span class="xml">	href=</span><span class="template-tag">&#123;% <span class="name"><span class="name">static</span></span> 'css/dashbord.css'%&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">方式二：</span></span><br><span class="line"><span class="xml">	href="</span><span class="template-tag">&#123;% <span class="name"><span class="name">get_static_prefix</span></span> %&#125;</span><span class="xml">css/dashbord.css"</span></span><br></pre></td></tr></table></figure><ul><li>load static表示执行 <code>static.py</code> 这个文件</li><li>static 表示执行这个函数，将相对路径转成绝对路径</li><li>get_static_prefix 执行这个函数，可以得到静态文件的前缀，如我们以前的 <code>/static/</code></li></ul><h1 id="使用CBV优化"><a href="#使用CBV优化" class="headerlink" title="使用CBV优化"></a>使用CBV优化</h1><p>我们先前在 <code>views.py</code> 中写的是函数是 <code>FBV</code> ，但这种方式存在一个缺点，就是我们需要手动判断请求方式，这样的话不同请求方式会不断地叠加，不够清晰。所以重新以CBV来改造。</p><h1 id="命名URL"><a href="#命名URL" class="headerlink" title="命名URL"></a>命名URL</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">url(<span class="string">r'^del/'</span>, views.publisher_del, name=<span class="string">'del'</span>),</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'publish:del' %&#125;/?pk=&#123;&#123; publisher.pk &#125;&#125;"</span> <span class="attr">class</span>=<span class="string">"btn btn-danger"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>改后: (整合到url中)</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">url(<span class="string">r'^del/(\d+)'</span>, views.publisher_del, name=<span class="string">'del'</span>),</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'publish:del' %&#125;/&#123;&#123; publisher.pk &#125;&#125;"</span> <span class="attr">class</span>=<span class="string">"btn btn-danger"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>待补充！！！</p>]]></content>
      <categories>
        <category>django</category>
      </categories>
      <tags>
        <tag>django</tag>
        <tag>学习笔记</tag>
        <tag>Web前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Pytorch-什么是梯度</title>
    <url>/Pytorch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20190702-learning_PyTorch_9_gradient.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>本篇介绍梯度是什么，在Pytorch中梯度是怎么使用的。</p></blockquote><a id="more"></a><h1 id="Clarification"><a href="#Clarification" class="headerlink" title="Clarification"></a>Clarification</h1><ul><li><p>导数：derivate</p><ul><li><p>导数代表了在自变量变化趋于无穷小的时候，函数值的变化与自变量变化的比值代表了导数，几何意义有该点的切线。物理意义有该时刻的（瞬时）变化率。</p></li><li><p>标量，反映的是变化程度。给定一个方向，用长度来表示变化率的大小。</p></li></ul></li><li><p>偏微分：partical derivate</p><ul><li>标量，沿x，y方向的变化趋势。</li><li>偏微分是导数的特殊情况。</li></ul></li><li><p>梯度：gradient</p><ul><li>向量，所有偏微分组成的一个<strong>向量</strong></li><li>长度（模）：变化趋势，当前这个点增长的速率</li><li>方向：增长方向</li></ul></li></ul><p>从下图感受梯度的长度与方向：</p><p><img src="/Pytorch学习笔记/20190702-learning_PyTorch_9_gradient/%E6%A2%AF%E5%BA%A6.PNG" alt="梯度"></p><p>左图为：将函数<em>f</em>(<em>x</em>,<em>y</em>) = −(cos2<em>x</em> + cos2<em>y</em>)2的梯度描绘为在底面上投影的向量场。</p><p>右图为：将2D函数<em>f</em>(<em>x</em>, <em>y</em>) = <em>xe</em>−(<em>x</em>2 + <em>y</em>2)的梯度绘制为蓝色箭头，还绘制了这个函数的伪色图。</p><h2 id="How-to-search-for-minima"><a href="#How-to-search-for-minima" class="headerlink" title="How to search for minima?"></a>How to search for minima?</h2><p>$$<br>\theta_{t+1} = \theta_t - \alpha_t\nabla f(\theta_t)<br>$$</p><h2 id="Convex-function"><a href="#Convex-function" class="headerlink" title="Convex function"></a>Convex function</h2><ul><li>凸函数（碗）</li></ul><p><img src="/Pytorch学习笔记/20190702-learning_PyTorch_9_gradient/%E5%87%B8%E5%87%BD%E6%95%B0.PNG" alt="梯度"></p><h1 id="影响搜索的一些因素"><a href="#影响搜索的一些因素" class="headerlink" title="影响搜索的一些因素"></a>影响搜索的一些因素</h1><h2 id="Local-Minima"><a href="#Local-Minima" class="headerlink" title="Local Minima"></a>Local Minima</h2><ul><li>局部极小值点</li></ul><p>ResNet中，shortcut模块，使 loss 更加平滑。</p><p><img src="/Pytorch学习笔记/20190702-learning_PyTorch_9_gradient/ResNet.PNG" alt="梯度"></p><p>左图为ResNet-56将它所有的w进行可视化。</p><p>右图为使用了shorcut模块后的更深的网络。</p><p><a href="https://github.com/tomgoldstein/loss-landscape" target="_blank" rel="noopener">https://github.com/tomgoldstein/loss-landscape</a></p><h2 id="Saddle-point"><a href="#Saddle-point" class="headerlink" title="Saddle point"></a>Saddle point</h2><ul><li>鞍点</li><li>一个维度下是局部最小，另一个维度下是局部最大；在将来很多很多变量存在的情况下，这种情况很容易发生。</li></ul><h2 id="Optimizer-Performance"><a href="#Optimizer-Performance" class="headerlink" title="Optimizer Performance"></a>Optimizer Performance</h2><h3 id="initialization-status"><a href="#initialization-status" class="headerlink" title="initialization status"></a>initialization status</h3><ul><li><p>同样的网络，初始位置不同，结果差异很大，有的就容易陷入局部最优。</p></li><li><p>初始化很重要，可以参考主流的一些初始化方法。</p></li><li><p>何凯明提到的初始化方法（待补充）</p></li></ul><h3 id="learning-rate"><a href="#learning-rate" class="headerlink" title="learning rate"></a>learning rate</h3><ul><li><p>learning rate过大会导致不收敛</p></li><li><p>刚开始的时候先设置的小一些，然后在慢慢的放大。</p></li></ul><h3 id="momentum（动量）"><a href="#momentum（动量）" class="headerlink" title="momentum（动量）"></a>momentum（动量）</h3><ul><li>Escape minima（逃离局部极小值）</li><li>用一个弹珠做比喻，当它在往下滑的过程中，遇到小坑（极小值），虽然会停顿一下，但是仍靠着惯性冲向最深的那个坑（全局最小值）。</li></ul>]]></content>
      <categories>
        <category>Pytorch学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>Pytorch</tag>
        <tag>Deep Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>Django模板系统</title>
    <url>/django/20190701-django_3.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>本篇介绍Django的模板语言（The Django template language）。</p></blockquote><a id="more"></a><hr><p>通过这篇文章，你能了解到：</p><ul><li>模板是什么?</li><li>变量与过滤器</li><li>使用<strong>标签</strong>来执行一段逻辑</li><li>自定义过滤器，simple_tag，inclusion_tag</li><li>使用<strong>模板继承</strong>和<strong>组件</strong>来简化代码</li></ul><h1 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h1><p>模板只是一个text文件，他可以生成任意基于文本的格式（HTML,XML,CSV等）。</p><p>模板中包含<strong>变量</strong>，这些变量在评估模板时将替换为值，而<strong>变量</strong>则包含控制模板逻辑的<strong>标记</strong>。</p><p>Django模板中只需要记两种特殊符号：</p><ul><li><p>&#123;&#123; &#125;&#125; 和 &#123; &#37; &#37; &#125;</p></li><li><p>&#123;&#123; &#125;&#125; 表示变量</p></li><li><p>&#123; &#37; &#37; &#125; 表示逻辑相关的操作。</p></li></ul><p>推荐阅读 <a href="https://docs.djangoproject.com/en/1.11/ref/templates/language/" target="_blank" rel="noopener">官方文档</a> 。</p><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p>&#123;&#123; 变量名（key）&#125;&#125; —&gt; v</p><p>变量名由字母数字和下划线组成，<em>变量名称中不能包含空格或标点符号</em>。</p><p>点 <code>.</code> 在模板语言中有特殊的含义，遇到一个点时，会按以下顺序去查找：</p><ol><li><p>字典查找</p></li><li><p>属性或方法查找 (方法不能带参数)</p></li><li><p>数字索引查找</p></li></ol><p>这个顺序体现在：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dic = &#123;</span><br><span class="line">    <span class="string">'cc'</span>:<span class="string">'gg'</span></span><br><span class="line">    <span class="string">'keys'</span>:<span class="string">'xxxxx'</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;&#123; dic.keys &#125;&#125;  # 显示 xxxxx , 而不是dict_keys(['cc'])</span><br></pre></td></tr></table></figure><p>note：</p><ul><li>没有 <code>[]</code> 这种写法。所以对于列表的话就没有<code>[index]</code> 而是<code>.index</code> 、对于字典的话就没有 <code>[key]</code> 而是 <code>.key</code></li><li>没有 <code>()</code> 这种写法，所以对于方法是不需要加括号的，不识别括号</li><li>索引只能是正向索引，负数识别不了</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="comment"># 几个例子：</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    num = <span class="number">1</span></span><br><span class="line">    string = <span class="string">'哈哈哈'</span></span><br><span class="line">    li = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">    dic = &#123;</span><br><span class="line">        <span class="string">'n'</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">'st'</span>: <span class="string">'st'</span>,</span><br><span class="line">        <span class="string">'li'</span>: [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>],</span><br><span class="line">        <span class="string">'dic'</span>: &#123;</span><br><span class="line">            <span class="string">'name'</span>: <span class="string">'小黑'</span>,</span><br><span class="line">            <span class="string">'age'</span>: <span class="number">18</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    context = &#123;</span><br><span class="line">        <span class="string">'num'</span>: num,</span><br><span class="line">        <span class="string">'string'</span>: string,</span><br><span class="line">        <span class="string">'li'</span>: li,</span><br><span class="line">        <span class="string">'dic'</span>: dic,    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'index.html'</span>, context)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"># index.html</span><br><span class="line">&#123;&#123; num &#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">&#123;&#123; string &#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">&#123;&#123; li &#125;&#125;</span><br><span class="line">&#123;&#123; li.0 &#125;&#125;			# 通过 . 来得到该索引的值</span><br><span class="line">&#123;#&#123;&#123; li.-1 &#125;&#125;#&#125;		# 负数索引是无法解析的</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">&#123;&#123; dic &#125;&#125;</span><br><span class="line">&#123;&#123; dic.n &#125;&#125;			# 通过 . 得到键对应的值</span><br><span class="line">&#123;&#123; dic.keys &#125;&#125;		# 通过 . 调用方法</span><br><span class="line">&#123;&#123; dic.values &#125;&#125;	</span><br><span class="line"></span><br><span class="line">&#123;&#123;request&#125;&#125;     	# 模板中可以直接使用request</span><br></pre></td></tr></table></figure><p>note：<strong>模板中可以直接使用request</strong></p><h1 id="Filters"><a href="#Filters" class="headerlink" title="Filters"></a>Filters</h1><p>使用<strong>过滤器</strong>修改变量的显示结果。</p><p>语法：</p><ul><li><p>&#123;&#123; value|filter_name&#125;&#125;、&#123;&#123; value|filter_name:参数&#125;&#125; 过滤器最多只有一个参数！</p></li><li><p>&#123;&#123; text|escape|linebreaks &#125;&#125; 可以一次使用多个管道符</p></li></ul><p>note: 只有 <code>:</code> 左右不能有空格，不能有空格！</p><h2 id="default"><a href="#default" class="headerlink" title="default"></a>default</h2><ul><li><p>提供默认值</p></li><li><p>如果传过来的变量不存在/或为空，也可以用default，来进行显示。</p></li><li><p>如果使用不存在的变量，模板系统将插入 <code>string_if_invalid</code> 选项的值，默认情况下设置为（空字符串）。</p></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"># index.html</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; qq &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span>  </span><br><span class="line">&#123;#如果没有这个key，就转成一个空的字符串了#&#125;      </span><br><span class="line"></span><br><span class="line">&#123;&#123; x &#125;&#125;		# None</span><br><span class="line">&#123;&#123; y &#125;&#125;		# ''</span><br><span class="line">&#123;&#123; z &#125;&#125;		# []</span><br><span class="line">&#123;&#123; d &#125;&#125;		# &#123;&#125;</span><br><span class="line">&#123;&#123; qq|default:'lalala' &#125;&#125;	# 虽然设置了default，但还是依照string_if_invalid，显示：'找不到'</span><br><span class="line">&#123;&#123; x|default:'Nothing' &#125;&#125;	# Nothing</span><br><span class="line">&#123;&#123; y|default:'String' &#125;&#125;	# String</span><br><span class="line">&#123;&#123; z|default:'List' &#125;&#125;		# List</span><br><span class="line">&#123;&#123; d|default:'Dict' &#125;&#125;		# Dict</span><br><span class="line"># 对于None、''、[]、&#123;&#125;会使用default来代替</span><br></pre></td></tr></table></figure><p>修改setting.py 的 OPTIONS ， 当这个传递的变量在<code>views.py</code>中没有定义，就是用默认值</p><p>如果 default 与 它一起，还是显示”找不到”。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">'BACKEND'</span>: <span class="string">'django.template.backends.django.DjangoTemplates'</span>,</span><br><span class="line">        <span class="string">'DIRS'</span>: [os.path.join(BASE_DIR, <span class="string">'templates'</span>)]</span><br><span class="line">        ,</span><br><span class="line">        <span class="string">'APP_DIRS'</span>: <span class="literal">True</span>,</span><br><span class="line">        <span class="string">'OPTIONS'</span>: &#123;</span><br><span class="line">            <span class="string">'context_processors'</span>: [</span><br><span class="line">                <span class="string">'django.template.context_processors.debug'</span>,</span><br><span class="line">                <span class="string">'django.template.context_processors.request'</span>,</span><br><span class="line">                <span class="string">'django.contrib.auth.context_processors.auth'</span>,</span><br><span class="line">                <span class="string">'django.contrib.messages.context_processors.messages'</span>,</span><br><span class="line">            ],</span><br><span class="line">            <span class="string">'string_if_invalid'</span>:<span class="string">'找不到'</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h2><p>切片：参数和以前使用方式是一样的。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"># index.html</span><br><span class="line">&#123;&#123; name_list|slice:'-1::-1' &#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="filesizeformat"><a href="#filesizeformat" class="headerlink" title="filesizeformat"></a>filesizeformat</h2><p>将值格式化为一个 “人类可读的” 文件尺寸 （例如 ‘1KB’, ‘4.1 MB’, ‘102 bytes’ 等等）</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">context = &#123;</span><br><span class="line">    <span class="string">'filesize'</span>: <span class="number">1</span> * <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">1024</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> render(request, <span class="string">'index.html'</span>, context)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"># index.html</span><br><span class="line">&#123;&#123; 5|filesizeformat &#125;&#125;      	# 5 bytes</span><br><span class="line">&#123;&#123; filesize|filesizeformat &#125;&#125;	# 1.0 GB</span><br></pre></td></tr></table></figure><h2 id="add"><a href="#add" class="headerlink" title="add"></a>add</h2><ul><li>数字的加法</li><li>字符串拼接</li><li>列表拼接</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;&#123; '1'|add:'3' &#125;&#125;				# 数字的加法（可以同时是字符串）</span><br><span class="line">&#123;&#123; 1|add:'3' &#125;&#125;		</span><br><span class="line">&#123;&#123; string|add:'3' &#125;&#125;   			# 字符串的拼接（字符串与字符串）</span><br><span class="line">&#123;&#123; name_list|add:name_list &#125;&#125;	# 列表的拼接（左右是列表）</span><br></pre></td></tr></table></figure><h2 id="lower-upper-title"><a href="#lower-upper-title" class="headerlink" title="lower/upper/title"></a>lower/upper/title</h2><ul><li>小写</li><li>大写</li><li>标题</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">context = &#123;</span><br><span class="line">        <span class="string">'st'</span>: <span class="string">'HeLLo'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'index.html'</span>, context)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123; st &#125;&#125;			# HeLLo</span><br><span class="line">&#123;&#123; st|upper &#125;&#125;		# HELLO</span><br><span class="line">&#123;&#123; st|lower &#125;&#125;		# hello</span><br><span class="line">&#123;&#123; st|title &#125;&#125;		# Hello </span><br><span class="line">&#123;&#123; st.title &#125;&#125;    # 当然对于字符串我们可以使用它本身的方法</span><br></pre></td></tr></table></figure><h2 id="ljust-rjust-center"><a href="#ljust-rjust-center" class="headerlink" title="ljust/rjust/center"></a>ljust/rjust/center</h2><ul><li>左对齐</li><li>右对齐</li><li>居中</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;&#123; st|ljust:"15" &#125;&#125;</span><br><span class="line">&#123;&#123; st|rjust:"15" &#125;&#125;</span><br><span class="line">&#123;&#123; st|center:"15" &#125;&#125;</span><br></pre></td></tr></table></figure><p>note：但是由于HTML会有空白折叠，所以很鸡肋。</p><p>结果只是显示：</p><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">HeLLo HeLLo HeLLo</span></span><br></pre></td></tr></table></figure><h2 id="length-length-is"><a href="#length-length-is" class="headerlink" title="length/length_is"></a>length/length_is</h2><ul><li>0 返回 value 的长度</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;&#123; st|length &#125;&#125;			# 5</span><br><span class="line">&#123;&#123; st|length_is:4 &#125;&#125;	# False</span><br><span class="line">&#123;&#123; st|length_is:5 &#125;&#125;	# True</span><br><span class="line">&#123;&#123; st|length_is:6 &#125;&#125;	# False</span><br></pre></td></tr></table></figure><h2 id="first-last"><a href="#first-last" class="headerlink" title="first/last"></a>first/last</h2><ul><li><p>取第一个/最后一个元素</p></li><li><p>不用 <code>.0</code> 或 <code>.-1</code> 方式是因为找不到的话会调用<code>string_if_invalid</code></p></li><li><p><code>.first</code> 和 <code>.last</code> 在找不到的话，显示为空</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">li = []</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;&#123; li.0 &#125;&#125;			# 找不到 	</span><br><span class="line">&#123;&#123; li|first &#125;&#125;		# 显示为空</span><br><span class="line">&#123;&#123; li|last &#125;&#125;		# 显示为空</span><br></pre></td></tr></table></figure><h2 id="join"><a href="#join" class="headerlink" title="join"></a>join</h2><p>使用字符串拼接列表。同 python 的 <code>str.join(list)</code></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;&#123; name_list|join:'--' &#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="truncatechars"><a href="#truncatechars" class="headerlink" title="truncatechars"></a>truncatechars</h2><p>如果字符串字符多于指定的字符数量，那么会被截断。截断的字符串将以可翻译的省略号序列（“…”）结尾。（三个点也算在内）</p><p>truncatechars:3 三个点</p><p>truncatechars:1 三个点</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">context = &#123;        </span><br><span class="line">        <span class="string">'value'</span>: <span class="string">'如果字符串字符多于指定的字符数量，那么会被截断。截断的字符串将以可翻译的省略号序列'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'index.html'</span>, context)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;&#123; value|truncatechars:9 &#125;&#125;			# &#123;&#123; value|truncatechars:9 &#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="truncatewords"><a href="#truncatewords" class="headerlink" title="truncatewords"></a>truncatewords</h2><p>按空格截断，有几个空格截几次。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;&#123; value|truncatewords:2 &#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="date"><a href="#date" class="headerlink" title="date"></a>date</h2><ul><li><p>日期格式化：<code>&#39;Y-m-d H:i:s&#39;</code></p></li><li><p><a href="https://docs.djangoproject.com/en/1.11/ref/templates/builtins/#date" target="_blank" rel="noopener">其余格式</a></p></li><li><p>note：字符串中写的规则和python的datetime模块中是不一样的，不需要加 <code>%</code>，而且有些字母表示也不一样。</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">context = &#123;</span><br><span class="line">    <span class="string">'datetime_now'</span>: datetime.datetime.now(),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;&#123; datetime_now|date:'Y-m-d H:i:s' &#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="设置显示格式"><a href="#设置显示格式" class="headerlink" title="设置显示格式"></a>设置显示格式</h3><p>settings中可以配置，配置后，就会设置显示格式：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">USE_L10N = <span class="literal">False</span>   <span class="comment"># 使这个设置生效</span></span><br><span class="line">DATETIME_FORMAT = <span class="string">'Y-m-d H:i:s'</span>	<span class="comment"># 不写过滤器的时间按这个格式	&#123;&#123; datetime_now &#125;&#125;	</span></span><br><span class="line">DATE_FORMAT = <span class="string">'Y-m-d'</span>			<span class="comment"># date格式 &#123;&#123; datetime_now|date &#125;&#125;	</span></span><br><span class="line">TIME_FORMAT = <span class="string">'H:i:s'</span>			<span class="comment"># time格式 &#123;&#123; datetime_now|time &#125;&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;&#123; datetime_now &#125;&#125;						# 2019-08-28 17:24:18 </span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">&#123;&#123; datetime_now|date &#125;&#125;					# 2019-08-28 </span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">&#123;&#123; datetime_now|time &#125;&#125;					# 17:24:18 </span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">&#123;&#123; datetime_now|date:'Y-m-d H:i:s'&#125;&#125;	# 2019-08-28 17:24:18</span><br></pre></td></tr></table></figure><h2 id="safe"><a href="#safe" class="headerlink" title="safe"></a>safe</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><ul><li><p>XSS：跨站脚本攻击(Cross Site Scripting)，为了不和层叠样式表(Cascading Style Sheets,<br>CSS)的缩写混淆，故将跨站脚本攻击缩写为XSS。恶意攻击者往Web页面里插入恶意Script代码，当用户浏览该页之时，嵌入其中Web里面的Script代码会被执行，从而达到恶意攻击用户的目的。</p></li><li><p>Web存在XSS跨站脚本攻击，所以为了安全，Django中的每个模板都会自动转义每个变量标记的输出。</p></li><li><p>例如：评论中，写的代码，需要进行<strong>转义</strong>，不然的话展示页面的时候会自动执行！</p></li><li><p>转义：就是把html语言的关键字过滤掉。例如Django中这5个字符被转义为HTML实体，防止浏览器将其作为HTML元素：</p><ul><li><code>&lt;</code> 转换为 <code>&amp;lt;</code></li><li><code>&gt;</code> 转换为 <code>&amp;gt;</code></li><li><code>&#39;</code> （单引号）转换为 <code>&amp;#39;</code></li><li><code>&quot;</code> （双引号）转换为 <code>&amp;quot;</code></li><li><code>&amp;</code> 转换为 <code>&amp;amp;</code></li></ul></li><li><p>推荐阅读 <a href="https://security.tencent.com/index.php/blog/msg/107" target="_blank" rel="noopener">DOMXSS典型场景分析与修复指南</a></p></li></ul><h3 id="safe-1"><a href="#safe-1" class="headerlink" title="safe"></a>safe</h3><ul><li>告诉django不需要做转义，可以执行。</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">context = &#123;        </span><br><span class="line">        <span class="string">'js'</span>: <span class="string">"&lt;script&gt; alert(666) &lt;/script&gt;"</span>,    	</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> render(request, <span class="string">'index.html'</span>, context)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;&#123; js &#125;&#125;		# 默认使转义</span><br><span class="line">&#123;&#123; js|safe &#125;&#125;	# 使用了safe，就变成一个js脚本并执行</span><br></pre></td></tr></table></figure><p>上面是在模板中标记安全，还可以在views.py 中标记安全</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.utils.safestring <span class="keyword">import</span> mark_safe</span><br><span class="line">context = &#123;     </span><br><span class="line">    	<span class="string">'js1'</span>: mark_safe(<span class="string">'&lt;script&gt; alert(666) &lt;/script&gt;'</span>),</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> render(request, <span class="string">'index.html'</span>, context)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;&#123; js1 &#125;&#125;		# 执行js代码</span><br></pre></td></tr></table></figure><p>推荐阅读：<a href="https://docs.djangoproject.com/en/1.11/ref/templates/builtins/#built-in-filter-reference" target="_blank" rel="noopener">其它过滤器</a></p><h2 id="自定义filter"><a href="#自定义filter" class="headerlink" title="自定义filter"></a>自定义filter</h2><p>自定义过滤器步骤：</p><ol><li><p>先做<strong>app01</strong>下创建一个python包，名为 <code>templatestags</code></p></li><li><p>在这个包内创建py文件，文件名可以自定义 my_tags.py</p></li><li><p>在这个创建的py文件内写入：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> template</span><br><span class="line">register = template.Library()   <span class="comment"># register的名字不能变</span></span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"><span class="keyword">from</span> django.template <span class="keyword">import</span> Library</span><br><span class="line">register = Library()</span><br></pre></td></tr></table></figure></li><li><p>在这个文件内定义函数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new_upper</span><span class="params">(value,arg=None)</span>:</span>   <span class="comment"># arg最多有一个</span></span><br><span class="line">	<span class="keyword">return</span> value.upper()</span><br></pre></td></tr></table></figure></li><li><p>给函数加上装饰器就成为了过滤器</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># @register.filter(name='xxx') 	# 加上(name='xxx')，就改变了最终过滤器的名字。</span></span><br><span class="line"><span class="meta">@register.filter</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new_upper</span><span class="params">(value,arg=None)</span>:</span>  </span><br><span class="line">	<span class="keyword">return</span> value.upper()</span><br></pre></td></tr></table></figure></li></ol><p>在模板中使用：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">导入：</span><br><span class="line">	&#123;% load my_tags %&#125;</span><br><span class="line">使用过滤器：</span><br><span class="line">	&#123;&#123; <span class="string">'asd'</span>|new_upper &#125;&#125;</span><br></pre></td></tr></table></figure><h1 id="Tags"><a href="#Tags" class="headerlink" title="Tags"></a>Tags</h1><h2 id="注释-Comments"><a href="#注释-Comments" class="headerlink" title="注释(Comments)"></a>注释(Comments)</h2><ul><li>这里的注释表示不会再浏览器中渲染的，而js或html的注释还是会进行渲染的。</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;# ... #&#125;</span><br></pre></td></tr></table></figure><h2 id="widthratio"><a href="#widthratio" class="headerlink" title="widthratio"></a>widthratio</h2><ul><li>计算乘除</li></ul><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">&#123;% widthratio <span class="number">200</span> <span class="number">1</span> <span class="number">5</span> %&#125;    # <span class="number">200</span>/<span class="number">1</span>*<span class="number">5</span> = <span class="number">1000</span></span><br><span class="line">&lt;br&gt;</span><br><span class="line">&#123;% widthratio <span class="number">200</span> <span class="number">5</span> <span class="number">1</span> %&#125;	# <span class="number">200</span>/<span class="number">5</span>*<span class="number">1</span> = <span class="number">40</span></span><br></pre></td></tr></table></figure><h2 id="for"><a href="#for" class="headerlink" title="for"></a>for</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    &#123;% for n in li %&#125;</span><br><span class="line">    	&#123;&#123; forloop &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; n &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="forloop字典："><a href="#forloop字典：" class="headerlink" title="forloop字典："></a>forloop字典：</h3><p>forloop是一个字典：</p><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">&#123;<span class="symbol">'parentloop</span>': &#123;&#125;, <span class="symbol">'counter0</span>': <span class="number">0</span>, <span class="symbol">'counter</span>': <span class="number">1</span>, <span class="symbol">'revcounter</span>': <span class="number">5</span>, <span class="symbol">'revcounter0</span>': <span class="number">4</span>, <span class="symbol">'first</span>': <span class="literal">True</span>, <span class="symbol">'last</span>': <span class="literal">False</span>&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>key</th><th>Description</th></tr></thead><tbody><tr><td><code>forloop.counter</code></td><td>当前循环的索引值（从1开始）</td></tr><tr><td><code>forloop.counter0</code></td><td>当前循环的索引值（从0开始）</td></tr><tr><td><code>forloop.revcounter</code></td><td>当前循环的倒序索引值（到1结束）</td></tr><tr><td><code>forloop.revcounter0</code></td><td>当前循环的倒序索引值（到0结束）</td></tr><tr><td><code>forloop.first</code></td><td>当前循环是不是第一次循环（布尔值）</td></tr><tr><td><code>forloop.last</code></td><td>当前循环是不是最后一次循环（布尔值）</td></tr><tr><td><code>forloop.parentloop</code></td><td>本层循环的外层循环</td></tr></tbody></table><p>例子：使偶数行偶数列对应的元素的背景变为红色</p><ul><li><p>内层循环决定列，外层循环决定行</p></li><li><p>模板内使用 <code>divisibleby</code> 表示能否整除，从而选出偶数列。</p></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">    &#123;% for i in l2 %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            &#123;% for j in i %&#125;</span><br><span class="line">                &#123;% if forloop.counter|divisibleby:2 and forloop.parentloop.counter|divisibleby:2 %&#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">"border: 1px solid; background-color: red"</span>&gt;</span>&#123;&#123; j &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                &#123;% else %&#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">"border: 1px solid"</span>&gt;</span>&#123;&#123; j &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                &#123;% endif %&#125;</span><br><span class="line">            &#123;% endfor %&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="for-…-empty"><a href="#for-…-empty" class="headerlink" title="for … empty"></a>for … empty</h2><figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> i <span class="keyword">in</span> ll %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">	&#123;i&#125;</span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">empty</span></span> %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">	空的数据</span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">endfor</span></span> %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure><h2 id="if、elif、else"><a href="#if、elif、else" class="headerlink" title="if、elif、else"></a>if、elif、else</h2><p><code>&lt;</code>等比较符 左右必须有个空格</p><figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> p1.age &lt; 18 %&#125;</span><span class="xml">     </span></span><br><span class="line"><span class="xml">	他还是个弟弟</span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">elif</span></span> p1.age == 18 %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">	刚成年，可以出家</span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">else</span></span> %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">	骚老头子，坏得很</span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure><p>note：</p><ul><li>条件中可以加过滤器，但是不能嵌套标签。</li><li>条件中不支持 <strong>算数运算</strong></li><li>条件中不支持 %<strong>取余</strong> –&gt; 过滤器 divisibleby:2 能否被2整除</li><li>条件中也不支持<strong>连续判断</strong> a &gt; b &gt;c –&gt; a &gt; b and a &lt; c 是可以的<ul><li>python的连续判断：10&gt;5&gt;1 True(10&gt;5) and True(5&gt;1)</li><li>js的连续判断： 10&gt;5==1 True(10&gt;5)==1</li><li>条件中如果写了连续判断，虽然会飘红，但逻辑和js的连续判断相同</li></ul></li><li>if语句支持 and 、or、==、&gt;、&lt;、!=、&lt;=、&gt;=、in、not in、is、is not判断。</li></ul><figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> 10&gt;5&gt;1 %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">真</span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">else</span></span> %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">假</span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"># 结果为 假</span></span><br></pre></td></tr></table></figure><h2 id="with"><a href="#with" class="headerlink" title="with"></a>with</h2><ul><li>定义一个中间变量</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;&#123;person_list.1.name&#125;&#125;</span><br><span class="line">&#123;&#123;person_list.1.name&#125;&#125;</span><br><span class="line">&#123;&#123;person_list.1.name&#125;&#125; </span><br><span class="line"># 以上使用太麻烦了 ☝</span><br><span class="line"># 方式一： as</span><br><span class="line">	&#123;% with person_list.1.name as hei %&#125;</span><br><span class="line">	&#123;&#123;hei&#125;&#125;</span><br><span class="line">	&#123;% endwith %&#125;</span><br><span class="line"># 方式二： =</span><br><span class="line">	&#123;% with bai=person_list.1.name %&#125;</span><br><span class="line">	&#123;&#123;bai&#125;&#125;</span><br><span class="line">	&#123;% endwith %&#125;</span><br><span class="line"># 定义多个中间变量</span><br><span class="line">	&#123;% with bai=person_list.1.name age=person_list.1.age %&#125;</span><br><span class="line">	&#123;&#123;age&#125;&#125;</span><br><span class="line">	&#123;% endwith %&#125;</span><br></pre></td></tr></table></figure><h2 id="csrf-token"><a href="#csrf-token" class="headerlink" title="csrf_token"></a>csrf_token</h2><h3 id="背景-1"><a href="#背景-1" class="headerlink" title="背景"></a>背景</h3><ul><li><p>csrf：跨站请求伪造</p></li><li><p>要抵御 CSRF，关键在于在请求中放入黑客所不能伪造的信息，并且该信息不存在于cookie 之中。可以在 HTTP 请求中以参数的形式加入一个随机产生的 token，并在服务器端建立一个拦截器来验证这个 token，如果请求中没有token 或者 token 内容不正确，则认为可能是 CSRF 攻击而拒绝该请求。</p></li><li><p>在Django中，服务器会给客户端发送带有 csrf_token 的表单，如果回执中没有这个 csrf_token ，则不做接收。</p></li></ul><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span>	</span></span><br><span class="line"><span class="xml">	</span><span class="template-tag">&#123;% <span class="name"><span class="name">csrf_token</span></span> %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li>标签放在form标签中，form表单中有一个隐藏的标签 name = ‘csrfmiddlewaretoken’ value</li></ul><h2 id="关于静态文件配置"><a href="#关于静态文件配置" class="headerlink" title="关于静态文件配置"></a>关于静态文件配置</h2><p>如果在配置中将 <code>/static/</code> 给变了，那么按照以前的方式，都该改变导入的前缀。</p><p>为了更加灵活，我们将这样做</p><ul><li>标签</li></ul><figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">load</span></span> static %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">static</span></span> '相对路径'%&#125;</span><span class="xml"> </span></span><br><span class="line"><span class="xml">方法一：</span></span><br><span class="line"><span class="xml">"</span><span class="template-tag">&#123;% <span class="name"><span class="name">static</span></span> 'css/dashbord.css'%&#125;</span><span class="xml">" </span></span><br><span class="line"><span class="xml"># 加载这个static.py文件，调用这个文件的static函数，给相对路径，返回绝对路径。</span></span><br></pre></td></tr></table></figure><figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">get_static_prefix</span></span> %&#125;</span><span class="xml">   # 获取静态文件前缀</span></span><br><span class="line"><span class="xml">方法二：</span></span><br><span class="line"><span class="xml">href="</span><span class="template-tag">&#123;% <span class="name"><span class="name">get_static_prefix</span></span> %&#125;</span><span class="xml">css/dashbord.css"</span></span><br></pre></td></tr></table></figure><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">url</span></span> 'home' %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure><p>当我们在url中设置name参数为 home，就可以反向解析。</p><p>详见 <a href="https://atlasnq.github.io/django/20190705-django_6_url.html" target="_blank" rel="noopener">Django的路由系统</a></p><h1 id="自定义tag"><a href="#自定义tag" class="headerlink" title="自定义tag"></a>自定义tag</h1><h2 id="simple-tag"><a href="#simple-tag" class="headerlink" title="simple_tag"></a>simple_tag</h2><ul><li>优：和自定义filter相比，可以定义更多的参数</li><li>缺：他是一个tag，不能嵌套</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@register.simple_tag</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">join_str</span><span class="params">(*args,**kwargs)</span>:</span></span><br><span class="line">	<span class="keyword">return</span> <span class="string">'_'</span>.join(args) + <span class="string">'-'</span> + <span class="string">"*"</span>.join(kwargs.values())</span><br></pre></td></tr></table></figure><figure class="highlight mel"><table><tr><td class="code"><pre><span class="line">&#123;% join_str <span class="string">'v1'</span> <span class="string">'v2'</span> k3=<span class="string">'v3'</span> k4=<span class="string">'v4'</span> %&#125;</span><br></pre></td></tr></table></figure><p>note：要用空格隔开</p><h2 id="inclusion-tag"><a href="#inclusion-tag" class="headerlink" title="inclusion_tag"></a>inclusion_tag</h2><ul><li><strong>组件</strong>虽然细粒度，但它不能灵活的使用变量</li><li><code>inclusion_tag</code> 可以返回一个动态的页面，是一个不错的选择</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@register.inclusion_tag('page.html')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">page</span><span class="params">()</span>:</span></span><br><span class="line">	<span class="keyword">return</span> &#123;&#125;</span><br><span class="line">目前这样写和组件一样</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自制分页</span></span><br><span class="line"><span class="meta">@register.inclusion_tag('page.html')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">page</span><span class="params">(num)</span>:</span></span><br><span class="line">	<span class="keyword">return</span> &#123;<span class="string">'num'</span>:range(<span class="number">1</span>,num+<span class="number">1</span>)&#125;    <span class="comment"># 这个字典是传给page.html的参数</span></span><br></pre></td></tr></table></figure><ul><li>分页的html，由于页数是可变的，这需要传参得到，context充当这个运输工具。</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;# page.html #&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">aria-label</span>=<span class="string">"Page navigation"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"pagination"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">aria-label</span>=<span class="string">"Previous"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span>&amp;laquo;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        &#123;% for i in num %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>&#123;&#123; i &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">aria-label</span>=<span class="string">"Next"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span>&amp;raquo;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>这样在使用的时候先load，再写tag标签即可，这这个html就加入了分页！</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"># author_list.html       </span><br><span class="line">&#123;% load my_tags %&#125;</span><br><span class="line">&#123;% my_page 3 %&#125;</span><br></pre></td></tr></table></figure><h2 id="定义-filter-simple-tag-inclusion-tag"><a href="#定义-filter-simple-tag-inclusion-tag" class="headerlink" title="定义 filter  simple_tag  inclusion_tag"></a>定义 filter simple_tag inclusion_tag</h2><h3 id="相同的步骤"><a href="#相同的步骤" class="headerlink" title="相同的步骤"></a>相同的步骤</h3><ol><li><p>先做<strong>app01</strong>下创建一个python包，名为 <code>templatetags</code></p></li><li><p>在这个包内创建py文件，文件名可以自定义 my_tags.py</p></li><li><p>在这个创建的py文件内写入：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> template</span><br><span class="line">register = template.Library()   <span class="comment"># register的名字不能变</span></span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"><span class="keyword">from</span> django.template <span class="keyword">import</span> Library</span><br><span class="line">register = Library()</span><br></pre></td></tr></table></figure></li><li><p>定义函数 + 装饰器</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@register.filter</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_a_plus</span><span class="params">(value, arg=None)</span>:</span>	<span class="comment"># arg最多有一个</span></span><br><span class="line">    <span class="keyword">return</span> mark_safe(<span class="string">f"&lt;a href='value'&gt;<span class="subst">&#123;arg&#125;</span>&lt;/a&gt;"</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@register.simple_tag()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">join_str</span><span class="params">(*args, **kwargs)</span>:</span>		<span class="comment"># 参数多少都可以</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'_'</span>.join(args) + <span class="string">'-'</span> + <span class="string">'*'</span>.join(kwargs.values())</span><br><span class="line"></span><br><span class="line"><span class="meta">@register.inclusion_tag('page.html')	# 这里必须指定模板</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">page</span><span class="params">(num)</span>:</span></span><br><span class="line">	<span class="keyword">return</span> &#123;<span class="string">'num'</span>:range(<span class="number">1</span>,num+<span class="number">1</span>)&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h3><p>参数：</p><ul><li>自定义filter的参数数量是有限的</li><li>inclusion_tag 后必须加模板的名字</li><li>simple_tag无限制</li></ul><p>返回值：</p><ul><li>inclusion_tag 的返回值必须是一个字典 ，相当于render的第三个参数，做渲染</li><li>自定义filter 和 simple_tag对返回值没有限制</li></ul><p>inclusion_tag 多了一步渲染的过程 ，另外两个至少是做一个返回。</p><p>过滤器可以放在 if 判断中，tag不行。</p><h1 id="模板继承"><a href="#模板继承" class="headerlink" title="模板继承"></a>模板继承</h1><ul><li>Django模板引擎中最强大、最复杂的是模板继承。模板继承允许您构建一个基础“骨架”<strong>模板</strong>，其中包含站点的所有常用元素，并定义子模板可以覆盖的<strong>块</strong>。</li></ul><h2 id="模版："><a href="#模版：" class="headerlink" title="模版："></a>模版：</h2><ol><li>html页面，提取多个页面的公共部分</li><li>定义多个 block 块，需要让子页面覆盖填写</li></ol><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"x-ua-compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  &#123;% block page-css %&#125;</span><br><span class="line">  	子代导入自己的样式</span><br><span class="line">  &#123;% endblock %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是母板的标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;% block page-main %&#125;</span><br><span class="line">	子代自己的部分</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>母板底部内容<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">&#123;% block page-js %&#125;</span><br><span class="line">	子代导入自己的样式</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>继承:</p><ol><li><p>&#123; &#37; entends ‘模板文件名’ &#37; &#125;</p></li><li><p>重写 block 来覆盖母版。</p></li></ol><p>note：</p><ul><li><p>block可大可小，可以是一个table，form，可以是一个属性（字符串）。</p></li><li><p><code>&#39;模板的文件名&#39;</code> 是一个字符串（值），如果不加引号，就会当成一个变量</p></li><li><p>extends 上面不要写入其它内容，extends前面写入内容，是会在html页面内显示的，如果写在后面且不在block内，则不会显示。</p></li><li><p>要显示的内容都要写在block块内。</p></li><li><p>对于每个子页面单独需要的样式，专门定义个block块，然后再子页面中补全。</p></li></ul><p>理解：</p><ul><li>母版相当于一块布，布里面有一些补丁；在继承的时候，复制了一块布过来，这些补丁可以自行更改。</li><li><strong>解析子模版并在被父模版包含的情况下展现其被父模版定义的内容</strong>。</li></ul><h1 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h1><ul><li><p>组件：html 页面， 包含一小段代码</p></li><li><p>目的：更加细粒度的拿到代码段。</p></li><li><p>可以使用字符串也可以使用变量名</p></li><li><p>理解：类似python中的import，更准确的是一种”<strong>将子模版渲染并嵌入当前HTML中</strong>“的变种方法,而不应该看作是”解析子模版并在被父模版包含的情况下展现其被父模版定义的内容”。这意味着在不同的被包含的子模版之间并不共享父模版的状态,每一个子包含都是完全独立的渲染过程。</p></li></ul><figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">include</span></span> '组件名' %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">include</span></span> 'nav.html' %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>本篇介绍了django的模板系统，目标定制一个动态的，简洁的页面。</p><p>下一篇为 <a href="https://chennq.com/django/20190704-django_5.html">Django的View</a>，这是第二个需要了解的细节，学习了这一块，就可以完善我们的业务逻辑。</p>]]></content>
      <categories>
        <category>django</category>
      </categories>
      <tags>
        <tag>django</tag>
        <tag>学习笔记</tag>
        <tag>Web前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Pytorch-高阶操作</title>
    <url>/Pytorch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20190701-learning_PyTorch_8_op.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>本篇介绍Pytorch的两个高阶操作: where与gather。</p></blockquote><a id="more"></a><h1 id="where"><a href="#where" class="headerlink" title="where"></a>where</h1><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p><img src="/Pytorch学习笔记/20190701-learning_PyTorch_8_op/where.png" alt="where"></p><p>图片来自 <a href="https://pytorch.org/docs/stable/torch.html?highlight=where#torch.where" target="_blank" rel="noopener">Pytorch官方文档</a>.</p><ul><li>就像python中的三元运算一样，如果条件满足，选input的元素，不满足选other的元素。</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In[<span class="number">49</span>]: cond = torch.rand(<span class="number">2</span>,<span class="number">2</span>)	<span class="comment"># 制作一个选择器</span></span><br><span class="line">In[<span class="number">50</span>]: cond</span><br><span class="line">Out[<span class="number">50</span>]: </span><br><span class="line">tensor([[<span class="number">0.2181</span>, <span class="number">0.4352</span>],</span><br><span class="line">        [<span class="number">0.2425</span>, <span class="number">0.7505</span>]])</span><br><span class="line">In[<span class="number">51</span>]: a = torch.zeros(<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">In[<span class="number">52</span>]: b = torch.ones(<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">In[<span class="number">53</span>]: torch.where(cond&gt;<span class="number">0.5</span>,a,b)</span><br><span class="line">Out[<span class="number">53</span>]: </span><br><span class="line">tensor([[<span class="number">1.</span>, <span class="number">1.</span>],</span><br><span class="line">        [<span class="number">1.</span>, <span class="number">0.</span>]])</span><br></pre></td></tr></table></figure><h2 id="为什么会有where"><a href="#为什么会有where" class="headerlink" title="为什么会有where"></a>为什么会有where</h2><ul><li>以前我们通常在for循环下以 c[0] = a[0] 来进行整段的复制，但是这些都是在cpu上完成的，想要用gpu并行，就必须摆脱这种方式。</li><li>使用where语句，<strong>在gpu中，高度并行</strong>。</li><li>cond 可以由cpu生成也可以有gpu生成。</li></ul><h1 id="gather"><a href="#gather" class="headerlink" title="gather"></a>gather</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.gather(input, dim, index, out=<span class="literal">None</span>, sparse_grad=<span class="literal">False</span>) → Tensor</span><br></pre></td></tr></table></figure><ul><li><p>收集/查表</p></li><li><p>input 理解为一张表；dim决定哪个维度查找；所查的索引</p></li><li><p>这样做一来可以用gpu加速，二来可以达到从 relative gather 到 global gather。</p></li></ul><p><img src="/Pytorch学习笔记/20190701-learning_PyTorch_8_op/gather2.png" alt="gather2"></p><p>例子：</p><ul><li><p>以手写体数字为例，我们假设输出[4,10]</p></li><li><p>每张图片取可能性最大的前3</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In[<span class="number">3</span>]: prob=torch.randn(<span class="number">4</span>,<span class="number">10</span>)</span><br><span class="line">In[<span class="number">4</span>]: idx = prob.topk(dim=<span class="number">1</span>, k=<span class="number">3</span>)</span><br><span class="line">In[<span class="number">5</span>]: idx</span><br><span class="line">Out[<span class="number">5</span>]: </span><br><span class="line">torch.return_types.topk(</span><br><span class="line">values=tensor([[<span class="number">0.6667</span>, <span class="number">0.3384</span>, <span class="number">0.2990</span>],</span><br><span class="line">        [<span class="number">1.7411</span>, <span class="number">0.6379</span>, <span class="number">0.3942</span>],</span><br><span class="line">        [<span class="number">1.4432</span>, <span class="number">1.3714</span>, <span class="number">0.9460</span>],</span><br><span class="line">        [<span class="number">1.8640</span>, <span class="number">1.2523</span>, <span class="number">0.8521</span>]]),</span><br><span class="line">indices=tensor([[<span class="number">6</span>, <span class="number">5</span>, <span class="number">1</span>],</span><br><span class="line">        [<span class="number">1</span>, <span class="number">8</span>, <span class="number">5</span>],</span><br><span class="line">        [<span class="number">1</span>, <span class="number">0</span>, <span class="number">8</span>],</span><br><span class="line">        [<span class="number">3</span>, <span class="number">6</span>, <span class="number">7</span>]]))</span><br><span class="line">In[<span class="number">6</span>]: label = torch.arange(<span class="number">10</span>)+<span class="number">100</span>		<span class="comment"># 生成label</span></span><br><span class="line">In[<span class="number">17</span>]: _,idx = idx</span><br><span class="line">In[<span class="number">18</span>]: idx</span><br><span class="line">Out[<span class="number">18</span>]: </span><br><span class="line">tensor([[<span class="number">6</span>, <span class="number">5</span>, <span class="number">1</span>],</span><br><span class="line">        [<span class="number">1</span>, <span class="number">8</span>, <span class="number">5</span>],</span><br><span class="line">        [<span class="number">1</span>, <span class="number">0</span>, <span class="number">8</span>],</span><br><span class="line">        [<span class="number">3</span>, <span class="number">6</span>, <span class="number">7</span>]])</span><br><span class="line">In[<span class="number">19</span>]: torch.gather(label.expand(<span class="number">4</span>,<span class="number">10</span>),dim=<span class="number">1</span>,index=idx)	<span class="comment"># 完成查表</span></span><br><span class="line">Out[<span class="number">19</span>]: </span><br><span class="line">tensor([[<span class="number">106</span>, <span class="number">105</span>, <span class="number">101</span>],</span><br><span class="line">        [<span class="number">101</span>, <span class="number">108</span>, <span class="number">105</span>],</span><br><span class="line">        [<span class="number">101</span>, <span class="number">100</span>, <span class="number">108</span>],</span><br><span class="line">        [<span class="number">103</span>, <span class="number">106</span>, <span class="number">107</span>]])</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Pytorch学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>Pytorch</tag>
        <tag>Deep Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>Pytorch-属性统计</title>
    <url>/Pytorch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20190630-learning_PyTorch_7_statistics.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>本篇介绍Pytorch属性统计的几种方式。</p></blockquote><a id="more"></a><h1 id="统计属性"><a href="#统计属性" class="headerlink" title="统计属性"></a>统计属性</h1><p>求值或位置</p><ul><li>norm</li><li>mean sum</li><li>prod</li><li>max, min, argmin, argmax</li><li>kthvalue, topk</li></ul><h1 id="norm"><a href="#norm" class="headerlink" title="norm"></a>norm</h1><h2 id="norm-与-normalize"><a href="#norm-与-normalize" class="headerlink" title="norm 与 normalize"></a>norm 与 normalize</h2><ul><li>norm指的是范数，并不是normalize。</li><li>normalize是归一化，例如 batch_norm。</li></ul><h2 id="matrix-norm-与-vector-norn"><a href="#matrix-norm-与-vector-norn" class="headerlink" title="matrix norm 与 vector norn"></a>matrix norm 与 vector norn</h2><p>要更好的理解范数，就要从函数、几何与矩阵的角度去理解。<br>我们都知道，函数与几何图形往往是有对应的关系，这个很好想象，特别是在三维以下的空间内，函数是几何图像的数学概括，而几何图像是函数的高度形象化，比如一个函数对应几何空间上若干点组成的图形。<br>但当函数与几何超出三维空间时，就难以获得较好的想象，于是就有了映射的概念，映射表达的就是一个集合通过某种关系转为另外一个集合。通常数学书是先说映射，然后再讨论函数，这是因为函数是映射的一个特例。<br>为了更好的在数学上表达这种映射关系，（这里特指线性关系）于是就引进了矩阵。这里的矩阵就是表征上述空间映射的线性关系。而通过向量来表示上述映射中所说的这个集合，而我们通常所说的基，就是这个集合的最一般关系。于是，我们可以这样理解，<u>一个集合（向量），通过一种映射关系（矩阵），得到另外一个几何（另外一个向量）</u>。</p><ul><li><p><strong>向量的范数，就是表示这个原有集合的大小</strong>。</p></li><li><p><strong>矩阵的范数，就是表示这个变化过程的大小的一个度量</strong>。</p></li></ul><p>总结起来一句话，<strong>范数(norm)，是具有“长度”概念的函数</strong>。</p><p>![Vector Norm and Matrix Norm](Pytorch-属性统计/Vector Norm and Matrix Norm.jpg)</p><p>推荐阅读 <a href="https://blog.csdn.net/bitcarmanlee/article/details/51945271" target="_blank" rel="noopener">向量范数与矩阵范数</a>, <a href="https://www.zhihu.com/question/29458275" target="_blank" rel="noopener">机器学习下的各种norm到底是个什么东西？</a>, <a href="https://blog.csdn.net/zouxy09/article/details/24971995" target="_blank" rel="noopener">机器学习中的范数规则化之（一）L0、L1与L2范数</a>.</p><p>在做 gradient clipping 的时候，需要查看weight 的 gradient norm 如果太大的话就需要做 gradient clipping（使用clamp）</p><h2 id="norm-p"><a href="#norm-p" class="headerlink" title="norm-p"></a>norm-p</h2><ul><li><p>1-Norm就是所有元素的绝对值之和</p></li><li><p>2-Norm就是所有元素的平方和并开根号</p></li><li><p>不加dim参数，默认所有维度</p></li><li><p>从shape出发，加入dim后，这个dim就会消失（做Norm）</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In[<span class="number">3</span>]: a = torch.full([<span class="number">8</span>],<span class="number">1</span>)</span><br><span class="line">In[<span class="number">4</span>]: b = a.view(<span class="number">2</span>,<span class="number">4</span>)</span><br><span class="line">In[<span class="number">5</span>]: c = a.view(<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">In[<span class="number">6</span>]: b</span><br><span class="line">Out[<span class="number">6</span>]: </span><br><span class="line">tensor([[<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>],</span><br><span class="line">        [<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>]])</span><br><span class="line">In[<span class="number">7</span>]: c</span><br><span class="line">Out[<span class="number">7</span>]: </span><br><span class="line">tensor([[[<span class="number">1.</span>, <span class="number">1.</span>],</span><br><span class="line">         [<span class="number">1.</span>, <span class="number">1.</span>]],</span><br><span class="line"></span><br><span class="line">        [[<span class="number">1.</span>, <span class="number">1.</span>],</span><br><span class="line">         [<span class="number">1.</span>, <span class="number">1.</span>]]])</span><br><span class="line"></span><br><span class="line">In[<span class="number">8</span>]: a.norm(<span class="number">1</span>), b.norm(<span class="number">1</span>), c.norm(<span class="number">1</span>)</span><br><span class="line">Out[<span class="number">8</span>]: (tensor(<span class="number">8.</span>), tensor(<span class="number">8.</span>), tensor(<span class="number">8.</span>))</span><br><span class="line">In[<span class="number">9</span>]: a.norm(<span class="number">2</span>), b.norm(<span class="number">2</span>), c.norm(<span class="number">2</span>)</span><br><span class="line">Out[<span class="number">9</span>]: (tensor(<span class="number">2.8284</span>), tensor(<span class="number">2.8284</span>), tensor(<span class="number">2.8284</span>))</span><br><span class="line">    </span><br><span class="line">In[<span class="number">10</span>]: b.norm(<span class="number">1</span>,dim=<span class="number">1</span>)</span><br><span class="line">Out[<span class="number">10</span>]: tensor([<span class="number">4.</span>, <span class="number">4.</span>])	<span class="comment"># 就shape来讲 [2,4] norm之后 --&gt; [2]</span></span><br><span class="line">In[<span class="number">16</span>]: b.norm(<span class="number">1</span>,dim=<span class="number">0</span>)</span><br><span class="line">Out[<span class="number">16</span>]: tensor([<span class="number">2.</span>, <span class="number">2.</span>, <span class="number">2.</span>, <span class="number">2.</span>])	<span class="comment"># shape [2,4]  ---&gt; [4]</span></span><br><span class="line"></span><br><span class="line">In[<span class="number">11</span>]: b.norm(<span class="number">2</span>,dim=<span class="number">1</span>)</span><br><span class="line">Out[<span class="number">11</span>]: tensor([<span class="number">2.</span>, <span class="number">2.</span>])</span><br><span class="line">    </span><br><span class="line">In[<span class="number">12</span>]: c.norm(<span class="number">1</span>,dim=<span class="number">0</span>)	<span class="comment"># [2,2,2]   在0维度做求1范数，那么这个维度就将消掉，得到shape为[2,2]</span></span><br><span class="line">Out[<span class="number">12</span>]: </span><br><span class="line">tensor([[<span class="number">2.</span>, <span class="number">2.</span>],</span><br><span class="line">        [<span class="number">2.</span>, <span class="number">2.</span>]])</span><br><span class="line">In[<span class="number">14</span>]: c.norm(<span class="number">2</span>,dim=<span class="number">0</span>)		</span><br><span class="line">Out[<span class="number">14</span>]: </span><br><span class="line">tensor([[<span class="number">1.4142</span>, <span class="number">1.4142</span>],</span><br><span class="line">        [<span class="number">1.4142</span>, <span class="number">1.4142</span>]])	</span><br><span class="line"><span class="comment"># 位置[0,0,0] 与 [1,0,0] </span></span><br><span class="line">[[[<span class="number">1.</span>, .],</span><br><span class="line">  [ ., .]],</span><br><span class="line"></span><br><span class="line"> [[<span class="number">1.</span>,  .],</span><br><span class="line">  [ .,  .]]]</span><br></pre></td></tr></table></figure><h1 id="mean，sum，min，max，prod"><a href="#mean，sum，min，max，prod" class="headerlink" title="mean，sum，min，max，prod"></a>mean，sum，min，max，prod</h1><ul><li><p>max() 求最大的值</p></li><li><p><code>min()</code> 求最小的值</p></li><li><p><code>mean()</code> 求平均值 mean = sum / size</p></li><li><p><code>prod()</code> 累乘</p></li><li><p><code>sum()</code> 求和</p></li><li><p><code>argmax()</code> 返回最大值元素的索引</p></li><li><p><code>argmin()</code> 返回最大值元素的索引</p></li><li><p><code>argmax(dim=l)</code> 求 <code>l</code> 维中，最大元素的位置，这样的话这一维将消失。</p></li></ul><p>note：以上这些，如果不加参数，会先打平，在计算，所以对于 argmax 和 argmin来说得到的是打平后的索引。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In[<span class="number">18</span>]: a = torch.arange(<span class="number">8</span>).view(<span class="number">2</span>,<span class="number">4</span>).float()		<span class="comment"># 假设我们生成一组 gradient</span></span><br><span class="line">In[<span class="number">19</span>]: a</span><br><span class="line">Out[<span class="number">19</span>]: </span><br><span class="line">tensor([[<span class="number">0.</span>, <span class="number">1.</span>, <span class="number">2.</span>, <span class="number">3.</span>],					<span class="comment"># 想要做clipping，先要知道它的最大最小值</span></span><br><span class="line">        [<span class="number">4.</span>, <span class="number">5.</span>, <span class="number">6.</span>, <span class="number">7.</span>]])</span><br><span class="line">In[<span class="number">20</span>]: a.min(), a.max(), a.mean(), a.prod()</span><br><span class="line">Out[<span class="number">20</span>]: (tensor(<span class="number">0.</span>), tensor(<span class="number">7.</span>), tensor(<span class="number">3.5000</span>), tensor(<span class="number">0.</span>))</span><br><span class="line">    </span><br><span class="line">In[<span class="number">21</span>]: a.sum()</span><br><span class="line">Out[<span class="number">21</span>]: tensor(<span class="number">28.</span>)</span><br><span class="line">    </span><br><span class="line">In[<span class="number">22</span>]: a.argmax()</span><br><span class="line">Out[<span class="number">22</span>]: tensor(<span class="number">7</span>)</span><br><span class="line">In[<span class="number">23</span>]: a.argmin()</span><br><span class="line">Out[<span class="number">23</span>]: tensor(<span class="number">0</span>)</span><br><span class="line">    </span><br><span class="line">In[<span class="number">24</span>]: a = torch.randn(<span class="number">4</span>,<span class="number">10</span>)	<span class="comment"># 假设生成4张手写体数字照片的概率（发生过偏移）</span></span><br><span class="line">In[<span class="number">25</span>]: a[<span class="number">0</span>]</span><br><span class="line">Out[<span class="number">25</span>]: </span><br><span class="line">tensor([ <span class="number">0.0234</span>,  <span class="number">0.6830</span>, <span class="number">-0.1518</span>,  <span class="number">0.4595</span>, <span class="number">-1.5634</span>,  <span class="number">0.5534</span>,  <span class="number">0.9934</span>, <span class="number">-1.1536</span>,</span><br><span class="line">         <span class="number">0.3124</span>, <span class="number">-1.4103</span>])</span><br><span class="line">In[<span class="number">26</span>]: a.argmax()				<span class="comment"># 打平成一个1维的vector</span></span><br><span class="line">Out[<span class="number">26</span>]: tensor(<span class="number">28</span>)</span><br><span class="line">In[<span class="number">28</span>]: a.argmax(dim=<span class="number">1</span>)			<span class="comment"># shape[4,10] 在 dim=1 求最大值的索引</span></span><br><span class="line">Out[<span class="number">28</span>]: tensor([<span class="number">6</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">1</span>])	<span class="comment"># 获取4张照片预测值最大的位置，这个位置决定了它是数字几  注意：参数dim=1 才拿到了这个结果！！</span></span><br></pre></td></tr></table></figure><h2 id="dim，keepdim"><a href="#dim，keepdim" class="headerlink" title="dim，keepdim"></a>dim，keepdim</h2><ul><li>使用max(dim=) 函数配上dim参数，可以很好的返回最大值与该值的位置</li><li>argmax 其实是 max 的一部分（位置）</li><li>keepdim=True 设置这个参数后，维度得以保留，与原来的维度是一样的。</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In[<span class="number">33</span>]: a				<span class="comment"># # 假设生成4张手写体数字照片的概率（发生过偏移）</span></span><br><span class="line">Out[<span class="number">33</span>]: </span><br><span class="line">tensor([[ <span class="number">0.0234</span>,  <span class="number">0.6830</span>, <span class="number">-0.1518</span>,  <span class="number">0.4595</span>, <span class="number">-1.5634</span>,  <span class="number">0.5534</span>,  <span class="number">0.9934</span>, <span class="number">-1.1536</span>,</span><br><span class="line">          <span class="number">0.3124</span>, <span class="number">-1.4103</span>],</span><br><span class="line">        [ <span class="number">0.6339</span>,  <span class="number">1.5724</span>,  <span class="number">0.2552</span>,  <span class="number">1.0917</span>, <span class="number">-1.4003</span>,  <span class="number">0.5165</span>,  <span class="number">0.8891</span>, <span class="number">-2.0315</span>,</span><br><span class="line">          <span class="number">0.4666</span>,  <span class="number">1.4355</span>],</span><br><span class="line">        [ <span class="number">1.6149</span>,  <span class="number">0.2364</span>,  <span class="number">0.3789</span>, <span class="number">-0.3974</span>, <span class="number">-0.1433</span>,  <span class="number">0.9235</span>,  <span class="number">0.6730</span>,  <span class="number">0.3575</span>,</span><br><span class="line">          <span class="number">2.0742</span>,  <span class="number">0.8954</span>],</span><br><span class="line">        [<span class="number">-0.1019</span>,  <span class="number">1.6405</span>, <span class="number">-1.3493</span>,  <span class="number">0.5554</span>, <span class="number">-0.0533</span>,  <span class="number">0.0450</span>,  <span class="number">0.2018</span>, <span class="number">-0.1688</span>,</span><br><span class="line">         <span class="number">-1.2579</span>, <span class="number">-0.7906</span>]])</span><br><span class="line"></span><br><span class="line">In[<span class="number">30</span>]: a.max(dim=<span class="number">1</span>)	</span><br><span class="line">Out[<span class="number">30</span>]: </span><br><span class="line">torch.return_types.max(</span><br><span class="line">values=tensor([<span class="number">0.9934</span>, <span class="number">1.5724</span>, <span class="number">2.0742</span>, <span class="number">1.6405</span>]),</span><br><span class="line">indices=tensor([<span class="number">6</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">1</span>]))</span><br><span class="line"><span class="comment"># 第1张照片，预测为6的置信度为0.9934（这个概率是个示意，并不真是概率）</span></span><br><span class="line"><span class="comment"># 第2张照片，预测为1的置信度是1.5724</span></span><br><span class="line"><span class="comment"># 第3张照片，预测为8的置信度是2.0742</span></span><br><span class="line"><span class="comment"># 第4张照片，预测为1的置信度是1.6405</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">In[<span class="number">31</span>]: a.max(dim=<span class="number">1</span>,keepdim=<span class="literal">True</span>)</span><br><span class="line">Out[<span class="number">31</span>]: </span><br><span class="line">torch.return_types.max(</span><br><span class="line">values=tensor([[<span class="number">0.9934</span>],</span><br><span class="line">        [<span class="number">1.5724</span>],</span><br><span class="line">        [<span class="number">2.0742</span>],</span><br><span class="line">        [<span class="number">1.6405</span>]]),</span><br><span class="line">indices=tensor([[<span class="number">6</span>],</span><br><span class="line">        [<span class="number">1</span>],</span><br><span class="line">        [<span class="number">8</span>],</span><br><span class="line">        [<span class="number">1</span>]]))</span><br><span class="line">In[<span class="number">32</span>]: a.argmax(dim=<span class="number">1</span>, keepdim=<span class="literal">True</span>)	<span class="comment"># 返回一个 [4,1] , dim=1这一维并没有消失</span></span><br><span class="line">Out[<span class="number">32</span>]: </span><br><span class="line">tensor([[<span class="number">6</span>],</span><br><span class="line">        [<span class="number">1</span>],</span><br><span class="line">        [<span class="number">8</span>],</span><br><span class="line">        [<span class="number">1</span>]])</span><br></pre></td></tr></table></figure><h1 id="Top-k-or-k-th"><a href="#Top-k-or-k-th" class="headerlink" title="Top-k or k-th"></a>Top-k or k-th</h1><h2 id="topk"><a href="#topk" class="headerlink" title="topk"></a>topk</h2><ul><li><p>由于max只能找出一个最大，如果想找最大的几个就做不到了。</p></li><li><p>top-k 比max提供更多的信息，适用于特定的场合。</p></li><li><p>top-k 指的是返回概率最大的的 k 组数据以及位置</p></li><li><p>largest=False 求概率最小的 k 组</p></li></ul><p>例如：对于一张照片，他的概率是[0.2, 0.3, 0.1, 0.2, 0.1, 0.1]，使用topk(3) 会得到 概率最大的三个数[0.3, 0.2, 0.2] 以及位置[1, 0, 3]</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In[<span class="number">33</span>]: a</span><br><span class="line">Out[<span class="number">33</span>]: </span><br><span class="line">tensor([[ <span class="number">0.0234</span>,  <span class="number">0.6830</span>, <span class="number">-0.1518</span>,  <span class="number">0.4595</span>, <span class="number">-1.5634</span>,  <span class="number">0.5534</span>,  <span class="number">0.9934</span>, <span class="number">-1.1536</span>,</span><br><span class="line">          <span class="number">0.3124</span>, <span class="number">-1.4103</span>],</span><br><span class="line">        [ <span class="number">0.6339</span>,  <span class="number">1.5724</span>,  <span class="number">0.2552</span>,  <span class="number">1.0917</span>, <span class="number">-1.4003</span>,  <span class="number">0.5165</span>,  <span class="number">0.8891</span>, <span class="number">-2.0315</span>,</span><br><span class="line">          <span class="number">0.4666</span>,  <span class="number">1.4355</span>],</span><br><span class="line">        [ <span class="number">1.6149</span>,  <span class="number">0.2364</span>,  <span class="number">0.3789</span>, <span class="number">-0.3974</span>, <span class="number">-0.1433</span>,  <span class="number">0.9235</span>,  <span class="number">0.6730</span>,  <span class="number">0.3575</span>,</span><br><span class="line">          <span class="number">2.0742</span>,  <span class="number">0.8954</span>],</span><br><span class="line">        [<span class="number">-0.1019</span>,  <span class="number">1.6405</span>, <span class="number">-1.3493</span>,  <span class="number">0.5554</span>, <span class="number">-0.0533</span>,  <span class="number">0.0450</span>,  <span class="number">0.2018</span>, <span class="number">-0.1688</span>,</span><br><span class="line">         <span class="number">-1.2579</span>, <span class="number">-0.7906</span>]])</span><br><span class="line">In[<span class="number">34</span>]: </span><br><span class="line">In[<span class="number">34</span>]: a.topk(<span class="number">3</span>,dim=<span class="number">1</span>)</span><br><span class="line">Out[<span class="number">34</span>]: </span><br><span class="line">torch.return_types.topk(</span><br><span class="line">values=tensor([[<span class="number">0.9934</span>, <span class="number">0.6830</span>, <span class="number">0.5534</span>],	<span class="comment"># 返回概率最大的前3个</span></span><br><span class="line">        [<span class="number">1.5724</span>, <span class="number">1.4355</span>, <span class="number">1.0917</span>],</span><br><span class="line">        [<span class="number">2.0742</span>, <span class="number">1.6149</span>, <span class="number">0.9235</span>],</span><br><span class="line">        [<span class="number">1.6405</span>, <span class="number">0.5554</span>, <span class="number">0.2018</span>]]),</span><br><span class="line">    	<span class="comment"># shape的话 从[4, 10]   ---&gt;  [4,3]</span></span><br><span class="line">indices=tensor([[<span class="number">6</span>, <span class="number">1</span>, <span class="number">5</span>],	<span class="comment"># 最可能是6，1次之，5次之</span></span><br><span class="line">        [<span class="number">1</span>, <span class="number">9</span>, <span class="number">3</span>],</span><br><span class="line">        [<span class="number">8</span>, <span class="number">0</span>, <span class="number">5</span>],</span><br><span class="line">        [<span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>]]))</span><br><span class="line"></span><br><span class="line">In[<span class="number">35</span>]: a.topk(<span class="number">3</span>,dim=<span class="number">1</span>,largest=<span class="literal">False</span>)</span><br><span class="line">Out[<span class="number">35</span>]: </span><br><span class="line">torch.return_types.topk(</span><br><span class="line">values=tensor([[<span class="number">-1.5634</span>, <span class="number">-1.4103</span>, <span class="number">-1.1536</span>],</span><br><span class="line">        [<span class="number">-2.0315</span>, <span class="number">-1.4003</span>,  <span class="number">0.2552</span>],</span><br><span class="line">        [<span class="number">-0.3974</span>, <span class="number">-0.1433</span>,  <span class="number">0.2364</span>],</span><br><span class="line">        [<span class="number">-1.3493</span>, <span class="number">-1.2579</span>, <span class="number">-0.7906</span>]]),</span><br><span class="line">indices=tensor([[<span class="number">4</span>, <span class="number">9</span>, <span class="number">7</span>],	<span class="comment"># 最不可能是4，9次之，7次之</span></span><br><span class="line">        [<span class="number">7</span>, <span class="number">4</span>, <span class="number">2</span>],</span><br></pre></td></tr></table></figure><h2 id="kthvalue"><a href="#kthvalue" class="headerlink" title="kthvalue"></a>kthvalue</h2><ul><li>kthvalue(i, dim=j) 求 j 维上，第 i 小的元素以及位置。</li><li>keepdim=True 会保持维度</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In[<span class="number">36</span>]: a.kthvalue(<span class="number">8</span>,dim=<span class="number">1</span>)	<span class="comment"># 求1维，第8小（第3大）（ 0-9，第10小=第1大）</span></span><br><span class="line">Out[<span class="number">36</span>]: </span><br><span class="line">torch.return_types.kthvalue(</span><br><span class="line">values=tensor([<span class="number">0.5534</span>, <span class="number">1.0917</span>, <span class="number">0.9235</span>, <span class="number">0.2018</span>]),</span><br><span class="line">indices=tensor([<span class="number">5</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>]))</span><br><span class="line">In[<span class="number">37</span>]: a.kthvalue(<span class="number">3</span>)</span><br><span class="line">Out[<span class="number">37</span>]: </span><br><span class="line">torch.return_types.kthvalue(</span><br><span class="line">values=tensor([<span class="number">-1.1536</span>,  <span class="number">0.2552</span>,  <span class="number">0.2364</span>, <span class="number">-0.7906</span>]),</span><br><span class="line">indices=tensor([<span class="number">7</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">9</span>]))</span><br><span class="line">In[<span class="number">38</span>]: a.kthvalue(<span class="number">3</span>,dim=<span class="number">1</span>)</span><br><span class="line">Out[<span class="number">38</span>]: </span><br><span class="line">torch.return_types.kthvalue(</span><br><span class="line">values=tensor([<span class="number">-1.1536</span>,  <span class="number">0.2552</span>,  <span class="number">0.2364</span>, <span class="number">-0.7906</span>]),</span><br><span class="line">indices=tensor([<span class="number">7</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">9</span>]))</span><br></pre></td></tr></table></figure><h1 id="compare"><a href="#compare" class="headerlink" title="compare"></a>compare</h1><ul><li><code>&gt;, &gt;=, &lt;, &lt;=, !=, ==</code></li><li>进行比较后，返回的是一个 bytetensor，不再是floattensor，由于pytorch中所有的类型都是数值，没有True or False ，为了表达使用整型的0，1</li><li>torch.eq(a,b) 判断每一个元素是否相等，返回 bytetensor</li><li>torch.equal(a,b) 返回True or False</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In[<span class="number">39</span>]: a&gt;<span class="number">0</span></span><br><span class="line">Out[<span class="number">39</span>]: </span><br><span class="line">tensor([[<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">        [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">        [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">        [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]], dtype=torch.uint8)</span><br><span class="line">In[<span class="number">40</span>]: torch.gt(a,<span class="number">0</span>)</span><br><span class="line">Out[<span class="number">40</span>]: </span><br><span class="line">tensor([[<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">        [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">        [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">        [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]], dtype=torch.uint8)</span><br><span class="line">In[<span class="number">41</span>]: a!=<span class="number">0</span></span><br><span class="line">Out[<span class="number">41</span>]: </span><br><span class="line">tensor([[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">        [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">        [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">        [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]], dtype=torch.uint8)</span><br><span class="line">In[<span class="number">42</span>]: a = torch.ones(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">In[<span class="number">43</span>]: b = torch.randn(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">In[<span class="number">44</span>]: torch.eq(a,b)</span><br><span class="line">Out[<span class="number">44</span>]: </span><br><span class="line">tensor([[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">        [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]], dtype=torch.uint8)</span><br><span class="line">In[<span class="number">45</span>]: torch.eq(a,a)</span><br><span class="line">Out[<span class="number">45</span>]: </span><br><span class="line">tensor([[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">        [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]], dtype=torch.uint8)</span><br><span class="line">In[<span class="number">46</span>]: torch.equal(a,a)</span><br><span class="line">Out[<span class="number">46</span>]: <span class="literal">True</span></span><br></pre></td></tr></table></figure><p>下表是numpy与pytorch比较操作的方法，还是推荐 符号 &gt; &lt; ..</p><table><thead><tr><th>Numpy</th><th>PyTorch</th></tr></thead><tbody><tr><td>np.less</td><td>x.lt</td></tr><tr><td>np.less_equal</td><td>x.le</td></tr><tr><td>np.less_equal</td><td>x.le</td></tr><tr><td>np.less_equal</td><td>x.le</td></tr><tr><td>np.equal</td><td>x.eq</td></tr><tr><td>np.not_equal</td><td>x.ne</td></tr></tbody></table>]]></content>
      <categories>
        <category>Pytorch学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>Pytorch</tag>
        <tag>Deep Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>Pytorch-数学运算</title>
    <url>/Pytorch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20190629-learning_PyTorch_6_calculate.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>本篇介绍tensor的数学运算。</p></blockquote><a id="more"></a><h1 id="基本运算"><a href="#基本运算" class="headerlink" title="基本运算"></a>基本运算</h1><ul><li>add/minus/multiply/divide</li><li>matmul</li><li>pow</li><li>sqrt/rsqrt</li><li>round</li></ul><h1 id="基础运算"><a href="#基础运算" class="headerlink" title="基础运算"></a>基础运算</h1><ul><li>可以使用 + - * / 推荐</li><li>也可以使用 torch.add, mul, sub, div</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In[<span class="number">3</span>]: a = torch.rand(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">In[<span class="number">4</span>]: b = torch.rand(<span class="number">4</span>)		<span class="comment"># 使用broadcast</span></span><br><span class="line">In[<span class="number">5</span>]: a+b</span><br><span class="line">Out[<span class="number">5</span>]: </span><br><span class="line">tensor([[<span class="number">0.9463</span>, <span class="number">1.3325</span>, <span class="number">1.0427</span>, <span class="number">1.3508</span>],</span><br><span class="line">        [<span class="number">1.8552</span>, <span class="number">0.5614</span>, <span class="number">0.8546</span>, <span class="number">1.2186</span>],</span><br><span class="line">        [<span class="number">1.4794</span>, <span class="number">1.3745</span>, <span class="number">0.7024</span>, <span class="number">1.1688</span>]])</span><br><span class="line">In[<span class="number">6</span>]: torch.add(a,b)</span><br><span class="line">Out[<span class="number">6</span>]: </span><br><span class="line">tensor([[<span class="number">0.9463</span>, <span class="number">1.3325</span>, <span class="number">1.0427</span>, <span class="number">1.3508</span>],</span><br><span class="line">        [<span class="number">1.8552</span>, <span class="number">0.5614</span>, <span class="number">0.8546</span>, <span class="number">1.2186</span>],</span><br><span class="line">        [<span class="number">1.4794</span>, <span class="number">1.3745</span>, <span class="number">0.7024</span>, <span class="number">1.1688</span>]])</span><br><span class="line">In[<span class="number">8</span>]: torch.all(torch.eq((a-b),torch.sub(a,b)))	</span><br><span class="line">Out[<span class="number">8</span>]: tensor(<span class="number">1</span>, dtype=torch.uint8)</span><br><span class="line">In[<span class="number">9</span>]: torch.all(torch.eq((a*b),torch.mul(a,b)))</span><br><span class="line">Out[<span class="number">9</span>]: tensor(<span class="number">1</span>, dtype=torch.uint8)</span><br><span class="line">In[<span class="number">10</span>]: torch.all(torch.eq((a/b),torch.div(a,b)))</span><br><span class="line">Out[<span class="number">10</span>]: tensor(<span class="number">1</span>, dtype=torch.uint8)</span><br></pre></td></tr></table></figure><ul><li><p><code>torch.all()</code> 判断每个位置的元素是否相同</p><p>是否存在为0的元素</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In[<span class="number">21</span>]: torch.all(torch.ByteTensor([<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]))</span><br><span class="line">Out[<span class="number">21</span>]: tensor(<span class="number">1</span>, dtype=torch.uint8)</span><br><span class="line">In[<span class="number">22</span>]: torch.all(torch.ByteTensor([<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>]))</span><br><span class="line">Out[<span class="number">22</span>]: tensor(<span class="number">0</span>, dtype=torch.uint8)</span><br></pre></td></tr></table></figure></li></ul><h1 id="matmul"><a href="#matmul" class="headerlink" title="matmul"></a>matmul</h1><ul><li>matmul 表示 matrix mul</li><li><code>*</code> 表示的是element-wise</li><li><code>torch.mm(a,b)</code> 只能计算2D 不推荐</li><li><code>torch.matmul(a,b)</code> 可以计算更高维度，落脚点依旧在行与列。 推荐</li><li><code>@</code> 是matmul 的重载形式</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In[<span class="number">24</span>]: a = <span class="number">3</span>*torch.ones(<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">In[<span class="number">25</span>]: a</span><br><span class="line">Out[<span class="number">25</span>]: </span><br><span class="line">tensor([[<span class="number">3.</span>, <span class="number">3.</span>],</span><br><span class="line">        [<span class="number">3.</span>, <span class="number">3.</span>]])</span><br><span class="line">In[<span class="number">26</span>]: b = torch.ones(<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">In[<span class="number">27</span>]: torch.mm(a,b)</span><br><span class="line">Out[<span class="number">27</span>]: </span><br><span class="line">tensor([[<span class="number">6.</span>, <span class="number">6.</span>],</span><br><span class="line">        [<span class="number">6.</span>, <span class="number">6.</span>]])</span><br><span class="line">In[<span class="number">28</span>]: torch.matmul(a,b)</span><br><span class="line">Out[<span class="number">28</span>]: </span><br><span class="line">tensor([[<span class="number">6.</span>, <span class="number">6.</span>],</span><br><span class="line">        [<span class="number">6.</span>, <span class="number">6.</span>]])</span><br><span class="line">In[<span class="number">29</span>]: a@b</span><br><span class="line">Out[<span class="number">29</span>]: </span><br><span class="line">tensor([[<span class="number">6.</span>, <span class="number">6.</span>],</span><br><span class="line">        [<span class="number">6.</span>, <span class="number">6.</span>]])</span><br></pre></td></tr></table></figure><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>线性层的计算 ： <code>x @ w.t() + b</code></p><ul><li>x是4张照片且已经打平了 (4, 784)</li><li>我们希望 (4, 784) —&gt; (4, 512)</li><li>这样的话w因该是 (784, 512)</li><li>但由于pytorch默认 第一个维度是 channel-out（目标）， 第二个维度是 channel-in （输入） ， 所以需要用一个转置</li></ul><p>note：.t() 只适合2D，高维用transpose</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In[<span class="number">31</span>]: x = torch.rand(<span class="number">4</span>,<span class="number">784</span>)</span><br><span class="line">In[<span class="number">32</span>]: w = torch.rand(<span class="number">512</span>,<span class="number">784</span>)</span><br><span class="line">In[<span class="number">33</span>]: (x@w.t()).shape</span><br><span class="line">Out[<span class="number">33</span>]: torch.Size([<span class="number">4</span>, <span class="number">512</span>])</span><br></pre></td></tr></table></figure><p>神经网络 -&gt; 矩阵运算 -&gt; tensor flow</p><h2 id="2维以上的tensor-matmul"><a href="#2维以上的tensor-matmul" class="headerlink" title="2维以上的tensor matmul"></a>2维以上的tensor matmul</h2><ul><li>对于2维以上的matrix multiply ， <code>torch.mm(a,b)</code>就不行了。</li><li>运算规则：只取最后的两维做矩阵乘法</li><li>对于 [b, c, h, w] 来说，b,c 是不变的，图片的大小在改变；并且也并行的计算出了b，c。也就是支持<strong>多个矩阵并行相乘</strong>。</li><li>对于不同的size，如果符合broadcast，先执行broadcast，在进行矩阵相乘。</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In[<span class="number">3</span>]: a = torch.rand(<span class="number">4</span>,<span class="number">3</span>,<span class="number">28</span>,<span class="number">64</span>)</span><br><span class="line">In[<span class="number">4</span>]: b = torch.rand(<span class="number">4</span>,<span class="number">3</span>,<span class="number">64</span>,<span class="number">32</span>)</span><br><span class="line">In[<span class="number">5</span>]: torch.mm(a,b).shape</span><br><span class="line">RuntimeError: matrices expected, got <span class="number">4</span>D, <span class="number">4</span>D tensors at ..\aten\src\TH/generic/THTensorMath.cpp:<span class="number">956</span></span><br><span class="line">In[<span class="number">6</span>]: torch.matmul(a,b).shape</span><br><span class="line">Out[<span class="number">6</span>]: torch.Size([<span class="number">4</span>, <span class="number">3</span>, <span class="number">28</span>, <span class="number">32</span>])</span><br><span class="line">In[<span class="number">7</span>]: b = torch.rand(<span class="number">4</span>,<span class="number">1</span>,<span class="number">64</span>,<span class="number">32</span>)	</span><br><span class="line">In[<span class="number">8</span>]: torch.matmul(a,b).shape	<span class="comment"># 进行了broadcast</span></span><br><span class="line">Out[<span class="number">8</span>]: torch.Size([<span class="number">4</span>, <span class="number">3</span>, <span class="number">28</span>, <span class="number">32</span>])</span><br><span class="line">In[<span class="number">9</span>]: b = torch.rand(<span class="number">4</span>,<span class="number">64</span>,<span class="number">32</span>)</span><br><span class="line">In[<span class="number">10</span>]: torch.matmul(a,b).shape</span><br><span class="line">RuntimeError: The size of tensor a (<span class="number">3</span>) must match the size of tensor b (<span class="number">4</span>) at non-singleton dimension <span class="number">1</span></span><br></pre></td></tr></table></figure><h1 id="power"><a href="#power" class="headerlink" title="power"></a>power</h1><ul><li>pow(a, n) a的n次方</li><li><code>**</code> 也表示次方（可以是2，0.5，0.25，3） 推荐</li><li>sqrt() 表示 square root 平方根</li><li>rsqrt() 表示平方根的倒数</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In[<span class="number">11</span>]: a = torch.full([<span class="number">2</span>,<span class="number">2</span>],<span class="number">3</span>)</span><br><span class="line">In[<span class="number">12</span>]: a.pow(<span class="number">2</span>)</span><br><span class="line">Out[<span class="number">12</span>]: </span><br><span class="line">tensor([[<span class="number">9.</span>, <span class="number">9.</span>],</span><br><span class="line">        [<span class="number">9.</span>, <span class="number">9.</span>]])</span><br><span class="line">In[<span class="number">13</span>]: a**<span class="number">2</span></span><br><span class="line">Out[<span class="number">13</span>]: </span><br><span class="line">tensor([[<span class="number">9.</span>, <span class="number">9.</span>],</span><br><span class="line">        [<span class="number">9.</span>, <span class="number">9.</span>]])</span><br><span class="line">In[<span class="number">14</span>]: aa = a**<span class="number">2</span></span><br><span class="line">In[<span class="number">15</span>]: aa.sqrt()</span><br><span class="line">Out[<span class="number">15</span>]: </span><br><span class="line">tensor([[<span class="number">3.</span>, <span class="number">3.</span>],</span><br><span class="line">        [<span class="number">3.</span>, <span class="number">3.</span>]])</span><br><span class="line">In[<span class="number">16</span>]: aa.rsqrt()</span><br><span class="line">Out[<span class="number">16</span>]: </span><br><span class="line">tensor([[<span class="number">0.3333</span>, <span class="number">0.3333</span>],</span><br><span class="line">        [<span class="number">0.3333</span>, <span class="number">0.3333</span>]])</span><br><span class="line">In[<span class="number">17</span>]: aa**(<span class="number">0.5</span>)</span><br><span class="line">Out[<span class="number">17</span>]: </span><br><span class="line">tensor([[<span class="number">3.</span>, <span class="number">3.</span>],</span><br><span class="line">        [<span class="number">3.</span>, <span class="number">3.</span>]])</span><br></pre></td></tr></table></figure><h1 id="Exp-log"><a href="#Exp-log" class="headerlink" title="Exp log"></a>Exp log</h1><ul><li>exp(n) 表示：e的n次方</li><li>log(a) 表示：ln(a)</li><li>log2() 、 log10()</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In[<span class="number">18</span>]: a = torch.exp(torch.ones(<span class="number">2</span>,<span class="number">2</span>))</span><br><span class="line">In[<span class="number">19</span>]: a</span><br><span class="line">Out[<span class="number">19</span>]: </span><br><span class="line">tensor([[<span class="number">2.7183</span>, <span class="number">2.7183</span>],</span><br><span class="line">        [<span class="number">2.7183</span>, <span class="number">2.7183</span>]])</span><br><span class="line">In[<span class="number">20</span>]: torch.log(a)</span><br><span class="line">Out[<span class="number">20</span>]: </span><br><span class="line">tensor([[<span class="number">1.</span>, <span class="number">1.</span>],</span><br><span class="line">        [<span class="number">1.</span>, <span class="number">1.</span>]])</span><br><span class="line">In[<span class="number">22</span>]: torch.log2(a)</span><br><span class="line">Out[<span class="number">22</span>]: </span><br><span class="line">tensor([[<span class="number">1.4427</span>, <span class="number">1.4427</span>],</span><br><span class="line">        [<span class="number">1.4427</span>, <span class="number">1.4427</span>]])</span><br><span class="line">In[<span class="number">23</span>]: torch.log10(a)</span><br><span class="line">Out[<span class="number">23</span>]: </span><br><span class="line">tensor([[<span class="number">0.4343</span>, <span class="number">0.4343</span>],</span><br><span class="line">        [<span class="number">0.4343</span>, <span class="number">0.4343</span>]])</span><br></pre></td></tr></table></figure><h1 id="Approximation"><a href="#Approximation" class="headerlink" title="Approximation"></a>Approximation</h1><p>近似相关1</p><ul><li>floor、ceil 向下取整、向上取整</li><li>round 4舍5入</li><li>trunc、frac 裁剪</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In[<span class="number">24</span>]: a = torch.tensor(<span class="number">3.14</span>)</span><br><span class="line">In[<span class="number">25</span>]: a.floor(),a.ceil(),a.trunc(),a.frac()</span><br><span class="line">Out[<span class="number">25</span>]: (tensor(<span class="number">3.</span>), tensor(<span class="number">4.</span>), tensor(<span class="number">3.</span>), tensor(<span class="number">0.1400</span>))</span><br><span class="line">In[<span class="number">26</span>]: a = torch.tensor(<span class="number">3.499</span>)</span><br><span class="line">In[<span class="number">27</span>]: a.round()</span><br><span class="line">Out[<span class="number">27</span>]: tensor(<span class="number">3.</span>)</span><br><span class="line">In[<span class="number">28</span>]: a = torch.tensor(<span class="number">3.5</span>)</span><br><span class="line">In[<span class="number">29</span>]: a.round()</span><br><span class="line">Out[<span class="number">29</span>]: tensor(<span class="number">4.</span>)</span><br></pre></td></tr></table></figure><h1 id="clamp"><a href="#clamp" class="headerlink" title="clamp"></a>clamp</h1><p>近似相关2 （用的更多一些）</p><ul><li>gradient clipping 梯度裁剪</li><li>(min) 小于min的都变为某某值</li><li>(min, max) 不在这个区间的都变为某某值</li><li>梯度爆炸：一般来说，当梯度达到100左右的时候，就已经很大了，正常在10左右，通过打印梯度的模来查看 <code>w.grad.norm(2)</code></li><li>对于w的限制叫做weight clipping，对于weight gradient clipping称为 gradient clipping。</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In[<span class="number">30</span>]: grad = torch.rand(<span class="number">2</span>,<span class="number">3</span>)*<span class="number">15</span></span><br><span class="line">In[<span class="number">31</span>]: grad.max()</span><br><span class="line">Out[<span class="number">31</span>]: tensor(<span class="number">10.6977</span>)</span><br><span class="line">In[<span class="number">32</span>]: grad.clamp(<span class="number">10</span>)		</span><br><span class="line">Out[<span class="number">32</span>]: </span><br><span class="line">tensor([[<span class="number">10.0000</span>, <span class="number">10.6977</span>, <span class="number">10.0000</span>],</span><br><span class="line">        [<span class="number">10.0000</span>, <span class="number">10.0000</span>, <span class="number">10.0000</span>]])</span><br><span class="line">In[<span class="number">33</span>]: grad</span><br><span class="line">Out[<span class="number">33</span>]: </span><br><span class="line">tensor([[ <span class="number">6.7738</span>, <span class="number">10.6977</span>,  <span class="number">4.4314</span>],</span><br><span class="line">        [ <span class="number">7.8088</span>,  <span class="number">4.8236</span>,  <span class="number">3.6213</span>]])</span><br><span class="line">In[<span class="number">34</span>]: grad.clamp(<span class="number">0</span>,<span class="number">10</span>)</span><br><span class="line">Out[<span class="number">34</span>]: </span><br><span class="line">tensor([[ <span class="number">6.7738</span>, <span class="number">10.0000</span>,  <span class="number">4.4314</span>],</span><br><span class="line">        [ <span class="number">7.8088</span>,  <span class="number">4.8236</span>,  <span class="number">3.6213</span>]])</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Pytorch学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>Pytorch</tag>
        <tag>Deep Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>Pytorch-拼接与拆分</title>
    <url>/Pytorch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20190627-learning_PyTorch_5_concat_split.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>本篇介绍tensor的拼接与拆分。</p></blockquote><a id="more"></a><h1 id="拼接与拆分"><a href="#拼接与拆分" class="headerlink" title="拼接与拆分"></a>拼接与拆分</h1><ul><li>cat</li><li>stack</li><li>split</li><li>chunk</li></ul><h1 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h1><ul><li>numpy中使用concat，在pytorch中使用更加简写的 cat</li><li>完成一个拼接</li><li>两个向量维度相同，想要拼接的维度上的值可以不同，但是其它维度上的值必须相同。</li></ul><p>举个例子：还是按照前面的，想将这两组班级的成绩合并起来</p><p>a[class 1-4, students, scores]</p><p>b[class 5-9, students, scores]</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In[<span class="number">4</span>]: a = torch.rand(<span class="number">4</span>,<span class="number">32</span>,<span class="number">8</span>)</span><br><span class="line">In[<span class="number">5</span>]: b = torch.rand(<span class="number">5</span>,<span class="number">32</span>,<span class="number">8</span>)</span><br><span class="line">In[<span class="number">6</span>]: torch.cat([a,b],dim=<span class="number">0</span>).shape</span><br><span class="line">Out[<span class="number">6</span>]: torch.Size([<span class="number">9</span>, <span class="number">32</span>, <span class="number">8</span>])</span><br><span class="line"><span class="comment"># 结果就是9个班级的成绩</span></span><br></pre></td></tr></table></figure><p>理解cat：</p><ul><li>行拼接：[4, 4] 与 [5, 4] 以 dim=0（行）进行拼接 —&gt; [9, 4] 9个班的成绩合起来</li><li>列拼接：[4, 5] 与 [4, 3] 以 dim=1（列）进行拼接 —&gt; [4, 8] 每个班合成8项成绩</li></ul><p><img src="/Pytorch学习笔记/20190627-learning_PyTorch_5_concat_split/%E7%90%86%E8%A7%A3cat.png" alt="理解cat"></p><p>例2：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In[<span class="number">7</span>]: a1 = torch.rand(<span class="number">4</span>,<span class="number">3</span>,<span class="number">32</span>,<span class="number">32</span>)</span><br><span class="line">In[<span class="number">8</span>]: a2 = torch.rand(<span class="number">5</span>,<span class="number">3</span>,<span class="number">32</span>,<span class="number">32</span>)</span><br><span class="line">In[<span class="number">9</span>]: torch.cat([a1,a2],dim=<span class="number">0</span>).shape		<span class="comment"># 合并第1维 理解上相当于合并batch</span></span><br><span class="line">Out[<span class="number">9</span>]: torch.Size([<span class="number">9</span>, <span class="number">3</span>, <span class="number">32</span>, <span class="number">32</span>])</span><br><span class="line">In[<span class="number">11</span>]: a2 = torch.rand(<span class="number">4</span>,<span class="number">1</span>,<span class="number">32</span>,<span class="number">32</span>)</span><br><span class="line">In[<span class="number">12</span>]: torch.cat([a1,a2],dim=<span class="number">1</span>).shape		<span class="comment"># 合并第2维 理解上相当于合并为 rgba</span></span><br><span class="line">Out[<span class="number">12</span>]: torch.Size([<span class="number">4</span>, <span class="number">4</span>, <span class="number">32</span>, <span class="number">32</span>])</span><br><span class="line">In[<span class="number">13</span>]: a1 = torch.rand(<span class="number">4</span>,<span class="number">3</span>,<span class="number">16</span>,<span class="number">32</span>)</span><br><span class="line">In[<span class="number">14</span>]: a2 = torch.rand(<span class="number">4</span>,<span class="number">3</span>,<span class="number">16</span>,<span class="number">32</span>)</span><br><span class="line">In[<span class="number">15</span>]: torch.cat([a1,a2],dim=<span class="number">3</span>).shape		<span class="comment"># 合并第3维 理解上相当于合并照片的上下两半</span></span><br><span class="line">Out[<span class="number">15</span>]: torch.Size([<span class="number">4</span>, <span class="number">3</span>, <span class="number">16</span>, <span class="number">64</span>])</span><br><span class="line">In[<span class="number">17</span>]: a1 = torch.rand(<span class="number">4</span>,<span class="number">3</span>,<span class="number">32</span>,<span class="number">32</span>)</span><br><span class="line">In[<span class="number">18</span>]: torch.cat([a1,a2],dim=<span class="number">0</span>).shape</span><br><span class="line">RuntimeError: invalid argument <span class="number">0</span>: Sizes of tensors must match <span class="keyword">except</span> <span class="keyword">in</span> dimension <span class="number">0.</span></span><br></pre></td></tr></table></figure><h1 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h1><ul><li>创造一个新的维度（代表了新的组别）</li><li>要求两个tensor的size完全相同</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In[<span class="number">19</span>]: a1 = torch.rand(<span class="number">4</span>,<span class="number">3</span>,<span class="number">16</span>,<span class="number">32</span>)</span><br><span class="line">In[<span class="number">20</span>]: a2 = torch.rand(<span class="number">4</span>,<span class="number">3</span>,<span class="number">16</span>,<span class="number">32</span>) </span><br><span class="line">In[<span class="number">21</span>]: torch.cat([a1,a2],dim=<span class="number">2</span>).shape		<span class="comment"># 合并照片的上下部分</span></span><br><span class="line">Out[<span class="number">21</span>]: torch.Size([<span class="number">4</span>, <span class="number">3</span>, <span class="number">32</span>, <span class="number">32</span>])</span><br><span class="line">In[<span class="number">22</span>]: torch.stack([a1,a2],dim=<span class="number">2</span>).shape	<span class="comment"># 添加了一个维度 一个值代表上半部分，一个值代表下半部分。 这显然是没有cat合适的。</span></span><br><span class="line">Out[<span class="number">22</span>]: torch.Size([<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">16</span>, <span class="number">32</span>])</span><br><span class="line">In[<span class="number">23</span>]: a = torch.rand(<span class="number">32</span>,<span class="number">8</span>)</span><br><span class="line">In[<span class="number">24</span>]: b = torch.rand(<span class="number">32</span>,<span class="number">8</span>)</span><br><span class="line">In[<span class="number">25</span>]: torch.stack([a,b],dim=<span class="number">0</span>).shape		<span class="comment"># 将两个班级的学生成绩合并，添加一个新的维度，这个维度的每个值代表一个班级。显然是比cat合适的。</span></span><br><span class="line">Out[<span class="number">25</span>]: torch.Size([<span class="number">2</span>, <span class="number">32</span>, <span class="number">8</span>])</span><br><span class="line">    </span><br><span class="line">In[<span class="number">26</span>]: a.shape</span><br><span class="line">Out[<span class="number">26</span>]: torch.Size([<span class="number">32</span>, <span class="number">8</span>])</span><br><span class="line">In[<span class="number">27</span>]: b = torch.rand([<span class="number">30</span>,<span class="number">8</span>])</span><br><span class="line">In[<span class="number">28</span>]: torch.stack([a,b],dim=<span class="number">0</span>)</span><br><span class="line">RuntimeError: invalid argument <span class="number">0</span>: Sizes of tensors must match <span class="keyword">except</span> <span class="keyword">in</span> dimension <span class="number">0</span></span><br></pre></td></tr></table></figure><h1 id="split"><a href="#split" class="headerlink" title="split"></a>split</h1><ul><li>按长度进行拆分：单元长度/数量</li><li>长度相同给一个固定值</li><li>长度不同给一个列表</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In[<span class="number">48</span>]: a = torch.rand(<span class="number">32</span>,<span class="number">8</span>)</span><br><span class="line">In[<span class="number">49</span>]: b = torch.rand(<span class="number">32</span>,<span class="number">8</span>)</span><br><span class="line">In[<span class="number">50</span>]: c = torch.rand(<span class="number">32</span>,<span class="number">8</span>)</span><br><span class="line">In[<span class="number">51</span>]: d = torch.rand(<span class="number">32</span>,<span class="number">8</span>)</span><br><span class="line">In[<span class="number">52</span>]: e = torch.rand(<span class="number">32</span>,<span class="number">8</span>)</span><br><span class="line">In[<span class="number">53</span>]: f = torch.rand(<span class="number">32</span>,<span class="number">8</span>)</span><br><span class="line">In[<span class="number">54</span>]: s = torch.stack([a,b,c,d,e,f],dim=<span class="number">0</span>)</span><br><span class="line">In[<span class="number">55</span>]: s.shape</span><br><span class="line">Out[<span class="number">55</span>]: torch.Size([<span class="number">6</span>, <span class="number">32</span>, <span class="number">8</span>])  </span><br><span class="line">In[<span class="number">57</span>]: aa,bb = s.split(<span class="number">3</span>,dim=<span class="number">0</span>)	<span class="comment"># 按数量切分，可以使用一个常数</span></span><br><span class="line">In[<span class="number">58</span>]: aa.shape, bb.shape</span><br><span class="line">Out[<span class="number">58</span>]: (torch.Size([<span class="number">3</span>, <span class="number">32</span>, <span class="number">8</span>]), torch.Size([<span class="number">3</span>, <span class="number">32</span>, <span class="number">8</span>]))</span><br><span class="line">In[<span class="number">59</span>]: cc,dd,ee = s.split([<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>],dim=<span class="number">0</span>)	<span class="comment"># 按单位长度切分，可以使用一个列表</span></span><br><span class="line">In[<span class="number">60</span>]: cc.shape, dd.shape, ee.shape</span><br><span class="line">Out[<span class="number">60</span>]: (torch.Size([<span class="number">3</span>, <span class="number">32</span>, <span class="number">8</span>]), torch.Size([<span class="number">2</span>, <span class="number">32</span>, <span class="number">8</span>]), torch.Size([<span class="number">1</span>, <span class="number">32</span>, <span class="number">8</span>]))</span><br><span class="line">    </span><br><span class="line">In[<span class="number">61</span>]: ff,gg = s.split(<span class="number">6</span>,dim=<span class="number">0</span>)	<span class="comment"># 只切了一半，有一半不存在，所以报错</span></span><br><span class="line">ValueError: <span class="keyword">not</span> enough values to unpack (expected <span class="number">2</span>, got <span class="number">1</span>)</span><br></pre></td></tr></table></figure><h1 id="chunk"><a href="#chunk" class="headerlink" title="chunk"></a>chunk</h1><ul><li>按数量进行拆分</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In[<span class="number">63</span>]: s.shape</span><br><span class="line">Out[<span class="number">63</span>]: torch.Size([<span class="number">6</span>, <span class="number">32</span>, <span class="number">8</span>])</span><br><span class="line">In[<span class="number">64</span>]: aa,bb = s.chunk(<span class="number">2</span>,dim=<span class="number">0</span>)</span><br><span class="line">In[<span class="number">65</span>]: aa.shape, bb.shape</span><br><span class="line">Out[<span class="number">65</span>]: (torch.Size([<span class="number">3</span>, <span class="number">32</span>, <span class="number">8</span>]), torch.Size([<span class="number">3</span>, <span class="number">32</span>, <span class="number">8</span>]))</span><br><span class="line">In[<span class="number">66</span>]: cc,dd = s.split(<span class="number">3</span>,dim=<span class="number">0</span>)</span><br><span class="line">In[<span class="number">67</span>]: cc.shape,dd.shape</span><br><span class="line">Out[<span class="number">67</span>]: (torch.Size([<span class="number">3</span>, <span class="number">32</span>, <span class="number">8</span>]), torch.Size([<span class="number">3</span>, <span class="number">32</span>, <span class="number">8</span>]))</span><br></pre></td></tr></table></figure><p>note：对于按数量切分：chunk中的参数是要切成几份；split的常数是每份有几个。</p>]]></content>
      <categories>
        <category>Pytorch学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>Pytorch</tag>
        <tag>Deep Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>Django图书管理系统</title>
    <url>/django/20190627-django_2.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>django第二篇，本篇使用django完成一个图书管理系统。</p></blockquote><a id="more"></a><hr><p>通过这篇文章，你能了解到：</p><ul><li>使用django完成一个简单的图书管理系统。</li><li>在学习细节之前通过该例来熟悉django的整个流程，所以该例会有很多不足，未来也将用新的知识来进行改进。</li></ul><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>该图书管理系统涉及出版社的管理、图书的管理以及作者的管理。</p><h1 id="出版社的管理"><a href="#出版社的管理" class="headerlink" title="出版社的管理"></a>出版社的管理</h1><ul><li>展示</li><li>新增</li><li>删除</li><li>编辑</li></ul><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p>pycharm –》 new project -》 选择解释器，输入app名字，我输入的名字是app01</p><h3 id="settings"><a href="#settings" class="headerlink" title="settings"></a>settings</h3><p>检查 <code>settings.py</code> 配置的内容：</p><ul><li><p>app01已创建</p></li><li><p>注释 <code>MIDDLEWARE</code> 中 关于 <code>csrf</code> 的那一条，防止提交时出现问题</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">'django.middleware.security.SecurityMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions.middleware.SessionMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.common.CommonMiddleware'</span>,</span><br><span class="line">    <span class="comment">#'django.middleware.csrf.CsrfViewMiddleware',</span></span><br><span class="line">    <span class="string">'django.contrib.auth.middleware.AuthenticationMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages.middleware.MessageMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.clickjacking.XFrameOptionsMiddleware'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>检查 <code>TEMPLATES</code> 中的 <code>DIRS</code> ，cmd创建的需要配置，pycharm不用。</p></li><li><p>在 <code>STATC_URL</code> 后面写 <code>STATICFILES_DIRS</code></p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">STATICFILES_DIRS = [</span><br><span class="line">	os<span class="selector-class">.path</span><span class="selector-class">.join</span>(BASE_DIR,<span class="string">'static'</span>)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>note：<code>STATC_URL</code> 只是一个别名，必须配置具体的路径，这样别名才有效。路径中只需要以 <code>/static/</code> 开头就可以。</p></li></ul><h3 id="pymysql"><a href="#pymysql" class="headerlink" title="pymysql"></a>pymysql</h3><p>在做关于数据库的事情之前，我们先切换数据库操作模块（默认只支持python2）</p><ul><li><p>在 <code>settings.py</code> 同目录的 <code>__init__.py</code> 中写如下两条语句：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line">pymysql.install_as_MySQLdb()</span><br></pre></td></tr></table></figure></li></ul><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><p>我们先做的是出版社的管理，所以，先构建关于出版社的表。</p><p>这个表只有两列：pid和出版社名称。</p><ul><li><p>cmd创建一个图书管理系统的数据库</p><p>登录：<code>mysql -u 用户名 -p 密码</code></p><p>创建：<code>create database library;</code></p></li></ul><h3 id="使用orm创建类（对应数据库中的表）"><a href="#使用orm创建类（对应数据库中的表）" class="headerlink" title="使用orm创建类（对应数据库中的表）"></a>使用orm创建类（对应数据库中的表）</h3><ul><li><p>在 <code>models.py</code> 中创建类</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Publisher</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    pid = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>,unique=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f"<span class="subst">&#123;self.name&#125;</span>"</span></span><br><span class="line">    __repr__ = __str__</span><br><span class="line">    <span class="comment"># 定义 __repr__是为了在打印对象列表/字典的时候，里面显示的内容为__repr__定义的</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="配置数据库"><a href="#配置数据库" class="headerlink" title="配置数据库"></a>配置数据库</h3><ul><li><p>再次打开 <code>settings.py</code> 配置MySQL 数据库</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.mysql'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">'library'</span>,</span><br><span class="line">        <span class="string">'HOST'</span>:<span class="string">'127.0.0.1'</span>,       	<span class="comment"># ip/localhost</span></span><br><span class="line">        <span class="string">'PORT'</span>:<span class="string">'3306'</span>,				<span class="comment"># 端口</span></span><br><span class="line">        <span class="string">'USER'</span>:<span class="string">'xxx'</span>,				<span class="comment"># 用户名</span></span><br><span class="line">        <span class="string">'PASSWORD'</span>:<span class="string">'xxx'</span>,			<span class="comment"># 密码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="执行迁移"><a href="#执行迁移" class="headerlink" title="执行迁移"></a>执行迁移</h3><ul><li><p><code>python36 manage.py makemigrations</code> 制作迁移文件/变更记录</p></li><li><p><code>python36 manage.py migrate</code> 执行迁移</p></li></ul><h3 id="nvicate-添加记录"><a href="#nvicate-添加记录" class="headerlink" title="nvicate 添加记录"></a>nvicate 添加记录</h3><ul><li><p>添加几条出版社的信息，结果如下</p><p><img src="/django/20190627-django_2/%E6%B7%BB%E5%8A%A0%E5%87%BA%E7%89%88%E7%A4%BE%E4%BF%A1%E6%81%AF.png" alt="添加出版社信息"></p></li></ul><h2 id="展示（查）"><a href="#展示（查）" class="headerlink" title="展示（查）"></a>展示（查）</h2><h3 id="建立对应关系"><a href="#建立对应关系" class="headerlink" title="建立对应关系"></a>建立对应关系</h3><p>开始写函数，首先建立对应关系。在 <code>urls.py</code> 中写如下内容:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^admin/'</span>, admin.site.urls),</span><br><span class="line">    url(<span class="string">r'^publisher_list/'</span>, views.publisher_list),</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>这样 url 与 函数的对应关系就可以建立起来了。</p><h3 id="写对应函数"><a href="#写对应函数" class="headerlink" title="写对应函数"></a>写对应函数</h3><p>在 <code>views.py</code> 中定义 publisher_list</p><p>定义函数的时候，如果没有思路，就从最终目的开始分析，比如这个函数，我们最后的目标是要返回带有数据的页面。所以在这个之前自然就是获取数据喽。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render, HttpResponse, redirect</span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">publisher_list</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># 从数据库中查询出所有出版社</span></span><br><span class="line">    all_publishers = models.Publisher.objects.all().order_by(<span class="string">'pid'</span>)  <span class="comment"># 按pid排序</span></span><br><span class="line">    print(all_publishers)</span><br><span class="line">    <span class="comment"># 返回页面  页面包含数据</span></span><br><span class="line">    <span class="comment"># return HttpResponse('ok')</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'publisher_list.html'</span>, &#123;<span class="string">'all_publishers'</span>: all_publishers&#125;)</span><br><span class="line">    <span class="comment"># render 第三个参数，让all_publishers 与publisher_list.html 建立联系</span></span><br></pre></td></tr></table></figure><h3 id="写对应HTML"><a href="#写对应HTML" class="headerlink" title="写对应HTML"></a>写对应HTML</h3><p>下面是对应的html页面，使用了bootstrap样式。</p><ol><li><p>首先选取<a href="https://v3.bootcss.com/getting-started/#examples" target="_blank" rel="noopener">bootsrap的实例精选</a>中的控制台，把它的html和css样式扒下来。</p></li><li><p>然后删除左侧栏中多余的内容，删除右侧的全部内容。</p></li><li><p>右侧内容放置一个 table 表格</p></li><li><p>写增加，删除，编辑这几个标签</p></li></ol><p><code>publisher_list.html</code></p><p>这个html页面是最完整的，后面的页面也只是把中间的内容换一下。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"author"</span> <span class="attr">content</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Dashboard Template for Bootstrap<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Bootstrap core CSS --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"/static/plugins/bootstrap-3.3.7/css/bootstrap.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Custom styles for this template --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"/static/css/dashboard.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.table</span> &gt; <span class="selector-tag">tbody</span> &gt; <span class="selector-tag">tr</span> &gt; <span class="selector-tag">td</span> &#123;</span></span><br><span class="line">            vertical-align: middle;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"navbar navbar-inverse navbar-fixed-top"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container-fluid"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar-header"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"navbar-toggle collapsed"</span> <span class="attr">data-toggle</span>=<span class="string">"collapse"</span> <span class="attr">data-target</span>=<span class="string">"#navbar"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">aria-expanded</span>=<span class="string">"false"</span> <span class="attr">aria-controls</span>=<span class="string">"navbar"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>Toggle navigation<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"navbar-brand"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Project name<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"navbar"</span> <span class="attr">class</span>=<span class="string">"navbar-collapse collapse"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav navbar-right"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Dashboard<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Settings<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Profile<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Help<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"navbar-form navbar-right"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"Search..."</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container-fluid"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-3 col-md-2 sidebar"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav nav-sidebar"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/publisher_list/"</span>&gt;</span>出版社<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/book_list/"</span>&gt;</span>图书<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/author_list/"</span>&gt;</span>出版社<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-9 col-sm-offset-3 col-md-10 col-md-offset-2 main"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel-primary"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-heading"</span>&gt;</span>出版社管理<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-body"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/publisher_add"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary btn-sm"</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-striped table-hover"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">th</span>&gt;</span>序号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">th</span>&gt;</span>ID<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">th</span>&gt;</span>出版社名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">                        &#123;% for publisher in all_publishers %&#125;</span><br><span class="line">                            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; forloop.counter &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; publisher.pk &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; publisher.name &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/publisher_del/?pk=&#123;&#123; publisher.pk &#125;&#125;"</span> <span class="attr">class</span>=<span class="string">"btn btn-danger"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/publisher_edit/?pk=&#123;&#123; publisher.pk &#125;&#125;"</span> <span class="attr">class</span>=<span class="string">"btn btn-warning"</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                        &#123;% endfor %&#125;</span><br><span class="line">                        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">table</span>&gt;</span>                   </span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>模板的语法：</p><ul><li>&#123;&#123; <code>all_publisher</code> &#125;&#125; 表示变量</li><li>&#123; &#37; for i in li &#37; &#125; 表示for循环</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="keyword">for</span> i <span class="keyword">in</span> all_publishers %&#125;    </span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><ul><li>&#123; &#123; <code>forloop.counter</code> &#125;&#125; 字典，显示循环次数</li></ul><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="/django/20190627-django_2/%E5%87%BA%E7%89%88%E7%A4%BE%E7%AE%A1%E7%90%86%E9%A1%B5%E9%9D%A2.png" alt="出版社管理页面"></p><h2 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h2><h3 id="建立对应关系-1"><a href="#建立对应关系-1" class="headerlink" title="建立对应关系"></a>建立对应关系</h3><p><code>urls.py</code> 下的 <code>urlpatterns</code>中添加：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">url(<span class="string">r'^publisher_add/'</span>, views.publisher_add),</span><br></pre></td></tr></table></figure><h3 id="写对应函数-1"><a href="#写对应函数-1" class="headerlink" title="写对应函数"></a>写对应函数</h3><ul><li>添加记录的两种方式：一种是使用<code>models.Publisher.objects.create(name=pub_name)</code>方式；一种是 <code>obj = models.Publisher(name=pub_name)</code>,但在后面还需要加一句 <code>obj.save()</code> 来提交到数据库。</li></ul><p><code>views.py</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">publisher_add</span><span class="params">(request)</span>:</span></span><br><span class="line">    error, pub_name = <span class="string">''</span>, <span class="string">''</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        pub_name = request.POST.get(<span class="string">'pub_name'</span>)</span><br><span class="line">        obj = models.Publisher.objects.filter(name=pub_name)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> pub_name:</span><br><span class="line">            <span class="comment"># 提交空数据</span></span><br><span class="line">            error = <span class="string">'数据为空'</span></span><br><span class="line">        <span class="keyword">elif</span> obj:</span><br><span class="line">            <span class="comment"># 表中数据存在</span></span><br><span class="line">            error = <span class="string">'出版社名称重复'</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 正确情况下，向数据库添加,并跳转到展示页面</span></span><br><span class="line">            models.Publisher.objects.create(name=pub_name)</span><br><span class="line">            <span class="keyword">return</span> redirect(<span class="string">'/publisher_list/'</span>)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'publisher_add.html'</span>, &#123;<span class="string">'error'</span>: error, <span class="string">'pub_name'</span>: pub_name&#125;)</span><br></pre></td></tr></table></figure><h3 id="写HTML"><a href="#写HTML" class="headerlink" title="写HTML"></a>写HTML</h3><ul><li>只是把原来表格换成表单，表单里放置输入和提交</li></ul><p><code>publisher_list.html</code></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel-primary"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-heading"</span>&gt;</span>添加出版社<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-body"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">                 出版社名称：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"pub_name"</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color: red"</span>&gt;</span>&#123;&#123; error &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">button</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="效果-1"><a href="#效果-1" class="headerlink" title="效果"></a>效果</h3><p><img src="/django/20190627-django_2/%E5%A2%9E%E5%8A%A0%E5%87%BA%E7%89%88%E7%A4%BE.png" alt="增加出版社"></p><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><p>在这里不需要去写它的HTML页面，我们只需要在 <code>publisher_list.html</code> 的基础上加入 error 提示，就可以。</p><h3 id="建立对应关系-2"><a href="#建立对应关系-2" class="headerlink" title="建立对应关系"></a>建立对应关系</h3><p><code>urls.py</code> 下的 <code>urlpatterns</code>中添加：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">url(<span class="string">r'^publisher_del/'</span>, views.publisher_del),</span><br></pre></td></tr></table></figure><h3 id="写对应函数-2"><a href="#写对应函数-2" class="headerlink" title="写对应函数"></a>写对应函数</h3><ul><li>删除数据有两种方式，一种是<code>对象列表.delete()</code>、一种是 <code>对象.delete()</code></li></ul><p>在<code>views.py</code> 中继续定义：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">publisher_del</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># 获取删除的数据   id</span></span><br><span class="line">    error = <span class="string">''</span></span><br><span class="line">    pk = request.GET.get(<span class="string">'pk'</span>)</span><br><span class="line">    query = models.Publisher.objects.filter(pk=pk)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> query:</span><br><span class="line">        <span class="comment"># 数据不存在</span></span><br><span class="line">        error = <span class="string">'要删除的数据不存在'</span></span><br><span class="line">        all_publishers = models.Publisher.objects.all()</span><br><span class="line">        <span class="keyword">return</span> render(request,<span class="string">'publisher_list.html'</span>,&#123;<span class="string">"error"</span>:error,<span class="string">"all_publishers"</span>:all_publishers&#125;)</span><br><span class="line">    <span class="comment"># 删除数据</span></span><br><span class="line">    <span class="comment"># 方式一</span></span><br><span class="line">    <span class="comment"># query.delete()  # 通过query_set 删除对象列表中的所有</span></span><br><span class="line">    <span class="comment"># 方式二</span></span><br><span class="line">    query[<span class="number">0</span>].delete()  <span class="comment"># 删除单独的一个对象。</span></span><br><span class="line">    <span class="comment"># 跳转至展示页面</span></span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">'/publisher_list/'</span>)</span><br></pre></td></tr></table></figure><h3 id="修改publisher-list-html"><a href="#修改publisher-list-html" class="headerlink" title="修改publisher_list.html"></a>修改publisher_list.html</h3><ul><li>只是在<code>&lt;/table&gt;</code> 下加了一个 span</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-body"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/publisher_add"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary btn-sm"</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-striped table-hover"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>序号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>ID<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>出版社名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">            &#123;% for publisher in all_publishers %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; forloop.counter &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; publisher.pk &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; publisher.name &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/publisher_del/?pk=&#123;&#123; publisher.pk &#125;&#125;"</span> <span class="attr">class</span>=<span class="string">"btn btn-danger"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/publisher_edit/?pk=&#123;&#123; publisher.pk &#125;&#125;"</span> <span class="attr">class</span>=<span class="string">"btn btn-warning"</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            &#123;% endfor %&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color: red"</span>&gt;</span>&#123;&#123; error &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h2><p>修改的话，其实和添加很相似了，不过对于编辑，会在输入框中显示原来的内容。</p><ul><li><code>~Q(CSBN=None)</code> 表示 <code>CSBN != None</code></li></ul><h3 id="建立对应关系-3"><a href="#建立对应关系-3" class="headerlink" title="建立对应关系"></a>建立对应关系</h3><p><code>urls.py</code> 下的 <code>urlpatterns</code>中添加：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">url(<span class="string">r'^publisher_edit/'</span>, views.publisher_edit),</span><br></pre></td></tr></table></figure><h3 id="写对应函数-3"><a href="#写对应函数-3" class="headerlink" title="写对应函数"></a>写对应函数</h3><p><code>views.py</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">publisher_edit</span><span class="params">(request)</span>:</span></span><br><span class="line">    error, pub_name = <span class="string">''</span>, <span class="string">''</span></span><br><span class="line">    <span class="comment"># 对于get请求，回一个编辑页面</span></span><br><span class="line">    pk = request.GET.get(<span class="string">'pk'</span>)  <span class="comment"># url上携带的参数，不仅是get独有的</span></span><br><span class="line">    obj = models.Publisher.objects.filter(pk=pk).first()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> obj:</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">'数据不存在'</span>)</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        <span class="comment"># 获取新提交的数据</span></span><br><span class="line">        pub_name = request.POST.get(<span class="string">'pub_name'</span>)</span><br><span class="line">        check = models.Publisher.objects.filter(name=pub_name).first()  <span class="comment"># 想要改的名字是不能重复的</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> pub_name:</span><br><span class="line">            error = <span class="string">'数据为空'</span></span><br><span class="line">        <span class="keyword">elif</span> check:</span><br><span class="line">            error = <span class="string">'出版社名称重复'</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 存在这条数据就修改它</span></span><br><span class="line">            obj.name = pub_name</span><br><span class="line">            obj.save()</span><br><span class="line">            <span class="comment"># 跳转到展示页面</span></span><br><span class="line">            <span class="keyword">return</span> redirect(<span class="string">'/publisher_list/'</span>)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'publisher_edit.html'</span>, &#123;<span class="string">'error'</span>: error, <span class="string">'pub_name'</span>: pub_name&#125;)</span><br></pre></td></tr></table></figure><h3 id="写HTML-1"><a href="#写HTML-1" class="headerlink" title="写HTML"></a>写HTML</h3><ul><li>编辑与添加相似，只是增加了对原来输入的显示。</li></ul><p><code>publisher_list.html</code></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel-primary"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-heading"</span>&gt;</span>添加出版社<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-body"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">                出版社名称：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"pub_name"</span> <span class="attr">value</span>=<span class="string">"&#123;&#123; pub_name &#125;&#125;"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color: red"</span>&gt;</span>&#123;&#123; error &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="效果-2"><a href="#效果-2" class="headerlink" title="效果"></a>效果</h3><p><img src="/django/20190627-django_2/%E4%BF%AE%E6%94%B9%E5%87%BA%E7%89%88%E7%A4%BE.png" alt="修改出版社"></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>本章回到的知识点有：</p><ul><li><p>render用来展示内容，他不会改变url的路径，只会在后面进行拼接；第三个参数可以向HTML中传递数据。</p></li><li><p>模板语法，如何将数据放到html页面内</p><ul><li>表示变量</li><li>for循环</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="keyword">for</span> i <span class="keyword">in</span> all_publishers %&#125;    </span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><ul><li>字典，显示循环次数</li></ul></li><li><p>orm操作</p><ul><li>增加 create / 实例化</li><li>删除 对象/对象列表 delete</li><li>修改 对象属性的重新赋值</li></ul></li></ul><h1 id="图书的管理"><a href="#图书的管理" class="headerlink" title="图书的管理"></a>图书的管理</h1><p>增加了图书，宏观上和以前有什么不同？首先，因为有新增了一个类，它们之间就会产生联系，这里假设出版社与图书是一对多关系，所以由此产生外键，这也是下面的一个新知识点。</p><h2 id="准备工作-1"><a href="#准备工作-1" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="使用orm创建类"><a href="#使用orm创建类" class="headerlink" title="使用orm创建类"></a>使用orm创建类</h3><p>打开 <code>models.py</code> 我们将新定义一个类，类名为Book。</p><p>这个类有两个属性，一个是书名 <code>title</code> 一个是出版社的pid（外键），这里假设出版社与书是一对多关系。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    <span class="comment"># pid = models.ForeignKey(Publisher)</span></span><br><span class="line">    pid = models.ForeignKey(<span class="string">'Publisher'</span>,on_delete=models.CASCADE)</span><br><span class="line">    <span class="comment"># 通过反射去拿，这样就没有前后放置的要求</span></span><br><span class="line">    <span class="comment"># 1.11版本默认on_delete=None， None的话，后面会进行警告并重新赋值 on_delete=models.CASCADE</span></span><br><span class="line">    <span class="comment"># 2.0版本 on_delete是必填参数</span></span><br></pre></td></tr></table></figure><p><code>models.ForeignKey(&#39;Publisher&#39;,on_delete= )</code></p><p>对于关键字参数 <code>on_delete</code></p><ul><li>它是指当关联的数据删除时该数据怎么办</li><li><code>on_delete=models.CASCADE</code> 级联删除，关联的数据没有了，该数据也没了</li><li><code>on_delete = models.SET系列</code> 、 SET_DEFAULT设置默认，SET_NULL设为空，SET(VALUE)设为某值。</li><li><code>on_delete = models.Do_NOTHING</code> 啥也不做</li></ul><h3 id="执行迁移-1"><a href="#执行迁移-1" class="headerlink" title="执行迁移"></a>执行迁移</h3><p><code>python manage.py makemigrations</code> 扫描models，记录变更</p><p><code>python manage.py migrate</code> 与数据库同步</p><h3 id="nvicate添加记录"><a href="#nvicate添加记录" class="headerlink" title="nvicate添加记录"></a>nvicate添加记录</h3><p>使用nvicate添加几组数据：</p><p><img src="/django/20190627-django_2/%E6%B7%BB%E5%8A%A0%E4%B9%A6%E7%B1%8D%E4%BF%A1%E6%81%AF.png" alt="添加书籍信息"></p><h2 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h2><h3 id="建立对应关系-4"><a href="#建立对应关系-4" class="headerlink" title="建立对应关系"></a>建立对应关系</h3><p><code>urls.py</code> 下的 <code>urlpatterns</code>中添加：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^admin/'</span>, admin.site.urls),</span><br><span class="line">    <span class="comment"># publisher 的增删查改</span></span><br><span class="line">    url(<span class="string">r'^publisher_list/'</span>, views.publisher_list),</span><br><span class="line">    url(<span class="string">r'^publisher_add/'</span>, views.publisher_add),</span><br><span class="line">    url(<span class="string">r'^publisher_del/'</span>, views.publisher_del),</span><br><span class="line">    url(<span class="string">r'^publisher_edit/'</span>, views.publisher_edit),</span><br><span class="line">    <span class="comment"># book 的增删查改</span></span><br><span class="line">    url(<span class="string">r'^book_list/'</span>, views.book_list),</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="写对应函数-4"><a href="#写对应函数-4" class="headerlink" title="写对应函数"></a>写对应函数</h3><p><code>views.py</code> 中完善函数 book_list</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">book_list</span><span class="params">(request)</span>:</span></span><br><span class="line">    all_books = models.Book.objects.all()</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'book_list.html'</span>,&#123;<span class="string">'all_books'</span>:all_books&#125;)</span><br></pre></td></tr></table></figure><h3 id="写HTML-2"><a href="#写HTML-2" class="headerlink" title="写HTML"></a>写HTML</h3><ul><li>继续使用前面的bootstrap样式</li><li>展示的内容是写在 table 中的。</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel-primary"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-heading"</span>&gt;</span>图书管理<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-body"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/book_add"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary btn-sm"</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-striped table-hover"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>序号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>ID<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>书名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>出版社<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">                &#123;% for book in all_books %&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; forloop.counter &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; book.pk &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; book.title &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; book.pid.name &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/book_del/?pk=&#123;&#123; book.pk &#125;&#125;"</span> <span class="attr">class</span>=<span class="string">"btn btn-danger btn-sm"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/book_edit/?pk=&#123;&#123; book.pk &#125;&#125;"</span> <span class="attr">class</span>=<span class="string">"btn btn-warning btn-sm"</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                &#123;% endfor %&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="效果-3"><a href="#效果-3" class="headerlink" title="效果"></a>效果</h3><p><img src="/django/20190627-django_2/%E5%9B%BE%E4%B9%A6%E5%B1%95%E7%A4%BA.png" alt="图书展示"></p><h2 id="增加-1"><a href="#增加-1" class="headerlink" title="增加"></a>增加</h2><h3 id="建立对应关系-5"><a href="#建立对应关系-5" class="headerlink" title="建立对应关系"></a>建立对应关系</h3><p><code>urls.py</code> 下的 <code>urlpatterns</code>中添加：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">url(<span class="string">r'^book_add/'</span>, views.book_add),</span><br></pre></td></tr></table></figure><h3 id="写对应函数-5"><a href="#写对应函数-5" class="headerlink" title="写对应函数"></a>写对应函数</h3><p><code>views.py</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">book_add</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># 分为get和post请求， get展示添加页面，post提交数据</span></span><br><span class="line">    all_publisher = models.Publisher.objects.all()</span><br><span class="line">    error = <span class="string">''</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        title = request.POST.get(<span class="string">'title'</span>)</span><br><span class="line">        pid_id = request.POST.get(<span class="string">'pid_id'</span>)</span><br><span class="line">        <span class="keyword">if</span> models.Publisher.objects.filter(pid=pid_id):</span><br><span class="line">            models.Book.objects.create(title=title, pid_id=pid_id)</span><br><span class="line">            <span class="keyword">return</span> redirect(<span class="string">'/book_list/'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            error = <span class="string">'出版社不存在'</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'book_add.html'</span>, &#123;<span class="string">'all_publisher'</span>: all_publisher, <span class="string">'error'</span>: error&#125;)</span><br><span class="line">    <span class="comment"># 这个return 一个是对get请求的回应，一个是当没有改出版社的时候返回错误。</span></span><br></pre></td></tr></table></figure><h3 id="写HTML-3"><a href="#写HTML-3" class="headerlink" title="写HTML"></a>写HTML</h3><p><code>book_add.html</code></p><ul><li>对于这个页面来说，内容是一个form</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel-primary"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-heading"</span>&gt;</span>添加图书<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-body"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">class</span>=<span class="string">"form-horizontal col-lg-6 col-lg-offset-3"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"title"</span>&gt;</span>请输入书名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"title"</span> <span class="attr">id</span>=<span class="string">"title"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"title"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"publisher"</span>&gt;</span>选择出版社：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"pid_id"</span> <span class="attr">id</span>=<span class="string">"publisher"</span> <span class="attr">class</span>=<span class="string">"form-control"</span>&gt;</span></span><br><span class="line">                    &#123;% for publishers in all_publisher %&#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"&#123;&#123; publishers.pk &#125;&#125;"</span>&gt;</span>&#123;&#123; publishers.name &#125;&#125;<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    &#123;% endfor %&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary btn-sm col-lg-offset-4"</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="效果-4"><a href="#效果-4" class="headerlink" title="效果"></a>效果</h3><p><img src="/django/20190627-django_2/%E5%A2%9E%E5%8A%A0%E5%9B%BE%E4%B9%A6.png" alt="增加图书"></p><h2 id="删除-1"><a href="#删除-1" class="headerlink" title="删除"></a>删除</h2><h3 id="建立对应关系-6"><a href="#建立对应关系-6" class="headerlink" title="建立对应关系"></a>建立对应关系</h3><p><code>urls.py</code> 下的 <code>urlpatterns</code>中添加：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">url(<span class="string">r'^book_del/'</span>, views.book_del),</span><br></pre></td></tr></table></figure><h3 id="写对应函数-6"><a href="#写对应函数-6" class="headerlink" title="写对应函数"></a>写对应函数</h3><p><code>views.py</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">book_del</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># 点击book_list.html的a标签，发出一个url，通过这个url的键来判断</span></span><br><span class="line">    error = <span class="string">''</span></span><br><span class="line">    pk = request.GET.get(<span class="string">'pk'</span>)</span><br><span class="line">    books = models.Book.objects.filter(pk=pk)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> books:</span><br><span class="line">        <span class="comment"># 当不存出版社时返回error提示（恶意修改url）</span></span><br><span class="line">        all_books = models.Book.objects.all()</span><br><span class="line">        error = <span class="string">'出版社不存在'</span></span><br><span class="line">        <span class="comment"># return render(request,'book_del.html',&#123;'error':error,'all_books':all_books&#125;)</span></span><br><span class="line">        <span class="keyword">return</span> render(request,<span class="string">'book_list.html'</span>,&#123;<span class="string">'error'</span>:error,<span class="string">'all_books'</span>:all_books&#125;)</span><br><span class="line">    books.first().delete()</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">'/book_list/'</span>)</span><br></pre></td></tr></table></figure><h3 id="修改HTML"><a href="#修改HTML" class="headerlink" title="修改HTML"></a>修改HTML</h3><p>在<code>book_list.html</code> 增加对error的输出</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-body"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/book_add"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary btn-sm"</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-striped table-hover"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>序号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>ID<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>书名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>出版社<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">            &#123;% for book in all_books %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; forloop.counter &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; book.pk &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; book.title &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; book.pid.name &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/book_del/?pk=&#123;&#123; book.pk &#125;&#125;"</span> <span class="attr">class</span>=<span class="string">"btn btn-danger btn-sm"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/book_edit/?pk=&#123;&#123; book.pk &#125;&#125;"</span> <span class="attr">class</span>=<span class="string">"btn btn-warning btn-sm"</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            &#123;% endfor %&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color: red"</span>&gt;</span>&#123;&#123; error &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="编辑-1"><a href="#编辑-1" class="headerlink" title="编辑"></a>编辑</h2><h3 id="建立对应关系-7"><a href="#建立对应关系-7" class="headerlink" title="建立对应关系"></a>建立对应关系</h3><p><code>urls.py</code> 下的 <code>urlpatterns</code>中添加：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">url(<span class="string">r'^book_edit/'</span>, views.book_edit),</span><br></pre></td></tr></table></figure><h3 id="写对应函数-7"><a href="#写对应函数-7" class="headerlink" title="写对应函数"></a>写对应函数</h3><p><code>views.py</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">book_edit</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># get方式展示编辑页面，post方式提交修改的数据</span></span><br><span class="line">    pk = request.GET.get(<span class="string">'pk'</span>)</span><br><span class="line">    error = <span class="string">""</span></span><br><span class="line">    obj = models.Book.objects.filter(pk=pk).first()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> obj:</span><br><span class="line">        error = <span class="string">'查询数据不存在'</span></span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">'book_edit.html'</span>, &#123;<span class="string">'error'</span>: error&#125;)</span><br><span class="line">    all_publisher = models.Publisher.objects.all()</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">"POST"</span>:</span><br><span class="line">        title = request.POST.get(<span class="string">'title'</span>)</span><br><span class="line">        pid_id = request.POST.get(<span class="string">'pid_id'</span>)</span><br><span class="line">        <span class="comment"># 检查出版社是否存在</span></span><br><span class="line">        pid = models.Publisher.objects.filter(pid=pid_id).first()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> pid:</span><br><span class="line">            error = <span class="string">'出版社不存在'</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 输入合法，可以修改数据库</span></span><br><span class="line">            obj.title = title</span><br><span class="line">            obj.pid = pid</span><br><span class="line">            obj.save()</span><br><span class="line">            print(<span class="string">'到这里啦'</span>)</span><br><span class="line">            <span class="keyword">return</span> redirect(<span class="string">'/book_list/'</span>)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'book_edit.html'</span>, &#123;<span class="string">'book'</span>: obj, <span class="string">'all_publisher'</span>: all_publisher,<span class="string">'error'</span>: error&#125;)</span><br><span class="line">    <span class="comment"># 包含get请求，以及出版社不存在的返回</span></span><br></pre></td></tr></table></figure><h3 id="写THML"><a href="#写THML" class="headerlink" title="写THML"></a>写THML</h3><p><code>book_edit.html</code></p><ul><li>编辑与添加相似，都是在表单中完成的，只不过编辑会将原来用户输入的值显示出来。</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-heading"</span>&gt;</span>编辑图书<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-body"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"title"</span> <span class="attr">class</span>=<span class="string">"col-sm-2 text-center"</span>&gt;</span>请输入书名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"title"</span> <span class="attr">id</span>=<span class="string">"title"</span> <span class="attr">class</span>=<span class="string">"col-sm-2 "</span> <span class="attr">value</span>=<span class="string">"&#123;&#123; book.title &#125;&#125;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group "</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"publisher"</span> <span class="attr">class</span>=<span class="string">"col-sm-2 text-center"</span>&gt;</span>选择出版社：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"pid_id"</span> <span class="attr">id</span>=<span class="string">"publisher"</span>&gt;</span></span><br><span class="line">                &#123;% for publishers in all_publisher %&#125;</span><br><span class="line">                &#123;% if book.pid_id == publishers.pid %&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"&#123;&#123; publishers.pk &#125;&#125;"</span> <span class="attr">selected</span>&gt;</span>&#123;&#123; publishers.name &#125;&#125;<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                &#123;% else %&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"&#123;&#123; publishers.pk &#125;&#125;"</span>&gt;</span>&#123;&#123; publishers.name &#125;&#125;<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                &#123;% endif %&#125;</span><br><span class="line">                &#123;% endfor %&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-offset-4 col-sm-10"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary btn-sm "</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color: red"</span>&gt;</span>&#123;&#123; error &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="效果-5"><a href="#效果-5" class="headerlink" title="效果"></a>效果</h3><p><img src="/django/20190627-django_2/%E7%BC%96%E8%BE%91%E5%9B%BE%E4%B9%A6.png" alt="编辑图书"></p><h2 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h2><p>本章完成对图书的增删查改，在出版社的管理的基础上，增加了外键。</p><ol><li><p>对于外键我们使用 <code>pid = models.ForeignKey(&#39;Publisher&#39;,on_delete=models.CASCADE)</code> 来创建外键，这里<code>pid</code>是一个对象，在数据库中实际存在的是<code>pid_id</code>，这样做的好处在于，有了图书这个对象，就可以找到它关联的对象，从而操作这个对象。</p></li><li><p>对于这个方法，里面有一个关键字参数 <code>on_delete</code> 需要我们去选择一种合适的方式，在django1.11.23中可以不设定，但对与django2.0是必须设定的。</p></li><li><p><code>__str__</code> ：当打印对象，先找str方法，没有就去父类中找。</p></li><li><p><code>__repr__</code> ： 当打印对象列表，对象字典的时候，只会调用repr，在类中我们可以写 <code>__repr__ = __str__</code> 来使两个方法相同。</p></li><li><p>模板语法：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> 条件 %&#125;</span><br><span class="line">	语句<span class="number">1</span></span><br><span class="line">&#123;% <span class="keyword">elif</span> 条件 %&#125;</span><br><span class="line">	语句<span class="number">2</span></span><br><span class="line">&#123;% <span class="keyword">else</span> %&#125;</span><br><span class="line">	语句<span class="number">3</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="作者的管理"><a href="#作者的管理" class="headerlink" title="作者的管理"></a>作者的管理</h1><p>作者与书是多对多的关系，对于与这种关系，我们该如何处理呢？这也是本章的核心内容，其余都和前面相似，所以这一部分不会完全复制代码，只将关键步骤和不同之处记录下来。</p><h2 id="准备工作-2"><a href="#准备工作-2" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="使用orm创建类-1"><a href="#使用orm创建类-1" class="headerlink" title="使用orm创建类"></a>使用orm创建类</h3><ul><li>Book或Author中任意一方都可以添加多对多关系。</li><li>使用<code>models.ManyToManyField()</code> 设置</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Author</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    books = models.ManyToManyField(<span class="string">'Book'</span>)</span><br><span class="line">    <span class="comment"># 描述多对多关系 ， 不会再数据库中生成该字段，它帮助生成新的关系表。</span></span><br><span class="line">    <span class="comment"># 在Book 或 Author 中都可以去定义，通过Book拿作者 或者通过 作者拿书</span></span><br></pre></td></tr></table></figure><h3 id="执行迁移-2"><a href="#执行迁移-2" class="headerlink" title="执行迁移"></a>执行迁移</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python36 manage.py makemigrations</span><br><span class="line">python36 manage.py migrate</span><br></pre></td></tr></table></figure><h3 id="nvicate添加记录-1"><a href="#nvicate添加记录-1" class="headerlink" title="nvicate添加记录"></a>nvicate添加记录</h3><p>结果如下：</p><p><img src="/django/20190627-django_2/%E4%BD%9C%E8%80%85%E4%B8%8E%E4%BD%9C%E8%80%85_%E4%B9%A6%E7%B1%8D%E5%85%B3%E7%B3%BB%E8%A1%A8.png" alt="作者与作者_书籍关系表"></p><h2 id="展示-1"><a href="#展示-1" class="headerlink" title="展示"></a>展示</h2><h3 id="建立对应关系-8"><a href="#建立对应关系-8" class="headerlink" title="建立对应关系"></a>建立对应关系</h3><p><code>urls.py</code> 下的 <code>urlpatterns</code>中添加：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">url(<span class="string">r'^author_list/'</span>, views.author_list),</span><br></pre></td></tr></table></figure><h3 id="写对应函数-8"><a href="#写对应函数-8" class="headerlink" title="写对应函数"></a>写对应函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">author_list</span><span class="params">(request)</span>:</span></span><br><span class="line">    all_authors = models.Author.objects.all()</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'author_list.html'</span>,&#123;<span class="string">'all_authors'</span>:all_authors&#125;)</span><br></pre></td></tr></table></figure><h3 id="写HTML-4"><a href="#写HTML-4" class="headerlink" title="写HTML"></a>写HTML</h3><ul><li><code>author.books</code>是一个关系管理对象，通过 all 方法可以查询 作者所关联的所有书籍对象。</li><li>模板中函数是不需要加括号的，如 &#123;&#123;author.books.all&#125;&#125;</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>序号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>ID<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>名字<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>著作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">    &#123;% for author in all_authors %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; forloop.counter &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; author.pk &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; author.name &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                &#123;# author.books.all这里不加括号也是可以的#&#125;</span><br><span class="line">                &#123;% for book in author.books.all %&#125;</span><br><span class="line">                    《&#123;&#123; book.title &#125;&#125;》</span><br><span class="line">                &#123;% endfor %&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="效果-6"><a href="#效果-6" class="headerlink" title="效果"></a>效果</h3><p><img src="/django/20190627-django_2/%E4%BD%9C%E8%80%85%E4%BF%A1%E6%81%AF.png" alt="作者信息"></p><h2 id="增加-2"><a href="#增加-2" class="headerlink" title="增加"></a>增加</h2><h3 id="建立对应关系-9"><a href="#建立对应关系-9" class="headerlink" title="建立对应关系"></a>建立对应关系</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">url(<span class="string">r'^author_add/'</span>, views.author_add),</span><br></pre></td></tr></table></figure><h3 id="写对应函数-9"><a href="#写对应函数-9" class="headerlink" title="写对应函数"></a>写对应函数</h3><ul><li>通过 <code>关系管理对象.set( [1,3,4] )</code> 来为 <code>author_books</code> 关系表中添加内容</li><li>get 只能获取一个元素（最后一个）</li><li>getlist 获取列表</li><li>关系管理对象.set(列表) 列表中的是主键，字符串也不怕，它会帮你处理。</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">author_add</span><span class="params">(request)</span>:</span></span><br><span class="line">    all_books = models.Book.objects.all()</span><br><span class="line">    error = <span class="string">''</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        name = request.POST.get(<span class="string">'name'</span>)</span><br><span class="line">        books = request.POST.getlist(<span class="string">'books'</span>)</span><br><span class="line">        books_back = copy.deepcopy(books)</span><br><span class="line">        <span class="keyword">for</span> book <span class="keyword">in</span> all_books:</span><br><span class="line">            <span class="keyword">if</span> str(book.pk) <span class="keyword">in</span> books:</span><br><span class="line">                books.remove(str(book.pk))</span><br><span class="line">        <span class="keyword">if</span> books:</span><br><span class="line">            <span class="comment"># 有不存在的书籍,会产生错误,返回一个错误</span></span><br><span class="line">            error = <span class="string">'部分书籍不存在!'</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            obj = models.Author.objects.create(name=name)</span><br><span class="line">            obj.books.set(books_back)</span><br><span class="line">            <span class="keyword">return</span> redirect(<span class="string">'/author_list/'</span>)</span><br><span class="line">    <span class="comment"># 展示 author_add.html 页面</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'author_add.html'</span>, &#123;<span class="string">'all_books'</span>: all_books, <span class="string">'error'</span>: error&#125;)</span><br><span class="line">    <span class="comment"># 包括对部分书籍不存在错误的返回</span></span><br></pre></td></tr></table></figure><h3 id="写HTML-5"><a href="#写HTML-5" class="headerlink" title="写HTML"></a>写HTML</h3><ul><li>书籍是通过 select 来进行选择的，需要加入multiple 。</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span>姓名:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"books"</span>&gt;</span>著作:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"books"</span> <span class="attr">id</span>=<span class="string">"books"</span> <span class="attr">multiple</span>&gt;</span></span><br><span class="line">        &#123;% for book in all_books %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"&#123;&#123; book.pk &#125;&#125;"</span>&gt;</span>&#123;&#123; book.title &#125;&#125;<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        &#123;% endfor %&#125;                            </span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="效果-7"><a href="#效果-7" class="headerlink" title="效果"></a>效果</h3><p><img src="/django/20190627-django_2/%E5%A2%9E%E5%8A%A0%E4%BD%9C%E8%80%85.png" alt="增加作者"></p><h2 id="删除-2"><a href="#删除-2" class="headerlink" title="删除"></a>删除</h2><h3 id="建立对应关系-10"><a href="#建立对应关系-10" class="headerlink" title="建立对应关系"></a>建立对应关系</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">url(<span class="string">r'^author_del/'</span>, views.author_del),</span><br></pre></td></tr></table></figure><h3 id="写对应函数-10"><a href="#写对应函数-10" class="headerlink" title="写对应函数"></a>写对应函数</h3><p>作者 — 对应表 — 书籍</p><p>删除作者/书籍，任意一方后，对应表中的记录会消失，但是删除了作者，这本书还是存在的。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">author_del</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># 对url链接内容进行判断,查找作者主键,存在就删除,不存在返回error</span></span><br><span class="line">    pk = request.GET.get(<span class="string">'pk'</span>)</span><br><span class="line">    error = <span class="string">''</span></span><br><span class="line">    author = models.Author.objects.filter(pk=pk)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> author:</span><br><span class="line">        error = <span class="string">'作者不存在!'</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        author.delete()</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">'/author_list/'</span>)</span><br><span class="line">    all_authors = models.Author.objects.all()</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'author_list.html'</span>, &#123;<span class="string">'all_authors'</span>: all_authors, <span class="string">'error'</span>: error&#125;)</span><br></pre></td></tr></table></figure><h3 id="写HTML-6"><a href="#写HTML-6" class="headerlink" title="写HTML"></a>写HTML</h3><p>补全 <code>author_list.html</code> 中的删除</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/book_del/?pk=&#123;&#123; book.pk &#125;&#125;"</span> <span class="attr">class</span>=<span class="string">"btn btn-danger btn-sm"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="编辑-2"><a href="#编辑-2" class="headerlink" title="编辑"></a>编辑</h2><h3 id="建立对应关系-11"><a href="#建立对应关系-11" class="headerlink" title="建立对应关系"></a>建立对应关系</h3><h3 id="写对应函数-11"><a href="#写对应函数-11" class="headerlink" title="写对应函数"></a>写对应函数</h3><ul><li>对于传入参数中的书籍需要进行检查，对这个列表进行一次深拷贝，不然如果是赋值操作的话，两个列表的内容都会减少。</li><li><code>author.books.set(books_back)</code> 首先会删除所有与这个author对象有关的记录，然后再添加。</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">author_edit</span><span class="params">(request)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 展示编辑页面</span></span><br><span class="line">    pk = request.GET.get(<span class="string">'pk'</span>)</span><br><span class="line">    error = <span class="string">''</span></span><br><span class="line">    author = models.Author.objects.filter(pk=pk).first()</span><br><span class="line">    all_books = models.Book.objects.all()</span><br><span class="line">    all_authors = models.Author.objects.all()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> author:</span><br><span class="line">        error = <span class="string">'作者不存在!'</span></span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">'author_list.html'</span>, &#123;<span class="string">'all_authors'</span>: all_authors, <span class="string">'error'</span>: error&#125;)</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        name = request.POST.get(<span class="string">'name'</span>)</span><br><span class="line">        books = request.POST.getlist(<span class="string">'books'</span>)</span><br><span class="line">        books_back = copy.deepcopy(books)</span><br><span class="line">        <span class="keyword">for</span> book <span class="keyword">in</span> all_books:</span><br><span class="line">            <span class="keyword">if</span> str(book.pk) <span class="keyword">in</span> books:</span><br><span class="line">                books.remove(str(book.pk))</span><br><span class="line">        <span class="keyword">if</span> books:</span><br><span class="line">            error = <span class="string">'部分书籍不存在'</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            author.name = name</span><br><span class="line">            author.save()</span><br><span class="line">            print(books_back)</span><br><span class="line">            author.books.set(books_back)</span><br><span class="line">            <span class="keyword">return</span> redirect(<span class="string">'/author_list/'</span>)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'author_edit.html'</span>, &#123;<span class="string">'all_books'</span>: all_books, <span class="string">'author'</span>: author, <span class="string">'error'</span>: error&#125;)</span><br></pre></td></tr></table></figure><h3 id="写HTML-7"><a href="#写HTML-7" class="headerlink" title="写HTML"></a>写HTML</h3><ul><li><p>相对于 author_add.html 增加了值填充，和已选选项提示。</p></li><li><p>可以使用成员判断来找出已选择的书。</p></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"name"</span> <span class="attr">class</span>=<span class="string">"col-sm-2 col-sm-offset-2 control-label"</span>&gt;</span>名字:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-6"</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">id</span>=<span class="string">"name"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">value</span>=<span class="string">"&#123;&#123; author.name &#125;&#125;"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"books"</span> <span class="attr">class</span>=<span class="string">"col-sm-2 col-sm-offset-2 form-group"</span>&gt;</span>著作:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-6"</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"books"</span> <span class="attr">id</span>=<span class="string">"books"</span> <span class="attr">multiple</span> <span class="attr">class</span>=<span class="string">"form-control"</span>&gt;</span></span><br><span class="line">                 &#123;% for book in all_books %&#125;</span><br><span class="line">                 &#123;% if book in author.books.all %&#125;</span><br><span class="line">                 <span class="tag">&lt;<span class="name">option</span> <span class="attr">selected</span> <span class="attr">value</span>=<span class="string">"&#123;&#123; book.pk &#125;&#125;"</span>&gt;</span>&#123;&#123; book.title &#125;&#125;<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                 &#123;% else %&#125;</span><br><span class="line">                 <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"&#123;&#123; book.pk &#125;&#125;"</span>&gt;</span>&#123;&#123; book.title &#125;&#125;<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                 &#123;% endif %&#125;</span><br><span class="line">                 &#123;% endfor %&#125;</span><br><span class="line">             <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary btn-sm col-sm-offset-6 "</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="效果-8"><a href="#效果-8" class="headerlink" title="效果"></a>效果</h3><p><img src="/django/20190627-django_2/%E7%BC%96%E8%BE%91%E4%BD%9C%E8%80%85%E4%BF%A1%E6%81%AF.png" alt="编辑作者信息"></p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p><code>关系管理对象.set</code> 是先做删除，在做添加。</p><h3 id="正-反向操作"><a href="#正-反向操作" class="headerlink" title="正/反向操作"></a>正/反向操作</h3><h4 id="正向操作"><a href="#正向操作" class="headerlink" title="正向操作"></a>正向操作</h4><ul><li>在我们的orm定义中，<code>ManyToManyField</code> 是定义在Author中的。正向操作就是通过Author对象.books 直接拿到关系管理对象。</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    pid = models.ForeignKey(<span class="string">'Publisher'</span>,on_delete=models.CASCADE)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Author</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    books = models.ManyToManyField(<span class="string">'Book'</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line">    __repr__ = __str__</span><br></pre></td></tr></table></figure><h4 id="反向操作"><a href="#反向操作" class="headerlink" title="反向操作"></a>反向操作</h4><p>那通过Book来拿这个关系管理对象就是反向操作了：</p><ul><li>author_set 是一个 关系管理对象，前面的author是根据类名来的，后面的<code>_set</code> 是固定写法。通过它，可以查询 all，可以设置 set 。</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(request)</span>:</span></span><br><span class="line">    books = models.Book.objects.all()</span><br><span class="line">    print(<span class="string">'-----------'</span>)</span><br><span class="line">    <span class="keyword">for</span> book <span class="keyword">in</span> books:</span><br><span class="line">        print(book.author_set.all(),type(book.author_set))</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'ok'</span>)</span><br></pre></td></tr></table></figure><p>note：需要在urls.py中设置对应关系 <code>url(r&#39;^test/&#39;, views.test),</code></p><p>打印如下内容：</p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">&lt;QuerySet [小灰]&gt; &lt;<span class="class"><span class="keyword">class</span> '<span class="title">django</span>.<span class="title">db</span>.<span class="title">models</span>.<span class="title">fields</span>.<span class="title">related_descriptors</span>.<span class="title">create_forward_many_to_many_manager</span>.&lt;locals&gt;.<span class="title">ManyRelatedManager</span>'&gt;</span></span><br><span class="line">&lt;QuerySet [岸本, 七七七]&gt; &lt;<span class="class"><span class="keyword">class</span> '<span class="title">django</span>.<span class="title">db</span>.<span class="title">models</span>.<span class="title">fields</span>.<span class="title">related_descriptors</span>.<span class="title">create_forward_many_to_many_manager</span>.&lt;locals&gt;.<span class="title">ManyRelatedManager</span>'&gt;</span></span><br></pre></td></tr></table></figure><h3 id="创建多对多关系中第三张表的方法"><a href="#创建多对多关系中第三张表的方法" class="headerlink" title="创建多对多关系中第三张表的方法"></a>创建多对多关系中第三张表的方法</h3><h4 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h4><p>django通过<code>ManyToManyField</code>自动创建第三张表</p><ul><li><p>优点：通过 关系管理对象（<code>ManyRelatedManager</code>），可以查询 all ，可以为第三张表添加记录 set</p></li><li><p>缺点：列是固定的（一个主键两个外键，没有其他内容）</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    pub = models.ForeignKey(<span class="string">'Publisher'</span>, on_delete=models.CASCADE)</span><br><span class="line">    <span class="comment"># authors = models.ManyToManyField('Author')  # 描述多对多的关系   不生成字段  生成关系表</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.title</span><br><span class="line"></span><br><span class="line">    __str__ = __repr__</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Author</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    books = models.ManyToManyField(<span class="string">'Book'</span>)  <span class="comment"># 描述多对多的关系   不生成字段  生成关系表</span></span><br></pre></td></tr></table></figure><h4 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h4><p>手动创建，添加外键</p><ul><li>优点：你可以自由添加字段</li><li>缺点：没有关系管理对象 ，从book/author不能直接得到 Book_Author的内容。</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Author</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book_Author</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    book = models.ForeignKey(Book, on_delete=models.CASCADE)</span><br><span class="line">    author = models.ForeignKey(Author, on_delete=models.CASCADE)</span><br><span class="line">    date = models.DateField()</span><br></pre></td></tr></table></figure><h4 id="方式三"><a href="#方式三" class="headerlink" title="方式三"></a>方式三</h4><p>自己创建 + ManyToManyField</p><ul><li><p>优点：有了 关系管理对象，我们可以查询了 all ，通过 Author.books.all 或 book_set.all 查询；也可以定义额外的字段了</p></li><li><p>缺点：关系管理对象只能查询，不能设置（set），因为有额外的字段，考虑到没有这些字段的情况，从少的一方到多的一方是不能在进行设置的。</p></li><li><p>需要设置 <code>through</code></p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Author</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    books = models.ManyToManyField(Book, through=<span class="string">'Book_Author'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book_Author</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    book = models.ForeignKey(Book, on_delete=models.CASCADE)</span><br><span class="line">    author = models.ForeignKey(Author, on_delete=models.CASCADE)</span><br><span class="line">    date = models.DateField()</span><br></pre></td></tr></table></figure><h3 id="一种特殊情况"><a href="#一种特殊情况" class="headerlink" title="一种特殊情况"></a>一种特殊情况</h3><p>​ 在上面Book_Author这张表中有两个外键，那如果在添加一个 <code>tuijian_author</code> 这个外键，它来自Author，这样我们需要额外设置参数来进行解释，编译器不至于混乱。</p><p>混乱来自：当进行<strong>反向查询</strong>的时候，不知道是 <code>author</code> 还是 <code>tuijian_author</code></p><p>而且如果直接设置两个外键会产生重名问题，出现两个Author.book_author_set</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">app02.Book_Author.author: (fields.E304) Reverse accessor <span class="keyword">for</span> <span class="string">'Book_Author.author'</span> clashes <span class="keyword">with</span> reverse accessor <span class="keyword">for</span> <span class="string">'Book_Author.tuijian_author'</span>.</span><br><span class="line">        HINT: Add <span class="keyword">or</span> change a related_name argument to the definition <span class="keyword">for</span> <span class="string">'Book_Author.author'</span> <span class="keyword">or</span> <span class="string">'Book_Author.tuijian_author'</span>.</span><br><span class="line">app02.Book_Author.tuijian_author: (fields.E304) Reverse accessor <span class="keyword">for</span> <span class="string">'Book_Author.tuijian_author'</span> clashes <span class="keyword">with</span> reverse accessor <span class="keyword">for</span> <span class="string">'Book_Author.author'</span>.</span><br><span class="line">        HINT: Add <span class="keyword">or</span> change a related_name argument to the definition <span class="keyword">for</span> <span class="string">'Book_Author.tuijian_author'</span> <span class="keyword">or</span> <span class="string">'Book_Author.author'</span>.</span><br></pre></td></tr></table></figure><ul><li><p>在 <code>ForeignKey</code> 中需要设置 <code>related_name</code>，这在上面的错误中也提到了。</p></li><li><p>在 <code>ManyToManyField</code> 中需要设置<code>through_fields</code> 来指明 Book_Author 中的哪两个字段是多对多关系，而且这个列表是有顺序要求的。</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Author</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    books = models.ManyToManyField(Book, through=<span class="string">'Book_Author'</span>, through_fields=[<span class="string">'author'</span>, <span class="string">'book'</span>, ])</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book_Author</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    book = models.ForeignKey(Book, on_delete=models.CASCADE)</span><br><span class="line">    author = models.ForeignKey(Author, on_delete=models.CASCADE, related_name=<span class="string">'x'</span>)</span><br><span class="line">    tuijian_author = models.ForeignKey(Author, on_delete=models.CASCADE, related_name=<span class="string">'x1'</span>)</span><br><span class="line">    date = models.DateField()</span><br></pre></td></tr></table></figure><h1 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h1><h2 id="django的所有命令"><a href="#django的所有命令" class="headerlink" title="django的所有命令"></a>django的所有命令</h2><ol><li><p>下载安装</p><p>pip install django == 1.11.23 -i 源</p></li><li><p>创建项目</p><p>django-admin startproject 项目名</p></li><li><p>启动项目</p><p>manage.py目录下 ： python manage.py runserver</p></li><li><p>创建app</p><p>python manage.py startapp app名称</p></li><li><p>数据库迁移</p><p>python manage.py makemigrations 扫描app下的models的变更记录 后面可以加具体app名称</p><p>python migrate 同步， 后面可以加具体app名称</p></li></ol><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ol><li><p>TEMPLATES 模板 DIRS</p></li><li><p>静态文件</p><p>STATIC_URL = ‘/static/‘</p><p>STATICFILES_DIRS = [</p><p>​ os.path.join(BASE_DIR, ‘static’),</p><p>]</p></li><li><p>数据库 DATABASES</p><p>ENGIN 引擎</p><p>NAME 数据库名</p><p>HOST</p><p>PORT</p><p>USER</p><p>PASSWORD</p></li><li><p>中间件</p><p>注释csrf，提交post请求</p></li><li><p>注册app</p><p>INSTALL_APPS= [</p><p>‘app01.apps.App01Config’</p><p>]</p></li></ol><h2 id="django使用MySQL数据库的流程"><a href="#django使用MySQL数据库的流程" class="headerlink" title="django使用MySQL数据库的流程"></a>django使用MySQL数据库的流程</h2><ol><li><p>切换数据库操作模块 pymysql， 写在与settings同级目录下的 <code>__init__.py</code></p><p>import pymyysql</p><p>pymysql.install_as_MySQLdb()</p></li><li><p>创建一个MySQL数据库</p></li><li><p>在app下的models中写类</p></li><li><p>制作迁移文件</p></li><li><p>执行数据库迁移命令</p></li></ol><h2 id="request"><a href="#request" class="headerlink" title="request"></a>request</h2><ol><li>request对象：</li><li>GET：url上携带的参数 字典 ?k1=v1</li><li>POST：POST请求的请求数据 get, getlist</li><li>method GET POST PUT</li></ol><h2 id="response"><a href="#response" class="headerlink" title="response"></a>response</h2><ol><li><p>HttpResponse(‘字符串’) 返回字符串</p></li><li><p>render(request,’模板’, { 模板渲染}) 返回一个完整的页面</p></li><li><p>redirect(‘url的路径’) 重定向 响应头 Location：url + 302状态码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># ret = HttpResponse('ok')</span></span><br><span class="line">    response = HttpResponse(status=<span class="number">302</span>)</span><br><span class="line">    response[<span class="string">'Location'</span>] = <span class="string">'/register/'</span></span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure></li></ol><h2 id="orm"><a href="#orm" class="headerlink" title="orm"></a>orm</h2><p>对应关系</p><ul><li>类 表</li><li>对象 记录</li><li>属性 字段</li></ul><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">models.Publisher.objects.get(name = <span class="string">'xxx'</span>)	<span class="comment"># 获取一个满足条件的对象，找不到或多个就报错</span></span><br><span class="line">models.Publisher.objects.filter()	<span class="comment"># filter 获取满足条件的所有对象，对象列表</span></span><br><span class="line">models.Publisher.objects.all()	<span class="comment"># 获取所有数据</span></span><br><span class="line"></span><br><span class="line">pub.obj.name 			<span class="comment"># 出版社名字</span></span><br><span class="line">pub.obj.pk  pub.obj.pid	<span class="comment"># 出版社的主键</span></span><br><span class="line"></span><br><span class="line">book_obj.pub 			<span class="comment"># 所关联的出版设对象</span></span><br><span class="line">book_obj.pub_id  		<span class="comment"># 所关联的出版社对象的id</span></span><br><span class="line"></span><br><span class="line">author_obj.books		<span class="comment"># 关系管理对象</span></span><br><span class="line">author_obj.books.all()	<span class="comment"># 所关联的所有的书籍对象</span></span><br></pre></td></tr></table></figure><h2 id="新增"><a href="#新增" class="headerlink" title="新增"></a>新增</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Publisher</span><br><span class="line"><span class="number">1.</span></span><br><span class="line">	obj = models.Publisher.objects.create(name = <span class="string">'xxx'</span>)</span><br><span class="line"><span class="number">2.</span></span><br><span class="line">    obj = models.Publisher(name = <span class="string">'xxx'</span>)</span><br><span class="line">	obj.save</span><br><span class="line">    </span><br><span class="line">Book：</span><br><span class="line">	models.Book.objects.create(name = <span class="string">'xxx'</span>,pub = pub_obj)</span><br><span class="line">    models.Book.objects.create(name = <span class="string">'xxx'</span>,pub_id = pub_obj.pk)</span><br><span class="line">Author:</span><br><span class="line">    author_obj = models.Author.objects.create(name = <span class="string">'xxx'</span>)</span><br><span class="line">    author_obj.books.set([<span class="number">1</span>,<span class="number">2</span>])	<span class="comment"># 设置多对多的关系</span></span><br></pre></td></tr></table></figure><h2 id="删除-3"><a href="#删除-3" class="headerlink" title="删除"></a>删除</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">查询这个对象/对象列表  -&gt; delete</span><br><span class="line">models.Publisher.objects.filter(pk=pk).delete()</span><br><span class="line">author_obj.delete()</span><br></pre></td></tr></table></figure><h2 id="编辑-3"><a href="#编辑-3" class="headerlink" title="编辑"></a>编辑</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">book_obj.pub = pub_obj</span><br><span class="line">book_obj.pub_id = pub_obj.pk</span><br><span class="line">author_obj.name = name</span><br><span class="line">author_obj.save()</span><br><span class="line">author_obj.books.set([id,id])</span><br></pre></td></tr></table></figure><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><p>render(request, ‘模板的文件名’,{k1:v1})</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;&#123;k1&#125;&#125;  v1</span><br><span class="line">&#123;% if 条件 %&#125;</span><br><span class="line">	x1</span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">	x2</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&#123;% for i in iter %&#125;</span><br><span class="line">	&#123;&#123;forloop.counter&#125;&#125;</span><br><span class="line">	&#123;&#123;i&#125;&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><p>下一篇为 <a href="https://chennq.com/django/20190701-django_3.html">Django模板系统</a>，第一个需要了解的细节，学习了这一块，就可以得到任何想要的页面。</p>]]></content>
      <categories>
        <category>django</category>
      </categories>
      <tags>
        <tag>django</tag>
        <tag>学习笔记</tag>
        <tag>Web前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Pytorch-维度变化</title>
    <url>/Pytorch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20190626-learning_PyTorch_4_dim.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>本篇介绍tensor的维度变化。</p></blockquote><a id="more"></a><p>维度变化改变的是数据的理解方式！</p><ul><li>view/reshape：大小不变的条件下，转变shape</li><li>squeeze/unsqueeze：减少/增加维度</li><li>transpose/t/permute：转置，单次/多次交换</li><li>expand/repeat：维度扩展</li></ul><h1 id="view-reshape"><a href="#view-reshape" class="headerlink" title="view reshape"></a>view reshape</h1><ul><li>在pytorch0.3的时候，默认是view .为了与numpy一致0.4以后增加了reshape。</li><li><strong>损失维度信息</strong>，如果不额外存储/记忆的话，恢复时会出现问题。</li><li>执行view/reshape是有一定的物理意义的，不然不会这样做。</li><li>保证tensor的size不变即可/numel()一致/元素个数不变。</li><li><strong>数据的存储/维度顺序非常非常非常重要</strong></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In[<span class="number">4</span>]: a = torch.rand(<span class="number">4</span>,<span class="number">1</span>,<span class="number">28</span>,<span class="number">28</span>)</span><br><span class="line">In[<span class="number">5</span>]: a.shape</span><br><span class="line">Out[<span class="number">5</span>]: torch.Size([<span class="number">4</span>, <span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>])</span><br><span class="line">In[<span class="number">6</span>]: a.view(<span class="number">4</span>,<span class="number">28</span>*<span class="number">28</span>)        <span class="comment"># 4, 1*28*28 将后面的进行合并/合并通道，长宽，忽略了通道信息，上下左右的空间信息。适合全连接层。</span></span><br><span class="line">Out[<span class="number">6</span>]: </span><br><span class="line">tensor([[<span class="number">0.1483</span>, <span class="number">0.6321</span>, <span class="number">0.8864</span>,  ..., <span class="number">0.0646</span>, <span class="number">0.4791</span>, <span class="number">0.0892</span>],</span><br><span class="line">        [<span class="number">0.5868</span>, <span class="number">0.5278</span>, <span class="number">0.8514</span>,  ..., <span class="number">0.0682</span>, <span class="number">0.7815</span>, <span class="number">0.2724</span>],</span><br><span class="line">        [<span class="number">0.4945</span>, <span class="number">0.4957</span>, <span class="number">0.0047</span>,  ..., <span class="number">0.4253</span>, <span class="number">0.4135</span>, <span class="number">0.1234</span>],</span><br><span class="line">        [<span class="number">0.0618</span>, <span class="number">0.4257</span>, <span class="number">0.1960</span>,  ..., <span class="number">0.1377</span>, <span class="number">0.5776</span>, <span class="number">0.4071</span>]])</span><br><span class="line">In[<span class="number">7</span>]: a.view(<span class="number">4</span>,<span class="number">28</span>*<span class="number">28</span>).shape</span><br><span class="line">Out[<span class="number">7</span>]: torch.Size([<span class="number">4</span>, <span class="number">784</span>])</span><br><span class="line">In[<span class="number">8</span>]: a.view(<span class="number">4</span>*<span class="number">28</span>, <span class="number">28</span>).shape    <span class="comment"># 合并batch，channel，行合并 放在一起为N [N,28] 每个N，刚好有28个像素点，只关心一行数据</span></span><br><span class="line">Out[<span class="number">8</span>]: torch.Size([<span class="number">112</span>, <span class="number">28</span>])</span><br><span class="line">In[<span class="number">9</span>]: a.view(<span class="number">4</span>*<span class="number">1</span>,<span class="number">28</span>,<span class="number">28</span>).shape	<span class="comment"># 4张叠起来了</span></span><br><span class="line">Out[<span class="number">9</span>]: torch.Size([<span class="number">4</span>, <span class="number">28</span>, <span class="number">28</span>])</span><br><span class="line">In[<span class="number">10</span>]: b = a.view(<span class="number">4</span>,<span class="number">784</span>)  <span class="comment"># a原来的维度信息是[b,c,h,w],但a这样赋值后，它是恢复不到原来的</span></span><br><span class="line">In[<span class="number">11</span>]: b.view(<span class="number">4</span>,<span class="number">28</span>,<span class="number">28</span>,<span class="number">1</span>)  <span class="comment"># logic Bug  # 语法上没有问题，但逻辑上 [b h w c] 与以前是不对应的。</span></span><br><span class="line">a.view(<span class="number">4</span>,<span class="number">783</span>)</span><br><span class="line">RuntimeError: shape <span class="string">'[4, 783]'</span> <span class="keyword">is</span> invalid <span class="keyword">for</span> input of size <span class="number">3136</span></span><br></pre></td></tr></table></figure><h1 id="squeeze-与-unsqueeze"><a href="#squeeze-与-unsqueeze" class="headerlink" title="squeeze 与 unsqueeze"></a>squeeze 与 unsqueeze</h1><h2 id="unsqueeze"><a href="#unsqueeze" class="headerlink" title="unsqueeze"></a>unsqueeze</h2><ul><li>unsqueeze(index) 拉伸（增加一个维度） （增加一个组别）</li><li>参数的范围是 [-a.dim()-1, a.dim()+1) 如下面例子中范围是[-5,5)</li><li>-5 –&gt; 0 … -1 –&gt; 4 这样的话，0表示在前面插入，-1表示在后面插入，正负会有些混乱，所以推荐用正数。</li><li>0与正数，就是在xxx前面插入。</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In[<span class="number">17</span>]: a.shape</span><br><span class="line">Out[<span class="number">17</span>]: torch.Size([<span class="number">4</span>, <span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>])</span><br><span class="line">In[<span class="number">18</span>]: a.unsqueeze(<span class="number">0</span>).shape	<span class="comment"># 在0的前面插入一个维度</span></span><br><span class="line">Out[<span class="number">18</span>]: torch.Size([<span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>])  <span class="comment"># 理解上就是在batch的基础上增加了组。</span></span><br><span class="line">In[<span class="number">19</span>]: a.unsqueeze(<span class="number">-1</span>).shape	<span class="comment"># 在-1之后插入一个维度</span></span><br><span class="line">Out[<span class="number">19</span>]: torch.Size([<span class="number">4</span>, <span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>])  <span class="comment"># 理解上可能增加一个方差之类的</span></span><br><span class="line">In[<span class="number">20</span>]: a.unsqueeze(<span class="number">4</span>).shape</span><br><span class="line">Out[<span class="number">20</span>]: torch.Size([<span class="number">4</span>, <span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>])</span><br><span class="line">In[<span class="number">21</span>]: a.unsqueeze(<span class="number">-4</span>).shape</span><br><span class="line">Out[<span class="number">21</span>]: torch.Size([<span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>])</span><br><span class="line">In[<span class="number">22</span>]: a.unsqueeze(<span class="number">-5</span>).shape</span><br><span class="line">Out[<span class="number">22</span>]: torch.Size([<span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>])</span><br><span class="line">In[<span class="number">23</span>]: a.unsqueeze(<span class="number">-6</span>).shape</span><br><span class="line">IndexError: Dimension out of range (expected to be <span class="keyword">in</span> range of [<span class="number">-5</span>, <span class="number">4</span>], but got <span class="number">-6</span>)</span><br><span class="line">    </span><br><span class="line">In[<span class="number">24</span>]: a = torch.tensor([<span class="number">1.2</span>,<span class="number">2.3</span>])</span><br><span class="line">In[<span class="number">27</span>]: a.shape</span><br><span class="line">Out[<span class="number">27</span>]: torch.Size([<span class="number">2</span>])</span><br><span class="line">In[<span class="number">25</span>]: a.unsqueeze(<span class="number">-1</span>)  <span class="comment"># 维度变成 [2,1]  2行1列</span></span><br><span class="line">Out[<span class="number">25</span>]: </span><br><span class="line">tensor([[<span class="number">1.2000</span>],</span><br><span class="line">        [<span class="number">2.3000</span>]])</span><br><span class="line">In[<span class="number">26</span>]: a.unsqueeze(<span class="number">0</span>)</span><br><span class="line">Out[<span class="number">26</span>]: tensor([[<span class="number">1.2000</span>, <span class="number">2.3000</span>]]) <span class="comment"># 维度变成 [1,2]  1行2列</span></span><br></pre></td></tr></table></figure><h2 id="实际案例"><a href="#实际案例" class="headerlink" title="实际案例"></a>实际案例</h2><p>给一个bias（偏置），bias相当于给每个channel上的所有像素增加一个偏置</p><p>为了做到 f+b 我们需要改变b的维度</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In[<span class="number">28</span>]: b = torch.rand(<span class="number">32</span>)</span><br><span class="line">In[<span class="number">29</span>]: f = torch.rand(<span class="number">4</span>,<span class="number">32</span>,<span class="number">14</span>,<span class="number">14</span>)</span><br><span class="line">In[<span class="number">30</span>]: b = b.unsqueeze(<span class="number">1</span>).unsqueeze(<span class="number">2</span>).unsqueeze(<span class="number">0</span>)</span><br><span class="line">In[<span class="number">31</span>]: b.shape</span><br><span class="line">Out[<span class="number">31</span>]: torch.Size([<span class="number">1</span>, <span class="number">32</span>, <span class="number">1</span>, <span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>后面进一步扩张到 [4,32,14,14]</p><h2 id="queeze"><a href="#queeze" class="headerlink" title="queeze"></a>queeze</h2><ul><li>squeeze(index) 当index对应的dim为1，就产生作用。</li><li>不写参数，会挤压所有维度为1的。</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In[<span class="number">38</span>]: b.shape</span><br><span class="line">Out[<span class="number">38</span>]: torch.Size([<span class="number">1</span>, <span class="number">32</span>, <span class="number">1</span>, <span class="number">1</span>])</span><br><span class="line">In[<span class="number">39</span>]: b.squeeze().shape  <span class="comment"># 默认将所有维度为1的进行挤压 这32个channel，每个channel有一个值</span></span><br><span class="line">Out[<span class="number">39</span>]: torch.Size([<span class="number">32</span>])</span><br><span class="line">In[<span class="number">40</span>]: b.squeeze(<span class="number">0</span>).shape</span><br><span class="line">Out[<span class="number">40</span>]: torch.Size([<span class="number">32</span>, <span class="number">1</span>, <span class="number">1</span>])</span><br><span class="line">In[<span class="number">41</span>]: b.squeeze(<span class="number">-1</span>).shape</span><br><span class="line">Out[<span class="number">41</span>]: torch.Size([<span class="number">1</span>, <span class="number">32</span>, <span class="number">1</span>])</span><br><span class="line">In[<span class="number">42</span>]: b.squeeze(<span class="number">1</span>).shape</span><br><span class="line">Out[<span class="number">42</span>]: torch.Size([<span class="number">1</span>, <span class="number">32</span>, <span class="number">1</span>, <span class="number">1</span>])</span><br><span class="line">In[<span class="number">43</span>]: b.squeeze(<span class="number">-4</span>).shape</span><br><span class="line">Out[<span class="number">43</span>]: torch.Size([<span class="number">32</span>, <span class="number">1</span>, <span class="number">1</span>])</span><br></pre></td></tr></table></figure><h1 id="expand-repeat"><a href="#expand-repeat" class="headerlink" title="expand / repeat"></a>expand / repeat</h1><ul><li>Expand：broadcasting （推荐）<ul><li>只是改变了理解方式，并没有增加数据</li><li>在需要的时候复制数据</li></ul></li><li>Reapeat：memory copied<ul><li>会实实在在的增加数据</li></ul></li></ul><p>上面提到的b [1, 32, 1, 1] f[ 4, 32, 14, 14 ]</p><p>目标是将b的维度变成与f相同的维度。</p><h2 id="expand"><a href="#expand" class="headerlink" title="expand"></a>expand</h2><ul><li>扩展（expand）张量<strong>不会分配新的内存</strong>，只是在存在的张量上创建一个新的视图（view）</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In[<span class="number">44</span>]: a = torch.rand(<span class="number">4</span>,<span class="number">32</span>,<span class="number">14</span>,<span class="number">14</span>)</span><br><span class="line">In[<span class="number">45</span>]: b.shape</span><br><span class="line">Out[<span class="number">45</span>]: torch.Size([<span class="number">1</span>, <span class="number">32</span>, <span class="number">1</span>, <span class="number">1</span>])  <span class="comment"># 只有1--&gt;N才是可行的， 3 -&gt; N 是需要规则的</span></span><br><span class="line">In[<span class="number">46</span>]: b.expand(<span class="number">4</span>,<span class="number">32</span>,<span class="number">14</span>,<span class="number">14</span>).shape</span><br><span class="line">Out[<span class="number">46</span>]: torch.Size([<span class="number">4</span>, <span class="number">32</span>, <span class="number">14</span>, <span class="number">14</span>])</span><br><span class="line">In[<span class="number">47</span>]: b.expand(<span class="number">-1</span>,<span class="number">32</span>,<span class="number">-1</span>,<span class="number">-1</span>).shape	<span class="comment"># -1表示这个维度不变</span></span><br><span class="line">Out[<span class="number">47</span>]: torch.Size([<span class="number">1</span>, <span class="number">32</span>, <span class="number">1</span>, <span class="number">1</span>])</span><br><span class="line">In[<span class="number">48</span>]: b.expand(<span class="number">-1</span>,<span class="number">32</span>,<span class="number">-1</span>,<span class="number">-4</span>).shape	<span class="comment"># -4这里是一个bug，没有意义，最新版已经修复了</span></span><br><span class="line">Out[<span class="number">48</span>]: torch.Size([<span class="number">1</span>, <span class="number">32</span>, <span class="number">1</span>, <span class="number">-4</span>])</span><br></pre></td></tr></table></figure><h2 id="repeat"><a href="#repeat" class="headerlink" title="repeat"></a>repeat</h2><ul><li>主动复制原来的。</li><li>参数表示的是要拷贝的次数/是原来维度的倍数</li><li>沿着特定的维度重复这个张量，和<em>expand()</em>不同的是，这个函数<strong>拷贝</strong>张量的数据。</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In[<span class="number">49</span>]: b.shape</span><br><span class="line">Out[<span class="number">49</span>]: torch.Size([<span class="number">1</span>, <span class="number">32</span>, <span class="number">1</span>, <span class="number">1</span>])</span><br><span class="line">In[<span class="number">50</span>]: b.repeat(<span class="number">4</span>,<span class="number">32</span>,<span class="number">1</span>,<span class="number">1</span>).shape</span><br><span class="line">Out[<span class="number">50</span>]: torch.Size([<span class="number">4</span>, <span class="number">1024</span>, <span class="number">1</span>, <span class="number">1</span>])</span><br><span class="line">In[<span class="number">51</span>]: b.repeat(<span class="number">4</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>).shape</span><br><span class="line">Out[<span class="number">51</span>]: torch.Size([<span class="number">4</span>, <span class="number">32</span>, <span class="number">1</span>, <span class="number">1</span>])</span><br><span class="line">In[<span class="number">52</span>]: b.repeat(<span class="number">4</span>,<span class="number">1</span>,<span class="number">32</span>,<span class="number">32</span>)</span><br><span class="line">In[<span class="number">53</span>]: b.repeat(<span class="number">4</span>,<span class="number">1</span>,<span class="number">32</span>,<span class="number">32</span>).shape</span><br><span class="line">Out[<span class="number">53</span>]: torch.Size([<span class="number">4</span>, <span class="number">32</span>, <span class="number">32</span>, <span class="number">32</span>])</span><br><span class="line">In[<span class="number">55</span>]: b.repeat(<span class="number">4</span>,<span class="number">1</span>,<span class="number">14</span>,<span class="number">14</span>).shape	<span class="comment"># 这样就达到目标了</span></span><br><span class="line">Out[<span class="number">55</span>]: torch.Size([<span class="number">4</span>, <span class="number">32</span>, <span class="number">14</span>, <span class="number">14</span>])</span><br></pre></td></tr></table></figure><h1 id="转置"><a href="#转置" class="headerlink" title="转置"></a>转置</h1><h2 id="t"><a href="#t" class="headerlink" title=".t"></a>.t</h2><p>转置操作</p><ul><li>.t 只针对 2维矩阵</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = torch.randn(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">a.t().shape</span><br><span class="line">Out[<span class="number">58</span>]: torch.Size([<span class="number">4</span>, <span class="number">3</span>])</span><br><span class="line">In[<span class="number">60</span>]: a</span><br><span class="line">Out[<span class="number">60</span>]: </span><br><span class="line">tensor([[ <span class="number">0.5629</span>, <span class="number">-0.5085</span>, <span class="number">-0.3371</span>,  <span class="number">1.2387</span>],</span><br><span class="line">        [ <span class="number">0.2142</span>, <span class="number">-1.7846</span>,  <span class="number">0.2297</span>,  <span class="number">1.7797</span>],</span><br><span class="line">        [<span class="number">-0.3197</span>,  <span class="number">0.6116</span>,  <span class="number">0.3791</span>,  <span class="number">0.9218</span>]])</span><br><span class="line">In[<span class="number">61</span>]: a.t()</span><br><span class="line">Out[<span class="number">61</span>]: </span><br><span class="line">tensor([[ <span class="number">0.5629</span>,  <span class="number">0.2142</span>, <span class="number">-0.3197</span>],</span><br><span class="line">        [<span class="number">-0.5085</span>, <span class="number">-1.7846</span>,  <span class="number">0.6116</span>],</span><br><span class="line">        [<span class="number">-0.3371</span>,  <span class="number">0.2297</span>,  <span class="number">0.3791</span>],</span><br><span class="line">        [ <span class="number">1.2387</span>,  <span class="number">1.7797</span>,  <span class="number">0.9218</span>]])</span><br><span class="line">b.t()</span><br><span class="line">RuntimeError: t() expects a tensor <span class="keyword">with</span> &lt;= <span class="number">2</span> dimensions, but self <span class="keyword">is</span> <span class="number">4</span>D</span><br></pre></td></tr></table></figure><h2 id="transpose"><a href="#transpose" class="headerlink" title="transpose"></a>transpose</h2><ul><li>在结合view使用的时候，view会导致维度顺序关系变模糊，所以需要人为跟踪。</li><li>错误的顺序，会导致数据污染</li><li>一次只能两两交换</li><li>contiguous</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 由于交换了1，3维度，就会变得不连续，所以需要用contiguous，来吧数据变得连续。</span></span><br><span class="line">In[<span class="number">17</span>]: a1 = a.transpose(<span class="number">1</span>,<span class="number">3</span>).view(<span class="number">4</span>,<span class="number">3</span>*<span class="number">32</span>*<span class="number">32</span>).view(<span class="number">4</span>,<span class="number">3</span>,<span class="number">32</span>,<span class="number">32</span>)</span><br><span class="line">RuntimeError: invalid argument <span class="number">2</span>: view size <span class="keyword">is</span> <span class="keyword">not</span> compatible <span class="keyword">with</span> input tenso<span class="string">r's size and stride (at least one dimension spans across two contiguous subspaces). Call .contiguous() before .view()</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">In[8]: a = torch.randn(4,3,32,32)</span></span><br><span class="line"><span class="string">In[9]: a.shape</span></span><br><span class="line"><span class="string">Out[9]: torch.Size([4, 3, 32, 32])</span></span><br><span class="line"><span class="string">In[10]: a1 = a.transpose(1,3).contiguous().view(4,3*32*32).view(4,3,32,32)</span></span><br><span class="line"><span class="string">    #[b c h w] 交换1，3维度的数据 [b w h c]，再把后面的三个连在一起，展开后变为 [b c w h] 导致和原来的顺序不同，造成数据污染！！！</span></span><br><span class="line"><span class="string">In[11]: a1.shape</span></span><br><span class="line"><span class="string">Out[11]: torch.Size([4, 3, 32, 32])</span></span><br><span class="line"><span class="string">In[12]: a2 = a.transpose(1,3).contiguous().view(4,3*32*32).view(4,32,32,3).transpose(1,3)</span></span><br><span class="line"><span class="string">    # [b c h w] -&gt; [b w h c] -&gt; [b w h c] -&gt; [b c h w] 和原来顺序相同。</span></span><br><span class="line"><span class="string">In[13]: a2.shape</span></span><br><span class="line"><span class="string">Out[13]: torch.Size([4, 3, 32, 32])</span></span><br><span class="line"><span class="string"># 验证向量一致性</span></span><br><span class="line"><span class="string">In[14]: torch.all(torch.eq(a,a1))</span></span><br><span class="line"><span class="string">Out[14]: tensor(0, dtype=torch.uint8)</span></span><br><span class="line"><span class="string">In[15]: torch.all(torch.eq(a,a2))</span></span><br><span class="line"><span class="string">Out[15]: tensor(1, dtype=torch.uint8)</span></span><br></pre></td></tr></table></figure><h2 id="permute"><a href="#permute" class="headerlink" title="permute"></a>permute</h2><ul><li>会打乱内存顺序，待补充！！！</li><li>由于transpose一次只能两两交换，所以变换后在变回去至少需要两次操作，而permute一次就好。例如对于[b,h,w,c]</li><li>[b,h,w,c]是numpy存储图片的格式，需要这一步才能导出numpy</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In[<span class="number">18</span>]: a = torch.rand(<span class="number">4</span>,<span class="number">3</span>,<span class="number">28</span>,<span class="number">28</span>)</span><br><span class="line">In[<span class="number">19</span>]: a.transpose(<span class="number">1</span>,<span class="number">3</span>).shape	<span class="comment"># [b c h w] -&gt; [b w h c]  h与w的顺序发生了变换，导致图像发生了变化</span></span><br><span class="line">Out[<span class="number">19</span>]: torch.Size([<span class="number">4</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">3</span>]) </span><br><span class="line">In[<span class="number">20</span>]: b = torch.rand(<span class="number">4</span>,<span class="number">3</span>,<span class="number">28</span>,<span class="number">32</span>)</span><br><span class="line">In[<span class="number">21</span>]: b.transpose(<span class="number">1</span>,<span class="number">3</span>).shape</span><br><span class="line">Out[<span class="number">21</span>]: torch.Size([<span class="number">4</span>, <span class="number">32</span>, <span class="number">28</span>, <span class="number">3</span>])</span><br><span class="line">In[<span class="number">22</span>]: b.transpose(<span class="number">1</span>,<span class="number">3</span>).transpose(<span class="number">1</span>,<span class="number">2</span>).shape</span><br><span class="line">Out[<span class="number">22</span>]: torch.Size([<span class="number">4</span>, <span class="number">28</span>, <span class="number">32</span>, <span class="number">3</span>]) <span class="comment"># [b,h,w,c]是numpy存储图片的格式，需要这一步才能导出numpy</span></span><br><span class="line">In[<span class="number">23</span>]: b.permute(<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>).shape</span><br><span class="line">Out[<span class="number">23</span>]: torch.Size([<span class="number">4</span>, <span class="number">28</span>, <span class="number">32</span>, <span class="number">3</span>])</span><br></pre></td></tr></table></figure><h1 id="Broadcast"><a href="#Broadcast" class="headerlink" title="Broadcast"></a>Broadcast</h1><p><strong>自动扩展</strong>：</p><ul><li>维度扩展，自动调用expand</li><li>without copying data ，不需要拷贝数据。</li></ul><h2 id="核心思想"><a href="#核心思想" class="headerlink" title="核心思想"></a>核心思想</h2><ul><li>在前面插入1维</li><li>将size 1 扩展成相同 size 的维度</li></ul><p>例子：</p><ul><li>对于 feature maps : [4, 32, 14, 14]，想给它添加一个偏置Bias</li><li>Bias:[32] –&gt; [32, 1 , 1] (这里是手动的) =&gt; [1, 32, 1, 1] =&gt; [4, 32, 14, 14]</li><li>目标：当Bias和feature maps的size一样时，才能执行叠加操作！！！</li></ul><h2 id="Why-broadcasting？"><a href="#Why-broadcasting？" class="headerlink" title="Why broadcasting？"></a>Why broadcasting？</h2><p>就像下图表示的一样：我们希望进行如下的几种计算，但需要满足数学上的约束（size相同），为了节省人们为满足数学上的约束而手动复制的过程，而产生的Broadcast，它节省了大量的内容消耗。</p><p><img src="/Pytorch学习笔记/20190626-learning_PyTorch_4_dim/Broadcast.PNG" alt="Broadcast"></p><ul><li>第二行数据中 [3] =&gt; [1, 3] =&gt; [4, 3] (行复制了4次)</li><li>第三行数据中<ul><li>[4,1] =&gt; [4, 3] (列复制了3次)</li><li>[1,3] =&gt; [4, 3] （行复制了4次）</li></ul></li><li>broadcast = unsqueze（插入新维度） + expand（将1dim变成相同维度）</li></ul><p>例子：</p><ul><li>有这样的数据 [class, students, scores]，具体是4个班，每个班32人，每人8门课程[4, 32, 8] 。</li><li>考试不理想，对于这组数据我们需要为每一位同学的成绩加5分</li><li>要求： [4, 32, 8] + [4, 32, 8]</li><li>实际上：[4, 32, 8] + [5.0]</li><li>操作上：[1] =&gt;(unsqueeze) [1, 1, 1] =&gt;(expand_as) [4, 32, 8]，这样需要写3个接口。</li><li>所以才会有 broadcast！！</li></ul><p>内存分析：</p><ul><li>[4, 32, 8] =&gt; 1024</li><li>[5.0] =&gt; 1 如果是手动复制的话，内存消耗将变为原来的1024倍</li></ul><h2 id="使用条件？"><a href="#使用条件？" class="headerlink" title="使用条件？"></a>使用条件？</h2><p>A [ 大维度 —&gt; 小维度 ]</p><p>从最后一位（最小维度）开始匹配，如果维度上的size是0，1或相同，则满足条件，看下一个维度，直到都满足条件为止。</p><ul><li>如果当前维度是1，扩张到相同维度</li><li>如果没有维度，插入一个维度并扩张到相同维度</li><li>当最小维度不匹配的时候是没法使用broadcastiong，如共有8门课程，但只给了4门课程的变化，这样就会产生歧义。</li></ul><p>note：小维度指定，大维度随意</p><p>小维度指定：假如英语考难了，只加英语成绩 [0 0 5 0 0 0 0 0]</p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="情况一"><a href="#情况一" class="headerlink" title="情况一"></a>情况一</h3><p>A[4, 32, 14, 14]</p><p>B[1, 32, 1, 1] =&gt; [4,,32, 14, 14]</p><h3 id="情况二"><a href="#情况二" class="headerlink" title="情况二"></a>情况二</h3><p>A[4, 32, 14, 14]</p><p>B[14, 14] =&gt; [1, 1, 14, 14] =&gt; [4, 32, 14, 14]</p><h3 id="情况三"><a href="#情况三" class="headerlink" title="情况三"></a>情况三</h3><p>不符合条件</p><p>A[4, 32, 14, 14]</p><p>B[2, 32, 14, 14]</p><h2 id="理解这种行为"><a href="#理解这种行为" class="headerlink" title="理解这种行为"></a>理解这种行为</h2><ul><li>小维度指定，大维度随意。小维度设定规则（加5分），大维度默认按照这个规则（通用）。</li><li>维度为1才满足条件，是为了保证公平（统一的规则）</li></ul><h2 id="常见使用情景"><a href="#常见使用情景" class="headerlink" title="常见使用情景"></a>常见使用情景</h2><ul><li>A [4, 3, 32, 32] b,c,h,w</li><li>+[32, 32] 叠加一个相同的feature map，做一些平移变换。相当于一个base（基底），</li><li>+[3, 1, 1] 针对 RGB 进行不同的补充，如R 0.5 、G 0 、B 0.3</li><li>+[1, 1, 1, 1] 对于所有的都加一个数值，抬高一下，如加0.5.</li></ul>]]></content>
      <categories>
        <category>Pytorch学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>Pytorch</tag>
        <tag>Deep Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>Django的安装与简单使用</title>
    <url>/django/20190626-django_1_1.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>本篇介绍django的安装与简单使用。</p></blockquote><a id="more"></a><hr><blockquote><p>通过这篇文章，你能了解到：</p><ul><li>django的安装与常用命令</li><li>使用django做一个登录小栗子</li></ul></blockquote><h1 id="django的安装与简单使用"><a href="#django的安装与简单使用" class="headerlink" title="django的安装与简单使用"></a>django的安装与简单使用</h1><h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><h3 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h3><p><code>pip install Django==1.11.23 -i https://pypi.tuna.tsinghua.edu.cn/simple/</code></p><p>如果同时安装了python2和python3的情况，可以参考如下方法，使用指定版本的python的pip安装</p><p><code>python2 -m pip install xxx</code></p><p>或者</p><p><code>python3 -m pip install xxx</code></p><h3 id="pycharm"><a href="#pycharm" class="headerlink" title="pycharm"></a>pycharm</h3><p>在<code>setting</code>，<code>Project Interpreter</code> 中，右侧点<code>加号</code>，搜索<code>django</code>，勾选<code>Specify version</code> 选择<code>1.11.23</code>后点击<code>install</code>。</p><p>换源加快速度：在下面<code>Manage Repositories</code>中添加源。</p><p>下面有源可以添加上面的源</p><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><h3 id="命令行-1"><a href="#命令行-1" class="headerlink" title="命令行"></a>命令行</h3><p>一个python环境下：<code>django-admin startproject 项目名</code></p><p>多个python环境：<code>python36 -m django startproject 项目名</code></p><figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">我自己的路径</span><br><span class="line">C:<span class="symbol">\U</span>sers<span class="symbol">\A</span>TLAS<span class="symbol">\A</span>ppData<span class="symbol">\L</span>ocal<span class="symbol">\P</span>rograms<span class="symbol">\P</span>ython<span class="symbol">\P</span>ython36\</span><br></pre></td></tr></table></figure><h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4><p>创建好项目后，它的目录结构如下</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">mysite/</span><br><span class="line">    manage.py</span><br><span class="line">    mysite/</span><br><span class="line">        __init__.py</span><br><span class="line">        settings.py</span><br><span class="line">        urls.py</span><br><span class="line">        wsgi.py</span><br></pre></td></tr></table></figure><p>这些目录和文件的用处是：</p><ul><li>最外层的:file: mysite/ 根目录只是你项目名。</li><li><code>manage.py</code>: 一个让你用各种方式<strong>管理</strong> Django 项目的<strong>命令行工具</strong>。</li><li>里面一层的 <code>mysite/</code> 目录包含你的项目，它是一个纯 Python 包。它的名字就是当你引用它内部任何东西时需要用到的 Python 包名。 (比如 <code>mysite.urls</code>).</li><li><code>mysite/__init__.py</code>：一个空文件，告诉 Python 这个目录应该被认为是一个 <strong>Python 包</strong>。</li><li><code>mysite/settings.py</code>：Django 项目的<strong>配置文件</strong>。</li><li><code>mysite/urls.py</code>：Django 项目的 URL 声明，就像你网站的“目录”。</li><li><code>mysite/wsgi.py</code>：作为你的项目的运行在 WSGI 兼容的Web服务器上的入口。</li></ul><h3 id="pycharm-1"><a href="#pycharm-1" class="headerlink" title="pycharm"></a>pycharm</h3><p>专业版才有这些功能。</p><p><code>file</code> -&gt; <code>new project</code> -&gt; <code>django</code> -&gt; 项目路径 解释器选已有的（如果是新的虚拟环境会下载最新的django）</p><p>创建好项目后，它的目录结构如下</p><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">mysite/	</span><br><span class="line">    manage.py</span><br><span class="line">    .idea/</span><br><span class="line">    	<span class="comment"># pycharm优化所作的,包含各种配置</span></span><br><span class="line">    	dataSources.load.xml</span><br><span class="line">    	dataSources.xml</span><br><span class="line">    	mysite.iml</span><br><span class="line">    	misc.xml</span><br><span class="line">    	modules.xml</span><br><span class="line">    	workspace.<span class="keyword">xml</span>   	<span class="title"></span></span><br><span class="line"><span class="title">	templates</span>/</span><br><span class="line">		<span class="comment"># 存放HTML页面</span></span><br><span class="line">    mysite/</span><br><span class="line">        __init__.py</span><br><span class="line">        settings.py</span><br><span class="line">        urls.py</span><br><span class="line">        wsgi.py</span><br></pre></td></tr></table></figure><h2 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h2><h3 id="命令行-2"><a href="#命令行-2" class="headerlink" title="命令行"></a>命令行</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">python36</span> <span class="selector-tag">manage</span><span class="selector-class">.py</span> <span class="selector-tag">runserver</span>     # 127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:8000</span></span><br></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">加上端口号</span><br><span class="line">python36 manage<span class="selector-class">.py</span> runserver <span class="number">80</span></span><br><span class="line">访问时就不用加端口号了</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">改<span class="selector-tag">ip</span>地址</span><br><span class="line"><span class="selector-tag">python36</span> <span class="selector-tag">manage</span><span class="selector-class">.py</span> <span class="selector-tag">runserver</span> 0<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-pseudo">:80</span></span><br></pre></td></tr></table></figure><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">让人去访问</span><br><span class="line">settings</span><br><span class="line">allowed_hosts = ['*']</span><br></pre></td></tr></table></figure><h3 id="pycharm-2"><a href="#pycharm-2" class="headerlink" title="pycharm"></a>pycharm</h3><p>note: 打开别人的项目<code>.idea</code>要干掉，这里包含了别人的配置，会影响。</p><p>选择项目（dj图标） 点击 <code>绿三角</code> 启动， 不要右键运行文件</p><p>绿三角下面 <code>edit configure</code> 中 改ip和端口</p><h2 id="简单的使用"><a href="#简单的使用" class="headerlink" title="简单的使用"></a>简单的使用</h2><p>settings 中 pycharm 在 模板 TEMPLATES 的 DIR 帮我们写一个路径，在tmplates中写html就可以。</p><ul><li>urls.py 中写对应关系（路由）， 写函数</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># urls.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> HttpResponse,render</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># 必须得加一个 参数 request，从对象中拿信息</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'欢迎来到index'</span>)</span><br><span class="line">    <span class="comment">#  HttpResponse实例化一个对象并返回</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'home.html'</span>)</span><br><span class="line">	<span class="comment"># render函数，返回一个结果。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'login.html'</span>)</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^admin/'</span>, admin.site.urls),</span><br><span class="line">    url(<span class="string">r'^index/'</span>, index),</span><br><span class="line">    url(<span class="string">r'^home/'</span>, home),</span><br><span class="line">    url(<span class="string">r'^load/'</span>, login)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>templates/home.html</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">"color: red"</span>&gt;</span>欢迎来到home！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>templates/load.html</p><p>使用了bootstrap中的表单</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/css/bootstrap.min.css"</span> <span class="attr">integrity</span>=<span class="string">"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u"</span> <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row container-fluid"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4 col-md-offset-4 text-center"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>欢迎登录<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"form-horizontal col-md-4 col-md-offset-4"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"inputEmail3"</span> <span class="attr">class</span>=<span class="string">"col-sm-2 control-label"</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-10"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"inputEmail3"</span> <span class="attr">placeholder</span>=<span class="string">"Email"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"inputPassword3"</span> <span class="attr">class</span>=<span class="string">"col-sm-2 control-label"</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-10"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"inputPassword3"</span> <span class="attr">placeholder</span>=<span class="string">"Password"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-offset-2 col-sm-10"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"checkbox"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span> Remember me</span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-offset-2 col-sm-10"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">id</span>=<span class="string">"sub"</span>&gt;</span>Sign in<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'sub'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> email = <span class="built_in">document</span>.getElementById(<span class="string">'inputEmail3'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> pw = <span class="built_in">document</span>.getElementById(<span class="string">'inputPassword3'</span>);</span></span><br><span class="line"><span class="actionscript">    btn.onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(email.value);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(pw.value)</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="完整的登录实例"><a href="#完整的登录实例" class="headerlink" title="完整的登录实例"></a>完整的登录实例</h1><h2 id="第一步：完善前面的代码"><a href="#第一步：完善前面的代码" class="headerlink" title="第一步：完善前面的代码"></a>第一步：完善前面的代码</h2><h3 id="完善HTML"><a href="#完善HTML" class="headerlink" title="完善HTML"></a>完善HTML</h3><p>对于上面的代码，涉及form表单，input标签，我们点击提交按钮，这个结果该怎么获得呢？</p><ol><li>form的属性中 <strong>action</strong> 表示提交的地址，空表示向当前地址提交（和当前地址组成url）；属性<code>method</code> 确定请求的方式，对于表单提交我们采用 <code>post</code> 方式</li><li>怎样获得input标签中输入的邮箱和密码呢？ 属性 <code>name</code> 与值value 形成一个键值对，存在POST(QueryDict)中。</li><li>对于提交按钮，如果是在form表单中，一个button（设不设置type都可以）就可以提交，或者是 将<code>input</code>标签的<code>type</code>属性设置为 <code>submit</code>。</li></ol><p>修改结果如下：</p><ul><li>form中，设置 action method</li><li>input中设置 name</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"form-signin"</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span>  <span class="attr">novalidate</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"form-signin-heading"</span>&gt;</span>Please sign in<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"inputEmail"</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>Email address<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">id</span>=<span class="string">"inputEmail"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"Email address"</span> <span class="attr">required</span> <span class="attr">autofocus</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"inputPassword"</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">id</span>=<span class="string">"inputPassword"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"Password"</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"checkbox"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"remember-me"</span>&gt;</span> Remember me</span><br><span class="line">          <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-lg btn-primary btn-block"</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>Sign in<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>note：<code>form</code>表单中的<code>novalidate</code>是关闭对输入的验证（关闭前端验证）。</p><h3 id="本地css-js-img等静态文件的配置"><a href="#本地css-js-img等静态文件的配置" class="headerlink" title="本地css,js,img等静态文件的配置"></a>本地css,js,img等静态文件的配置</h3><p>​ 前面我们使用了一个网络链接，来导入bootstrap，那如果是本地的数据，该怎么存放，放在哪呢？？？从配置静态文件入手。</p><p>​ 静态文件是指 网站中的 js, css, 图片，视频等文件以及 jQuery插件，对于这些静态文件我们需要将他们放在一个统一的文件夹下面。</p><p>例如：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">项目名</span><br><span class="line">├── 项目名</span><br><span class="line">├── app01</span><br><span class="line">├── templates</span><br><span class="line">├── static        <span class="comment"># 静态文件目录  引用时，以 /static/ 开头</span></span><br><span class="line">│   ├── css       <span class="comment"># 存放css的静态文件</span></span><br><span class="line">│   ├── imgs      <span class="comment"># 存放图片</span></span><br><span class="line">│   ├── js 		  <span class="comment"># 存放js代码，jQuery</span></span><br><span class="line">│   └── plugins   <span class="comment"># 存放bootstrap插件</span></span><br><span class="line">└── manage.py</span><br></pre></td></tr></table></figure><p>首先配置 <code>settings.py</code> , 找到 <code>STATIC_URL = &#39;/static/&#39;</code> 并在下面补充一个<code>STATICFILES_DIRS = []</code>。</p><p><code>/static/</code>是一个别名，</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">STATIC_URL = <span class="string">'/static/'</span>  <span class="comment"># 别名</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 各个app共用的文件可以放在这</span></span><br><span class="line">STATICFILES_DIRS = [</span><br><span class="line">    os.path.join(BASE_DIR, <span class="string">'static'</span>)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 我们当然也可以这样去配置，查找的时候按照列表的顺序去查找，找到了就不找后面的了，所以如果出现同名情况，只会用前面找到的</span></span><br><span class="line">STATICFILES_DIRS = [   <span class="comment">#按照列表的顺序进行查找</span></span><br><span class="line">    os.path.join(BASE_DIR, <span class="string">'x1'</span>),</span><br><span class="line">    os.path.join(BASE_DIR, <span class="string">'static'</span>),</span><br><span class="line">    os.path.join(BASE_DIR, <span class="string">'x2'</span>)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="完善函数"><a href="#完善函数" class="headerlink" title="完善函数"></a>完善函数</h3><p>① 在开始的时候，我们只是使用render函数，做一个返回。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'login.html'</span>)</span><br></pre></td></tr></table></figure><p>② 接下来就该拿前端的数据，并进行用户名，密码的校验。</p><p>​ 首先我们需要做一步分析，在同一个地址<code>login</code>下我们需要做两种操作，一个是打开这个页面，一个是提交用户名和密码，从后端我们该如何区分这两个呢？在地址栏输入 <code>http://127.0.0.1:8000/login</code>，我们打开了登录页面，这是一个get请求，那么当我们点击提交的时候这是一个post请求，所以可以通过一个条件判断来完成两种操作。如何区分请求呢？可以通过输出<code>request.method</code> 这个属性（<strong>字符串类型</strong>）来进行判断。对于get请求，依旧维持原样，打开这个登录页面。</p><p>​ 然后，对于post请求，我们需要验证用户名和密码，我们该怎样拿到这两条数据呢？ <code>request.POST</code>这个属性是一个QueryDict，里面包含了提交的信息，对于QueryDict使用 get方法 <code>request.POST.get()</code> 来得到用户名和密码。（QueryDict继承字典，它本身还有getlist方法）</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;QueryDict: &#123;<span class="string">'username'</span>: [<span class="string">'xiaobai'</span>], <span class="string">'password'</span>: [<span class="string">'123'</span>]&#125;&gt;</span><br></pre></td></tr></table></figure><p>​ 由于目前还没有没有提及数据库，我们先把这块写死，后面连接数据库后，从数据库中查询，来验证用户信息。</p><p>​ 当用户名和密码校验成功后我们该怎么办呢？ 重定向！ 为什么要重定向呢？如果我们不重定向，使用render函数，虽然页面内容会发生改变，但是url是不会变的，重定向就像你在地址栏中重新输入一个url打开一个网页，这样页面内容和url都发生改变，符合对应关系。使用<code>redirect(to, *args, **kwargs):</code> 函数就可以完成重定向。</p><p>​ note：重定向中字符串前面必须加 <code>/</code> ，不加这个就会和当前的路径进行拼接，理解上也是，我们重新从 <code>/</code> 根 开始。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># print(request.method)</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</span><br><span class="line">        <span class="keyword">return</span> render(request,<span class="string">'login.html'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        user = request.POST.get(<span class="string">'username'</span>)</span><br><span class="line">        pwd = request.POST.get(<span class="string">'password'</span>)</span><br><span class="line">        <span class="keyword">if</span> user == <span class="string">'xiaobai'</span> <span class="keyword">and</span> pwd == <span class="string">'123'</span>:</span><br><span class="line">            <span class="keyword">return</span> redirect(<span class="string">'/home/'</span>)    <span class="comment"># 前面必须加/  ，不然就会和当前路径进行拼接,我们写的是url</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> render(request, <span class="string">'login.html'</span>)</span><br></pre></td></tr></table></figure><p>补充：可能会遇到关于<code>csrf</code> 的问题，打开settings配置，将 <code>MIDDLEWARE</code> 关于 <code>csrf</code> 那条信息注释掉就可以。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">'django.middleware.security.SecurityMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions.middleware.SessionMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.common.CommonMiddleware'</span>,</span><br><span class="line">    <span class="comment">#'django.middleware.csrf.CsrfViewMiddleware',</span></span><br><span class="line">    <span class="string">'django.contrib.auth.middleware.AuthenticationMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages.middleware.MessageMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.clickjacking.XFrameOptionsMiddleware'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="第二部：创建APP"><a href="#第二部：创建APP" class="headerlink" title="第二部：创建APP"></a>第二部：创建APP</h2><p>​ 反思前面所做的，我们把函数写在了 <code>urls.py</code> 内，这个py文件只是用来做对应关系的（哪个url对应哪个函数）。可我们把函数也写在了这里，这样就有些不合适了，所以接下来，我们要把函数放在属于它的地方。</p><p>​ APP把我们写的很多很多功能进行分类，规范写法。</p><h3 id="新建APP，命令行"><a href="#新建APP，命令行" class="headerlink" title="新建APP，命令行"></a>新建APP，命令行</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python36 manage.py startapp app01</span><br></pre></td></tr></table></figure><p>note：因为我的多<code>python</code>共存，我将这个<code>python</code>改名为<code>python36</code>.</p><h3 id="注册APP"><a href="#注册APP" class="headerlink" title="注册APP"></a>注册APP</h3><p>我们还需要在settings配置中注册APP。如果在创建项目的时候创建APP是不需要在进行注册的，在配置中找到下面，并在底部添加 <code>&#39;app01.apps.App01Config&#39;</code>。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line">    <span class="string">'app01.apps.App01Config'</span>,       <span class="comment"># 推荐。创建项目时一并创建app，pycharm就是这样写的</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="转移函数"><a href="#转移函数" class="headerlink" title="转移函数"></a>转移函数</h3><p>APP创建好后，它的目录如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">app01</span><br><span class="line">├── migrations         </span><br><span class="line">├── __init__.py</span><br><span class="line">├── admin.py			<span class="comment"># django admin 对数据库中表进行操作</span></span><br><span class="line">├── apps.py				<span class="comment"># app的信息</span></span><br><span class="line">├── models.py    		<span class="comment"># 模型  model  orm  跟数据库有关，</span></span><br><span class="line">├── tests.py</span><br><span class="line">└── views.py 			<span class="comment"># 写函数</span></span><br></pre></td></tr></table></figure><p>​ 明白了目录结构，那我们接下来的事情就是要将函数放入 <code>views.py</code> 中。那么在 <code>urls.py</code> 只需要做 <code>from app01 import views</code> 导入就行，使用时只是 <code>views.login</code> 。 在后面我会给出完整的 <code>views.py</code> 内容。</p><p>​ 完成了函数部分，那接下来就该对数据库下手了！😄</p><h2 id="第三步：使用数据库"><a href="#第三步：使用数据库" class="headerlink" title="第三步：使用数据库"></a>第三步：使用数据库</h2><p>前面的验证是写死的，真实的数据是存在数据库中的，那我们就首先来配置数据库，然后在使用数据库。</p><h3 id="修改数据库操作模块"><a href="#修改数据库操作模块" class="headerlink" title="修改数据库操作模块"></a>修改数据库操作模块</h3><p>数据库操作模块是python与MySQL沟通的桥梁。这个版本的django配置的数据库操作模块只支持python2，所以需要进行更换，我选择的是<code>pymysql</code>，</p><p>在app01这个包下面的 <code>__init__.py</code> 中写，<code>pymysql</code>模块是需要下载的，如果没有在pycharm的项目解释器（Project Iterpreter）中下载安装。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在settings.py同级下的 __init__ 写入如下内容，更换数据库操作模块</span></span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line">pymysql.install_as_MySQLdb()</span><br></pre></td></tr></table></figure><h3 id="创建一个库并添加用户名和密码"><a href="#创建一个库并添加用户名和密码" class="headerlink" title="创建一个库并添加用户名和密码"></a>创建一个库并添加用户名和密码</h3><p>cmd中登录 mysql 创建一个数据库</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create database userinfo;</span><br></pre></td></tr></table></figure><p>创建好数据库后先暂停，我们需要在python来创建表。</p><h3 id="添加MySQL数据库"><a href="#添加MySQL数据库" class="headerlink" title="添加MySQL数据库"></a>添加MySQL数据库</h3><p>settings中修改 <code>DATABASES</code></p><p>连接数据库，需要如下参数：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.mysql'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">'userinfo'</span>,         <span class="comment"># 数据库名称</span></span><br><span class="line">        <span class="string">'HOST'</span>:<span class="string">'localhost'</span>,			<span class="comment"># 主机名</span></span><br><span class="line">        <span class="string">'PORT'</span>:<span class="string">'3306'</span>,				<span class="comment"># 端口</span></span><br><span class="line">        <span class="string">'USER'</span>:<span class="string">'root'</span>,				<span class="comment"># 登录用户</span></span><br><span class="line">        <span class="string">'PASSWORD'</span>:<span class="string">'xxxx'</span>,			<span class="comment"># 密码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用ORM代替SQL语句"><a href="#使用ORM代替SQL语句" class="headerlink" title="使用ORM代替SQL语句"></a>使用ORM代替SQL语句</h3><p>由于orm（object relation mapping）我们不再需要手写大部分的SQL语句，利用orm来进行操作。一个类就是一张表，一个对象就是一条记录，一个属性就是记录中的一个字段，这样就解决面向对象与关系数据库存在的互不匹配的现象。</p><p><img src="/django/20190626-django_1_1/ORM.png" alt="ORM"></p><p>① 在 <code>app01</code>下的 <code>model.py</code> 中<strong>定义类</strong>，</p><p>CharField为字段名 这里为varchar(32)</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    username = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    password = models.CharField(max_length=<span class="number">32</span>)</span><br></pre></td></tr></table></figure><p>② pycharm下的terminal 输入</p><ul><li><code>python manage.py makemigrations</code> 制作迁移文件，它会将变更的内容生成一个新的文件。</li><li><code>python manage.py migrate</code> 执行迁移， 将会和数据库进行同步，增删改</li></ul><p>note：如果在输入第一个命令是会出现以下提示：</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">django.core.exceptions.ImproperlyConfigured: Error loading MySQLdb module: No module named <span class="string">'MySQLdb'</span>.</span><br><span class="line">Did you install mysqlclient or MySQL-python?</span><br></pre></td></tr></table></figure><p>说明没有切换数据库操作模块，在前面有提及。</p><p>​ 执行上面的两条命令。数据库就多出好多张表，找到我们创建的User，使用Navicat打开这个数据库添加数据，或者使用cmd添加数据，或者是pycharm右侧的database来添加数据。</p><p>​ 我开始使用的是pycharm来做的，由于pycharm版本是2019，在连接数据库的时候出现一个错误</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">Connection <span class="keyword">to</span> @localhost failed.</span><br><span class="line">[08001] Could <span class="keyword">not</span> create<span class="built_in"> connection </span><span class="keyword">to</span> database server. Attempted reconnect 3 times. Giving up.</span><br></pre></td></tr></table></figure><p>解决办法：</p><p>​ emmm….我先是使用的Navicat，后来换成了pycharm2018 ，最后看到了解决办法是在pycharm2019连接MySQL的时候需要选择版本。</p><p>这样用户名密码有了后，我们回到开始的地方。</p><p>③ 使用orm方法，来查询数据库，有两种方法，一个是get方法，但这种方法在这里不合适。所以使用filter方法。</p><ul><li><code>models.User.objects.get(username=user, password=pwd)</code></li><li><code>models.User.objects.filter(username=user, password=pwd)</code></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># print(request.method)</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">'login.html'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        user = request.POST.get(<span class="string">'username'</span>)</span><br><span class="line">        pwd = request.POST.get(<span class="string">'password'</span>)</span><br><span class="line">        <span class="comment"># ret = models.User.objects.get(username=user, password=pwd)</span></span><br><span class="line">        <span class="comment"># get方法如果找到唯一一条记录时，创建一个对象，orm中对象表示一条记录，所以这样对于多条数据，或者查不到的数据是不行</span></span><br><span class="line">        ret = models.User.objects.filter(username=user, password=pwd)</span><br><span class="line">        <span class="comment"># 所以使用filter方法，</span></span><br><span class="line">        <span class="comment">#   当找不到该记录时，返回一个空的对象列表</span></span><br><span class="line">        <span class="comment">#   当找到记录，返回对象列表，如果是多条数据，列表内就放多个对象（一条记录）</span></span><br><span class="line">        print(ret,type(ret))</span><br><span class="line">        <span class="keyword">if</span> ret:</span><br><span class="line">            <span class="keyword">return</span> redirect(<span class="string">'/home/'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> render(request, <span class="string">'login.html'</span>)</span><br></pre></td></tr></table></figure><p>​ 到此，我们完成了一个登录的实例。</p><h1 id="完整代码："><a href="#完整代码：" class="headerlink" title="完整代码："></a>完整代码：</h1><h2 id="app01文件夹下"><a href="#app01文件夹下" class="headerlink" title="app01文件夹下"></a>app01文件夹下</h2><h3 id="init-py"><a href="#init-py" class="headerlink" title="__init__.py"></a><code>__init__.py</code></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># __init__.py</span></span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line">pymysql.install_as_MySQLdb()</span><br></pre></td></tr></table></figure><h3 id="views-py"><a href="#views-py" class="headerlink" title="views.py"></a><code>views.py</code></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render,redirect</span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> models</span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># def login(request):</span></span><br><span class="line"><span class="comment">#     # print(request.method)</span></span><br><span class="line"><span class="comment">#     if request.method == 'GET':</span></span><br><span class="line"><span class="comment">#         return render(request,'login.html')</span></span><br><span class="line"><span class="comment">#     else:</span></span><br><span class="line"><span class="comment">#         print(request.POST)</span></span><br><span class="line"><span class="comment">#         user = request.POST.get('username')</span></span><br><span class="line"><span class="comment">#         pwd = request.POST.get('password')</span></span><br><span class="line"><span class="comment">#         if user == 'xiaobai' and pwd == '123':</span></span><br><span class="line"><span class="comment">#             return redirect('/home/')    # 前面必须加/  ，不然就会和当前路径进行拼接,我们写的是url</span></span><br><span class="line"><span class="comment">#         else:</span></span><br><span class="line"><span class="comment">#             return render(request, 'login.html')</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># print(request.method)</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">'login.html'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(request.POST)</span><br><span class="line">        user = request.POST.get(<span class="string">'username'</span>)</span><br><span class="line">        pwd = request.POST.get(<span class="string">'password'</span>)</span><br><span class="line">        <span class="comment"># ret = models.User.objects.get(username=user, password=pwd)</span></span><br><span class="line">        <span class="comment"># get方法如果找到唯一一条记录时，创建一个对象，orm中对象表示一条记录，所以这样对于多条数据，或者查不到的数据是不行</span></span><br><span class="line">        ret = models.User.objects.filter(username=user, password=pwd)</span><br><span class="line">        <span class="comment"># 所以使用filter方法，</span></span><br><span class="line">        <span class="comment">#   当找不到该记录时，返回一个空的对象列表</span></span><br><span class="line">        <span class="comment">#   当找到记录，返回对象列表，如果是多条数据，列表内就放多个对象（一条记录）</span></span><br><span class="line">        print(ret,type(ret))</span><br><span class="line">        <span class="keyword">if</span> ret:</span><br><span class="line">            <span class="keyword">return</span> redirect(<span class="string">'/home/'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> render(request, <span class="string">'login.html'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'home.html'</span>)</span><br></pre></td></tr></table></figure><h2 id="根目录下的该项目名下"><a href="#根目录下的该项目名下" class="headerlink" title="根目录下的该项目名下"></a>根目录下的该项目名下</h2><h3 id="settings-py"><a href="#settings-py" class="headerlink" title="settings.py"></a>settings.py</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Django settings for Mylogin project.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Generated by 'django-admin startproject' using Django 1.11.23.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">For more information on this file, see</span></span><br><span class="line"><span class="string">https://docs.djangoproject.com/en/1.11/topics/settings/</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">For the full list of settings and their values, see</span></span><br><span class="line"><span class="string">https://docs.djangoproject.com/en/1.11/ref/settings/</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># Build paths inside the project like this: os.path.join(BASE_DIR, ...)</span></span><br><span class="line">BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Quick-start development settings - unsuitable for production</span></span><br><span class="line"><span class="comment"># See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># SECURITY WARNING: keep the secret key used in production secret!</span></span><br><span class="line">SECRET_KEY = <span class="string">'of9#^dq@yw+k6hnbh_vnnz_k%1!(!yg049^gfu2nb!cmhj-%u$'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># SECURITY WARNING: don't run with debug turned on in production!</span></span><br><span class="line">DEBUG = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">ALLOWED_HOSTS = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Application definition</span></span><br><span class="line"></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line">    <span class="string">'app01.apps.App01Config'</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">'django.middleware.security.SecurityMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions.middleware.SessionMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.common.CommonMiddleware'</span>,</span><br><span class="line">    <span class="comment">#'django.middleware.csrf.CsrfViewMiddleware',</span></span><br><span class="line">    <span class="string">'django.contrib.auth.middleware.AuthenticationMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages.middleware.MessageMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.clickjacking.XFrameOptionsMiddleware'</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">ROOT_URLCONF = <span class="string">'Mylogin.urls'</span></span><br><span class="line"></span><br><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">'BACKEND'</span>: <span class="string">'django.template.backends.django.DjangoTemplates'</span>,</span><br><span class="line">        <span class="string">'DIRS'</span>: [os.path.join(BASE_DIR, <span class="string">'templates'</span>)]</span><br><span class="line">        ,</span><br><span class="line">        <span class="string">'APP_DIRS'</span>: <span class="literal">True</span>,</span><br><span class="line">        <span class="string">'OPTIONS'</span>: &#123;</span><br><span class="line">            <span class="string">'context_processors'</span>: [</span><br><span class="line">                <span class="string">'django.template.context_processors.debug'</span>,</span><br><span class="line">                <span class="string">'django.template.context_processors.request'</span>,</span><br><span class="line">                <span class="string">'django.contrib.auth.context_processors.auth'</span>,</span><br><span class="line">                <span class="string">'django.contrib.messages.context_processors.messages'</span>,</span><br><span class="line">            ],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">WSGI_APPLICATION = <span class="string">'Mylogin.wsgi.application'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Database</span></span><br><span class="line"><span class="comment"># https://docs.djangoproject.com/en/1.11/ref/settings/#databases</span></span><br><span class="line"></span><br><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.mysql'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">'Mylogin'</span>,</span><br><span class="line">        <span class="string">'HOST'</span>:<span class="string">'localhost'</span>,</span><br><span class="line">        <span class="string">'PORT'</span>:<span class="string">'3306'</span>,</span><br><span class="line">        <span class="string">'USER'</span>:<span class="string">'root'</span>,</span><br><span class="line">        <span class="string">'PASSWORD'</span>:<span class="string">'2296'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Password validation</span></span><br><span class="line"><span class="comment"># https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators</span></span><br><span class="line"></span><br><span class="line">AUTH_PASSWORD_VALIDATORS = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">'django.contrib.auth.password_validation.MinimumLengthValidator'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">'django.contrib.auth.password_validation.CommonPasswordValidator'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">'django.contrib.auth.password_validation.NumericPasswordValidator'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Internationalization</span></span><br><span class="line"><span class="comment"># https://docs.djangoproject.com/en/1.11/topics/i18n/</span></span><br><span class="line"></span><br><span class="line">LANGUAGE_CODE = <span class="string">'en-us'</span></span><br><span class="line"></span><br><span class="line">TIME_ZONE = <span class="string">'UTC'</span></span><br><span class="line"></span><br><span class="line">USE_I18N = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">USE_L10N = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">USE_TZ = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Static files (CSS, JavaScript, Images)</span></span><br><span class="line"><span class="comment"># https://docs.djangoproject.com/en/1.11/howto/static-files/</span></span><br><span class="line"></span><br><span class="line">STATIC_URL = <span class="string">'/static/'</span></span><br><span class="line">STATICFILES_DIRS = [</span><br><span class="line">    os.path.join(BASE_DIR,<span class="string">'static'</span>)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="urls-py"><a href="#urls-py" class="headerlink" title="urls.py"></a><code>urls.py</code></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""day54作业 URL Configuration</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">The `urlpatterns` list routes URLs to views. For more information please see:</span></span><br><span class="line"><span class="string">    https://docs.djangoproject.com/en/1.11/topics/http/urls/</span></span><br><span class="line"><span class="string">Examples:</span></span><br><span class="line"><span class="string">Function views</span></span><br><span class="line"><span class="string">    1. Add an import:  from my_app import views</span></span><br><span class="line"><span class="string">    2. Add a URL to urlpatterns:  url(r'^$', views.home, name='home')</span></span><br><span class="line"><span class="string">Class-based views</span></span><br><span class="line"><span class="string">    1. Add an import:  from other_app.views import Home</span></span><br><span class="line"><span class="string">    2. Add a URL to urlpatterns:  url(r'^$', Home.as_view(), name='home')</span></span><br><span class="line"><span class="string">Including another URLconf</span></span><br><span class="line"><span class="string">    1. Import the include() function: from django.conf.urls import url, include</span></span><br><span class="line"><span class="string">    2. Add a URL to urlpatterns:  url(r'^blog/', include('blog.urls'))</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^admin/'</span>, admin.site.urls),</span><br><span class="line">    url(<span class="string">r'^login/'</span>, views.login),</span><br><span class="line">    url(<span class="string">r'^home/'</span>, views.home),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>登录页面来自<a href="https://v3.bootcss.com/examples/signin/" target="_blank" rel="noopener">bootstrap</a>，大家直接扒就可以。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>django常用命令：</p><ol><li><p>下载</p><p>pip install django==1.11.23 -i 镜像</p></li><li><p>创建项目</p><p>django-admin startproject 项目名</p></li><li><p>启动项目</p><p>cd 到项目的根目录</p><p>python manage.py runserver</p><p>python manage.py runserver 80</p><p>python manage.py runserver 0.0.0.0:80</p></li><li><p>创建app</p><p>python manage.py startapp app名</p><p>注册app</p></li><li><p>数据库迁移</p><p>python manage.py makemigrations 将测已经注册app下的models</p><p>python manage.py migrate 迁移，将models的变更记录同步到数据库</p></li></ol>]]></content>
      <categories>
        <category>django</category>
      </categories>
      <tags>
        <tag>django</tag>
        <tag>学习笔记</tag>
        <tag>Web前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Django概述</title>
    <url>/django/20190625-django_1.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>本篇介绍服务器程序与应用程序之间的联系以及Django的安装与简单使用。</p></blockquote><a id="more"></a><hr><p>通过这篇文章，你能了解到：</p><ul><li>Web服务器程序、Web应用程序、框架、WSGI以及它们之间的联系。</li><li>Django的安装与简单使用。</li></ul><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>在<a href="https://chennq.com/Web%E5%89%8D%E7%AB%AF/20190609-Web_1.html">Web前端-概述</a> 中，我们完成一个自定义Web框架（服务端），它是由三部分构成的：</p><ol><li>使用socket收发消息</li><li>根据不同的路径返回不同的内容</li><li>返回动态的数据（字符串的替换 —&gt; 模板的渲染）（模板：html 渲染：字符串替换 ）</li></ol><h1 id="服务器程序与应用程序"><a href="#服务器程序与应用程序" class="headerlink" title="服务器程序与应用程序"></a>服务器程序与应用程序</h1><ul><li>web服务器程序： 接收HTTP请求并返回数据（概述中的第1部分）</li><li>web应用程序：针对业务，对接收的数据处理并返回 （概述中的第2，3部分）</li><li>web框架：方便开发Web应用程序</li><li>WSGI：是一种通信协议,它只适用于 Python 语言，其全称为 Web Server Gateway Interface。它要完成的作用是定义 Python 应用程序要如何与apache/lighttpd/nginx 等之类的 WEB 服务器之间进行通信和交换信息。</li></ul><p>预览：</p><ul><li><p>wsgiref/WSGI ： （概述中的第1部分）</p></li><li><p>django：（概述中的第2，3部分）、大而全（本身都写好了）</p></li><li><p>flask：（概述中的第2部分）、 需要加 jinjia2、轻量级（本身少需要第三方模块）</p></li><li><p>tornado：（概述中的第1，2，3部分）、特点：异步非阻塞、轻量级（本身少需要第三方模块）</p></li></ul><h2 id="WSGI"><a href="#WSGI" class="headerlink" title="WSGI"></a>WSGI</h2><h3 id="WSGI-规范"><a href="#WSGI-规范" class="headerlink" title="WSGI 规范"></a>WSGI 规范</h3><p>​ <strong>Web服务网关接口</strong>（Web Server Gateway Interface，简称“WSGI”）是一种在Web服务器 和Python Web应用程序或框架之间的标准接口。通过标准化Web服务器和Python web应用程序 或框架之间的行为和通信，WSGI使得编写可移植的的Python web代码变为可能，使其能够部署在任何符合WSGI的web服务器上。</p><p>​ 但规范不是实际可以直接拿来用的东西。 <strong>flup</strong> 就是使用 Python 语言对 WSGI 的一种实现，是可以用于 Python 应用开发中的一种工具或者说是一种库。</p><p><img src="/django/20190625-django_1/web%E6%9C%8D%E5%8A%A1%E5%99%A8%E3%80%81web%E5%BA%94%E7%94%A8%E4%B8%8EWSGI.png" alt="web服务器、web应用与WSGI"></p><p>​ 这样就可以根据你的需要搭配不同的web框架和web服务器了。可以使用Django、Flask或者Pyramid等等。</p><p><img src="/django/20190625-django_1/%E6%B7%B7%E6%90%AD.png" alt="混搭"></p><p>图片来自 <a href="http://zkeeer.space/?p=212" target="_blank" rel="noopener">【翻译】一步步开发一个Web服务器.Part 2.</a></p><p>WSGIweb服务器针对一个WSGI应用：</p><ol><li><p>服务器启动并且加载一个web应用/web框架提供的‘application’可调用对象。</p></li><li><p>服务器读取一个请求</p></li><li><p>服务器解析这个请求</p></li><li><p>服务器根据请求的数据创建一个‘environ’的字典</p></li><li><p>调用可调用对象‘application’，使用‘environ’字典和可调用对象‘start_response’作为参数，得到一个响应主体。</p></li><li><p>使用可调用对象‘application’返回的数据、状态码、可调用对象‘start_response’设置的响应头部。</p></li><li><p>最后服务器把这个HTTP响应发送回客户端。</p></li></ol><p>environ 与 request对象的区别：</p><ul><li>通常没人愿意直接使用 environ 因为它对字节串是有限制的，而且不提供访问表单数据的方法除非手动解析数据。</li><li><code>Request</code> 对象封装 environ 并提供只读的方法访问数据</li></ul><h2 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h2><p>广义地说，Web框架包含一系列库和一个主要的处理器（handler），这样您就能够构建自己的代码来实现Web应用 （比如说一个交互式的网站）。大多数web框架包含模式和工具，至少实现以下功能：</p><ul><li><p><strong>URL路由</strong>（URL Routing）</p><p>将输入的HTTP请求匹配到特定的Python代码用来调用</p></li><li><p><strong>请求和响应对象</strong>（Request and Response Objects）</p><p>封装来自或发送给用户浏览器的信息</p></li><li><p><strong>模板引擎</strong>（Template Engine）</p><p>能够将实现应用的Python代码逻辑和其要产生输出的HTML（或其他）分离开</p></li><li><p><strong>Web服务器开发</strong>（Development Web Server）</p><p>在开发机上运行HTTP服务器，从而快速开发；当文件更新时自动更新服务端代码。</p></li></ul><h3 id="Django"><a href="#Django" class="headerlink" title="Django"></a>Django</h3><blockquote><p><a href="https://www.djangoproject.com/" target="_blank" rel="noopener">Django</a> 是一个<strong>功能齐备</strong>的<strong>web应用框架</strong>。它是创建面向内容网站的极佳选择。 通过提供众多工具和模式，Django使得快速构建复杂的、有数据库支持的web应用成为可能， 同时鼓励使用它作为编写代码的最佳实践。</p><p>Django 加快了 Web 应用程序的编写，并且大大减少了所需的代码，从而使维护应用程序更加容易。Django 严格遵循 <strong>Don’t Repeat Yourself (DRY) 原则</strong>，因此每个不同的代码片段或数据仅在一个位置上出现。这意味着需要进行更改时，只修改一个地方就行，从而使更改软件更快、更轻松。</p></blockquote><p>Django拥有非常庞大和活跃的社区。此外，许多预构建的 <a href="https://djangopackages.com/" target="_blank" rel="noopener">可重用模块</a> 可以原样合并到新工程中，或者定制成符合需求的样子。</p><h3 id="Flask"><a href="#Flask" class="headerlink" title="Flask"></a>Flask</h3><blockquote><p><a href="http://flask.pocoo.org/" target="_blank" rel="noopener">Flask</a> 是一款针对Python的“<strong>微型框架</strong>”，它是构建更小应用、API和web服务的极佳选择。 使用Flask构建应用，除了一些函数附上路由，它和写标准Python模块很相似。它真的很赞。</p><p>Flask不会提供一切您可能需要的内容，而是实现了web应用框架中最常用的核心组件，比如说URL路由、请求和响应对象和模板等。</p></blockquote><p>作为Flask的用户，由您来决定选择和集成其他您可能用到的<strong>组件</strong>。比如说数据库访问或者表单生成和验证就不是Flask内置的功能。</p><p>这挺好的，因为很多web应用并不需要这些特性。 对于那些需要的，有许多可用的 <a href="http://flask.pocoo.org/extensions/" target="_blank" rel="noopener">扩展</a>或许符合您的需求。</p><p>Flask是任何不适用Django的Python web应用的默认选择。</p><h3 id="Falcon"><a href="#Falcon" class="headerlink" title="Falcon"></a>Falcon</h3><blockquote><p>当您的目标是构建快速、可扩展的REST风格API微服务时， <a href="https://falconframework.org/" target="_blank" rel="noopener">Falcon</a> 是个不错的选择。</p><p>这是一个可靠的、高性能的Python Web框架，用于构建大规模应用后端和微服务。Falcon鼓励REST架构风格的 URI到资源的映射，以花费尽可能少的精力同时又保持高效。</p></blockquote><p>Falcon重点关注四个方面：速度、可靠性、灵活性和可调试性。它通过”响应者（responder）” （诸如 <code>on_get()</code>、 <code>on_put()</code> 等）来实现HTTP。这些响应者接收直接的请求，以及响应对象。</p><h3 id="Tornado"><a href="#Tornado" class="headerlink" title="Tornado"></a>Tornado</h3><blockquote><p><a href="http://www.tornadoweb.org/" target="_blank" rel="noopener">Tornado</a> 是一个面向Python的异步web框架，它有自己的事件。 这就使得它，举个例子，可以原生地支持WebSockets。编写良好的Tornado应用具有卓越的性能特性。</p></blockquote><h3 id="Pyramid"><a href="#Pyramid" class="headerlink" title="Pyramid"></a>Pyramid</h3><blockquote><p><a href="https://trypyramid.com/" target="_blank" rel="noopener">Pyramid</a> 是一个非常灵活的框架，重点关注模块化。 它内置少量库（“电池”）， 并鼓励用户扩展其基本功能。它提供一组cookiecutter模板，帮助用户生成新项目。Pyramid驱动了Python基础架构中 最重要部分之一—— <a href="https://pypi.org/" target="_blank" rel="noopener">PyPI</a>。</p></blockquote><p>Pyramid不像Django和Flask，并没有庞大的用户基数。它一个有能力的框架，但如今新Python web 应用程序 并没有十分青睐它。</p><h3 id="Masonite"><a href="#Masonite" class="headerlink" title="Masonite"></a>Masonite</h3><blockquote><p><a href="https://docs.masoniteproject.com/" target="_blank" rel="noopener">Masonite</a> 是一个现代的，以开发人员为中心的“功能齐备”的网络框架。</p><p>Masonite 框架遵循 MVC（Model-View-Controller，模型-视图-控制器）架构模式，受到 Rails 和 Laravel 等框架的极大启发， 因此如果您是从 Ruby 或 PHP 背景来到 Python，那么您将感到宾至如归！</p><p>Masonite 提供了许多开箱即用的功能，包括一个功能强大的具有自动解析依赖注入IOC容器、craft 命令行工具和 Active Record 模式的 Orator ORM。</p></blockquote><p>Masonite 非常适合初学者或经验丰富的开发人员。从安装到部署都相当快速和容易。只需尝试一次，你就会爱上它。</p><h2 id="Web-服务端"><a href="#Web-服务端" class="headerlink" title="Web 服务端"></a>Web 服务端</h2><h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><p><a href="http://nginx.org/" target="_blank" rel="noopener">Nginx</a> （发音为 “engine-x”）是一个web服务器，并是HTTP、SMTP和其他协议的反向代理。 它由其高性能、相对简洁以及对众多应用服务器（比如WSGI服务器）兼容而著名。它也拥有便利的特性， 比如负载均衡、基本的认证、流等。Nginx被设计为承载高负载的网站，并逐渐变得广为流行。</p><h2 id="WSGI-服务器"><a href="#WSGI-服务器" class="headerlink" title="WSGI 服务器"></a>WSGI 服务器</h2><p>独立WSGI服务器相比传统web服务器，使用更少的资源，并提供最高的性能。</p><h3 id="Gunicorn"><a href="#Gunicorn" class="headerlink" title="Gunicorn"></a>Gunicorn</h3><blockquote><p><a href="https://gunicorn.org/" target="_blank" rel="noopener">Gunicorn</a> （Green Unicorn，绿色独角兽）是一个纯Python WSGI服务器， 用来支持Python应用。不像其他Python web服务器，它有周全的用户界面，十分易于使用和配置。</p><p>Gunicorn具有合理的默认配置。 然而，其他一些像uWSGI这样的服务器相较而言过于可定制化，因此更加难以高效使用。</p></blockquote><p>Gunicorn是如今新Python web应用程序的推荐选择。</p><h3 id="Waitress"><a href="#Waitress" class="headerlink" title="Waitress"></a>Waitress</h3><blockquote><p><a href="https://waitress.readthedocs.io/" target="_blank" rel="noopener">Waitress</a> 是一个纯Python WSGI服务器，声称具备“非常可接受的性能”。 它的文档不是很详细，但它确实提供了一些很好的而Gunicorn没有的功能（例如HTTP请求缓冲）。</p></blockquote><p>Waitress在Python Web开发社区中越来越受欢迎。</p><h3 id="uWSGI"><a href="#uWSGI" class="headerlink" title="uWSGI"></a>uWSGI</h3><blockquote><p><a href="https://uwsgi-docs.readthedocs.io/" target="_blank" rel="noopener">uWSGI</a> 用来构建全栈式的主机服务。除了进程管理、进程监控和其他功能外， uWSGI也能作为一个应用服务器，适用于多种编程语言和协议 - 包括Python和WSIG。 uWSGI既能当作独立的web路由器来运行，也能运行在一个完整web服务器（比如Nginx或Apache）之后。 对于后者，web服务器可以基于 <a href="https://uwsgi-docs.readthedocs.io/en/latest/Protocol.html" target="_blank" rel="noopener">uwsgi 协议</a> 配置uWSGI和应用的操作。uWSGI的web服务器支持允许动态配置Python、传递环境变量以及进一步优化。 要看更多细节，请看 <a href="https://uwsgi-docs.readthedocs.io/en/latest/Vars.html" target="_blank" rel="noopener">uWSGI 魔法变量</a>。</p></blockquote><h2 id="服务端最佳实践"><a href="#服务端最佳实践" class="headerlink" title="服务端最佳实践"></a>服务端最佳实践</h2><p>如今，自承载Python应用的主体托管于WSGI服务器（比如说 <a href="https://pythonguidecn.readthedocs.io/zh/latest/scenarios/web.html#gunicorn-ref" target="_blank" rel="noopener">Gunicorn</a>） 或是直接或间接在轻量级web服务器（比如说 <a href="https://pythonguidecn.readthedocs.io/zh/latest/scenarios/web.html#nginx-ref" target="_blank" rel="noopener">nginx</a>）之后。</p><p>WSGI服务器为Python应用服务，它能更好的处理诸如静态文件服务、请求路由、DDoS保护和基本认证的任务。</p><p>对于静态的这些不需要向后传递，它自己就可以解决。</p><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><p>多数WSGI应用响应HTTP请求，从而服务于HTML或其他标记语言中的内容。<strong>关注点分离</strong>的概念建议我们使用模板， 而不是直接由Python生成文本内容。模板引擎管理一系列的模板文件，其系统的层次性和包容性避免了不必要的重复。 模板引擎负责渲染（产生）实际内容，用由应用生成的动态内容填充静态内容。</p><p>由于模板文件有时是由设计师或者前端开发者编写，处理不断增长的复杂度会变得困难。</p><p>一些通用的良好实践应用到了部分应用中，情景包括传递动态内容到模板引擎和模板自身中。</p><ul><li>模板文件只应传递需要渲染的动态内容。避免传递附加的“以防万一”的内容： 需要时添加遗漏的变量比移除可能不用的变量要来的容易。</li><li>许多模板引擎允许在模板中编写复杂语句或者赋值，也有许多允许一些Python代码 在模板中等价编写。这种便利会导致复杂度不可控地增加，也使得查找bug变得更加困难。</li><li>我们常常需要混合JavaScript模板和HTML模板。一种聪明的做法是孤立出HTML 模板传递部分变量内容到JavaScript代码中的部分。</li></ul><h3 id="Jinja2"><a href="#Jinja2" class="headerlink" title="Jinja2"></a>Jinja2</h3><p><a href="http://jinja.pocoo.org/" target="_blank" rel="noopener">Jinja2</a> 是一个很受欢迎的<strong>模板引擎</strong>。</p><p>它使用基于文本的模板语言，因此可以用于生成任何类型的标记，而不仅仅是HTML。 它允许自定义过滤器，标签，测试和全局变量。 它具有Django模板系统的许多改进。</p><p>这里有一些在Jinja2中重要的HTML标签：</p><figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"></span><span class="comment">&#123;# 这是注释 #&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span><span class="comment">&#123;# 下一个标签是输出变量： #&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"></span><span class="template-variable">&#123;&#123;title&#125;&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span><span class="comment">&#123;# 区块标签，能通过继承其他html代码来替换区块内容 #&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> head %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>This is the head!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">endblock</span></span> %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span><span class="comment">&#123;# 数组迭代输出 #&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> item <span class="keyword">in</span> list %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><span class="template-variable">&#123;&#123; item &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">endfor</span></span> %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure><h3 id="Chameleon"><a href="#Chameleon" class="headerlink" title="Chameleon"></a>Chameleon</h3><blockquote><p><a href="https://chameleon.readthedocs.io/" target="_blank" rel="noopener">Chameleon</a> 页面模板是使用 <a href="https://en.wikipedia.org/wiki/Template_Attribute_Language" target="_blank" rel="noopener">模板属性语言（Template Attribute Language, TAL）</a>、<a href="https://chameleon.readthedocs.io/en/latest/reference.html#expressions-tales" target="_blank" rel="noopener">TAL表达语法（TAL Expression Syntax,TALES）</a> 和 <a href="https://chameleon.readthedocs.io/en/latest/reference.html#macros-metal" target="_blank" rel="noopener">宏扩展TAL（Macro Expansion TAL, Metal）</a> 语法的HTML/XML模板引擎实现。</p><p>Chameleon在Python2.5及以上版本（包括3.x和PyPy）都是可用的，并常被 <a href="https://trypyramid.com/" target="_blank" rel="noopener">Pyramid Framework</a> 使用。</p></blockquote><p>页面模板是在文档结构中添加特定元素属性和文本标记。使用一系列简单语言概念，您能够控制文档流程、元素重复、文本替换和翻译。 由于使用了基于属性的语法，未渲染的页面模板是合法的HTML，它可以在浏览器中查看，甚至能够在WYSIWYG编辑器中编辑。 这使得设计者和原型构建者之间在浏览器是中静态文件上的往复合作变得更加简单。</p><h3 id="Mako"><a href="#Mako" class="headerlink" title="Mako"></a>Mako</h3><p><a href="http://www.makotemplates.org/" target="_blank" rel="noopener">Mako</a> 是一种模板语言，为了最大的性能，它编译为了Python。 它的语法和API借鉴了其他模板语言，如Django和Jinja2中最好的部分。它 是包括 <a href="http://www.pylonsproject.org/" target="_blank" rel="noopener">Pylons 和 Pyramid</a> 在内的web框架所使用的默认模板语言。</p><p>Mako在Python web社区中受到重视。</p><p>推荐阅读 <a href="https://pythonguidecn.readthedocs.io/zh/latest/scenarios/web.html#id29" target="_blank" rel="noopener">Web 应用 &amp; 框架</a></p><h1 id="Django框架"><a href="#Django框架" class="headerlink" title="Django框架"></a>Django框架</h1><h2 id="MVC与MTV"><a href="#MVC与MTV" class="headerlink" title="MVC与MTV"></a>MVC与MTV</h2><p>Django 的架构松散地基于模型-视图-控制器（Model-View-Controller，MVC）模式。在该模式中，应用程序逻辑、用户界面（UI）和数据访问层是分开的，从而允许在不影响到其他层的情况下独立地修改各个层。</p><p><img src="/django/20190625-django_1/MVC.png" alt="MVC"></p><p>MVC ：</p><ul><li>M： model 模型 操作数据库</li><li>V ： view 视图 <strong>展示</strong>页面 ， HTML</li><li>C：controller 控制器 调度 业务逻辑</li></ul><p>​ 不过，根据 Django 文档的描述，Django 采用的是类似的模式：<em>模型-模板-视图（Model-Template-View，MTV）</em>架构。</p><p><img src="/django/20190625-django_1/MTV.png" alt="MTV"></p><p><img src="/django/20190625-django_1/MVC.png" alt="MVC"></p><p>Model(模型)</p><p>​ 负责业务对象与数据库的对象(ORM) 。模型可以看作数据访问层，应用程序在这里与其他数据库和信息源交互。</p><p>Template(模版)</p><p>​ 负责如何把页面展示给用户 。<strong>模板层</strong>定义向用户显示数据的方式，这相当于 <u>MVC 模式中的视图层</u>。</p><p>View(视图)</p><p>​ 在 MTV 架构中，视图层描述应该向用户显示哪些数据。它不定义数据的显示方式；它将这个任务交给模板层处理。</p><p>​ 负责业务逻辑，并在适当的时候调用Model和Template。</p><p>MTV：</p><ul><li>M：model 模型 操作数据库 orm</li><li>T： template 模板 HTML</li><li>V： view 视图 负责业务逻辑</li></ul><p>C = V(views.py) + urls.py</p><p>对于 <u>MVC 的控制器层</u>，Django 将它看作<strong>框架本身</strong>，因为它决定向其发送请求的视图（像在 URL 配置中定义的那样）。</p><p>除了模型、模板和视图层之外，Django 还提供一些高级的开箱即用的特性，比如 URL 配置、自动管理界面和缓存等。例如：urls分发器，它的作用是将一个个URL的页面请求分发给不同的view处理，view再调用相应的Model和Template。</p><p>像 Python 一样，Django 背后的关键思想之一就是 “大批包含”，这意味着它自带了大量由其他包组成的标准库，您可以在应用程序中直接使用，而不需另外下载。</p><h1 id="Django的安装与简单使用"><a href="#Django的安装与简单使用" class="headerlink" title="Django的安装与简单使用"></a>Django的安装与简单使用</h1><h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><h3 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">pip install Django==<span class="number">1.11</span><span class="number">.23</span> -i https:<span class="comment">//pypi.tuna.tsinghua.edu.cn/simple/</span></span><br></pre></td></tr></table></figure><p>如果同时安装了python2和python3的情况，可以参考如下方法，使用指定版本的python的pip安装</p><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">python2 -m pip <span class="keyword">install</span> xxx</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">python3 -m pip <span class="keyword">install</span> xxx</span><br></pre></td></tr></table></figure><h3 id="pycharm"><a href="#pycharm" class="headerlink" title="pycharm"></a>pycharm</h3><p>在<code>setting</code>，<code>Project Interpreter</code> 中，右侧点<code>加号</code>，搜索<code>django</code>，勾选<code>Specify version</code> 选择<code>1.11.23</code>后点击<code>install</code>。</p><p>换源加快速度：在下面<code>Manage Repositories</code>中添加源。</p><p>下面有源可以添加上面的源</p><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><h3 id="命令行-1"><a href="#命令行-1" class="headerlink" title="命令行"></a>命令行</h3><p>一个python环境下：<code>django-admin startproject 项目名</code></p><p>多个python环境：<code>python36 -m django startproject 项目名</code></p><figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">我自己的路径C:<span class="symbol">\U</span>sers<span class="symbol">\A</span>TLAS<span class="symbol">\A</span>ppData<span class="symbol">\L</span>ocal<span class="symbol">\P</span>rograms<span class="symbol">\P</span>ython<span class="symbol">\P</span>ython36\</span><br></pre></td></tr></table></figure><h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4><p>创建好项目后，它的目录结构如下</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">mysite/    </span><br><span class="line">	manage<span class="selector-class">.py</span>    </span><br><span class="line">	mysite/        </span><br><span class="line">		__init__<span class="selector-class">.py</span>        </span><br><span class="line">		settings<span class="selector-class">.py</span>        </span><br><span class="line">		urls<span class="selector-class">.py</span>        </span><br><span class="line">		wsgi.py</span><br></pre></td></tr></table></figure><p>这些目录和文件的用处是：</p><ul><li>最外层的 <code>mysite</code> 是你的根目录也是项目名。</li><li><code>manage.py</code>: 一个让你用各种方式<strong>管理</strong> Django 项目的<strong>命令行工具</strong>。</li><li>里面一层的 <code>mysite/</code> 目录包含你的项目，它是一个纯 Python 包。它的名字就是当你引用它内部任何东西时需要用到的 Python 包名。 (比如 <code>mysite.urls</code>).</li><li><code>mysite/__init__.py</code>：一个空文件，告诉 Python 这个目录应该被认为是一个 <strong>Python 包</strong>。</li><li><code>mysite/settings.py</code>：Django 项目的<strong>配置文件</strong>。</li><li><code>mysite/urls.py</code>：Django 项目的 URL 声明，就像你网站的“目录”。</li><li><code>mysite/wsgi.py</code>：作为你的项目的运行在 WSGI 兼容的Web服务器上的入口。</li></ul><h3 id="pycharm-1"><a href="#pycharm-1" class="headerlink" title="pycharm"></a>pycharm</h3><p>专业版才有这些功能。</p><p><code>file</code> -&gt; <code>new project</code> -&gt; <code>django</code> -&gt; 项目路径 解释器选已有的（如果是新的虚拟环境会下载最新的django）</p><p>创建好项目后，它的目录结构如下：</p><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">mysite/	    </span><br><span class="line">	manage.py    </span><br><span class="line">	.idea/    	</span><br><span class="line">		<span class="comment"># pycharm优化所作的,包含各种配置    	</span></span><br><span class="line">		dataSources.load.<span class="keyword">xml</span>    	<span class="title"></span></span><br><span class="line"><span class="title">		dataSources</span>.<span class="keyword">xml</span>    	<span class="title"></span></span><br><span class="line"><span class="title">		mysite</span>.iml    	</span><br><span class="line">		misc.<span class="keyword">xml</span>    	<span class="title"></span></span><br><span class="line"><span class="title">		modules</span>.<span class="keyword">xml</span>    	<span class="title"></span></span><br><span class="line"><span class="title">		workspace</span>.<span class="keyword">xml</span>   		<span class="title"></span></span><br><span class="line"><span class="title">		templates</span>/		</span><br><span class="line">			<span class="comment"># 存放HTML页面   </span></span><br><span class="line">	mysite/        </span><br><span class="line">		__init__.py        </span><br><span class="line">		settings.py        </span><br><span class="line">		urls.py        </span><br><span class="line">		wsgi.py</span><br></pre></td></tr></table></figure><h2 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h2><h3 id="命令行-2"><a href="#命令行-2" class="headerlink" title="命令行"></a>命令行</h3><p>①默认是8000端口</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python36 manage.py runserver     <span class="comment"># 127.0.0.1:8000</span></span><br></pre></td></tr></table></figure><p>②加上端口号</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python36 manage.py runserver <span class="number">80</span> 访问时就不用加端口号了</span><br></pre></td></tr></table></figure><p>③改ip地址</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python36 manage.py runserver <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">80</span></span><br></pre></td></tr></table></figure><p>④让人去访问，修改settings.py</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">allowed_hosts = [<span class="string">'*'</span>]</span><br></pre></td></tr></table></figure><h3 id="pycharm-2"><a href="#pycharm-2" class="headerlink" title="pycharm"></a>pycharm</h3><p>note: 打开别人的项目<code>.idea</code>要干掉，这里包含了别人的配置，会影响。</p><p>选择项目（dj图标） 点击 <code>绿三角</code> 启动， 不要右键运行文件</p><p>绿三角下面 <code>edit configure</code> 中 改ip和端口</p><h2 id="创建APP"><a href="#创建APP" class="headerlink" title="创建APP"></a>创建APP</h2><p>通常我们的业务逻辑是要放在APP中的，在views中写视图函数，在models中定义模型类。</p><p>App的目录结构</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">app01</span><br><span class="line">├── migrations         </span><br><span class="line">├── __init__.py</span><br><span class="line">├── admin.py			<span class="comment"># django admin 对数据库中表进行操作</span></span><br><span class="line">├── apps.py			 <span class="comment"># app的信息</span></span><br><span class="line">├── models.py    		<span class="comment"># 模型  model  orm  跟数据库有关，</span></span><br><span class="line">├── tests.py</span><br><span class="line">└── views.py 			<span class="comment"># 写函数</span></span><br></pre></td></tr></table></figure><h3 id="命令行-3"><a href="#命令行-3" class="headerlink" title="命令行"></a>命令行</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python36 manage.py startapp app01</span><br></pre></td></tr></table></figure><p>note：因为我的多<code>python</code>共存，我将这个<code>python</code>改名为<code>python36</code>.</p><h3 id="pycharm-3"><a href="#pycharm-3" class="headerlink" title="pycharm"></a>pycharm</h3><p>只有在创建的时候可以输入一个Application的名字。</p><h2 id="注册app"><a href="#注册app" class="headerlink" title="注册app"></a>注册app</h2><p>光创建是不行的，我们还需要在settings配置中注册APP。如果在创建项目的时候创建APP是不需要在进行注册的，在配置中找到下面，并在底部添加 <code>&#39;app01.apps.App01Config&#39;</code>。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS = [    </span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,    </span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,    </span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,    </span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,    </span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,    </span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,    </span><br><span class="line">    <span class="string">'app01.apps.App01Config'</span>,       <span class="comment"># 推荐。创建项目时一并创建app，pycharm就是这样写的</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="使用MySQL数据库"><a href="#使用MySQL数据库" class="headerlink" title="使用MySQL数据库"></a>使用MySQL数据库</h2><h3 id="修改数据库操作模块"><a href="#修改数据库操作模块" class="headerlink" title="修改数据库操作模块"></a>修改数据库操作模块</h3><p>数据库操作模块是python与MySQL沟通的桥梁。这个版本的django配置的数据库操作模块只支持python2，所以需要进行更换，我选择的是<code>pymysql</code>，</p><p>在app01这个包下面的 <code>__init__.py</code> 中写，<code>pymysql</code>模块是需要下载的，如果没有在pycharm的项目解释器（Project Iterpreter）中下载安装。</p><figure class="highlight elm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysqlpymysql.install_as_MySQLdb()</span><br></pre></td></tr></table></figure><h3 id="添加MySQL数据库"><a href="#添加MySQL数据库" class="headerlink" title="添加MySQL数据库"></a>添加MySQL数据库</h3><p>settings中修改 <code>DATABASES</code></p><p>连接数据库，需要如下参数：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DATABASES = &#123;    </span><br><span class="line">    <span class="string">'default'</span>: &#123;        </span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.mysql'</span>,        </span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">'userinfo'</span>,         <span class="comment"># 数据库名称        </span></span><br><span class="line">        <span class="string">'HOST'</span>:<span class="string">'localhost'</span>,			<span class="comment"># 主机名        </span></span><br><span class="line">        <span class="string">'PORT'</span>:<span class="string">'3306'</span>,				<span class="comment"># 端口        </span></span><br><span class="line">        <span class="string">'USER'</span>:<span class="string">'root'</span>,				<span class="comment"># 登录用户        </span></span><br><span class="line">        <span class="string">'PASSWORD'</span>:<span class="string">'xxxx'</span>,			<span class="comment"># 密码    </span></span><br><span class="line">    &#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="数据库迁移"><a href="#数据库迁移" class="headerlink" title="数据库迁移"></a>数据库迁移</h3><p>当我们在models.py中定义好模型类的时候就可以执行数据库迁移命令</p><p>① 将检测已经注册app下的models变更进行记录（将orm语句装成SQL语句）</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">python manage<span class="selector-class">.py</span> makemigrations</span><br></pre></td></tr></table></figure><p>②将models的变更记录同步到数据库</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">python manage<span class="selector-class">.py</span> migrate</span><br></pre></td></tr></table></figure><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><ul><li><p>对于概念只需做一个了解，实际中练的多了在回顾会有更深的体会。</p></li><li><p>django只是一个工具，对于掌握这个工具最佳的方法是边使用边看说明书（先学到够用的程度，把东西做出来在继续）。</p></li></ul><p>下一篇为 <a href="https://chennq.com/django/20190627-django_2.html">Django图书管理系统</a>，在这里我将一步一步完整的构建一个简单的例子来描述django的整个流程。</p>]]></content>
      <categories>
        <category>django</category>
      </categories>
      <tags>
        <tag>django</tag>
        <tag>学习笔记</tag>
        <tag>Web前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Django学习目录</title>
    <url>/django/20190625-django_0.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>Django学习目录</p></blockquote><a id="more"></a><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a><a href="https://atlasnq.github.io/django/20190625-django_1.html" target="_blank" rel="noopener">概述</a></h2><hr><h2 id="实例-图书管理系统"><a href="#实例-图书管理系统" class="headerlink" title="实例 图书管理系统"></a><a href="https://atlasnq.github.io/django/20190627-django_2.html" target="_blank" rel="noopener">实例 图书管理系统</a></h2><hr><h2 id="Template"><a href="#Template" class="headerlink" title="Template"></a><a href="https://atlasnq.github.io/django/20190701-django_3.html" target="_blank" rel="noopener">Template</a></h2><ul><li>模板包含HTML输出的静态部分以及描述如何插入动态内容的一些特殊语法。</li></ul><hr><h2 id="图书管理系统的优化"><a href="#图书管理系统的优化" class="headerlink" title="图书管理系统的优化"></a><a href="https://atlasnq.github.io/django/20190703-django_4.html" target="_blank" rel="noopener">图书管理系统的优化</a></h2><hr><h2 id="View"><a href="#View" class="headerlink" title="View"></a><a href="https://atlasnq.github.io/django/20190704-django_5.html" target="_blank" rel="noopener">View</a></h2><ul><li>view是一个python函数，它接受一个HttpRequest并且返回一个HttpResponse。</li></ul><h2 id="Request与Response"><a href="#Request与Response" class="headerlink" title="Request与Response"></a><a href="https://chennq.com/django/20190704-django_5_1.html">Request与Response</a></h2><ul><li><p>在系统内部Django使用request和response对象来进行状态的传递。</p></li><li><p>使用 <a href="https://chennq.com/django/20190719-django_14_QueryDict.html">QueryDict</a> 来对url进行编码</p></li></ul><hr><h2 id="Url"><a href="#Url" class="headerlink" title="Url"></a><a href="https://atlasnq.github.io/django/20190705-django_6_url.html" target="_blank" rel="noopener">Url</a></h2><hr><h2 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a><a href="https://atlasnq.github.io/django/20190707-django_7_orm.html" target="_blank" rel="noopener">ORM</a></h2><hr><h2 id="Cookie与Session"><a href="#Cookie与Session" class="headerlink" title="Cookie与Session"></a><a href="https://atlasnq.github.io/django/20190709-django_8_cookie_session.html" target="_blank" rel="noopener">Cookie与Session</a></h2><hr><h2 id="Middleware"><a href="#Middleware" class="headerlink" title="Middleware"></a><a href="https://atlasnq.github.io/django/20190710-django_9_middleware.html" target="_blank" rel="noopener">Middleware</a></h2><h3 id="csrf"><a href="#csrf" class="headerlink" title="csrf"></a><a href="https://atlasnq.github.io/django/20190712-django_10_csrf.html" target="_blank" rel="noopener">csrf</a></h3><hr><h2 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a><a href="https://atlasnq.github.io/django/20190713-django_11_ajax.html" target="_blank" rel="noopener">Ajax</a></h2><hr><h2 id="form"><a href="#form" class="headerlink" title="form"></a><a href="https://atlasnq.github.io/django/20190715-django_12_form.html" target="_blank" rel="noopener">form</a></h2><h2 id="ModelForm"><a href="#ModelForm" class="headerlink" title="ModelForm"></a><a href="https://chennq.com/django/20190718-django_13_ModelForm.html">ModelForm</a></h2><hr><h2 id="常用功能"><a href="#常用功能" class="headerlink" title="常用功能"></a>常用功能</h2><h3 id="分页"><a href="#分页" class="headerlink" title="分页"></a><a href="https://chennq.com/django/20190717-django_13_Paginator.html#more">分页</a></h3>]]></content>
      <categories>
        <category>django</category>
      </categories>
      <tags>
        <tag>django</tag>
        <tag>学习笔记</tag>
        <tag>Web前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Pytorch-索引与切片</title>
    <url>/Pytorch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20190625-learning_PyTorch_3_index_slice.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>本篇介绍Pytorch 的索引与切片。</p></blockquote><a id="more"></a><h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In[<span class="number">3</span>]: a = torch.rand(<span class="number">4</span>,<span class="number">3</span>,<span class="number">28</span>,<span class="number">28</span>)</span><br><span class="line">In[<span class="number">4</span>]: a[<span class="number">0</span>].shape       <span class="comment"># 理解上相当于取第一张图片</span></span><br><span class="line">Out[<span class="number">4</span>]: torch.Size([<span class="number">3</span>, <span class="number">28</span>, <span class="number">28</span>])</span><br><span class="line">In[<span class="number">5</span>]: a[<span class="number">0</span>,<span class="number">0</span>].shape     <span class="comment"># 第0张图片的第0个通道</span></span><br><span class="line">Out[<span class="number">5</span>]: torch.Size([<span class="number">28</span>, <span class="number">28</span>])</span><br><span class="line">In[<span class="number">6</span>]: a[<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">4</span>]		<span class="comment"># 第0张图片第0个通道的第2行第4列的像素点 标量 </span></span><br><span class="line">Out[<span class="number">6</span>]: tensor(<span class="number">0.4133</span>)  <span class="comment"># 没有用 [] 包起来就是一个标量 dim为0</span></span><br></pre></td></tr></table></figure><h1 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h1><ul><li>顾头不顾尾</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In[<span class="number">7</span>]: a.shape</span><br><span class="line">Out[<span class="number">7</span>]: torch.Size([<span class="number">4</span>, <span class="number">3</span>, <span class="number">28</span>, <span class="number">28</span>])</span><br><span class="line">In[<span class="number">8</span>]: a[:<span class="number">2</span>].shape			<span class="comment"># 前面两张图片的所有数据</span></span><br><span class="line">Out[<span class="number">8</span>]: torch.Size([<span class="number">2</span>, <span class="number">3</span>, <span class="number">28</span>, <span class="number">28</span>])</span><br><span class="line">In[<span class="number">9</span>]: a[:<span class="number">2</span>,:<span class="number">1</span>,:,:].shape      <span class="comment"># 前面两张图片的第0通道的数据  </span></span><br><span class="line">Out[<span class="number">9</span>]: torch.Size([<span class="number">2</span>, <span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>])</span><br><span class="line">In[<span class="number">11</span>]: a[:<span class="number">2</span>,<span class="number">1</span>:,:,:].shape		<span class="comment"># 前面两张图片，第1，2通道的数据</span></span><br><span class="line">Out[<span class="number">11</span>]: torch.Size([<span class="number">2</span>, <span class="number">2</span>, <span class="number">28</span>, <span class="number">28</span>])</span><br><span class="line">In[<span class="number">10</span>]: a[:<span class="number">2</span>,<span class="number">-1</span>:,:,:].shape		<span class="comment"># 前面两张图片，最后一个通道的数据  从-1到最末尾，就是它本身。</span></span><br><span class="line">Out[<span class="number">10</span>]: torch.Size([<span class="number">2</span>, <span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>])</span><br></pre></td></tr></table></figure><h1 id="步长"><a href="#步长" class="headerlink" title="步长"></a>步长</h1><ul><li>顾头不顾尾 + 步长</li><li><code>start : end : step</code></li><li>对于步长为1的，通常就省略了。</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a[:,:,<span class="number">0</span>:<span class="number">28</span>,<span class="number">0</span>:<span class="number">28</span>:<span class="number">2</span>].shape    <span class="comment"># 隔点采样</span></span><br><span class="line">Out[<span class="number">12</span>]: torch.Size([<span class="number">4</span>, <span class="number">3</span>, <span class="number">28</span>, <span class="number">14</span>])</span><br><span class="line">a[:,:,::<span class="number">2</span>,::<span class="number">2</span>].shape</span><br><span class="line">Out[<span class="number">14</span>]: torch.Size([<span class="number">4</span>, <span class="number">3</span>, <span class="number">14</span>, <span class="number">14</span>])</span><br></pre></td></tr></table></figure><h1 id="具体的索引"><a href="#具体的索引" class="headerlink" title="具体的索引"></a>具体的索引</h1><ul><li><code>.index_select(dim, indices)</code><ul><li>dim为维度，indices是索引序号</li><li>这里的indeces必须是tensor ，不能直接是一个list</li></ul></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In[<span class="number">17</span>]: a.shape</span><br><span class="line">Out[<span class="number">17</span>]: torch.Size([<span class="number">4</span>, <span class="number">3</span>, <span class="number">28</span>, <span class="number">28</span>])</span><br><span class="line">In[<span class="number">19</span>]: a.index_select(<span class="number">0</span>, torch.tensor([<span class="number">0</span>,<span class="number">2</span>])).shape	<span class="comment"># 当前维度为0，取第0，2张图片</span></span><br><span class="line">Out[<span class="number">19</span>]: torch.Size([<span class="number">2</span>, <span class="number">3</span>, <span class="number">28</span>, <span class="number">28</span>])</span><br><span class="line">In[<span class="number">20</span>]: a.index_select(<span class="number">1</span>, torch.tensor([<span class="number">1</span>,<span class="number">2</span>])).shape   	<span class="comment"># 当前维度为1，取第1，2个通道</span></span><br><span class="line">Out[<span class="number">20</span>]: torch.Size([<span class="number">4</span>, <span class="number">2</span>, <span class="number">28</span>, <span class="number">28</span>])</span><br><span class="line">In[<span class="number">21</span>]: a.index_select(<span class="number">2</span>,torch.arange(<span class="number">28</span>)).shape		<span class="comment"># 第二个参数，只是告诉你取28行</span></span><br><span class="line">Out[<span class="number">21</span>]: torch.Size([<span class="number">4</span>, <span class="number">3</span>, <span class="number">28</span>, <span class="number">28</span>])</span><br><span class="line">In[<span class="number">22</span>]: a.index_select(<span class="number">2</span>, torch.arange(<span class="number">8</span>)).shape		<span class="comment"># 取8行  [0,8)</span></span><br><span class="line">Out[<span class="number">22</span>]: torch.Size([<span class="number">4</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">28</span>])</span><br></pre></td></tr></table></figure><h1><a href="#" class="headerlink" title="..."></a><code>...</code></h1><ul><li><code>...</code> 表示任意多维度，根据实际的shape来推断。</li><li>当有 <code>...</code> 出现时，右边的索引理解为最右边</li><li>为什么会有它，没有它的话，存在这样一种情况 a[0,: ,: ,: ,: ,: ,: ,: ,: ,: ,2] 只对最后一个维度做了限度，这个向量的维度又很高，以前的方式就不太方便了。</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In[<span class="number">23</span>]: a.shape</span><br><span class="line">Out[<span class="number">23</span>]: torch.Size([<span class="number">4</span>, <span class="number">3</span>, <span class="number">28</span>, <span class="number">28</span>])</span><br><span class="line">In[<span class="number">24</span>]: a[...].shape		<span class="comment"># 所有维度</span></span><br><span class="line">Out[<span class="number">24</span>]: torch.Size([<span class="number">4</span>, <span class="number">3</span>, <span class="number">28</span>, <span class="number">28</span>])</span><br><span class="line">In[<span class="number">25</span>]: a[<span class="number">0</span>,...].shape		<span class="comment"># 后面都有，取第0个图片 = a[0]</span></span><br><span class="line">Out[<span class="number">25</span>]: torch.Size([<span class="number">3</span>, <span class="number">28</span>, <span class="number">28</span>])</span><br><span class="line">In[<span class="number">26</span>]: a[:,<span class="number">1</span>,...].shape</span><br><span class="line">Out[<span class="number">26</span>]: torch.Size([<span class="number">4</span>, <span class="number">28</span>, <span class="number">28</span>])</span><br><span class="line">In[<span class="number">27</span>]: a[...,:<span class="number">2</span>].shape		<span class="comment"># 当有...出现时，右边的索引理解为最右边，只取两列</span></span><br><span class="line">Out[<span class="number">27</span>]: torch.Size([<span class="number">4</span>, <span class="number">3</span>, <span class="number">28</span>, <span class="number">2</span>])</span><br></pre></td></tr></table></figure><h1 id="使用mask来索引"><a href="#使用mask来索引" class="headerlink" title="使用mask来索引"></a>使用mask来索引</h1><ul><li><code>.masked_select()</code></li><li>求掩码位置原来的元素大小</li><li>缺点：会把数据，默认打平（flatten），</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In[<span class="number">31</span>]: x = torch.randn(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">In[<span class="number">32</span>]: x</span><br><span class="line">Out[<span class="number">32</span>]: </span><br><span class="line">tensor([[ <span class="number">2.0373</span>,  <span class="number">0.1586</span>,  <span class="number">0.1093</span>, <span class="number">-0.6493</span>],</span><br><span class="line">        [ <span class="number">0.0466</span>,  <span class="number">0.0562</span>, <span class="number">-0.7088</span>, <span class="number">-0.9499</span>],</span><br><span class="line">        [<span class="number">-1.2606</span>,  <span class="number">0.6300</span>, <span class="number">-1.6374</span>, <span class="number">-1.6495</span>]])</span><br><span class="line">In[<span class="number">33</span>]: mask = x.ge(<span class="number">0.5</span>)          <span class="comment"># &gt;= 0.5 的元素的位置上为1，其余地方为0</span></span><br><span class="line">In[<span class="number">34</span>]: mask</span><br><span class="line">Out[<span class="number">34</span>]: </span><br><span class="line">tensor([[<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">        [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">        [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>]], dtype=torch.uint8)</span><br><span class="line">In[<span class="number">35</span>]: torch.masked_select(x,mask)</span><br><span class="line">Out[<span class="number">35</span>]: tensor([<span class="number">2.0373</span>, <span class="number">0.6300</span>])	<span class="comment"># 之所以打平是因为大于0.5的元素个数是根据内容才能确定的</span></span><br><span class="line">In[<span class="number">36</span>]: torch.masked_select(x,mask).shape</span><br><span class="line">Out[<span class="number">36</span>]: torch.Size([<span class="number">2</span>])</span><br></pre></td></tr></table></figure><h1 id="使用打平（flatten）后的序列"><a href="#使用打平（flatten）后的序列" class="headerlink" title="使用打平（flatten）后的序列"></a>使用打平（flatten）后的序列</h1><ul><li>torch.take(src, torch.tensor([index]))</li><li>打平后，按照index来取对应位置的元素</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In[<span class="number">39</span>]: src = torch.tensor([[<span class="number">4</span>,<span class="number">3</span>,<span class="number">5</span>],[<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]])		<span class="comment"># 先打平成1维的，共6列</span></span><br><span class="line">In[<span class="number">40</span>]: src</span><br><span class="line">Out[<span class="number">40</span>]: </span><br><span class="line">tensor([[<span class="number">4</span>, <span class="number">3</span>, <span class="number">5</span>],</span><br><span class="line">        [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]])</span><br><span class="line">In[<span class="number">41</span>]: torch.take(src, torch.tensor([<span class="number">0</span>, <span class="number">2</span>, <span class="number">5</span>]))	<span class="comment"># 取打平后编码，位置为0 2 5</span></span><br><span class="line">Out[<span class="number">41</span>]: tensor([<span class="number">4</span>, <span class="number">5</span>, <span class="number">8</span>])</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Pytorch学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>Pytorch</tag>
        <tag>Deep Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>Pytorch-创建tensor</title>
    <url>/Pytorch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20190624-learning_PyTorch_2_create_tensor.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>本篇介绍创建tensor的几种方式。</p></blockquote><a id="more"></a><h1 id="Import-from-numpy"><a href="#Import-from-numpy" class="headerlink" title="Import from numpy"></a>Import from numpy</h1><ul><li><code>from_numpy()</code></li><li>float64 是 double 类型，也就是说从numpy导入的float其实是<strong>double类型</strong>。</li><li>从numpy导入的 int 还是 int 类型</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In[<span class="number">2</span>]: <span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">In[<span class="number">3</span>]: <span class="keyword">import</span> torch</span><br><span class="line">In[<span class="number">4</span>]: a = np.array([<span class="number">2</span>,<span class="number">3.3</span>])</span><br><span class="line">In[<span class="number">5</span>]: torch.from_numpy(a)</span><br><span class="line">Out[<span class="number">5</span>]: tensor([<span class="number">2.0000</span>, <span class="number">3.3000</span>], dtype=torch.float64)</span><br><span class="line">    </span><br><span class="line">In[<span class="number">6</span>]: a = np.ones([<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">In[<span class="number">7</span>]: torch.from_numpy(a)</span><br><span class="line">Out[<span class="number">7</span>]: </span><br><span class="line">tensor([[<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>],</span><br><span class="line">        [<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>]], dtype=torch.float64)</span><br></pre></td></tr></table></figure><h1 id="Import-from-List"><a href="#Import-from-List" class="headerlink" title="Import from List"></a>Import from List</h1><ul><li>数据量不是很大，不需要numpy作为载体</li><li><code>torch.tensor([ ])</code> 、 <code>torch.FloatTensor([ ])</code> 、 <code>torch.Tensor([ ])</code>关系在后面介绍</li><li>tensor 与 Tensor易混淆</li><li>多使用tensor。</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一维</span></span><br><span class="line">In[<span class="number">17</span>]: torch.tensor([<span class="number">2</span>, <span class="number">3.2</span>])</span><br><span class="line">Out[<span class="number">17</span>]: tensor([<span class="number">2.0000</span>, <span class="number">3.2000</span>])</span><br><span class="line"><span class="comment"># 二维 </span></span><br><span class="line">In[<span class="number">19</span>]: torch.tensor([[<span class="number">2</span>,<span class="number">3.2</span>],[<span class="number">1</span>,<span class="number">22.3</span>]])</span><br><span class="line">Out[<span class="number">19</span>]: </span><br><span class="line">tensor([[ <span class="number">2.0000</span>,  <span class="number">3.2000</span>],</span><br><span class="line">        [ <span class="number">1.0000</span>, <span class="number">22.3000</span>]])</span><br><span class="line"><span class="comment"># 查看数据类型</span></span><br><span class="line">In[<span class="number">20</span>]: a = torch.tensor([[<span class="number">2</span>,<span class="number">3.2</span>],[<span class="number">1</span>,<span class="number">22.3</span>]])</span><br><span class="line">In[<span class="number">21</span>]: a.type()</span><br><span class="line">Out[<span class="number">21</span>]: <span class="string">'torch.FloatTensor'</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># tensor 与 Tensor 易混淆</span></span><br><span class="line"><span class="comment"># tensor只能接收数据，来对向量进行创建</span></span><br><span class="line"><span class="comment"># Tensor既可以通过维度来创建向量，也可以通过接收数据来创建向量.</span></span><br><span class="line"><span class="comment"># 两者的区别在于：前者是以参数的形式(维度1，维度2，...)来组织形状，后者的数据必须放在列表中([数据1,数据2,...]).</span></span><br><span class="line"><span class="comment"># 但建议使用tensor来接收向量，这样减少混淆。</span></span><br><span class="line">In[<span class="number">24</span>]: a = torch.Tensor([<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">In[<span class="number">25</span>]: a</span><br><span class="line">Out[<span class="number">25</span>]: tensor([<span class="number">2.</span>, <span class="number">3.</span>])</span><br><span class="line">In[<span class="number">32</span>]: a = torch.Tensor(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">In[<span class="number">33</span>]: a</span><br><span class="line">Out[<span class="number">33</span>]: </span><br><span class="line">tensor([[<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">        [<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>]])</span><br><span class="line"></span><br><span class="line">a = torch.FloatTensor([<span class="number">1</span>,<span class="number">2</span>])</span><br><span class="line">b = torch.tensor([<span class="number">1</span>,<span class="number">2</span>])</span><br><span class="line">b.type()</span><br><span class="line">Out[<span class="number">42</span>]: <span class="string">'torch.LongTensor'</span></span><br><span class="line"><span class="comment"># 结论：torch.FloatTensor([1,2]) 不等于 torch.tensor([1,2])</span></span><br></pre></td></tr></table></figure><ul><li><code>torch.tensor()</code> 与 <code>torch.Tensor()</code> 默认 生成 <code>torch.FloatTensor</code> 类型，增强学习中多为 <code>torch.DoubleTensor</code></li><li>通过 <code>torch.set_default_tensor_type(torch.DoubleTensor)</code> 来更改</li><li><code>torch.tensor()</code> 如果列表中都是int类型，则它会生成 <code>torch.LongTensor</code></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In[<span class="number">173</span>]: a = torch.tensor([<span class="number">2.2</span>,<span class="number">3</span>])</span><br><span class="line">In[<span class="number">174</span>]: a.type()</span><br><span class="line">Out[<span class="number">174</span>]: <span class="string">'torch.FloatTensor'</span></span><br><span class="line"></span><br><span class="line">In[<span class="number">178</span>]: torch.set_default_tensor_type(torch.DoubleTensor)</span><br><span class="line">In[<span class="number">179</span>]: a = torch.tensor([<span class="number">2.2</span>,<span class="number">3</span>])</span><br><span class="line">In[<span class="number">180</span>]: a.type()</span><br><span class="line">Out[<span class="number">180</span>]: <span class="string">'torch.DoubleTensor'</span></span><br><span class="line">    </span><br><span class="line">但是对于 tensor([<span class="number">2</span>,<span class="number">3</span>]) 创建的是int64类型的</span><br><span class="line">In[<span class="number">181</span>]: a = torch.tensor([<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">In[<span class="number">182</span>]: a.type()</span><br><span class="line">Out[<span class="number">182</span>]: <span class="string">'torch.LongTensor'</span></span><br><span class="line">    </span><br><span class="line">a = torch.Tensor([<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">a.type()</span><br><span class="line">Out[<span class="number">188</span>]: <span class="string">'torch.FloatTensor'</span></span><br><span class="line"><span class="comment"># torch.Tensor is an alias for the default tensor type (torch.FloatTensor).</span></span><br></pre></td></tr></table></figure><h1 id="data-uninitialized"><a href="#data-uninitialized" class="headerlink" title="data uninitialized"></a>data uninitialized</h1><p>生成未初始化的数据</p><ul><li><code>torch.empty(d1,d2,d3)</code></li><li><code>torch.FloatTensor(d1,d2,d3)</code></li><li><code>torch.IntTensor(d1,d2,d3)</code></li></ul><p>未初始化的tensor将出现的问题</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.empty(<span class="number">1</span>)</span><br><span class="line">Out[<span class="number">50</span>]: tensor([<span class="number">0.</span>])</span><br><span class="line">torch.Tensor(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">Out[<span class="number">51</span>]: </span><br><span class="line">tensor([[<span class="number">0.0000e+00</span>, <span class="number">0.0000e+00</span>, <span class="number">1.4013e-45</span>],</span><br><span class="line">        [<span class="number">0.0000e+00</span>, <span class="number">1.4013e-45</span>, <span class="number">0.0000e+00</span>]])</span><br><span class="line">torch.IntTensor(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">Out[<span class="number">52</span>]: </span><br><span class="line">Out[<span class="number">78</span>]: </span><br><span class="line">tensor([[<span class="number">1902983832</span>,      <span class="number">32767</span>,          <span class="number">6</span>],</span><br><span class="line">        [         <span class="number">0</span>,          <span class="number">1</span>,          <span class="number">0</span>]], dtype=torch.int32)</span><br><span class="line">torch.FloatTensor(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">Out[<span class="number">53</span>]: </span><br><span class="line">tensor([[<span class="number">1.1747e+30</span>, <span class="number">4.5916e-41</span>, <span class="number">1.4013e-45</span>],</span><br><span class="line">        [<span class="number">0.0000e+00</span>, <span class="number">1.4013e-45</span>, <span class="number">0.0000e+00</span>]])</span><br></pre></td></tr></table></figure><ul><li>这些数据有的特别特别小，有的特别特别大</li><li>这些数据如果没有后续的处理覆盖，将会产生bug，例如：可能在后面产生无穷大的数</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.isnan(torch.Tensor(<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line"><span class="comment"># 其布尔元素表示每个元素是否为 'nan'</span></span><br><span class="line">Out[<span class="number">55</span>]: </span><br><span class="line">tensor([[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">        [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]], dtype=torch.uint8)</span><br><span class="line">a = torch.FloatTensor(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">torch.isnan(a)</span><br><span class="line">Out[<span class="number">57</span>]: </span><br><span class="line">tensor([[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">        [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]], dtype=torch.uint8)</span><br><span class="line">torch.isfinite(a)</span><br><span class="line"><span class="comment"># 其布尔元素表示每个元素是否为有限元素</span></span><br><span class="line">Out[<span class="number">58</span>]: </span><br><span class="line">tensor([[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">        [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]], dtype=torch.uint8)</span><br><span class="line"><span class="comment"># 虽然这里都是正常的，但存在后面出现问题的可能</span></span><br></pre></td></tr></table></figure><ul><li>tensor只是一个容器，后面会将自己的数据放入的。</li></ul><h1 id="rand-rand-like-randint"><a href="#rand-rand-like-randint" class="headerlink" title="rand/rand_like, randint"></a>rand/rand_like, randint</h1><p>随机初始化</p><p>推荐使用随机初始化。</p><ul><li>rand 会随机的在[0, 1] 之间取一个数。</li><li>rand_like( a ) 读取向量 a 的shape在送到rand函数</li><li>randint 先指定区间 <code>[ min, max )</code> ,然后指定shape，shape要放在列表或元组中</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In[<span class="number">189</span>]: torch.rand(<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line">Out[<span class="number">189</span>]: </span><br><span class="line">tensor([[<span class="number">0.1364</span>, <span class="number">0.6610</span>, <span class="number">0.7115</span>],</span><br><span class="line">        [<span class="number">0.5758</span>, <span class="number">0.2318</span>, <span class="number">0.0798</span>],</span><br><span class="line">        [<span class="number">0.1356</span>, <span class="number">0.9596</span>, <span class="number">0.3406</span>]])</span><br><span class="line">In[<span class="number">190</span>]: a = torch.rand(<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line">In[<span class="number">191</span>]: torch.rand_like(a)</span><br><span class="line">Out[<span class="number">191</span>]: </span><br><span class="line">tensor([[<span class="number">0.5966</span>, <span class="number">0.9067</span>, <span class="number">0.6670</span>],</span><br><span class="line">        [<span class="number">0.5968</span>, <span class="number">0.1216</span>, <span class="number">0.3202</span>],</span><br><span class="line">        [<span class="number">0.8507</span>, <span class="number">0.3520</span>, <span class="number">0.4741</span>]])</span><br><span class="line"></span><br><span class="line">In[<span class="number">193</span>]: torch.randint(<span class="number">1</span>,<span class="number">10</span>,(<span class="number">3</span>,<span class="number">3</span>))</span><br><span class="line">Out[<span class="number">193</span>]: </span><br><span class="line">tensor([[<span class="number">7</span>, <span class="number">3</span>, <span class="number">8</span>],</span><br><span class="line">        [<span class="number">8</span>, <span class="number">2</span>, <span class="number">1</span>],</span><br><span class="line">        [<span class="number">8</span>, <span class="number">4</span>, <span class="number">8</span>]])</span><br><span class="line">In[<span class="number">194</span>]: torch.randint(<span class="number">1</span>,<span class="number">10</span>,[<span class="number">3</span>,<span class="number">3</span>])</span><br><span class="line">Out[<span class="number">194</span>]: </span><br><span class="line">tensor([[<span class="number">3</span>, <span class="number">8</span>, <span class="number">2</span>],</span><br><span class="line">        [<span class="number">3</span>, <span class="number">5</span>, <span class="number">2</span>],</span><br><span class="line">        [<span class="number">8</span>, <span class="number">8</span>, <span class="number">3</span>]])</span><br></pre></td></tr></table></figure><p>N(0, 1)</p><ul><li><code>randn()</code></li><li>均值为0，方差为1，数据集中在0附近</li><li>权值w 或 偏置 b 的一个初始化</li></ul><p>N(u, std)</p><ul><li><code>normal()</code></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In[<span class="number">201</span>]: torch.randn(<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line">Out[<span class="number">201</span>]: </span><br><span class="line">tensor([[ <span class="number">0.3099</span>, <span class="number">-0.8410</span>, <span class="number">-0.3561</span>],</span><br><span class="line">        [ <span class="number">1.0023</span>, <span class="number">-0.4343</span>,  <span class="number">0.3544</span>],</span><br><span class="line">        [<span class="number">-0.7071</span>, <span class="number">-0.3124</span>, <span class="number">-0.3938</span>]])</span><br><span class="line">In[<span class="number">202</span>]: torch.normal(mean=torch.full([<span class="number">10</span>], <span class="number">0</span>), std=torch.arange(<span class="number">1</span>, <span class="number">0</span>, <span class="number">-0.1</span>))</span><br><span class="line">Out[<span class="number">202</span>]: </span><br><span class="line">tensor([<span class="number">-3.5323e-01</span>,  <span class="number">7.4789e-01</span>,  <span class="number">5.8816e-01</span>,  <span class="number">1.9938e+00</span>,  <span class="number">3.8165e-01</span>,</span><br><span class="line">        <span class="number">-9.8357e-01</span>,  <span class="number">5.2820e-01</span>, <span class="number">-1.6654e-02</span>, <span class="number">-4.8233e-02</span>,  <span class="number">9.7792e-04</span>])</span><br><span class="line">In[<span class="number">203</span>]: torch.normal(mean=torch.full([<span class="number">10</span>], <span class="number">0</span>), std=torch.arange(<span class="number">1</span>, <span class="number">0</span>, <span class="number">-0.1</span>))</span><br><span class="line">Out[<span class="number">203</span>]: </span><br><span class="line">tensor([<span class="number">-0.3920</span>,  <span class="number">1.2376</span>,  <span class="number">0.3669</span>, <span class="number">-0.8245</span>, <span class="number">-1.2928</span>,  <span class="number">0.4541</span>, <span class="number">-0.0843</span>,  <span class="number">0.1847</span>,</span><br><span class="line">        <span class="number">-0.1818</span>, <span class="number">-0.0868</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># full方法解释</span></span><br><span class="line"><span class="comment"># 生成二维向量</span></span><br><span class="line">In[<span class="number">204</span>]: torch.full([<span class="number">2</span>,<span class="number">3</span>],<span class="number">7</span>)</span><br><span class="line">Out[<span class="number">204</span>]: </span><br><span class="line">tensor([[<span class="number">7.</span>, <span class="number">7.</span>, <span class="number">7.</span>],</span><br><span class="line">        [<span class="number">7.</span>, <span class="number">7.</span>, <span class="number">7.</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成一维向量</span></span><br><span class="line">In[<span class="number">206</span>]: torch.full([<span class="number">1</span>],<span class="number">7</span>)</span><br><span class="line">Out[<span class="number">206</span>]: tensor([<span class="number">7.</span>])</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 生成标量</span></span><br><span class="line">In[<span class="number">205</span>]: torch.full([],<span class="number">7</span>)</span><br><span class="line">Out[<span class="number">205</span>]: tensor(<span class="number">7.</span>)</span><br></pre></td></tr></table></figure><h1 id="arange-range"><a href="#arange-range" class="headerlink" title="arange/range"></a>arange/range</h1><ul><li>生成等差数列 <code>arange()</code> ,默认以1来递增</li><li>range现在已经不建议使用了</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In[<span class="number">207</span>]: torch.arange(<span class="number">0</span>,<span class="number">10</span>)</span><br><span class="line">Out[<span class="number">207</span>]: tensor([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])</span><br><span class="line">In[<span class="number">208</span>]: torch.arange(<span class="number">0</span>,<span class="number">10</span>,<span class="number">2</span>)</span><br><span class="line">Out[<span class="number">208</span>]: tensor([<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>])</span><br><span class="line">In[<span class="number">209</span>]: torch.range(<span class="number">0</span>,<span class="number">10</span>)</span><br><span class="line">G:\PyCharm <span class="number">2019.1</span><span class="number">.3</span>\helpers\pydev\pydevconsole.py:<span class="number">1</span>: UserWarning: torch.range <span class="keyword">is</span> deprecated <span class="keyword">in</span> favor of torch.arange <span class="keyword">and</span> will be removed <span class="keyword">in</span> <span class="number">0.5</span>. Note that arange generates values <span class="keyword">in</span> [start; end), <span class="keyword">not</span> [start; end].</span><br><span class="line">  <span class="string">'''</span></span><br><span class="line"><span class="string">Out[209]: tensor([ 0.,  1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,  9., 10.])</span></span><br></pre></td></tr></table></figure><h1 id="linspace-logspace"><a href="#linspace-logspace" class="headerlink" title="linspace/logspace"></a>linspace/logspace</h1><ul><li>等分 <code>linspace()</code> [0,10] , steps=4</li><li><code>logspace()</code> 也是等分，不过是以10^x 来得到输出的。</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In[<span class="number">210</span>]: torch.linspace(<span class="number">0</span>,<span class="number">10</span>, steps=<span class="number">4</span>)</span><br><span class="line">Out[<span class="number">210</span>]: tensor([ <span class="number">0.0000</span>,  <span class="number">3.3333</span>,  <span class="number">6.6667</span>, <span class="number">10.0000</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将11个数 切成10个</span></span><br><span class="line">In[<span class="number">211</span>]: torch.linspace(<span class="number">0</span>,<span class="number">10</span>, steps=<span class="number">10</span>)</span><br><span class="line">Out[<span class="number">211</span>]: </span><br><span class="line">tensor([ <span class="number">0.0000</span>,  <span class="number">1.1111</span>,  <span class="number">2.2222</span>,  <span class="number">3.3333</span>,  <span class="number">4.4444</span>,  <span class="number">5.5556</span>,  <span class="number">6.6667</span>,  <span class="number">7.7778</span>,</span><br><span class="line">         <span class="number">8.8889</span>, <span class="number">10.0000</span>])</span><br><span class="line">In[<span class="number">212</span>]: torch.linspace(<span class="number">0</span>,<span class="number">10</span>, steps=<span class="number">11</span>)</span><br><span class="line">Out[<span class="number">212</span>]: tensor([ <span class="number">0.</span>,  <span class="number">1.</span>,  <span class="number">2.</span>,  <span class="number">3.</span>,  <span class="number">4.</span>,  <span class="number">5.</span>,  <span class="number">6.</span>,  <span class="number">7.</span>,  <span class="number">8.</span>,  <span class="number">9.</span>, <span class="number">10.</span>])</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 将 0-&gt;-1 切成10份，然后乘10</span></span><br><span class="line">In[<span class="number">213</span>]: torch.logspace(<span class="number">0</span>,<span class="number">-1</span>,steps=<span class="number">10</span>)</span><br><span class="line">Out[<span class="number">213</span>]: </span><br><span class="line">tensor([<span class="number">1.0000</span>, <span class="number">0.7743</span>, <span class="number">0.5995</span>, <span class="number">0.4642</span>, <span class="number">0.3594</span>, <span class="number">0.2783</span>, <span class="number">0.2154</span>, <span class="number">0.1668</span>, <span class="number">0.1292</span>,</span><br><span class="line">        <span class="number">0.1000</span>])</span><br><span class="line">In[<span class="number">214</span>]: torch.logspace(<span class="number">0</span>,<span class="number">1</span>,steps=<span class="number">10</span>)</span><br><span class="line">Out[<span class="number">214</span>]: </span><br><span class="line">tensor([ <span class="number">1.0000</span>,  <span class="number">1.2915</span>,  <span class="number">1.6681</span>,  <span class="number">2.1544</span>,  <span class="number">2.7826</span>,  <span class="number">3.5938</span>,  <span class="number">4.6416</span>,  <span class="number">5.9948</span>,</span><br><span class="line">         <span class="number">7.7426</span>, <span class="number">10.0000</span>])</span><br></pre></td></tr></table></figure><h1 id="ones-zeros-eye"><a href="#ones-zeros-eye" class="headerlink" title="ones/zeros/eye"></a>ones/zeros/eye</h1><ul><li>ones() 生成全部为1的</li><li>zeros() 生成全部为0的</li><li>eye() 生成单位向量</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In[<span class="number">215</span>]: torch.ones(<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line">Out[<span class="number">215</span>]: </span><br><span class="line">tensor([[<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>],</span><br><span class="line">        [<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>],</span><br><span class="line">        [<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>]])</span><br><span class="line">In[<span class="number">216</span>]: torch.zeros(<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line">Out[<span class="number">216</span>]: </span><br><span class="line">tensor([[<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">        [<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">        [<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>]])</span><br><span class="line">In[<span class="number">219</span>]: torch.eye(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">Out[<span class="number">219</span>]: </span><br><span class="line">tensor([[<span class="number">1.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">        [<span class="number">0.</span>, <span class="number">1.</span>, <span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">        [<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">1.</span>, <span class="number">0.</span>]])</span><br><span class="line"></span><br><span class="line">In[<span class="number">220</span>]: torch.eye(<span class="number">3</span>)</span><br><span class="line">Out[<span class="number">220</span>]: </span><br><span class="line">tensor([[<span class="number">1.</span>, <span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">        [<span class="number">0.</span>, <span class="number">1.</span>, <span class="number">0.</span>],</span><br><span class="line">        [<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">1.</span>]])</span><br><span class="line">In[<span class="number">221</span>]: a = torch.zeros(<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line">In[<span class="number">222</span>]: torch.ones_like(a)</span><br><span class="line">Out[<span class="number">222</span>]: </span><br><span class="line">tensor([[<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>],</span><br><span class="line">        [<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>],</span><br><span class="line">        [<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>]])</span><br></pre></td></tr></table></figure><h1 id="randperm"><a href="#randperm" class="headerlink" title="randperm"></a>randperm</h1><ul><li>随机打散 (numpy中是 random.shuffle)</li><li>randperm()</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In[<span class="number">223</span>]: torch.randperm(<span class="number">10</span>)</span><br><span class="line">Out[<span class="number">223</span>]: tensor([<span class="number">8</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">5</span>])</span><br><span class="line">In[<span class="number">224</span>]: a = torch.rand(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">In[<span class="number">225</span>]: b = torch.rand(<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">In[<span class="number">226</span>]: idx = torch.randperm(<span class="number">2</span>)</span><br><span class="line">In[<span class="number">227</span>]: idx</span><br><span class="line">Out[<span class="number">227</span>]: tensor([<span class="number">1</span>, <span class="number">0</span>])</span><br><span class="line">    <span class="comment"># [1,0] 相反；[0,1]维持不变</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 需要用同一个索引/维度来shuffle，协同shuffle，保持配对</span></span><br><span class="line">In[<span class="number">232</span>]: a[idx]</span><br><span class="line">Out[<span class="number">232</span>]: </span><br><span class="line">tensor([[<span class="number">0.8259</span>, <span class="number">0.7368</span>, <span class="number">0.3033</span>],</span><br><span class="line">        [<span class="number">0.2103</span>, <span class="number">0.2943</span>, <span class="number">0.0866</span>]])</span><br><span class="line">In[<span class="number">233</span>]: b[idx]</span><br><span class="line">Out[<span class="number">233</span>]: </span><br><span class="line">tensor([[<span class="number">0.4822</span>, <span class="number">0.2033</span>],</span><br><span class="line">        [<span class="number">0.3809</span>, <span class="number">0.8047</span>]])</span><br><span class="line">In[<span class="number">234</span>]: a,b</span><br><span class="line">Out[<span class="number">234</span>]: </span><br><span class="line">(tensor([[<span class="number">0.2103</span>, <span class="number">0.2943</span>, <span class="number">0.0866</span>],</span><br><span class="line">         [<span class="number">0.8259</span>, <span class="number">0.7368</span>, <span class="number">0.3033</span>]]), tensor([[<span class="number">0.3809</span>, <span class="number">0.8047</span>],</span><br><span class="line">         [<span class="number">0.4822</span>, <span class="number">0.2033</span>]]))</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Pytorch学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>Pytorch</tag>
        <tag>Deep Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>Pytorch-基础数据类型</title>
    <url>/Pytorch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20190623-learning_PyTorch_1_datatype.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>本篇介绍Pytorch的基础数据类型，判断方式以及常用向量。</p></blockquote><a id="more"></a><h1 id="基础数据类型"><a href="#基础数据类型" class="headerlink" title="基础数据类型"></a>基础数据类型</h1><ul><li><code>torch.Tensor</code>是一种包含单一数据类型元素的多维矩阵。</li><li>目前在<a href="https://pytorch.org/docs/stable/tensors.html" target="_blank" rel="noopener">1.2版本</a>中有9种类型。</li></ul><p><img src="/Pytorch学习笔记/20190623-learning_PyTorch_1_datatype/pytorch%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.png" alt="pytorch数据类型"></p><ul><li>同python相比，pytorch没有string类型；</li><li>由于pytorch是面向计算的，对于字符这种通常通过编码下手；</li><li>怎样用数字的形式去表示语言（字符串） ： NLP -&gt; one-hot 或 Embedding（Word2vec，glove）</li></ul><h1 id="判断数据类型"><a href="#判断数据类型" class="headerlink" title="判断数据类型"></a>判断数据类型</h1><ol><li>打印数据类型：a.type()</li><li>打印的是基本的数据类型，没有提供额外的信息：type(a)</li><li>合法性检验：isinstance(a, torch.FloatTensor)</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In[<span class="number">2</span>]: <span class="keyword">import</span> torch</span><br><span class="line">In[<span class="number">3</span>]: a = torch.randn(<span class="number">2</span>,<span class="number">3</span>)       //两维 ， 每个数字是由随机的正态分布来初始化的，均值是<span class="number">0</span> 方差是<span class="number">1</span></span><br><span class="line">In[<span class="number">4</span>]: a.type()                   // 方法一：打印数据类型</span><br><span class="line">Out[<span class="number">4</span>]: <span class="string">'torch.FloatTensor'</span></span><br><span class="line">In[<span class="number">5</span>]: type(a)				  	  // 方法二：较少</span><br><span class="line">Out[<span class="number">5</span>]: torch.Tensor</span><br><span class="line">In[<span class="number">6</span>]: isinstance(a, torch.FloatTensor)		// 方法三：合法性检验</span><br><span class="line">Out[<span class="number">6</span>]: <span class="literal">True</span></span><br></pre></td></tr></table></figure><p>同一个tensor部署在cpu和gpu时的数据类型是不一样的</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In[<span class="number">7</span>]: isinstance(a, torch.cuda.FloatTensor)</span><br><span class="line">Out[<span class="number">7</span>]: <span class="literal">False</span></span><br><span class="line">In[<span class="number">8</span>]: a = a.cuda()</span><br><span class="line">In[<span class="number">9</span>]: isinstance(a, torch.cuda.FloatTensor)</span><br><span class="line">Out[<span class="number">9</span>]: <span class="literal">True</span></span><br></pre></td></tr></table></figure><p>标量 Dimension 0 / rank 0</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In[<span class="number">12</span>]: torch.tensor(<span class="number">1.3</span>)</span><br><span class="line">Out[<span class="number">12</span>]: tensor(<span class="number">1.3000</span>)</span><br></pre></td></tr></table></figure><p>loss 就是一个标量</p><p>查看标量的维度</p><ol><li><code>len(a.shape)</code></li><li><code>a.dim()</code></li><li><code>len(a.size())</code></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In[<span class="number">13</span>]: a = torch.tensor(<span class="number">2.2</span>)</span><br><span class="line">In[<span class="number">14</span>]: a.shape</span><br><span class="line">Out[<span class="number">14</span>]: torch.Size([])</span><br><span class="line">In[<span class="number">15</span>]: len(a.shape)</span><br><span class="line">Out[<span class="number">15</span>]: <span class="number">0</span></span><br><span class="line">In[<span class="number">16</span>]: a.size()</span><br><span class="line">Out[<span class="number">16</span>]: torch.Size([])</span><br><span class="line">In[<span class="number">17</span>]: a.dim()</span><br><span class="line">Out[<span class="number">17</span>]: <span class="number">0</span></span><br></pre></td></tr></table></figure><h1 id="常用向量"><a href="#常用向量" class="headerlink" title="常用向量"></a>常用向量</h1><h2 id="1维向量"><a href="#1维向量" class="headerlink" title="1维向量"></a>1维向量</h2><ol><li><code>torch.tensor([ 数据 ])</code></li><li><code>torch.FloatTensor(维度)</code></li><li>从numpy导入<code>torch.from_numpy(data)</code></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In[<span class="number">19</span>]: torch.tensor([<span class="number">1.1</span>])</span><br><span class="line">Out[<span class="number">19</span>]: tensor([<span class="number">1.1000</span>])</span><br><span class="line">In[<span class="number">20</span>]: torch.tensor([<span class="number">1.1</span>, <span class="number">2.2</span>])</span><br><span class="line">Out[<span class="number">20</span>]: tensor([<span class="number">1.1000</span>, <span class="number">2.2000</span>])</span><br><span class="line">In[<span class="number">21</span>]: torch.FloatTensor(<span class="number">1</span>)</span><br><span class="line">Out[<span class="number">21</span>]: tensor([<span class="number">0.</span>])</span><br><span class="line">In[<span class="number">22</span>]: torch.FloatTensor(<span class="number">2</span>)</span><br><span class="line">Out[<span class="number">22</span>]: tensor([<span class="number">-1.0842e-19</span>,  <span class="number">1.8875e+00</span>])</span><br><span class="line">In[<span class="number">23</span>]: <span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">In[<span class="number">24</span>]: data = np.ones(<span class="number">2</span>)</span><br><span class="line">In[<span class="number">25</span>]: data</span><br><span class="line">Out[<span class="number">25</span>]: array([<span class="number">1.</span>, <span class="number">1.</span>])</span><br><span class="line">In[<span class="number">26</span>]: torch.from_numpy(data)</span><br><span class="line">Out[<span class="number">26</span>]: tensor([<span class="number">1.</span>, <span class="number">1.</span>], dtype=torch.float64)</span><br></pre></td></tr></table></figure><p>dim为1的向量有 Bias</p><p>Linear Input 线性层的输入</p><p>从0.4版本增加了 标量的表示，以前是[0.3]来表示标量，但这样语义上不太清晰。</p><p>1维的形状如何得到</p><ul><li>.size</li><li>.shape</li></ul><p>几个概念：</p><p>dim：指的是size/shape的长度</p><p>size/shape指的是具体的形状</p><p>tensor指的是具体的数字</p><h2 id="2维向量"><a href="#2维向量" class="headerlink" title="2维向量"></a>2维向量</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In[<span class="number">30</span>]: a = torch.randn(<span class="number">2</span>,<span class="number">3</span>)        </span><br><span class="line">In[<span class="number">31</span>]: a</span><br><span class="line">Out[<span class="number">31</span>]: </span><br><span class="line">tensor([[<span class="number">-0.1353</span>,  <span class="number">0.9325</span>, <span class="number">-1.7155</span>],</span><br><span class="line">        [<span class="number">-1.9443</span>,  <span class="number">0.3485</span>,  <span class="number">0.6418</span>]])</span><br><span class="line">In[<span class="number">32</span>]: a.shape</span><br><span class="line">Out[<span class="number">32</span>]: torch.Size([<span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">In[<span class="number">33</span>]: a.size(<span class="number">0</span>)</span><br><span class="line">Out[<span class="number">33</span>]: <span class="number">2</span></span><br><span class="line">In[<span class="number">34</span>]: a.size(<span class="number">1</span>)</span><br><span class="line">Out[<span class="number">34</span>]: <span class="number">3</span></span><br><span class="line">In[<span class="number">35</span>]: a.shape[<span class="number">1</span>]</span><br><span class="line">Out[<span class="number">35</span>]: <span class="number">3</span></span><br></pre></td></tr></table></figure><p>常用于带有batch的 Linear Input 例如 [4, 784] 4张784像素的图片</p><h2 id="3维向量"><a href="#3维向量" class="headerlink" title="3维向量"></a>3维向量</h2><p>形状：<code>list(a.shape)</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In[<span class="number">49</span>]: a = torch.rand(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)     // 使用随机的均匀分布</span><br><span class="line">In[<span class="number">50</span>]: a</span><br><span class="line">Out[<span class="number">50</span>]: </span><br><span class="line">tensor([[[<span class="number">0.4700</span>, <span class="number">0.7649</span>, <span class="number">0.7688</span>],</span><br><span class="line">         [<span class="number">0.1973</span>, <span class="number">0.5232</span>, <span class="number">0.0038</span>]]])</span><br><span class="line">In[<span class="number">51</span>]: a.shape</span><br><span class="line">Out[<span class="number">51</span>]: torch.Size([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">In[<span class="number">52</span>]: a[<span class="number">0</span>]      // 取第一个维度的第零号元素 [<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">Out[<span class="number">52</span>]: </span><br><span class="line">tensor([[<span class="number">0.4700</span>, <span class="number">0.7649</span>, <span class="number">0.7688</span>],</span><br><span class="line">        [<span class="number">0.1973</span>, <span class="number">0.5232</span>, <span class="number">0.0038</span>]])</span><br><span class="line">In[<span class="number">53</span>]: list(a.shape)</span><br><span class="line">Out[<span class="number">53</span>]: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure><p>场景：NLP文字处理</p><p>RNN Input Batch 例如 W,F[10, 100] 一个句子由10个单词构成，且每个单词由100维向量表示</p><p>W,S,F[10, 20, 100] 20个句子，每个句子由10个单词构成，且每个单词由100维向量表示</p><h2 id="4维向量"><a href="#4维向量" class="headerlink" title="4维向量"></a>4维向量</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In[<span class="number">54</span>]: a = torch.rand(<span class="number">2</span>,<span class="number">3</span>,<span class="number">28</span>,<span class="number">28</span>)             //随即均匀化</span><br><span class="line">In[<span class="number">55</span>]: a</span><br><span class="line">Out[<span class="number">55</span>]: </span><br><span class="line">tensor([[[[<span class="number">0.2990</span>, <span class="number">0.3407</span>, <span class="number">0.0149</span>,  ..., <span class="number">0.7321</span>, <span class="number">0.9115</span>, <span class="number">0.4388</span>],</span><br><span class="line">          [<span class="number">0.2001</span>, <span class="number">0.0137</span>, <span class="number">0.1427</span>,  ..., <span class="number">0.5508</span>, <span class="number">0.4747</span>, <span class="number">0.2132</span>],</span><br><span class="line">          [<span class="number">0.0919</span>, <span class="number">0.7190</span>, <span class="number">0.0269</span>,  ..., <span class="number">0.9440</span>, <span class="number">0.5967</span>, <span class="number">0.4414</span>],</span><br><span class="line">          ...,</span><br><span class="line">          [<span class="number">0.7014</span>, <span class="number">0.4306</span>, <span class="number">0.1627</span>,  ..., <span class="number">0.8383</span>, <span class="number">0.4709</span>, <span class="number">0.3334</span>],</span><br><span class="line">          [<span class="number">0.7733</span>, <span class="number">0.2284</span>, <span class="number">0.5533</span>,  ..., <span class="number">0.3841</span>, <span class="number">0.6881</span>, <span class="number">0.3352</span>],</span><br><span class="line">          [<span class="number">0.5796</span>, <span class="number">0.7640</span>, <span class="number">0.3492</span>,  ..., <span class="number">0.6319</span>, <span class="number">0.6660</span>, <span class="number">0.1536</span>]],</span><br><span class="line"></span><br><span class="line">         [[<span class="number">0.3840</span>, <span class="number">0.4825</span>, <span class="number">0.6113</span>,  ..., <span class="number">0.5034</span>, <span class="number">0.2546</span>, <span class="number">0.1246</span>],</span><br><span class="line">          [<span class="number">0.2549</span>, <span class="number">0.4116</span>, <span class="number">0.8511</span>,  ..., <span class="number">0.8956</span>, <span class="number">0.4064</span>, <span class="number">0.0360</span>],</span><br><span class="line">          [<span class="number">0.4601</span>, <span class="number">0.8654</span>, <span class="number">0.9965</span>,  ..., <span class="number">0.7325</span>, <span class="number">0.5524</span>, <span class="number">0.3354</span>],</span><br><span class="line">          ...,</span><br><span class="line">          [<span class="number">0.0220</span>, <span class="number">0.1239</span>, <span class="number">0.6685</span>,  ..., <span class="number">0.6109</span>, <span class="number">0.7329</span>, <span class="number">0.2162</span>],</span><br><span class="line">          [<span class="number">0.1790</span>, <span class="number">0.0919</span>, <span class="number">0.0559</span>,  ..., <span class="number">0.6279</span>, <span class="number">0.9586</span>, <span class="number">0.4919</span>],</span><br><span class="line">          [<span class="number">0.8246</span>, <span class="number">0.1804</span>, <span class="number">0.6107</span>,  ..., <span class="number">0.5497</span>, <span class="number">0.6124</span>, <span class="number">0.1172</span>]],</span><br><span class="line"></span><br><span class="line">         [[<span class="number">0.4151</span>, <span class="number">0.1750</span>, <span class="number">0.6129</span>,  ..., <span class="number">0.1962</span>, <span class="number">0.3190</span>, <span class="number">0.0227</span>],</span><br><span class="line">          [<span class="number">0.2165</span>, <span class="number">0.9139</span>, <span class="number">0.3081</span>,  ..., <span class="number">0.7211</span>, <span class="number">0.2220</span>, <span class="number">0.1521</span>],</span><br><span class="line">          [<span class="number">0.7928</span>, <span class="number">0.9053</span>, <span class="number">0.7208</span>,  ..., <span class="number">0.9461</span>, <span class="number">0.2194</span>, <span class="number">0.5177</span>],</span><br><span class="line">          ...,</span><br><span class="line">          [<span class="number">0.4514</span>, <span class="number">0.6893</span>, <span class="number">0.3093</span>,  ..., <span class="number">0.7236</span>, <span class="number">0.1157</span>, <span class="number">0.7789</span>],</span><br><span class="line">          [<span class="number">0.6290</span>, <span class="number">0.8666</span>, <span class="number">0.4240</span>,  ..., <span class="number">0.4480</span>, <span class="number">0.7474</span>, <span class="number">0.0391</span>],</span><br><span class="line">          [<span class="number">0.4798</span>, <span class="number">0.3155</span>, <span class="number">0.9216</span>,  ..., <span class="number">0.5462</span>, <span class="number">0.2013</span>, <span class="number">0.7234</span>]]],</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        [[[<span class="number">0.1887</span>, <span class="number">0.1911</span>, <span class="number">0.5820</span>,  ..., <span class="number">0.1653</span>, <span class="number">0.7776</span>, <span class="number">0.3725</span>],</span><br><span class="line">          [<span class="number">0.3350</span>, <span class="number">0.3595</span>, <span class="number">0.6138</span>,  ..., <span class="number">0.3139</span>, <span class="number">0.1971</span>, <span class="number">0.7547</span>],</span><br><span class="line">          [<span class="number">0.3334</span>, <span class="number">0.5563</span>, <span class="number">0.6428</span>,  ..., <span class="number">0.6337</span>, <span class="number">0.3126</span>, <span class="number">0.0349</span>],</span><br><span class="line">          ...,</span><br><span class="line">          [<span class="number">0.9218</span>, <span class="number">0.2081</span>, <span class="number">0.9644</span>,  ..., <span class="number">0.1333</span>, <span class="number">0.1972</span>, <span class="number">0.1489</span>],</span><br><span class="line">          [<span class="number">0.9598</span>, <span class="number">0.0323</span>, <span class="number">0.7847</span>,  ..., <span class="number">0.8366</span>, <span class="number">0.9486</span>, <span class="number">0.1052</span>],</span><br><span class="line">          [<span class="number">0.2474</span>, <span class="number">0.6811</span>, <span class="number">0.1599</span>,  ..., <span class="number">0.2132</span>, <span class="number">0.0211</span>, <span class="number">0.4123</span>]],</span><br><span class="line"></span><br><span class="line">         [[<span class="number">0.6994</span>, <span class="number">0.0694</span>, <span class="number">0.3789</span>,  ..., <span class="number">0.2333</span>, <span class="number">0.3922</span>, <span class="number">0.5462</span>],</span><br><span class="line">          [<span class="number">0.5692</span>, <span class="number">0.1016</span>, <span class="number">0.0053</span>,  ..., <span class="number">0.4257</span>, <span class="number">0.2898</span>, <span class="number">0.3655</span>],</span><br><span class="line">          [<span class="number">0.9806</span>, <span class="number">0.3084</span>, <span class="number">0.0129</span>,  ..., <span class="number">0.8453</span>, <span class="number">0.6952</span>, <span class="number">0.6759</span>],</span><br><span class="line">          ...,</span><br><span class="line">          [<span class="number">0.2060</span>, <span class="number">0.5261</span>, <span class="number">0.5321</span>,  ..., <span class="number">0.1070</span>, <span class="number">0.4960</span>, <span class="number">0.7185</span>],</span><br><span class="line">          [<span class="number">0.1417</span>, <span class="number">0.7306</span>, <span class="number">0.0398</span>,  ..., <span class="number">0.9186</span>, <span class="number">0.9080</span>, <span class="number">0.8449</span>],</span><br><span class="line">          [<span class="number">0.0294</span>, <span class="number">0.5325</span>, <span class="number">0.5534</span>,  ..., <span class="number">0.0995</span>, <span class="number">0.5660</span>, <span class="number">0.1330</span>]],</span><br><span class="line"></span><br><span class="line">         [[<span class="number">0.5168</span>, <span class="number">0.4303</span>, <span class="number">0.9170</span>,  ..., <span class="number">0.3214</span>, <span class="number">0.1818</span>, <span class="number">0.4606</span>],</span><br><span class="line">          [<span class="number">0.4073</span>, <span class="number">0.9889</span>, <span class="number">0.2090</span>,  ..., <span class="number">0.2702</span>, <span class="number">0.9984</span>, <span class="number">0.3591</span>],</span><br><span class="line">          [<span class="number">0.2428</span>, <span class="number">0.7390</span>, <span class="number">0.6293</span>,  ..., <span class="number">0.3361</span>, <span class="number">0.6701</span>, <span class="number">0.1649</span>],</span><br><span class="line">          ...,</span><br><span class="line">          [<span class="number">0.7242</span>, <span class="number">0.7595</span>, <span class="number">0.5713</span>,  ..., <span class="number">0.3498</span>, <span class="number">0.6220</span>, <span class="number">0.9937</span>],</span><br><span class="line">          [<span class="number">0.0988</span>, <span class="number">0.9972</span>, <span class="number">0.5013</span>,  ..., <span class="number">0.9467</span>, <span class="number">0.6382</span>, <span class="number">0.4678</span>],</span><br><span class="line">          [<span class="number">0.7906</span>, <span class="number">0.0443</span>, <span class="number">0.1911</span>,  ..., <span class="number">0.2179</span>, <span class="number">0.5613</span>, <span class="number">0.8539</span>]]]])</span><br><span class="line">In[<span class="number">56</span>]: a.shape</span><br><span class="line">Out[<span class="number">56</span>]: torch.Size([<span class="number">2</span>, <span class="number">3</span>, <span class="number">28</span>, <span class="number">28</span>])</span><br><span class="line">    </span><br><span class="line">In[<span class="number">56</span>]: a.shape</span><br><span class="line">Out[<span class="number">56</span>]: torch.Size([<span class="number">2</span>, <span class="number">3</span>, <span class="number">28</span>, <span class="number">28</span>])</span><br><span class="line">In[<span class="number">57</span>]: a.numel()          //number of element <span class="number">2</span>*<span class="number">3</span>*<span class="number">28</span>*<span class="number">28</span>  tensor占用内存的数量</span><br><span class="line">Out[<span class="number">57</span>]: <span class="number">4704</span>              </span><br><span class="line">In[<span class="number">58</span>]: a.dim()</span><br><span class="line">Out[<span class="number">58</span>]: <span class="number">4</span></span><br></pre></td></tr></table></figure><p>场景 ： CNN</p><p>[b, c, h, w] b：几张照片 c： 通道 w：宽 h：高度</p><p>PS：在我们学习的过程中，一定要结合着物理意义去学习，就比如说我创建一个 [4,3,28,28] 的向量，这个向量有什么含义？当我们把向量进行matmul(矩阵相乘) 后，又有什么含义？不仅仅是为学习工具而去学习，而要时刻明白我这样做能达到什么样的效果。</p>]]></content>
      <categories>
        <category>Pytorch学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>Pytorch</tag>
        <tag>Deep Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>Pytorch学习目录</title>
    <url>/Pytorch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20190621-learning-PyTorch_index.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>Pytorch学习目录</p></blockquote><a id="more"></a><h1 id="配置篇"><a href="#配置篇" class="headerlink" title="配置篇"></a>配置篇</h1><ul><li><a href="https://chennq.com/Pytorch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20190619-win10-install-GPU-Pytorch.html">Win10+GPU版Pytorch1.1安装</a></li></ul><h1 id="Tensor篇"><a href="#Tensor篇" class="headerlink" title="Tensor篇"></a>Tensor篇</h1><ul><li><a href="https://atlasnq.github.io/Pytorch学习笔记/20190623-learning_PyTorch_1_datatype.html" target="_blank" rel="noopener">Pytorch基础数据类型</a></li></ul><ul><li><a href="https://atlasnq.github.io/Pytorch学习笔记/20190624-learning_PyTorch_2_create_tensor.html" target="_blank" rel="noopener">创建tensor</a></li></ul><ul><li><a href="https://atlasnq.github.io/Pytorch学习笔记/20190625-learning_PyTorch_3_index_slice.html" target="_blank" rel="noopener">tensor的索引与切片</a></li></ul><ul><li><a href="https://atlasnq.github.io/Pytorch学习笔记/20190626-learning_PyTorch_4_dim.html" target="_blank" rel="noopener">维度变化</a></li></ul><ul><li><a href="https://atlasnq.github.io/Pytorch学习笔记/20190627-learning_PyTorch_5_concat_split.html" target="_blank" rel="noopener">拼接与拆分</a></li></ul><hr><h1 id="运算篇"><a href="#运算篇" class="headerlink" title="运算篇"></a>运算篇</h1><ul><li><a href="https://atlasnq.github.io/Pytorch学习笔记/20190629-learning_PyTorch_6_calculate.html" target="_blank" rel="noopener">数学运算</a></li></ul><ul><li><a href="https://atlasnq.github.io/Pytorch学习笔记/20190630-learning_PyTorch_7_statistics.html" target="_blank" rel="noopener">属性统计</a></li></ul><ul><li><a href="https://atlasnq.github.io/Pytorch学习笔记/20190701-learning_PyTorch_8_op.html" target="_blank" rel="noopener">高阶操作</a><ul><li>where 与 gather</li></ul></li></ul><hr><ul><li><a href="https://atlasnq.github.io/Pytorch学习笔记/20190702-learning_PyTorch_9_gradient.html" target="_blank" rel="noopener">什么是梯度</a></li></ul>]]></content>
      <categories>
        <category>Pytorch学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>Pytorch</tag>
        <tag>Deep Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>Web前端-bootstrap</title>
    <url>/bootstrap/20190620-bootstrap_1.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>本篇介绍bootstrap。</p></blockquote><a id="more"></a><h1 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h1><ul><li><p>对于 <code>js</code> 放在 <code>script</code> 标签内，但在导入bootstrap的js之前得先导入jQuery，bootstrap是建立在jQuery之上的。</p></li><li><p>对于 <code>css</code> 放在 <code>link</code> 标签内导入。</p></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">"/static/js/jquery.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"/static/plugins/bootstrap-3.3.7/css/bootstrap.css"</span>&gt;</span><br><span class="line">&lt;script src=<span class="string">"/static/plugins/bootstrap-3.3.7/js/bootstrap.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h1 id="使用经验"><a href="#使用经验" class="headerlink" title="使用经验"></a>使用经验</h1><p>①</p><p>在设置了 form-control 后（如select），虽然有了bootstrap的样式，但它却占满一行，我们需要在父盒子中设置 form-inline 来让这个块级元素变成行内元素。</p><p>②</p><p>设置 pull-right 就可以是该盒子向右浮动，但是这个浮动后的位置是依赖于父盒子的。</p>]]></content>
      <categories>
        <category>bootstrap</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>Web前端</tag>
        <tag>bootstrap</tag>
      </tags>
  </entry>
  <entry>
    <title>PyTorch学习之路</title>
    <url>/Pytorch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20190620-learning-PyTorch.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>将PyTorch的学习过程记录下来。</p></blockquote><a id="more"></a><h1 id="什么是PyTorch"><a href="#什么是PyTorch" class="headerlink" title="什么是PyTorch"></a>什么是PyTorch</h1><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><h3 id="张量与操作"><a href="#张量与操作" class="headerlink" title="张量与操作"></a>张量与操作</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="comment"># 张量</span></span><br><span class="line"><span class="comment"># =============================================================================</span></span><br><span class="line">x = torch.Tensor(<span class="number">5</span>,<span class="number">3</span>)</span><br><span class="line">print(x)</span><br><span class="line"> <span class="comment">#print(x.size(),type(x.size()))</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 操作</span></span><br><span class="line">y = torch.rand(<span class="number">5</span>,<span class="number">3</span>)</span><br><span class="line"><span class="comment"># # =============================================================================</span></span><br><span class="line">  <span class="comment"># 法1</span></span><br><span class="line">print(x + y)</span><br><span class="line">  <span class="comment"># 法2</span></span><br><span class="line">print(torch.add(x,y))</span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 定义一个输出张量</span></span><br><span class="line">result = torch.Tensor(<span class="number">5</span>,<span class="number">3</span>)</span><br><span class="line">torch.add(x,y, out = result)</span><br><span class="line">print(result)</span><br><span class="line">  <span class="comment"># in-place追加</span></span><br><span class="line">y.add_(x)</span><br><span class="line">print(y)</span><br><span class="line"><span class="comment"># # =============================================================================</span></span><br><span class="line">print(y)</span><br><span class="line"> <span class="comment">#x.copy_(y)</span></span><br><span class="line"> <span class="comment">#print(x)</span></span><br><span class="line">x.t_()</span><br><span class="line">print(x)</span><br><span class="line">print(x[:,<span class="number">1</span>])</span><br><span class="line"><span class="comment"># =============================================================================</span></span><br></pre></td></tr></table></figure><p>注意：torch包中带有下划线的op说明是就地进行的</p><h2 id="Nmupy转换"><a href="#Nmupy转换" class="headerlink" title="Nmupy转换"></a>Nmupy转换</h2><h3 id="将Torch张量转化为numpy数组"><a href="#将Torch张量转化为numpy数组" class="headerlink" title="将Torch张量转化为numpy数组"></a>将Torch张量转化为numpy数组</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="comment"># =============================================================================</span></span><br><span class="line">  <span class="comment"># Nmupy 转换</span></span><br><span class="line">a = torch.ones(<span class="number">5</span>)</span><br><span class="line">print(a)</span><br><span class="line">b = a.numpy()</span><br><span class="line">print(b)</span><br><span class="line"> <span class="comment"># 当给tensor a列表的每个值加一， numpys列表中的每个值加一</span></span><br><span class="line">a.add_(<span class="number">1</span>)</span><br><span class="line">print(a)</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure><h3 id="将numpy数组转化为Torch张量"><a href="#将numpy数组转化为Torch张量" class="headerlink" title="将numpy数组转化为Torch张量"></a>将numpy数组转化为Torch张量</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="comment"># =============================================================================</span></span><br><span class="line"><span class="comment"># 将numpy数组转换成Torch张量</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.ones(<span class="number">5</span>)</span><br><span class="line">b = torch.from_numpy(a)</span><br><span class="line">np.add(a, <span class="number">1</span>, out=a)</span><br><span class="line">print(a)</span><br><span class="line">print(b)</span><br><span class="line">a[<span class="number">0</span>] = <span class="number">333</span></span><br><span class="line">print(a)</span><br><span class="line">print(b)</span><br><span class="line"><span class="comment">## 结论和上面一样，无论是从tensor转换成numpy 还是反过来，都是一个内容修改，另一个也会变</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># =============================================================================</span></span><br></pre></td></tr></table></figure><h2 id="CUDA传感器"><a href="#CUDA传感器" class="headerlink" title="CUDA传感器"></a>CUDA传感器</h2><p>cuda传感器是一个基于Python的科学计算包，主要分入如下2部分：</p><ul><li>使用GPU的功能代替numpy</li><li>一个深刻的学习研究平台，提供最大的灵活性和速度</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># CUDA传感器</span></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line">x = torch.Tensor(<span class="number">5</span>,<span class="number">3</span>)</span><br><span class="line">y = torch.rand(<span class="number">5</span>,<span class="number">3</span>)</span><br><span class="line"><span class="keyword">if</span> torch.cuda.is_available():  <span class="comment"># 判断cuda是否可用</span></span><br><span class="line">  x = x.cuda()</span><br><span class="line">  print(x)</span><br><span class="line">  y = y.cuda()</span><br><span class="line">  x + y</span><br></pre></td></tr></table></figure><h1 id="Autograd：自动分化"><a href="#Autograd：自动分化" class="headerlink" title="Autograd：自动分化"></a>Autograd：自动分化</h1><p>autograd包是<code>PyTorch</code>所有神经网络的核心。</p><p><code>autograd</code>包为<code>Tensors</code>上的所有操作提供了自动区分。它是一个逐个运行的框架，这意味着您的<code>backprop</code>由您的代码运行定义，每一次迭代都可以不同。</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p><code>autograd.Variable</code>是包的<strong>中央类</strong>。它包含一个<code>Tensor</code>，并支持几乎所有定义的操作。完成计算后，可以调用<code>.backward()</code>并自动计算所有梯度。</p><p>变量与变量是有创造关系的，你可以对这些关系组成的函数求导。</p><p>创造一个变量：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch.autograd <span class="keyword">import</span> Variable</span><br><span class="line">x = Variable(torch.ones(<span class="number">2</span>,<span class="number">2</span>),requires_grad= <span class="literal">True</span>)</span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure><p><u>输出</u>：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tensor([[<span class="number">1.</span>, <span class="number">1.</span>],</span><br><span class="line">        [<span class="number">1.</span>, <span class="number">1.</span>]], requires_grad=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>做一个变量的操作：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">y = x + <span class="number">2</span></span><br><span class="line">print(y)</span><br></pre></td></tr></table></figure><p><u>输出</u>：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tensor([[<span class="number">3.</span>, <span class="number">3.</span>],</span><br><span class="line">        [<span class="number">3.</span>, <span class="number">3.</span>]], grad_fn=&lt;AddBackward0&gt;)</span><br></pre></td></tr></table></figure><p><code>y</code> 是由于操作造成的，所以它有一个创造者。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(y.creator)  <span class="comment"># 报错，已替换为grad_fn</span></span><br><span class="line">print(y.grad_fn)</span><br></pre></td></tr></table></figure><p><u>输出</u>:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;AddBackward0 object at <span class="number">0x00000226055E8940</span>&gt;</span><br></pre></td></tr></table></figure><p>对y进行更多的操作</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">z = y * y * <span class="number">3</span></span><br><span class="line">out = z.mean()</span><br><span class="line">print(z,out)</span><br></pre></td></tr></table></figure><p><u>输出:</u></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tensor([[<span class="number">27.</span>, <span class="number">27.</span>],</span><br><span class="line">        [<span class="number">27.</span>, <span class="number">27.</span>]], grad_fn=&lt;MulBackward0&gt;) tensor(<span class="number">27.</span>, grad_fn=&lt;MeanBackward0&gt;)</span><br></pre></td></tr></table></figure><p><strong>梯度</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">out.backward()</span><br></pre></td></tr></table></figure><p>打印梯度 d(out)/dx</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(x.grad)</span><br></pre></td></tr></table></figure><p><u>输出:</u></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tensor([[<span class="number">4.5000</span>, <span class="number">4.5000</span>],</span><br><span class="line">        [<span class="number">4.5000</span>, <span class="number">4.5000</span>]])</span><br></pre></td></tr></table></figure><p>自动求导可以做很多疯狂的事情</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = torch.rand(<span class="number">3</span>)</span><br><span class="line">x = Variable(x, requires_grad= <span class="literal">True</span>)</span><br><span class="line">y = x * <span class="number">2</span></span><br><span class="line"><span class="keyword">while</span> y.data.norm()&lt; <span class="number">1000</span>:</span><br><span class="line">    y = y * <span class="number">2</span></span><br><span class="line">    </span><br><span class="line">print(y)</span><br></pre></td></tr></table></figure><p>解释：</p><p><code>y.data.norm()</code>是用来求y的二范数</p><p>y的二范数小于1000的约束条件下，y的公式其实是 <code>y = 1024*x</code></p><p><u>输出：</u></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tensor([<span class="number">591.5636</span>, <span class="number">884.0807</span>, <span class="number">773.9807</span>], grad_fn=&lt;MulBackward0&gt;)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">gradients = torch.FloatTensor([<span class="number">0.1</span>, <span class="number">1.0</span>, <span class="number">0.0001</span>])</span><br><span class="line">y.backward(gradients)</span><br><span class="line">print(x.grad)</span><br></pre></td></tr></table></figure><p><u>输出：</u></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tensor([<span class="number">1.0240e+02</span>, <span class="number">1.0240e+03</span>, <span class="number">1.0240e-01</span>])</span><br></pre></td></tr></table></figure><h1 id="LeNet："><a href="#LeNet：" class="headerlink" title="LeNet："></a>LeNet：</h1><p><img src="/Pytorch学习笔记/20190620-learning-PyTorch/LeNet.png" alt="LeNet"></p><h2 id="显示CIFAR数据集图片"><a href="#显示CIFAR数据集图片" class="headerlink" title="显示CIFAR数据集图片"></a>显示CIFAR数据集图片</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">import</span> torchvision.transforms <span class="keyword">as</span> transforms</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">transform = transforms.Compose([transforms.ToTensor(),      <span class="comment"># 转为tensor</span></span><br><span class="line">                                transforms.Normalize((<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>), (<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>))  <span class="comment"># 归一化</span></span><br><span class="line">                                ])</span><br><span class="line">trainset = torchvision.datasets.CIFAR10(root=<span class="string">"./data"</span>, train=<span class="literal">True</span>, download=<span class="literal">True</span>, transform=transform)</span><br><span class="line">print(len(trainset))</span><br><span class="line">trainloader = torch.utils.data.DataLoader(trainset, batch_size=<span class="number">4</span>,</span><br><span class="line">                                          shuffle=<span class="literal">True</span>, num_workers=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">testset = torchvision.datasets.CIFAR10(root=<span class="string">'./data'</span>, train=<span class="literal">False</span>, download=<span class="literal">True</span>, transform=transform)</span><br><span class="line">testloader = torch.utils.data.DataLoader(testset, batch_size=<span class="number">4</span>,</span><br><span class="line">                                          shuffle=<span class="literal">False</span>, num_workers=<span class="number">2</span>)</span><br><span class="line">classes = (<span class="string">'plane'</span>, <span class="string">'car'</span>, <span class="string">'bird'</span>, <span class="string">'cat'</span>,</span><br><span class="line">           <span class="string">'deer'</span>, <span class="string">'dog'</span>, <span class="string">'frog'</span>, <span class="string">'horse'</span>, <span class="string">'ship'</span>, <span class="string">'truck'</span>)</span><br><span class="line"><span class="comment"># img, target = trainset[0]</span></span><br><span class="line"><span class="comment"># print(img)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">imshow</span><span class="params">(img)</span>:</span></span><br><span class="line">    img =img / <span class="number">2</span> + <span class="number">0.5</span>  <span class="comment"># unnormalize</span></span><br><span class="line">    npimg = img.numpy()</span><br><span class="line">    plt.imshow(np.transpose(npimg, (<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>)))</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:           <span class="comment"># 开启多进程</span></span><br><span class="line">    dataiter = iter(trainloader)</span><br><span class="line">    images, labels = dataiter.next()</span><br><span class="line">    imshow(torchvision.utils.make_grid(images))</span><br><span class="line">    print(<span class="string">' '</span>.join(<span class="string">'%5s'</span>%classes[labels[j]] <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">4</span>)))</span><br></pre></td></tr></table></figure><h2 id="定义网络"><a href="#定义网络" class="headerlink" title="定义网络"></a>定义网络</h2><p>等先把基础写完再继续补充😄</p><p>未完待续！！！</p><hr>]]></content>
      <categories>
        <category>Pytorch学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>Pytorch</tag>
        <tag>Deep Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>JS中的JSON</title>
    <url>/JavaScript/20190620-JavaScript_2.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>本篇介绍JS中JSON数据的格式以及转换。</p></blockquote><a id="more"></a><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li><p>json是 JavaScript Object Notation 的首字母缩写，单词的意思是javascript对象表示法，这里说的json指的是类似于javascript对象的一种数据格式。</p></li><li><p>json的作用：在不同的系统平台，或不同编程语言之间传递数据。</p></li></ul><h2 id="json数据的语法"><a href="#json数据的语法" class="headerlink" title="json数据的语法"></a>json数据的语法</h2><p>json数据对象类似于JavaScript中的对象，但是它的键对应的值里面是没有函数方法的，值可以是普通变量，不支持undefined，值还可以是数组或者json对象。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 原生的js的json对象</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  age:<span class="number">10</span>,</span><br><span class="line">  sex: <span class="string">'女'</span>,</span><br><span class="line">  work:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"好好学习"</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// json数据的数组格式：</span></span><br><span class="line">[<span class="string">"tom"</span>,<span class="number">18</span>,<span class="string">"programmer"</span>]</span><br><span class="line"><span class="comment">// 复杂的json格式数据可以包含对象和数组的写法。</span></span><br><span class="line">    </span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>:<span class="string">"小明"</span>,</span><br><span class="line">  <span class="string">"age"</span>:<span class="number">200</span>,</span><br><span class="line">  <span class="string">"is_delete"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">"fav"</span>:[<span class="string">"code"</span>,<span class="string">"eat"</span>,<span class="string">"swim"</span>,<span class="string">"read"</span>],</span><br><span class="line">  <span class="string">"son"</span>:&#123;</span><br><span class="line">    <span class="string">"name"</span>:<span class="string">"小小明"</span>,</span><br><span class="line">    <span class="string">"age"</span>:<span class="number">100</span>,</span><br><span class="line">    <span class="string">"lve"</span>:[<span class="string">"code"</span>,<span class="string">"eat"</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">1. json文件的后缀是.json</span><br><span class="line">2. json文件一般保存一个单一的json数据</span><br><span class="line">3. json数据的属性不能是方法或者undefined，属性值只能：数值[整数,小数,布尔值]、字符串、json和数组</span><br><span class="line">4. json数据只使用双引号、每一个属性成员之间使用逗号隔开，并且最后一个成员没有逗号。</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="attr">"name"</span>:<span class="string">"小明"</span>,</span><br><span class="line">      <span class="attr">"age"</span>:<span class="number">200</span>,</span><br><span class="line">      <span class="attr">"fav"</span>:[<span class="string">"code"</span>,<span class="string">"eat"</span>,<span class="string">"swim"</span>,<span class="string">"read"</span>],</span><br><span class="line">      <span class="attr">"son"</span>:&#123;</span><br><span class="line">        <span class="attr">"name"</span>:<span class="string">"小小明"</span>,</span><br><span class="line">        <span class="attr">"age"</span>:<span class="number">100</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="json数据转换方法"><a href="#json数据转换方法" class="headerlink" title="json数据转换方法"></a>json数据转换方法</h2><p>javascript提供了一个JSON对象来操作json数据的数据转换.</p><table><thead><tr><th>方法</th><th>参数</th><th>返回值</th><th>描述</th></tr></thead><tbody><tr><td>stringify</td><td>json对象</td><td>字符串</td><td>json对象转成字符串</td></tr><tr><td>parse</td><td>字符串</td><td>json对象</td><td>字符串格式的json数据转成json对象</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// json语法</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> humen = &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="string">"username"</span>:<span class="string">"xiaohui"</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="string">"password"</span>:<span class="string">"1234567"</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="string">"age"</span>:<span class="number">20</span></span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(humen);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> humen);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">'-------------'</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// JSON对象提供对json格式数据的转换功能</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// stringify(json对象)  # 用于把json转换成字符串</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> result = <span class="built_in">JSON</span>.stringify(humen);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(result);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> result);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">'-------------'</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// parse(字符串类型的json数据)  # 用于把字符串转成json对象</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> json_str = <span class="string">'&#123;"password":"1123","age":20,"name":"xiaobai"&#125;'</span>;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(json_str);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> json_str);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">'-------------'</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> json_obj = <span class="built_in">JSON</span>.parse(json_str);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(json_obj);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> json_obj);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(json_obj.age)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>Web前端</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Win10+GPU版Pytorch1.1安装</title>
    <url>/Pytorch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20190619-win10-install-GPU-Pytorch.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>本篇为Pytorch安装。</p></blockquote><a id="more"></a><h1 id="环境配置篇"><a href="#环境配置篇" class="headerlink" title="环境配置篇"></a>环境配置篇</h1><h2 id="安装cuda"><a href="#安装cuda" class="headerlink" title="安装cuda"></a>安装cuda</h2><h3 id="更新nvidia驱动"><a href="#更新nvidia驱动" class="headerlink" title="更新nvidia驱动"></a>更新nvidia驱动</h3><p>打开GeForce Game Ready Driver或在 <a href="https://www.geforce.cn/drivers" target="_blank" rel="noopener">GeForce Experience</a>中下载符合自己gpu的程序。</p><p><img src="/Pytorch学习笔记/20190619-win10-install-GPU-Pytorch/GeForce.png" alt="GeForce"></p><h3 id="选择cuda"><a href="#选择cuda" class="headerlink" title="选择cuda"></a>选择cuda</h3><ol><li><p>打开nvidia控制面板</p><p><img src="/Pytorch学习笔记/20190619-win10-install-GPU-Pytorch/nvidia%E6%8E%A7%E5%88%B6%E9%9D%A2%E6%9D%BF.png" alt="nvidia控制面板"></p></li></ol><ol start="2"><li><p>点击帮助、点击系统信息、在点击组件在3D设置中可以看到cuda信息</p><p><img src="/Pytorch学习笔记/20190619-win10-install-GPU-Pytorch/cuda%E4%BF%A1%E6%81%AF.png" alt="cuda信息"></p><p>在我升级过nvidia驱动后，cuda的版本更新到了10.1。接下来下载cuda</p><p><a href="https://developer.nvidia.com/cuda-downloads?target_os=Windows&target_arch=x86_64&target_version=10&target_type=exelocal" target="_blank" rel="noopener">cuda10.1</a>安装完毕。</p></li></ol><h2 id="安装cuDNN"><a href="#安装cuDNN" class="headerlink" title="安装cuDNN"></a>安装cuDNN</h2><p>在安装了cuda10.1后选择对应的cuDNN版本v7.6.1</p><p>解压文件，然后添加bin目录到环境变量</p><p><img src="/Pytorch学习笔记/20190619-win10-install-GPU-Pytorch/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.png" alt="环境变量"></p><h2 id="使用Anaconda-prompt创建环境"><a href="#使用Anaconda-prompt创建环境" class="headerlink" title="使用Anaconda prompt创建环境"></a>使用Anaconda prompt创建环境</h2><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">conda create -n pytorch_gpu pip <span class="attribute">python</span>=3.7</span><br></pre></td></tr></table></figure><p>其中pytorch_gpu是环境的名字，python版本是3.7</p><p><img src="/Pytorch学习笔记/20190619-win10-install-GPU-Pytorch/%E5%88%9B%E5%BB%BA%E7%8E%AF%E5%A2%83.png" alt="创建环境"></p><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">conda <span class="built_in">activate</span> pytorch_gpu</span><br></pre></td></tr></table></figure><p>这个命令可以进入创建好的环境。</p><h2 id="安装Pytorch"><a href="#安装Pytorch" class="headerlink" title="安装Pytorch"></a>安装Pytorch</h2><p>建议切换源，我使用的是中国科学技术大学”（<a href="https://link.zhihu.com/?target=http%3A//mirrors.ustc.edu.cn/" target="_blank" rel="noopener">USTC Open Source Software Mirror</a>）提供anaconda的镜像源，速度提高不少。</p><p>方法一：</p><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">conda <span class="built_in">config</span> <span class="comment">--add channels https://mirrors.ustc.edu.cn/anaconda/pkgs/free/</span></span><br><span class="line">conda <span class="built_in">config</span> <span class="comment">--set show_channel_urls yes</span></span><br></pre></td></tr></table></figure><p>方法二：</p><p>打开.condarc文件，进行编辑</p><p><img src="/Pytorch学习笔记/20190619-win10-install-GPU-Pytorch/%E4%BF%AE%E6%94%B9%E6%BA%90.png" alt="修改源"></p><p>这个顺序存在一个优先级，会先在中国科学技术大学的镜像源寻找，如果大家感觉速度慢，也可以换别的镜像源。</p><p>打开<a href="https://pytorch.org/get-started/locally/" target="_blank" rel="noopener">官网</a>选择后复制命令</p><p><img src="/Pytorch学习笔记/20190619-win10-install-GPU-Pytorch/%E9%80%89%E6%8B%A9%E7%89%88%E6%9C%AC.png" alt="选择版本"></p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">conda install pytorch torchvision <span class="attribute">cudatoolkit</span>=10.0 -c pytorch</span><br></pre></td></tr></table></figure><p><img src="/Pytorch学习笔记/20190619-win10-install-GPU-Pytorch/%E4%B8%8B%E8%BD%BDPytorch.png" alt="下载Pytorch"></p><p>整个过程只需要按一下’y’即可。</p><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>为了确保PyTorch是否安装成功，我们需要运行简单的样例代码测试，例如打印出随机生成的张量矩阵，以及gpu是否可以使用。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line">x = torch.rand(<span class="number">5</span>,<span class="number">5</span>)</span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure><p>输出类似下面</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">tensor([[<span class="number">0.7078</span>, <span class="number">0.1424</span>, <span class="number">0.3411</span>, <span class="number">0.3987</span>, <span class="number">0.3476</span>],</span><br><span class="line">        [<span class="number">0.7534</span>, <span class="number">0.7137</span>, <span class="number">0.3489</span>, <span class="number">0.4226</span>, <span class="number">0.3640</span>],</span><br><span class="line">        [<span class="number">0.4104</span>, <span class="number">0.8411</span>, <span class="number">0.5112</span>, <span class="number">0.0629</span>, <span class="number">0.0664</span>],</span><br><span class="line">        [<span class="number">0.7568</span>, <span class="number">0.9495</span>, <span class="number">0.3300</span>, <span class="number">0.2392</span>, <span class="number">0.6441</span>],</span><br><span class="line">        [<span class="number">0.7615</span>, <span class="number">0.1883</span>, <span class="number">0.6001</span>, <span class="number">0.9663</span>, <span class="number">0.3313</span>]])</span><br></pre></td></tr></table></figure><p>如果ok，pytorch安装成功。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.cuda.is_available()</span><br></pre></td></tr></table></figure><p>返回True，GPU版Pytorch安装完毕。</p><h2 id="将PyTorch导入Pycharm"><a href="#将PyTorch导入Pycharm" class="headerlink" title="将PyTorch导入Pycharm"></a>将PyTorch导入Pycharm</h2><p>点击Pycharm的选项栏中的File选择Settings，然后点击Project Interpreter，接着点击右侧的Add。</p><p><img src="/Pytorch学习笔记/20190619-win10-install-GPU-Pytorch/%E5%AF%BC%E5%85%A5pycharm1.png" alt="导入pycharm1"></p><p>然后在Conda Environment中选择Existing environment</p><p>选择Anaconda3下的python.exe，Conda executable选择conda.exe</p><p><img src="/Pytorch学习笔记/20190619-win10-install-GPU-Pytorch/%E5%AF%BC%E5%85%A5pycharm2.png" alt="导入pycharm2"></p><p>如果失败，选择Anaconda3下的env下的新创建的虚拟环境中选择python，试一试。</p><h3 id="Pycharm开启科学计算模式（Scientific-Mode）"><a href="#Pycharm开启科学计算模式（Scientific-Mode）" class="headerlink" title="Pycharm开启科学计算模式（Scientific Mode）"></a>Pycharm开启科学计算模式（Scientific Mode）</h3><h4 id="具体步骤："><a href="#具体步骤：" class="headerlink" title="具体步骤："></a>具体步骤：</h4><ol><li>Settings –&gt; Tools –&gt; Python Scientific &gt; Show plots in tool window 勾选</li><li>View 勾选 Scientific Mode</li><li>Run–&gt;Edit configurations…</li><li>勾选 Run with python console</li></ol><p><img src="/Pytorch学习笔记/20190619-win10-install-GPU-Pytorch/pycharm%E7%95%8C%E9%9D%A2.png" alt="pycharm界面"></p><p>开启科学运算模式，舒服，正在习惯这个姿势。</p><p>ps：如果想恢复到普通模式，只需要在view下，取消scientific mode勾选。</p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><ol><li>anaconda查看虚拟环境</li></ol><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">conda env <span class="built_in">list</span></span><br></pre></td></tr></table></figure><ol start="2"><li>进入虚拟环境，可以在anaconda下，直接open terminal</li></ol><ol start="3"><li>但如果想要以管理员的身份进入呢？可以使用如下命令：</li></ol><figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">C:<span class="symbol">\U</span>sers<span class="symbol">\A</span>TLAS<span class="symbol">\A</span>naconda3<span class="symbol">\c</span>ondabin&gt;activate.bat pytorch_gpu</span><br></pre></td></tr></table></figure><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>​ 环境安装完毕，接下来开始我的探索之路，共勉！</p><hr>]]></content>
      <categories>
        <category>Pytorch学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>Pytorch</tag>
        <tag>Deep Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>Web前端-jQuery</title>
    <url>/jQuery/20190615-jQuery_1.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>本篇介绍jQuery。</p></blockquote><a id="more"></a><h2 id="jquery的优势"><a href="#jquery的优势" class="headerlink" title="jquery的优势"></a>jquery的优势</h2><ol><li>js代码对浏览器的兼容性做的更好了</li><li>隐式循环</li><li>链式操作</li></ol><p>jQuery理念“Write Less, Do More”</p><h2 id="jquery是什么"><a href="#jquery是什么" class="headerlink" title="jquery是什么"></a>jquery是什么</h2><p>高度封装了js代码的模块</p><ul><li><p>封装了dom节点</p></li><li><p>还封装了很多操作dom节点的简便方法。</p></li></ul><p><strong>找节点的过程也是对象实例化的过程。</strong>这是优势但同时也带来了效率问题。</p><p><img src="/jQuery/20190615-jQuery_1/jQuery%E6%98%AF%E4%BB%80%E4%B9%88.png" alt="jQuery是什么"></p><h2 id="jQuery的导入"><a href="#jQuery的导入" class="headerlink" title="jQuery的导入"></a>jQuery的导入</h2><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">https:</span><span class="comment">//code.jquery.com/jquery-3.4.1.js 未压缩版</span></span><br><span class="line"><span class="symbol">https:</span><span class="comment">//code.jquery.com/jquery-3.4.1.min.js 压缩版</span></span><br><span class="line">下载:保存在本地文件里</span><br><span class="line">引入:<span class="params">&lt;script src="jquery3<span class="number">.4</span><span class="number">.1</span>.min.js"&gt;</span><span class="params">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery3.4.1.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">验证：</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(jQuery)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="jQuery对象"><a href="#jQuery对象" class="headerlink" title="jQuery对象"></a>jQuery对象</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;jQuery(<span class="string">'#box'</span>)</span><br><span class="line">jQuery.fn.init [div#box]</span><br><span class="line">0: div#box</span><br><span class="line">length: <span class="number">1</span></span><br><span class="line">__proto__: <span class="built_in">Object</span>(<span class="number">0</span>)</span><br><span class="line">&gt;&gt;&gt;$(<span class="string">'#box'</span>)   </span><br><span class="line"><span class="comment">//结果同上</span></span><br><span class="line">&gt;&gt;&gt;$ === jQuery</span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure><p>$ 就是 jQuery 的别名</p><p>jQuery是一个构造函数，我们通过$()返回的是一个伪数组，它是jQuery的一个实例</p><h2 id="jQuery对象和dom对象的关系和转换"><a href="#jQuery对象和dom对象的关系和转换" class="headerlink" title="jQuery对象和dom对象的关系和转换"></a>jQuery对象和dom对象的关系和转换</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">jQuery封装了dom</span><br><span class="line">dom转成jQuery ： jQuery(dom对象) === $(dom对象)</span><br><span class="line">jQuery转成dom	： jq对象[index] === $(dom对象)[index]</span><br></pre></td></tr></table></figure><h1 id="jQuery的选择器（方式一）"><a href="#jQuery的选择器（方式一）" class="headerlink" title="jQuery的选择器（方式一）"></a>jQuery的选择器（方式一）</h1><h2 id="基础选择器"><a href="#基础选择器" class="headerlink" title="基础选择器"></a>基础选择器</h2><p>id选择器<code>#</code>、类选择器 <code>.</code> 、标签选择器<code>*</code>、通用选择器 <code>*</code>、 交集选择器 <code>标签名.类名/#id</code>、并集选择器 <code>,</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">#id选择器   .类选择器  标签选择器   *通用选择器</span><br><span class="line">$(<span class="string">'#city'</span>)</span><br><span class="line">k.fn.init [ul#city]0: ul#citylength: 1__proto__: Object(0)</span><br><span class="line">$(<span class="string">'.box'</span>)</span><br><span class="line">k.fn.init [div.box, <span class="attr">prevObject</span>: k.fn.init(<span class="number">1</span>)]<span class="number">0</span>: div.boxlength: <span class="number">1</span>prevObject: k.fn.init [<span class="built_in">document</span>]__proto__: <span class="built_in">Object</span>(<span class="number">0</span>)</span><br><span class="line">$(<span class="string">'li'</span>)</span><br><span class="line">k.fn.init(<span class="number">4</span>) [li, li, li, li, <span class="attr">prevObject</span>: k.fn.init(<span class="number">1</span>)]<span class="number">0</span>: li1: li2: li3: lilength: <span class="number">4</span>prevObject: k.fn.init [<span class="built_in">document</span>]__proto__: <span class="built_in">Object</span>(<span class="number">0</span>)</span><br><span class="line">$(<span class="string">'a'</span>)</span><br><span class="line">k.fn.init(<span class="number">2</span>) [a, a, <span class="attr">prevObject</span>: k.fn.init(<span class="number">1</span>)]<span class="number">0</span>: a1: alength: <span class="number">2</span>prevObject: k.fn.init [<span class="built_in">document</span>]__proto__: <span class="built_in">Object</span>(<span class="number">0</span>)</span><br><span class="line">$(<span class="string">'*'</span>)</span><br><span class="line">k.fn.init(16) [html, head, meta, title, body, div.box, ul#city, li, li, a, li, a, li, p, script, script, prevObject: k.fn.init(1)]</span><br><span class="line"></span><br><span class="line">div.c1交集选择器      div,p并集选择器</span><br><span class="line">$(<span class="string">'div.box'</span>)</span><br><span class="line">k.fn.init [div.box, <span class="attr">prevObject</span>: k.fn.init(<span class="number">1</span>)]<span class="number">0</span>: div.boxlength: <span class="number">1</span>prevObject: k.fn.init [<span class="built_in">document</span>]__proto__: <span class="built_in">Object</span>(<span class="number">0</span>)</span><br><span class="line">$(<span class="string">'div,p,a'</span>)</span><br><span class="line">k.fn.init(<span class="number">4</span>) [div.box, a, a, p, <span class="attr">prevObject</span>: k.fn.init(<span class="number">1</span>)]</span><br></pre></td></tr></table></figure><h2 id="层级选择器"><a href="#层级选择器" class="headerlink" title="层级选择器"></a>层级选择器</h2><p>后代选择器 <code>空格</code>、 子代选择器 <code>&gt;</code> 、 毗邻选择器 <code>+</code> （必须得挨着？） 、弟弟选择器 <code>~</code>(弟弟要浪)</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">空格 后代选择器    &gt;子代选择器 +毗邻选择器  ~弟弟选择器</span><br><span class="line">$(<span class="string">'div li'</span>)</span><br><span class="line">$(<span class="string">'div&gt;ul&gt;li'</span>)</span><br><span class="line">$(<span class="string">'.baidu+li'</span>)</span><br><span class="line">k.fn.init [prevObject: k.fn.init(<span class="number">1</span>)]</span><br><span class="line">$(<span class="string">'.baidu~li'</span>)</span><br><span class="line">k.fn.init(<span class="number">3</span>) [li, li, li, <span class="attr">prevObject</span>: k.fn.init(<span class="number">1</span>)]</span><br></pre></td></tr></table></figure><h2 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h2><p><code>[属性名]</code></p><p><code>标签名[属性名=字符串]</code></p><p><code>标签名[属性名=正则匹配]</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'[属性名]'</span>)         必须是含有某属性的标签</span><br><span class="line">$(<span class="string">'a[属性名]'</span>)        含有某属性的a标签</span><br><span class="line">$(<span class="string">'选择器[属性名]'</span>)    含有某属性的符合前面选择器的标签</span><br><span class="line">$(<span class="string">'选择器[属性名="aaaa"]'</span>)  属性名=aaa的符合选择器要求标签</span><br><span class="line">$(<span class="string">'选择器[属性名$="xxx"]'</span>)  属性值以xxx结尾的</span><br><span class="line">$(<span class="string">'选择器[属性名^="xxx"]'</span>)  属性值以xxx开头的</span><br><span class="line">$(<span class="string">'选择器[属性名*="xxx"]'</span>)  属性值包含xxx</span><br><span class="line">$(<span class="string">'选择器[属性名1][属性名2="xxx]'</span>)  拥有属性<span class="number">1</span>,且属性二的值=<span class="string">'xxx'</span>,符合前面选择器要求的</span><br></pre></td></tr></table></figure><h1 id="jQuery的筛选器"><a href="#jQuery的筛选器" class="headerlink" title="jQuery的筛选器"></a>jQuery的筛选器</h1><p>筛选器是在实例化中进行筛选</p><h2 id="基础筛选器"><a href="#基础筛选器" class="headerlink" title="基础筛选器"></a>基础筛选器</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'选择器:筛选器'</span>)</span><br><span class="line">$(<span class="string">'选择器:first'</span>)</span><br><span class="line">作用于选择器选择出来的结果</span><br><span class="line">$(<span class="string">'选择器:first'</span>)		<span class="comment">//找第一个</span></span><br><span class="line">$(<span class="string">'选择器:last'</span>)		<span class="comment">//找最后一个</span></span><br><span class="line">:eq(index)           	<span class="comment">// :eq(1)   :eq(-2)</span></span><br><span class="line">:even     </span><br><span class="line">:odd     		     </span><br><span class="line">:gt(index)				<span class="comment">// 大于    gt(0) 相当于 索引 &gt; 0</span></span><br><span class="line">:lt(index)             <span class="comment">// 小于</span></span><br><span class="line">:not(选择器)			<span class="comment">// not(选择器)  not(#sh)</span></span><br><span class="line">:has(选择器)			<span class="comment">// has(选择器) has(a) 含有a标签的li标签</span></span><br><span class="line"></span><br><span class="line">区别 $(<span class="string">'li a'</span>)    <span class="comment">//找li中的a标签</span></span><br></pre></td></tr></table></figure><h2 id="表单筛选器"><a href="#表单筛选器" class="headerlink" title="表单筛选器"></a>表单筛选器</h2><h3 id="type筛选器"><a href="#type筛选器" class="headerlink" title="type筛选器"></a>type筛选器</h3><p>根据input标签的type类型进行筛选</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">':text'</span>)</span><br><span class="line">$(<span class="string">':password'</span>)</span><br><span class="line">$(<span class="string">':radio'</span>)</span><br><span class="line">$(<span class="string">':checkbox'</span>)</span><br><span class="line">$(<span class="string">':file'</span>)</span><br><span class="line">$(<span class="string">':submit'</span>)</span><br><span class="line">$(<span class="string">':resset'</span>)</span><br><span class="line">$(<span class="string">':button'</span>)</span><br><span class="line">note : date是找不到的</span><br></pre></td></tr></table></figure><h3 id="状态筛选器"><a href="#状态筛选器" class="headerlink" title="状态筛选器"></a>状态筛选器</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">':enabled'</span>)</span><br><span class="line">$(<span class="string">':disenabled'</span>)</span><br><span class="line">$(<span class="string">':checked'</span>)</span><br><span class="line">$(<span class="string">':selected'</span>)</span><br><span class="line">$(<span class="string">'input:checkbox:checked'</span>)</span><br></pre></td></tr></table></figure><h1 id="jQuery的筛选器方法（方式二）"><a href="#jQuery的筛选器方法（方式二）" class="headerlink" title="jQuery的筛选器方法（方式二）"></a>jQuery的筛选器方法（方式二）</h1><p>通过已知的某个节点（jQuery对象）去找 兄弟、祖宗、儿子。</p><p>找兄弟：</p><ul><li>找所有兄弟 sibllings</li><li>找哥哥 prev() prevAll() prevUntil(‘选择器’)</li><li>找弟弟 next() nextAll() nextUntil(‘选择器’)</li></ul><p>找祖宗：</p><ul><li>找父亲 parent() parents()</li><li>刨祖坟 parentsUntil(‘body’)</li></ul><p>找儿子：</p><ul><li>找儿子 children()</li></ul><p>筛选方法：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(selector).first()               <span class="comment">// 选第一个</span></span><br><span class="line">$(selector).last()                <span class="comment">// 选最后一个</span></span><br><span class="line">$(selector).eq(index)             <span class="comment">// 选第 index </span></span><br><span class="line">$(selector).not(<span class="string">'选择器'</span>)          <span class="comment">//去掉满足选择器条件的</span></span><br><span class="line">$(selector).filter(<span class="string">'选择器'</span>) 		<span class="comment">//交集选择器，在所有的结果中继续找满足选择器要求的</span></span><br><span class="line">$(selector).find(<span class="string">'选择器'</span>)		    <span class="comment">//后代选择器  </span></span><br><span class="line">$(selector).has(<span class="string">'选择器'</span>)			<span class="comment">// 通过后代关系找当代</span></span><br></pre></td></tr></table></figure><h1 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h1><h2 id="事件的绑定"><a href="#事件的绑定" class="headerlink" title="事件的绑定"></a>事件的绑定</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button&gt;点击<span class="number">1</span>&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;button&gt;点击2&lt;/</span>button&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script src="jquery.3.4.1.js"&gt;&lt;/</span>script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="string">'button'</span>).click(</span><br><span class="line">        <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            alert(<span class="string">'你点了我一下!'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h1 id="jQuery操作标签"><a href="#jQuery操作标签" class="headerlink" title="jQuery操作标签"></a>jQuery操作标签</h1><ul><li>操作文本 : &lt;&gt;文本内容&lt;&gt;</li><li>操作标签 : 添加 删除 修改 克隆</li><li>操作属性 : 通用属性 类 css样式 value 盒子模型 滚动条</li></ul><h2 id="操作文本"><a href="#操作文本" class="headerlink" title="操作文本"></a>操作文本</h2><ul><li><code>text</code> 与 <code>html</code> 都可以获得值设置值</li><li>text 像 innerText html 像 innerHTML</li><li>html 还可以识别<strong>标签</strong>、<strong>dom对象</strong>、<strong>jq对象</strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">text()</span><br><span class="line">$(<span class="string">'li:first'</span>).text()         <span class="comment">// 获取值</span></span><br><span class="line">$(<span class="string">'li:first'</span>).text(<span class="string">'wahaha'</span>) <span class="comment">// 设置值</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">'li:last'</span>).html()          <span class="comment">// 获取值</span></span><br><span class="line">$(<span class="string">'li:last'</span>).html(<span class="string">'qqxing'</span>)  <span class="comment">// 设置值</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">'li:first'</span>).html(<span class="string">'&lt;a href="http://www.mi.com"&gt;爽歪歪&lt;/a&gt;'</span>)   <span class="comment">//a标签</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>)</span><br><span class="line">a.innerText = <span class="string">'我是AD钙'</span></span><br><span class="line">$(<span class="string">'li:last'</span>).html(a)     	<span class="comment">//a 是dom对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a2 = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>)</span><br><span class="line"><span class="keyword">var</span> jqobj = $(a2)</span><br><span class="line">jqobj.text(<span class="string">'乳娃娃'</span>)</span><br><span class="line">$(<span class="string">'li:last'</span>).html(jqobj)   <span class="comment">//jqobj是jquery对象</span></span><br></pre></td></tr></table></figure><h2 id="操作标签"><a href="#操作标签" class="headerlink" title="操作标签"></a>操作标签</h2><h3 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h3><h4 id="父子关系"><a href="#父子关系" class="headerlink" title="父子关系"></a>父子关系</h4><ul><li>追加儿子： <code>(父亲).append(儿子)</code> <code>(儿子).appendTo(父亲)</code></li><li>头部添加： <code>(父亲).prepend(儿子)</code> <code>(儿子).prependTo(父亲)</code></li></ul><h4 id="兄弟关系"><a href="#兄弟关系" class="headerlink" title="兄弟关系"></a>兄弟关系</h4><ul><li>添加哥哥（before）： <code>参考点.before(要插入的)</code> <code>要插入的.insertBefore(参考点)</code></li><li>添加弟弟（after） ： <code>参考点.after (要插入的)</code> <code>要插入的.insertAfter(参考点)</code></li></ul><p>注意：方法前面的必须是jq对象</p><p>坑：如果被添加的标签原本就在文档树中，就相当于移动</p><p>例子:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">追加儿子</span><br><span class="line">例子append</span><br><span class="line">    <span class="keyword">var</span> li = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>)</span><br><span class="line">    <span class="keyword">var</span> jq = $(li).text(<span class="string">'小黑'</span>)</span><br><span class="line">    $(<span class="string">'ul'</span>).append(jq)          <span class="comment">// 添加 jq对象</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> li = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>)</span><br><span class="line">    <span class="keyword">var</span> jq = $(li).text(<span class="string">'小白'</span>)</span><br><span class="line">    $(<span class="string">'ul'</span>).append(jq[<span class="number">0</span>])       <span class="comment">// 添加 dom对象</span></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">    $(<span class="string">'ul'</span>).append(<span class="string">'&lt;li&gt;小红&lt;/li&gt;'</span>)   <span class="comment">// 添加 标签</span></span><br><span class="line">    </span><br><span class="line">例子appendTo</span><br><span class="line">	<span class="keyword">var</span> li = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>)</span><br><span class="line">    <span class="keyword">var</span> jq = $(li).text(<span class="string">'小黑'</span>)</span><br><span class="line">    jq.appendTo(<span class="string">'ul'</span>)			<span class="comment">// 标签选择器</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> dom_ul = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'ul'</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">var</span> li = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>)</span><br><span class="line">    <span class="keyword">var</span> jq = $(li).text(<span class="string">'小白'</span>)</span><br><span class="line">    jq.appendTo(dom_ul)			<span class="comment">// dom 对象</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> li = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>)</span><br><span class="line">    <span class="keyword">var</span> jq = $(li).text(<span class="string">'小红'</span>)</span><br><span class="line">    jq.appendTo($(<span class="string">'ul'</span>))       <span class="comment">// jq对象</span></span><br><span class="line">   </span><br><span class="line">对已经存在的内容进行添加 -- 移动</span><br><span class="line">   $(<span class="string">'li:first'</span>).appendTo(<span class="string">'ul'</span>)  </span><br><span class="line"></span><br><span class="line">头部添加</span><br><span class="line">prepend</span><br><span class="line">$(<span class="string">'ul'</span>).prepend(<span class="string">'&lt;li&gt;小红&lt;/li&gt;'</span>)</span><br><span class="line">prependTo</span><br><span class="line">$(<span class="string">'&lt;li&gt;小白&lt;/li&gt;'</span>).prependTo(<span class="string">'ul'</span>)</span><br><span class="line"></span><br><span class="line">添加哥哥</span><br><span class="line">before</span><br><span class="line">$(<span class="string">'#l2'</span>).before(<span class="string">'&lt;li&gt;小白&lt;/li&gt;'</span>)</span><br><span class="line">insertBefore</span><br><span class="line">$(<span class="string">'&lt;li&gt;小黑&lt;/li&gt;'</span>).insertBefore(<span class="string">'#l2'</span>)</span><br><span class="line"></span><br><span class="line">添加弟弟</span><br><span class="line">after</span><br><span class="line">$(<span class="string">'#l2'</span>).after(<span class="string">'&lt;li&gt;小白&lt;/li&gt;'</span>)</span><br><span class="line">insertAfter</span><br><span class="line">$(<span class="string">'&lt;li&gt;小黑&lt;/li&gt;'</span>).insertAfter(<span class="string">'#l2'</span>)</span><br></pre></td></tr></table></figure><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><ul><li><p><code>jq对象.remove()</code>、 <code>jq对象.detach()</code> 、 <code>jq对象.empty()</code></p></li><li><p><code>remove</code> : 删除标签和事件，返回一个不包含事件的标签</p></li><li><p><code>detach</code>：删除标签和事件，返回一个包含事件的标签</p></li><li><p><code>empty</code>：清空内容，自己被保留</p></li></ul><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><ul><li><p><code>replaceWith</code> 、 <code>replaceAll</code></p></li><li><p><code>replaceWith</code>： <code>a.replaceWith(b)</code> 用b替换a</p></li><li><p><code>replaceAll</code>： <code>a.replaceAll(b)</code> 用a替换b</p></li></ul><h3 id="克隆"><a href="#克隆" class="headerlink" title="克隆"></a>克隆</h3><ul><li><p>默认参数为false表示不能克隆事件： <code>jq对象.clone()</code></p></li><li><p>参数改为true表示克隆事件：<code>jq对象.clone(true)</code></p></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">复制 : clone</span><br><span class="line"><span class="keyword">var</span> btn = $(<span class="keyword">this</span>).clone()      <span class="comment">//克隆标签但不能克隆事件</span></span><br><span class="line"><span class="keyword">var</span> btn = $(<span class="keyword">this</span>).clone(<span class="literal">true</span>)  <span class="comment">//克隆标签和事件</span></span><br></pre></td></tr></table></figure><h2 id="操作属性"><a href="#操作属性" class="headerlink" title="操作属性"></a>操作属性</h2><h3 id="通用属性"><a href="#通用属性" class="headerlink" title="通用属性"></a>通用属性</h3><h4 id="attr"><a href="#attr" class="headerlink" title="attr()"></a><code>attr()</code></h4><ul><li>获取属性的值 一个参数</li><li>设置属性的值 两个参数</li><li>设置多个属性的值 字典</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">获取属性的值</span><br><span class="line">$(<span class="string">'a'</span>).attr(<span class="string">'href'</span>)</span><br><span class="line">设置/修改属性的值</span><br><span class="line">$(<span class="string">'a'</span>).attr(<span class="string">'href'</span>,<span class="string">'http://www.baidu.com'</span>)</span><br><span class="line">设置多个属性值</span><br><span class="line">$(<span class="string">'a'</span>).attr(&#123;<span class="string">'href'</span>:<span class="string">'http://www.baidu.com'</span>,<span class="string">'title'</span>:<span class="string">'baidu'</span>&#125;)</span><br></pre></td></tr></table></figure><h4 id="removeattr-39-属性名-39"><a href="#removeattr-39-属性名-39" class="headerlink" title="removeattr(&#39;属性名&#39;)"></a><code>removeattr(&#39;属性名&#39;)</code></h4><ul><li>删除属性</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'a'</span>).removeAttr(<span class="string">'title'</span>) <span class="comment">//删除title属性</span></span><br></pre></td></tr></table></figure><h4 id="prop"><a href="#prop" class="headerlink" title="prop"></a>prop</h4><ul><li>如果一个标签只有true和false两种情况，适合用prop处理，selected，checked）</li><li>如果获取的结果是true表示选中，false表示取消选中</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">':checkbox:checked'</span>).prop(<span class="string">'checked'</span>) 		 <span class="comment">//获取值</span></span><br><span class="line">$(<span class="string">':checkbox:checked'</span>).prop(<span class="string">'checked'</span>,<span class="literal">false</span>) <span class="comment">//表示取消选中</span></span><br></pre></td></tr></table></figure><h3 id="类的操作"><a href="#类的操作" class="headerlink" title="类的操作"></a>类的操作</h3><ul><li>添加类 addClass</li></ul><p>​ 多个参数，添加多个类</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'div'</span>).addClass(<span class="string">'red'</span>)        <span class="comment">//添加一个类</span></span><br><span class="line">$(<span class="string">'div'</span>).addClass(<span class="string">'red bigger'</span>) <span class="comment">//添加多个类</span></span><br></pre></td></tr></table></figure><ul><li>删除类 removeClass</li></ul><p>​ 多个参数，删除多个类</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'div'</span>).removeClass(<span class="string">'bigger'</span>)  	<span class="comment">//删除一个类</span></span><br><span class="line">$(<span class="string">'div'</span>).removeClass(<span class="string">'red bigger'</span>)  <span class="comment">//一次删多个属性</span></span><br></pre></td></tr></table></figure><ul><li>转换类 toggleClass</li></ul><p>​ 多个参数，添加多个类</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'div'</span>).toggleClass(<span class="string">'red'</span>)             <span class="comment">//有即删 无即加</span></span><br><span class="line">$(<span class="string">'div'</span>).toggleClass(<span class="string">'red bigger'</span>)      <span class="comment">// 一次多个属性</span></span><br></pre></td></tr></table></figure><h3 id="value值的操作"><a href="#value值的操作" class="headerlink" title="value值的操作"></a>value值的操作</h3><p><code>jq对象.val()</code></p><p>特殊：对于select checkbox这些 需要使用 [index] 的方式来设置<strong>选中</strong>， 而不是 index本身</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(input).val()            	 <span class="comment">// 查看值</span></span><br><span class="line">$(<span class="string">':text'</span>).val(<span class="string">'值'</span>)		 	<span class="comment">// 设置/修改值</span></span><br><span class="line">$(<span class="string">':password'</span>).val(<span class="string">'值'</span>)		<span class="comment">// 设置/修改值</span></span><br><span class="line"></span><br><span class="line">对于选择框 : 单选 多选 下拉选择</span><br><span class="line">设置选中的值需要放在数组中 : </span><br><span class="line">	$(<span class="string">':radio'</span>).val([<span class="number">1</span>])  		<span class="comment">// 需要放在数组中</span></span><br><span class="line">	$(<span class="string">':radio'</span>).val([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">当然有个前提是：在checkbox中分别设置了value <span class="number">1</span>，<span class="number">2</span>，<span class="number">3</span> ，不然无法选中</span><br></pre></td></tr></table></figure><h3 id="css样式"><a href="#css样式" class="headerlink" title="css样式"></a>css样式</h3><p><code>jq对象.css()</code></p><p>单个：<code>jq对象.css(&#39;样式名称&#39;,&#39;值&#39;)</code></p><p>多个：<code>jq对象.css({&#39;样式名1&#39;:&#39;值1&#39;,&#39;样式名2&#39;:&#39;值2&#39;})</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'div'</span>).css(<span class="string">'background-color'</span>,<span class="string">'red'</span>)           <span class="comment">//设置一个样式</span></span><br><span class="line">$(<span class="string">'div'</span>).css(&#123;<span class="string">'height'</span>:<span class="string">'100px'</span>,<span class="string">'width'</span>:<span class="string">'100px'</span>&#125;) <span class="comment">//设置多个样式</span></span><br></pre></td></tr></table></figure><h1 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h1><h2 id="滚动条"><a href="#滚动条" class="headerlink" title="滚动条"></a>滚动条</h2><p><code>jq对象.scrollTop()</code></p><p><code>jq对象.scrollLeft()</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">window</span>).scrollLeft()</span><br><span class="line">$(<span class="built_in">window</span>).scrollTop()</span><br></pre></td></tr></table></figure><h2 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h2><p>内容的宽高</p><ul><li><p>width</p></li><li><p>height</p></li></ul><p>内容 + padding</p><ul><li><p>innerWidth</p></li><li><p>innerHeight</p></li></ul><p>内容 + padding + border</p><ul><li><p>outerWidth</p></li><li><p>outerHeight</p></li></ul><p>内容 + padding + border + margin</p><ul><li><p>outerHeight(true) 默认为flase不计算margin</p></li><li><p>outerWidth(true)</p></li></ul><p>当你用这些方法修改值得时候，永远是content被修改</p><h2 id="表单操作"><a href="#表单操作" class="headerlink" title="表单操作"></a>表单操作</h2><p>当我们点击button按钮时，返回true就会跳转，返回false就不跳转</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">':submit'</span>).click(</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h1 id="jQuery效果"><a href="#jQuery效果" class="headerlink" title="jQuery效果"></a>jQuery效果</h1><h2 id="隐藏-显示"><a href="#隐藏-显示" class="headerlink" title="隐藏/显示"></a>隐藏/显示</h2><p>隐藏，显示，切换，滑动，淡入淡出和动画。</p><h3 id="hide-和-show"><a href="#hide-和-show" class="headerlink" title="hide() 和 show()"></a><code>hide()</code> 和 <code>show()</code></h3><p>语法：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(selector).hide(speed,callback);</span><br><span class="line">$(selector).show(speed,callback);</span><br></pre></td></tr></table></figure><ul><li><p>可选的<strong>speed</strong>参数指定隐藏/显示的速度，可以采用：“slow”，“fast”或毫秒。</p></li><li><p>可选的回调参数是在<strong>hide()</strong>或<strong>show()</strong>方法完成后执行的函数。</p></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div&#123;</span><br><span class="line">            height: 100px;</span><br><span class="line">            width: 100px;</span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height: 100px;</span><br><span class="line">            background-color: red;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery3.4.1.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我即将要消失啦<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        我是小盒子</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">'button'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">'p'</span>).hide(<span class="number">2000</span>)</span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="toggle"><a href="#toggle" class="headerlink" title="toggle()"></a><code>toggle()</code></h3><p>有则删除，无则添加</p><p>语法：</p><p><code>$(selector).toggle(speed,callback);</code></p><ul><li>可选的speed参数可以采用：“normal”，“slow”，“fast”或毫秒。</li><li>可选的回调参数是在toggle()完成后执行的函数。</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将上面的 $('p').hide(2000) 替换为下面</span></span><br><span class="line">$(<span class="string">'p'</span>).toggle(<span class="number">2000</span>)</span><br><span class="line"></span><br><span class="line">小bug 如果不停的点，就会出现，动画连续不断的效果</span><br><span class="line">所以应该在 toggle的前面stop所有的动画</span><br><span class="line">$(<span class="string">'p'</span>).stop()</span><br></pre></td></tr></table></figure><h2 id="淡入淡出-fade系列"><a href="#淡入淡出-fade系列" class="headerlink" title="淡入淡出 fade系列"></a>淡入淡出 fade系列</h2><ul><li>fadeIn()</li><li>fadeOut()</li><li>fadeToggle()</li><li>fadeTo()</li></ul><h3 id="fadeIn-与-fadeOut"><a href="#fadeIn-与-fadeOut" class="headerlink" title="fadeIn() 与  fadeOut()"></a><code>fadeIn()</code> 与 <code>fadeOut()</code></h3><p>语法：</p><p><code>$(selector).fadeIn(speed,easing,callback)</code></p><p>该方法方法逐渐改变被选元素的<strong>不透明度</strong>，从隐藏到可见（褪色效果）。</p><p>note:隐藏的元素不会被完全显示（不再影响页面的布局）。</p><p><code>$(selector).fadeOut(speed,easing,callback)</code></p><p>该方法方法逐渐改变被选元素的不透明度，从可见到隐藏。</p><p><em>speed 参数</em>：（可选，规定褪色效果的速度）</p><ul><li>毫秒</li><li>‘fast’</li><li>‘slow’</li></ul><p><em>easing 参数</em>： （可选，规定在动画的不同点上元素的速度。默认值为 “swing”）</p><ul><li>“swing” - 在开头/结尾移动慢，在中间移动快</li><li>“linear” - 匀速移动</li></ul><p><em>callback 参数</em>： （可选。fadeIn() 方法执行完之后，要执行的函数。）</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery3.4.1.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"p1"</span>&gt;</span>我出现啦<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是一个p标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">'button'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log($(<span class="string">'#p1'</span>));</span></span><br><span class="line"><span class="javascript">        $(<span class="string">'#p1'</span>).fadeIn(<span class="number">2000</span>);</span></span><br><span class="line"><span class="javascript">        $(<span class="string">'#p1'</span>).fadeOut(<span class="number">2000</span>);</span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="fadeToggle"><a href="#fadeToggle" class="headerlink" title="fadeToggle()"></a><code>fadeToggle()</code></h3><p>语法：</p><p><code>$(selector).fadeToggle(speed,callback)</code></p><p>jQuery fadeToggle() 方法可以在 fadeIn() 与 fadeOut() 方法之间进行切换。</p><p>如果元素已淡出，则 fadeToggle() 会向元素添加淡入效果。</p><p>如果元素已淡入，则 fadeToggle() 会向元素添加淡出效果。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">将上面两句代码</span><br><span class="line">$(<span class="string">'#p1'</span>).fadeIn(<span class="number">2000</span>);      </span><br><span class="line">$(<span class="string">'#p1'</span>).fadeOut(<span class="number">2000</span>);</span><br><span class="line">换成</span><br><span class="line">$(<span class="string">'#p1'</span>).fadeToggle(<span class="number">2000</span>);</span><br><span class="line">即可</span><br></pre></td></tr></table></figure><h3 id="fadeTo"><a href="#fadeTo" class="headerlink" title="fadeTo()"></a><code>fadeTo()</code></h3><p>语法：</p><p><code>$(selector).fadeTo(speed,opacity,callback);</code></p><p>该方法允许渐变为给定的不透明度（值介于 0 与 1 之间）。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery3.4.1.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"p1"</span>&gt;</span>我出现啦<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是一个p标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">'button'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log($(<span class="string">'#p1'</span>));</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// $('#p1').fadeIn(2000);</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// $('#p1').fadeOut(2000);</span></span></span><br><span class="line"><span class="javascript">        $(<span class="string">'#p1'</span>).fadeTo(<span class="number">2000</span>,<span class="number">0.15</span>);</span></span><br><span class="line"><span class="javascript">        $(<span class="string">'#p1'</span>).fadeTo(<span class="number">2000</span>,<span class="number">0.75</span>);</span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="滑动-slide系列"><a href="#滑动-slide系列" class="headerlink" title="滑动 slide系列"></a>滑动 slide系列</h2><ul><li>slideDown()</li><li>slideUp()</li><li>slideToggle()</li></ul><h3 id="slideUp-与-slideDown"><a href="#slideUp-与-slideDown" class="headerlink" title="slideUp() 与 slideDown()"></a>slideUp() 与 slideDown()</h3><p>语法：</p><p><code>$(selector).slideUp(speed,callback);</code> 向上滑动元素（设置display为none）</p><p><code>$(selector).slideDown(speed,callback);</code> 用于向下滑动元素。（设置display为block）</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#flip</span>&#123;</span></span><br><span class="line">            background-color: gray;</span><br><span class="line">            height: 30px;</span><br><span class="line">            line-height: 30px;</span><br><span class="line">            text-align: center;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#contain</span>&#123;</span></span><br><span class="line">            background-color: lightgray;</span><br><span class="line">            height: 60px;</span><br><span class="line">            line-height: 60px;</span><br><span class="line">            text-align: center;</span><br><span class="line">            display: none;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery3.4.1.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"flip"</span>&gt;</span></span><br><span class="line">        点我有惊喜！</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"contain"</span>&gt;</span></span><br><span class="line">        骗你的呦!</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">'#flip'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">'#contain'</span>).slideDown(<span class="number">2000</span>)</span></span><br><span class="line"><span class="javascript">        $(<span class="string">'#contain'</span>).slideUp(<span class="number">2000</span>)</span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：让它滑动出现先的前提是 <code>display: none;</code></p><h3 id="slideToggle"><a href="#slideToggle" class="headerlink" title="slideToggle()"></a>slideToggle()</h3><p>语法：</p><p><code>$(selector).slideToggle(speed,callback);</code></p><p>在 slideDown() 与 slideUp() 方法之间进行切换。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'#flip'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// $('#contain').slideDown(2000)</span></span><br><span class="line">      <span class="comment">// $('#contain').slideUp(2000)</span></span><br><span class="line">      $(<span class="string">'#contain'</span>).slideToggle(<span class="number">2000</span>)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><h3 id="animate"><a href="#animate" class="headerlink" title="animate()"></a>animate()</h3><p>语法</p><p><code>$(selector).animate({params},speed,callback);</code></p><ul><li><p>必选的<strong>params</strong>参数定义要设置动画的CSS属性。</p></li><li><p>可选的<strong>speed</strong>参数指定效果的持续时间。 它可以采用以下值：”slow”, “fast”或者毫秒。</p></li><li><p>可选的回调参数是动画完成后要执行的函数。</p></li></ul><p>note：默认情况下，所有HTML元素都具有静态位置，并且无法移动。要操纵位置，请记住首先将元素的CSS <strong>position</strong>属性设置为relative，fixed或absolute！</p><h3 id="操作多个属性-使用相对值"><a href="#操作多个属性-使用相对值" class="headerlink" title="操作多个属性 + 使用相对值"></a>操作多个属性 + 使用相对值</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div&#123;</span><br><span class="line">            height: 100px;</span><br><span class="line">            width: 100px;</span><br><span class="line">            background-color: gray;</span><br><span class="line">            position: relative;</span><br><span class="line"><span class="css">            <span class="comment">/* 开始时忘记设置position所以没有动画  */</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery3.4.1.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">'button'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        $(<span class="string">'div'</span>).animate(&#123;</span></span><br><span class="line"><span class="actionscript">            left:<span class="string">'300px'</span>,</span></span><br><span class="line"><span class="actionscript">            height:<span class="string">'+=150px'</span>,</span></span><br><span class="line"><span class="actionscript">            width:<span class="string">'+=150px'</span>,</span></span><br><span class="line"><span class="actionscript">            backgroundColor:<span class="string">'red'</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 颜色是不行的，需要下载插件</span></span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>可以用 animate() 方法来操作所有 CSS 属性吗？</strong></p><p>是的，几乎可以！不过，需要记住一件重要的事情：当使用 animate() 时，必须使用 <strong>Camel 标记法</strong>书写所有的属性名，比如，必须使用 paddingLeft 而不是 padding-left，使用 marginRight 而不是 margin-right，等等。</p><p>同时，色彩动画并不包含在核心 jQuery 库中。需要从 <a href="http://jquery.com/download/" target="_blank" rel="noopener">jquery.com</a> 下载 <a href="http://plugins.jquery.com/color/" target="_blank" rel="noopener">颜色动画</a> 插件。</p><h3 id="使用预定义的值"><a href="#使用预定义的值" class="headerlink" title="使用预定义的值"></a>使用预定义的值</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div&#123;</span><br><span class="line">            height: 100px;</span><br><span class="line">            width: 100px;</span><br><span class="line">            background-color: gray;</span><br><span class="line">            position: relative;</span><br><span class="line"><span class="css">            <span class="comment">/* 开始时忘记设置position所以没有动画  */</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery3.4.1.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">'button'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">'div'</span>).animate(&#123;</span></span><br><span class="line"><span class="actionscript">            height:<span class="string">'toggle'</span></span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="使用队列功能"><a href="#使用队列功能" class="headerlink" title="使用队列功能"></a>使用队列功能</h3><p>对于函数体内多个animate() ，jQuery 会创建包含这些方法调用的”内部”队列。然后逐一运行这些 animate 调用。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div&#123;</span><br><span class="line">            height: 100px;</span><br><span class="line">            width: 100px;</span><br><span class="line">            background-color: gray;</span><br><span class="line">            position: relative;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery3.4.1.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">'button'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">'div'</span>).animate(&#123;<span class="attr">height</span>:<span class="string">'+=150px'</span>&#125;,<span class="string">'slow'</span>);</span></span><br><span class="line"><span class="javascript">        $(<span class="string">'div'</span>).animate(&#123;<span class="attr">width</span>:<span class="string">'+=150px'</span>&#125;,<span class="string">'slow'</span>);</span></span><br><span class="line"><span class="javascript">        $(<span class="string">'div'</span>).animate(&#123;<span class="attr">height</span>:<span class="string">'-=150px'</span>&#125;,<span class="string">'slow'</span>);</span></span><br><span class="line"><span class="javascript">        $(<span class="string">'div'</span>).animate(&#123;<span class="attr">width</span>:<span class="string">'-=150px'</span>&#125;,<span class="string">'slow'</span>);</span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​ jquery中有一个Queue队列的接口，这个模块没有单独拿出来是因为这个是内部专门为动画服务的，Queue队列如同data数据缓存与Deferred异步模型一样，都是jQuery库的内部实现的基础设施（<strong>底层方法</strong>）。</p><p>​ 我们一直习惯于线性的编写代码逻辑，但是在JavaScript编程几乎总是伴随着<strong>异步</strong>操作：</p><p><code>setTImeout</code>，<code>css3Transition</code>/<code>Animation</code>,<code>ajax</code>,dom的绘制，<code>postmessage</code>，<code>web Database</code> 等等，大量异步操作所带来的回调函数会把我们的算法分解，<strong>对于“异步+回调”的模式，怎么“拉平”异步操作使之跟同步一样，因为异步操作进行流程控制的时候无非避免的要嵌套大量的回调逻辑，所以就会出现 promises 约定了。</strong></p><p>​ 那么 jQuery 引入队列其实从一个角度上可以认为：<strong>允许一系列函数被异步地调用而不会阻塞程序</strong>。</p><p>​ 前面提到jQuery的优势有一条为链式，举个例子：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">"div"</span>).slideUp().fadeIn()</span><br></pre></td></tr></table></figure><p>这是 jQuery 的一组动画链式序列，它的内部其实就是一组队列 Queue，所以队列和 Deferred 地位类似，是一个内部使用的基础设施。</p><ul><li>当 slideUp 运行时，fadeIn 被放到 fx 队列中（这个队列存在进程锁）</li><li>当 slideUp 完成后，从队列中被取出运行（ 使用dequeue 方法 ）</li></ul><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>为什么这里突然提到了异步，提到了队列，从开始的目标开始分析，对于 jQuery 的动画的设计我们要分 2 个层面理解：</p><ul><li>每一个动画效果可以看作一个<strong>独立的</strong>动画对象，每个对象都实现了针对自己这个动画的<strong>生命周期</strong>的控制。</li><li>动画对象与动画对象之间其实是<strong>没有直接关系</strong>，但是为了做到连续调用就需要引入一套队列机制也就是 <strong>Queue 来控制对象之间的转换的控制</strong>。</li><li>动画调度的流程：利用<a href="https://www.runoob.com/jquery/jquery-animate.html" target="_blank" rel="noopener">队列异步的空闲然后执行同步的代码</a>。</li></ul><h2 id="停止动画"><a href="#停止动画" class="headerlink" title="停止动画"></a>停止动画</h2><h3 id="stop"><a href="#stop" class="headerlink" title="stop()"></a>stop()</h3><p>语法：</p><p><code>$(selector).stop(stopAll,goToEnd);</code></p><p>stop() 方法适用于所有 jQuery 效果函数，包括滑动、淡入淡出和自定义动画。</p><ul><li>stopAll 参数规定<strong>是否应该清除动画队列</strong>。默认是 false，即仅停止活动的动画，允许任何排入队列的动画向后执行。</li><li>goToEnd 参数规定<strong>是否立即完成当前动画</strong>。默认是 false。</li><li>对于每个动画的开始，我们应首先停止以前的动画，在开始当前的动画。</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div&#123;</span><br><span class="line">            height: 100px;</span><br><span class="line">            width: 100px;</span><br><span class="line">            background-color: gray;</span><br><span class="line">            position: relative;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery3.4.1.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"b1"</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"b2"</span>&gt;</span>点我停止<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">'#b1'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">'div'</span>).stop()</span></span><br><span class="line"><span class="javascript">        $(<span class="string">'div'</span>).animate(&#123;<span class="attr">height</span>:<span class="string">'+=150px'</span>&#125;,<span class="string">'slow'</span>);</span></span><br><span class="line"><span class="javascript">        $(<span class="string">'div'</span>).animate(&#123;<span class="attr">width</span>:<span class="string">'+=150px'</span>&#125;,<span class="string">'slow'</span>);</span></span><br><span class="line"><span class="javascript">        $(<span class="string">'div'</span>).animate(&#123;<span class="attr">height</span>:<span class="string">'-=150px'</span>&#125;,<span class="string">'slow'</span>);</span></span><br><span class="line"><span class="javascript">        $(<span class="string">'div'</span>).animate(&#123;<span class="attr">width</span>:<span class="string">'-=150px'</span>&#125;,<span class="string">'slow'</span>);</span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    $(<span class="string">'#b2'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">'div'</span>).stop()</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 瞬间暂停</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// $('div').stop(true)</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 立即完成并停止</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// $('div').stop(true,true)</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// note:由于div的形状是通过相对值来改变的,这样突然的停止会导致下一次和原本的差异</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="回调-Callback"><a href="#回调-Callback" class="headerlink" title="回调 Callback"></a>回调 Callback</h2><p>前面提到的很多方法中，很多可以包含着回调函数。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div&#123;</span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            background-color: gray;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery3.4.1.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">'button'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">'div'</span>).slideUp(<span class="number">2000</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">            alert(<span class="string">'盒子隐藏了!'</span>)</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="链式操作-Chaining"><a href="#链式操作-Chaining" class="headerlink" title="链式操作 Chaining"></a>链式操作 Chaining</h2><ul><li><p>Chaining 允许我们在一条语句中运行多个 jQuery 方法（在相同的元素上）。</p></li><li><p>只需要把把该动作追加到之前的动作上就可以了。</p></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery3.4.1.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        p&#123;</span><br><span class="line">            display: none;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是一个p标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">'button'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">'p'</span>).css(&#123;<span class="attr">color</span>:<span class="string">'yellow'</span>,<span class="attr">backgroundColor</span>:<span class="string">'#000'</span>&#125;).slideDown(<span class="number">2000</span>).slideUp(<span class="number">2000</span>)</span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="事件-1"><a href="#事件-1" class="headerlink" title="事件"></a>事件</h1><h2 id="jQuery事件发展历程"><a href="#jQuery事件发展历程" class="headerlink" title="jQuery事件发展历程"></a>jQuery事件发展历程</h2><p>简单事件绑定&gt;&gt;bind事件绑定&gt;&gt;delegate事件绑定&gt;&gt;on事件绑定(推荐)</p><h3 id="简单事件绑定"><a href="#简单事件绑定" class="headerlink" title="简单事件绑定"></a>简单事件绑定</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">click(handler)          单击事件</span><br><span class="line">mouseenter(handler)     鼠标进入事件</span><br><span class="line">mouseleave(handler)     鼠标离开事件</span><br></pre></td></tr></table></figure><ul><li>缺点：不能同时注册多个事件</li></ul><h3 id="bind事件绑定"><a href="#bind事件绑定" class="headerlink" title="bind事件绑定"></a>bind事件绑定</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//第一个参数：事件类型</span></span><br><span class="line"><span class="comment">//第二个参数：传入参数</span></span><br><span class="line"><span class="comment">//第三个参数：事件处理程序</span></span><br><span class="line">$(<span class="string">"p"</span>).bind(<span class="string">"click mouseenter"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//事件响应方法</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// bind 参数都是选传的,接收参数e.data</span></span><br><span class="line">$(<span class="string">'button'</span>).bind(<span class="string">'click'</span>,&#123;<span class="string">'a'</span>:<span class="string">'b'</span>&#125;,fn)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e.data)</span><br><span class="line">    <span class="built_in">console</span>.log(e.data.a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>缺点：不支持动态事件绑定</li></ul><h3 id="delegate委托事件绑定"><a href="#delegate委托事件绑定" class="headerlink" title="delegate委托事件绑定"></a>delegate委托事件绑定</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一个参数：要绑定事件的元素</span></span><br><span class="line"><span class="comment">// 第二个参数：事件类型</span></span><br><span class="line"><span class="comment">// 第三个参数：事件处理函数</span></span><br><span class="line">$(<span class="string">".parentBox"</span>).delegate(<span class="string">"p"</span>, <span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//为 .parentBox下面的所有的p标签绑定事件</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="on注册事件（主要）"><a href="#on注册事件（主要）" class="headerlink" title="on注册事件（主要）"></a>on注册事件（主要）</h2><blockquote><p>jQuery1.7之后，jQuery用on统一了所有事件的处理方法。</p><p>最现代的方式，兼容zepto(移动端类似jQuery的一个库)，强烈建议使用。</p></blockquote><h3 id="on注册简单事件"><a href="#on注册简单事件" class="headerlink" title="on注册简单事件"></a>on注册简单事件</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 表示给$(selector)绑定事件，并且由自己触发，不支持动态绑定。</span></span><br><span class="line">$(selector).on( <span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;);</span><br></pre></td></tr></table></figure><h3 id="on注册委托事件"><a href="#on注册委托事件" class="headerlink" title="on注册委托事件"></a>on注册委托事件</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 表示给$(selector)绑定代理事件，当必须是它的内部元素span才能触发这个事件，支持动态绑定</span></span><br><span class="line">$(selector).on( <span class="string">"click"</span>,“span”, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;);</span><br></pre></td></tr></table></figure><p>on注册事件的完整语法：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一个参数：events，绑定事件的名称可以是由空格分隔的多个事件（标准事件或者自定义事件）</span></span><br><span class="line"><span class="comment">// 第二个参数：selector, 执行事件的后代元素（可选），如果没有后代元素，那么事件将有自己执行。</span></span><br><span class="line"><span class="comment">// 第三个参数：data，传递给处理函数的数据，事件触发的时候通过event.data来使用（不常使用）</span></span><br><span class="line"><span class="comment">// 第四个参数：handler，事件处理函数</span></span><br><span class="line">$(selector).on(events[,selector][,data],handler);</span><br></pre></td></tr></table></figure><h2 id="解除绑定"><a href="#解除绑定" class="headerlink" title="解除绑定"></a>解除绑定</h2><h3 id="unbind方式（不用）"><a href="#unbind方式（不用）" class="headerlink" title="unbind方式（不用）"></a>unbind方式（不用）</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(selector).unbind(); <span class="comment">//解绑所有的事件</span></span><br><span class="line">$(selector).unbind(<span class="string">"click"</span>); <span class="comment">//解绑指定的事件</span></span><br></pre></td></tr></table></figure><h3 id="undelegate方式（不用）"><a href="#undelegate方式（不用）" class="headerlink" title="undelegate方式（不用）"></a>undelegate方式（不用）</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$( selector ).undelegate(); <span class="comment">//解绑所有的delegate事件</span></span><br><span class="line">$( selector).undelegate( “click” ); <span class="comment">//解绑所有的click事件</span></span><br></pre></td></tr></table></figure><h3 id="off方式（推荐）"><a href="#off方式（推荐）" class="headerlink" title="off方式（推荐）"></a>off方式（推荐）</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">与on搭配的off</span><br><span class="line"><span class="comment">// 解绑匹配元素的所有事件</span></span><br><span class="line">$(selector).off();</span><br><span class="line"><span class="comment">// 解绑匹配元素的所有click事件</span></span><br><span class="line">$(selector).off(<span class="string">"click"</span>);</span><br></pre></td></tr></table></figure><h2 id="触发事件"><a href="#触发事件" class="headerlink" title="触发事件"></a>触发事件</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(selector).click(); <span class="comment">//触发 click事件</span></span><br><span class="line">$(selector).trigger(<span class="string">"click"</span>);</span><br></pre></td></tr></table></figure><h2 id="jQuery事件对象"><a href="#jQuery事件对象" class="headerlink" title="jQuery事件对象"></a>jQuery事件对象</h2><p>jQuery事件对象其实就是js事件对象的一个封装，处理了兼容性。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//各种事件</span></span><br><span class="line">click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;...&#125;)   <span class="comment">// 单机事件</span></span><br><span class="line"></span><br><span class="line">blur(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;...&#125;)    <span class="comment">// 失去焦点  校验输入，符合显示绿色</span></span><br><span class="line">focus(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;...&#125;)   <span class="comment">// 获得焦点  表单处理，去掉右侧的提示</span></span><br><span class="line"></span><br><span class="line">change(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;...&#125;)  <span class="comment">// input框鼠标离开时内容改变触发</span></span><br><span class="line"></span><br><span class="line">keyup(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;...&#125;)   <span class="comment">// 按下的键盘触发事件 27对应的是esc键 获取键盘编号 e.keyCode</span></span><br><span class="line">mouseover/mouseout       <span class="comment">// 如果给父元素绑定了over事件,那么这个父元素如果有子元素,每一次进入子元素也							   触发父元素的over事件</span></span><br><span class="line">mouseenter/mouseleave = hover(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;...&#125;)  <span class="comment">//鼠标的悬浮</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//screenX和screenY   对应屏幕最左上角的值</span></span><br><span class="line"><span class="comment">//clientX和clientY   距离页面左上角的位置（忽视滚动条）</span></span><br><span class="line"><span class="comment">//pageX和pageY   距离页面最顶部的左上角的位置（会计算滚动条的距离）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//event.keyCode 按下的键盘代码</span></span><br><span class="line"><span class="comment">//event.data    存储绑定事件时传递的附加数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//event.stopPropagation()   阻止事件冒泡行为</span></span><br><span class="line"><span class="comment">//event.preventDefault()    阻止浏览器默认行为</span></span><br><span class="line"><span class="comment">//return false:既能阻止事件冒泡，又能阻止浏览器默认行为。</span></span><br></pre></td></tr></table></figure><h2 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h2><p>当点击子元素的时候，子元素和父元素都触发点击事件</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.outer</span>&#123;</span></span><br><span class="line">            width: 300px;</span><br><span class="line">            height: 300px;</span><br><span class="line">            background-color: red;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.inner</span>&#123;</span></span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            background-color: forestgreen;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"outer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">'.outer'</span>).click(</span></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            alert(<span class="string">'outer'</span>)</span></span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line"><span class="javascript">    $(<span class="string">'.inner'</span>).click(</span></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="params">(e)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            alert(<span class="string">'inner'</span>)</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// e.stopPropagation() //阻止事件冒泡方法1</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> <span class="literal">false</span>    <span class="comment">//阻止事件冒泡方法2</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'div'</span>).on(<span class="string">'click'</span>,<span class="string">'button'</span>,&#123;<span class="string">'a'</span>:<span class="string">'b'</span>&#125;,<span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(event.data)</span><br><span class="line">        alert(<span class="string">'不许点'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">相当于把button元素的点击事件委托给了父元素div</span><br><span class="line">后添加进来的button也能拥有click事件</span><br></pre></td></tr></table></figure><h2 id="jQuery中-onclick-与-click"><a href="#jQuery中-onclick-与-click" class="headerlink" title="jQuery中 onclick 与 click"></a>jQuery中 <code>onclick</code> 与 <code>click</code></h2><p><code>click</code>和<code>onclick</code>的区别：</p><ol><li>onclick是绑定事件，告诉浏览器在鼠标点击时候要做什么；click本身是方法作用是触发onclick事件，只要执行了元素的click()方法，就会触发onclick事件。</li><li>click()方法的主要作用是触发调用click方法元素onclick事件,实际上是模拟了鼠标的点击动作。此外，如果在click括号内定义了其他可执行语句，则click方法会在执行完onclick事件之后执行括号内部的语句。</li><li>在js中我们在<code>onclick</code>绑定事件中定义所做的事情； 在jq中我们在<code>click</code>方法中定义触发该事件后所作的事情。</li></ol><h1 id="页面的加载"><a href="#页面的加载" class="headerlink" title="页面的加载"></a>页面的加载</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="comment">//js 代码 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            $(<span class="string">'button'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            alert(<span class="string">'不许点'</span>)</span><br><span class="line">            &#125;)</span><br><span class="line">&#125;</span><br><span class="line">onload要等到所有的文档 音视频都加在完毕才触发</span><br><span class="line">onload只能绑定一次</span><br><span class="line"></span><br><span class="line"><span class="comment">//jquery的方式,只等待文档加载完毕之后就可以执行,在同一个html页面上可以多次使用</span></span><br><span class="line">$(<span class="built_in">document</span>).ready(</span><br><span class="line">     <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="comment">//文档加在完毕之后能做的事情 </span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//jquery的方式(简写)*****</span></span><br><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="comment">//文档加在完毕之后能做的事情        </span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//示例</span></span><br><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     $(<span class="string">'button'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          alert(<span class="string">'不许点'</span>)</span><br><span class="line">     &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//jquery中等待所有的资源包括视频 音频都加载完才执行function中的代码,可以使用多次</span></span><br><span class="line">$(<span class="built_in">window</span>).ready(</span><br><span class="line">      <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">           alert(<span class="string">'123'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="each"><a href="#each" class="headerlink" title="each"></a>each</h1><p>由于jQuery隐式循环，所以实际中还是很少使用的。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;选项一&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">        &lt;li&gt;选项二&lt;/</span>li&gt;</span><br><span class="line">        &lt;li&gt;选项三&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/u</span>l&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    $('li').each(</span></span><br><span class="line"><span class="regexp">        function (ind,dom) &#123;      /</span><span class="regexp">/主动传ind是每项的索引,dom是每一项的标签对象</span></span><br><span class="line"><span class="regexp">            console.log(ind,dom)</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><h2 id="选择框插件"><a href="#选择框插件" class="headerlink" title="选择框插件"></a>选择框插件</h2><ul><li><p>做一个选择框的插件</p></li><li><p>可以全选，可以反选，可以取消选择</p></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        table,th,td,tr&#123;</span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: <span class="selector-id">#0f0f0f</span> <span class="selector-tag">solid</span> 1<span class="selector-tag">px</span>;</span></span><br><span class="line">            border-spacing: 0px;</span><br><span class="line">        &#125;</span><br><span class="line">        tr&#123;</span><br><span class="line">            padding: 5px;</span><br><span class="line">        &#125;</span><br><span class="line">        td,th&#123;</span><br><span class="line">            text-align: center;</span><br><span class="line">            padding: 5px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery3.4.1.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"b1"</span>&gt;</span>全选<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"b2"</span>&gt;</span>反选<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"b3"</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>#<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>爱好<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"cho"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>小白<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>唱<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"cho"</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>小黑<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>跳<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"cho"</span> <span class="attr">value</span>=<span class="string">"3"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>小红<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>rap<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">'#b1'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 出现的问题，不太明确怎样能选中：必须设置value，然后数组里写该value即可。</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 方法一：</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// $(':checkbox').val([1,2,3]);</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 方法二： 该方法扩展性强</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// for (var t=0; t&lt;$(':checkbox').length; t++)&#123;</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//     $(':checkbox').eq(t).prop('checked',true)</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 方法三： 最简单的</span></span></span><br><span class="line"><span class="javascript">        $(<span class="string">':checkbox'</span>).prop(<span class="string">'checked'</span>,<span class="literal">true</span>)</span></span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    $(<span class="string">'#b2'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 出现的问题，不知道怎样获取checkbox的值: 忘记了对于这种二值形式的可以用prop查看，修改</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 循环解决吧</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> t=<span class="number">0</span> ; t &lt; $(<span class="string">':checkbox'</span>).length; t++)&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> ($(<span class="string">':checkbox'</span>).eq(t).prop(<span class="string">'checked'</span>))&#123;</span></span><br><span class="line"><span class="javascript">                $(<span class="string">':checkbox'</span>).eq(t).prop(<span class="string">'checked'</span>,<span class="literal">false</span>)</span></span><br><span class="line"><span class="actionscript">            &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">                $(<span class="string">':checkbox'</span>).eq(t).prop(<span class="string">'checked'</span>,<span class="literal">true</span>)</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="javascript">    $(<span class="string">'#b3'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">':checkbox'</span>).prop(<span class="string">'checked'</span>,<span class="literal">false</span>)</span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><ol><li>全选时，不知道该怎样去选中<ul><li>方法一：在checkbox中设置value，然后 使用 val方法，参数为列表，列表中为选择的value值。</li><li>方法二：遍历，然后利用prop方法，设置 checked属性 为 true</li></ul></li><li>不知道如何获取勾选的checkbox， 遍历checkbox，利用prop挨个检查 checked 属性。</li></ol><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><p>prop对于checkbox, radio 这类是一个神器。</p><h2 id="tab栏选项卡"><a href="#tab栏选项卡" class="headerlink" title="tab栏选项卡"></a>tab栏选项卡</h2><ul><li>将列表横向</li><li>清除浮动</li><li>设置动作</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        ul&#123;</span><br><span class="line">            margin-left: -40px;</span><br><span class="line">            margin-bottom: 0px;</span><br><span class="line">            list-style: none;</span><br><span class="line">        &#125;</span><br><span class="line">        li&#123;</span><br><span class="line">            float: left;</span><br><span class="line">            font-size: 20px;</span><br><span class="line">            padding: 10px;</span><br><span class="line">            border: gray solid 1px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-tag">ul</span><span class="selector-pseudo">:after</span>&#123;</span></span><br><span class="line">            content: "";</span><br><span class="line">            clear: both;</span><br><span class="line">            display: block;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#tab1</span>,<span class="selector-id">#tab2</span>,<span class="selector-id">#tab3</span>,<span class="selector-id">#tab4</span>&#123;</span></span><br><span class="line">            width: 260px;</span><br><span class="line">            height: 300px;</span><br><span class="line">            background-color: gray;</span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height: 300px;</span><br><span class="line">            display: none;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery3.4.1.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"t1"</span>&gt;</span>tab1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"t2"</span>&gt;</span>tab2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"t3"</span>&gt;</span>tab3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"t4"</span>&gt;</span>tab4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"tab1"</span> <span class="attr">class</span>=<span class="string">"tab"</span>&gt;</span></span><br><span class="line">        我是tab1的内容</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"tab2"</span> <span class="attr">class</span>=<span class="string">"tab"</span>&gt;</span></span><br><span class="line">        我是tab2的内容</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"tab3"</span> <span class="attr">class</span>=<span class="string">"tab"</span>&gt;</span></span><br><span class="line">        我是tab3的内容</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"tab4"</span> <span class="attr">class</span>=<span class="string">"tab"</span>&gt;</span></span><br><span class="line">        我是tab4的内容</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">'#t1'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">'.tab'</span>).slideUp(<span class="number">500</span>);</span></span><br><span class="line"><span class="javascript">        $(<span class="string">'#tab1'</span>).slideDown(<span class="number">1000</span>);</span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    $(<span class="string">'#t2'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">'.tab'</span>).slideUp(<span class="number">500</span>);</span></span><br><span class="line"><span class="javascript">        $(<span class="string">'#tab2'</span>).slideDown(<span class="number">1000</span>);</span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    $(<span class="string">'#t3'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">'.tab'</span>).slideUp(<span class="number">500</span>);</span></span><br><span class="line"><span class="javascript">        $(<span class="string">'#tab3'</span>).slideDown(<span class="number">1000</span>);</span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    $(<span class="string">'#t4'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">'.tab'</span>).slideUp(<span class="number">500</span>);</span></span><br><span class="line"><span class="javascript">        $(<span class="string">'#tab4'</span>).slideDown(<span class="number">1000</span>);</span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="form表单验证"><a href="#form表单验证" class="headerlink" title="form表单验证"></a>form表单验证</h2><ul><li>用户输入用户名和密码，需要对用户名，密码的内容以及长度进行检查，如果检查通过则可以跳转。</li><li>用到的方法：hide,show,RegExp.test</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery3.4.1.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#u_msg</span>&#123;</span></span><br><span class="line">            color: red;</span><br><span class="line">            display: none;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#p_msg</span>&#123;</span></span><br><span class="line">            color: red;</span><br><span class="line">            display: none;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"myForm"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"user"</span>&gt;</span>用户名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"u_msg"</span>&gt;</span>用户名需是5到10位数字<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"pw"</span>&gt;</span>密码：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">id</span>=<span class="string">"pw"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"p_msg"</span>&gt;</span>密码需是6位到17位<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">'#user'</span>).focus(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">'#u_msg'</span>).hide(<span class="number">0</span>);</span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="javascript">    $(<span class="string">'#user'</span>).blur(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        user = $(<span class="string">'#user'</span>).val();</span></span><br><span class="line">        val_user(user)</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="javascript">    $(<span class="string">'#pw'</span>).focus(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">'#p_msg'</span>).hide(<span class="number">0</span>);</span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="javascript">    $(<span class="string">"#pw"</span>).blur(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        pw = $(<span class="string">'#pw'</span>).val();</span></span><br><span class="line">        val_pw(pw)</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">val_user</span><span class="params">(user)</span></span>&#123;</span></span><br><span class="line"><span class="javascript">        reg = <span class="built_in">RegExp</span>(<span class="regexp">/^[\d]&#123;5,11&#125;$/</span>)</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span>(reg.test(user))&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'用户名合法'</span>);</span></span><br><span class="line"><span class="javascript">            $(<span class="string">'#u_msg'</span>).hide(<span class="number">0</span>);</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> <span class="literal">true</span></span></span><br><span class="line"><span class="actionscript">        &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'用户名需是5到10位数字'</span>);</span></span><br><span class="line"><span class="javascript">            $(<span class="string">'#u_msg'</span>).show(<span class="number">0</span>);</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> <span class="literal">false</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">val_pw</span><span class="params">(pw)</span></span>&#123;</span></span><br><span class="line"><span class="javascript">        reg = <span class="built_in">RegExp</span>(<span class="regexp">/^[^\s]&#123;6,18&#125;$/</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span>(reg.test(pw))&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'密码合法'</span>);</span></span><br><span class="line"><span class="javascript">            $(<span class="string">'#p_msg'</span>).hide(<span class="number">0</span>);</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> <span class="literal">true</span></span></span><br><span class="line"><span class="actionscript">        &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">'#p_msg'</span>).show(<span class="number">0</span>);</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> <span class="literal">false</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    $(<span class="string">'button'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span>(val_user($(<span class="string">'#user'</span>).val()) &amp;&amp; val_pw($(<span class="string">'#pw'</span>).val()))&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> <span class="literal">true</span></span></span><br><span class="line"><span class="actionscript">        &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> <span class="literal">false</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="计时器"><a href="#计时器" class="headerlink" title="计时器"></a>计时器</h2><ul><li><p>该计时器包含 时，分，秒，毫秒</p></li><li><p>在对div进行文本操作时 要用 text 先开始用的 innerText，记混了。</p></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery3.4.1.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div&#123;</span><br><span class="line">            margin: 5px;</span><br><span class="line">            width: 50px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            border: lightgray 1px solid;</span><br><span class="line">            border-radius: 5px;</span><br><span class="line">            float: left;</span><br><span class="line">            line-height: 100px;</span><br><span class="line">            font-size: 50px;</span><br><span class="line">            text-align: center;</span><br><span class="line">        &#125;</span><br><span class="line">        span&#123;</span><br><span class="line">            font-size: 40px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            line-height: 100px;</span><br><span class="line">            float: left;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-tag">p</span><span class="selector-pseudo">:after</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/*插入无形的一行*/</span></span></span><br><span class="line">            content: "";</span><br><span class="line">            clear: both;</span><br><span class="line">            display: block;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 时 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"h1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"h2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>:<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 分 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"m1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"m2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>:<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 秒 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"s1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"s2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 毫秒 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"ms1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"ms2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"ms3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"suspend"</span>&gt;</span>暂停<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"continue"</span>&gt;</span>继续<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"reset"</span>&gt;</span>重置<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> d = <span class="number">0</span>;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> h = <span class="number">0</span>;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> m = <span class="number">0</span>;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> s = <span class="number">0</span>;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> ms = <span class="number">0</span>;</span></span><br><span class="line"><span class="actionscript">    flag = <span class="literal">true</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    setInterval(<span class="string">'fn(flag)'</span>,<span class="number">1</span>);</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">fn</span><span class="params">(flag)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span> (flag)&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(s);</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">if</span>(ms === <span class="number">1000</span>)&#123;</span></span><br><span class="line">                ms = 0;</span><br><span class="line">                s += 1;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="actionscript">            <span class="keyword">if</span>(s === <span class="number">60</span>)&#123;</span></span><br><span class="line">                s = 0;</span><br><span class="line">                m += 1;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="actionscript">            <span class="keyword">if</span>(m === <span class="number">60</span>)&#123;</span></span><br><span class="line">                m = 0;</span><br><span class="line">                h += 1;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="actionscript">            <span class="keyword">if</span>(h === <span class="number">24</span>)&#123;</span></span><br><span class="line">                h = 0;</span><br><span class="line">                d += 1;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="actionscript">            <span class="comment">// 时间从0开始</span></span></span><br><span class="line">            ms += 1;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">// 写在div上</span></span></span><br><span class="line"><span class="javascript">            s_ms = <span class="built_in">String</span>(ms);</span></span><br><span class="line"><span class="javascript">            s_s = <span class="built_in">String</span>(s);</span></span><br><span class="line"><span class="javascript">            s_m = <span class="built_in">String</span>(m);</span></span><br><span class="line"><span class="javascript">            s_h = <span class="built_in">String</span>(h);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="keyword">if</span>(s_ms.length === <span class="number">3</span>)&#123;</span></span><br><span class="line"><span class="javascript">                $(<span class="string">'#ms1'</span>).text(s_ms[<span class="number">0</span>]);</span></span><br><span class="line"><span class="javascript">                $(<span class="string">'#ms2'</span>).text(s_ms[<span class="number">1</span>]);</span></span><br><span class="line"><span class="javascript">                $(<span class="string">'#ms3'</span>).text(s_ms[<span class="number">2</span>]);</span></span><br><span class="line"><span class="actionscript">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(s_ms.length === <span class="number">2</span>) &#123;</span></span><br><span class="line"><span class="javascript">                $(<span class="string">'#ms1'</span>).text(<span class="string">'0'</span>);</span></span><br><span class="line"><span class="javascript">                $(<span class="string">'#ms2'</span>).text(s_ms[<span class="number">0</span>]);</span></span><br><span class="line"><span class="javascript">                $(<span class="string">'#ms3'</span>).text(s_ms[<span class="number">1</span>]);</span></span><br><span class="line"><span class="actionscript">            &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">                $(<span class="string">'#ms1'</span>).text(<span class="string">'0'</span>);</span></span><br><span class="line"><span class="javascript">                $(<span class="string">'#ms2'</span>).text(<span class="string">'0'</span>);</span></span><br><span class="line"><span class="javascript">                $(<span class="string">'#ms3'</span>).text(s_ms);</span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="actionscript">            <span class="keyword">if</span>(s_s.length === <span class="number">2</span>)&#123;</span></span><br><span class="line"><span class="javascript">                $(<span class="string">'#s1'</span>).text(s_s[<span class="number">0</span>]);</span></span><br><span class="line"><span class="javascript">                $(<span class="string">'#s2'</span>).text(s_s[<span class="number">1</span>]);</span></span><br><span class="line"><span class="actionscript">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(s_s.length === <span class="number">1</span>)&#123;</span></span><br><span class="line"><span class="javascript">                $(<span class="string">'#s1'</span>).text(<span class="string">'0'</span>);</span></span><br><span class="line"><span class="javascript">                $(<span class="string">'#s2'</span>).text(s_s);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    $(<span class="string">'#suspend'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">        flag = <span class="literal">false</span></span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="javascript">    $(<span class="string">'#continue'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">        flag = <span class="literal">true</span></span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="javascript">    $(<span class="string">"#reset"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">        flag = <span class="literal">true</span></span></span><br><span class="line">        d = 0;</span><br><span class="line">        h = 0;</span><br><span class="line">        m = 0;</span><br><span class="line">        s = 0;</span><br><span class="line">        ms = 0;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="模态框"><a href="#模态框" class="headerlink" title="模态框"></a>模态框</h2><ul><li>除了点击按钮可以退出</li><li>按 ESC也可以退出</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        body&#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">            height: 100%;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.container</span>&#123;</span></span><br><span class="line">            opacity: 0;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#container</span>&#123;</span></span><br><span class="line">            position: relative;</span><br><span class="line">            height: 100%;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#door</span>&#123;</span></span><br><span class="line">            height: 300px;</span><br><span class="line">            width: 300px;</span><br><span class="line">            display: none;</span><br><span class="line">            left: 50%;</span><br><span class="line">            top: 50%;</span><br><span class="line">            position: fixed;</span><br><span class="line">            border: lightgray 1px solid;</span><br><span class="line">            background-color: white;</span><br><span class="line">            line-height: 300px;</span><br><span class="line">            text-align: center;</span><br><span class="line">            margin-left: -150px;</span><br><span class="line">            margin-top: -150px;</span><br><span class="line">            opacity: 2;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#close</span>&#123;</span></span><br><span class="line">            float: right;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery3.4.1.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>你<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>好<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>啊<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>啊<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>啊<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>啊<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>啊<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">'door'</span>&gt;</span>你只能看到我呦</span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"close"</span>&gt;</span> X <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        flag = <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">'#btn'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">              <span class="keyword">if</span> (flag) &#123;</span></span><br><span class="line"><span class="javascript">                  $(<span class="string">'#door'</span>).css(<span class="string">'display'</span>, <span class="string">'block'</span>);</span></span><br><span class="line"><span class="javascript">                  $(<span class="string">'#container'</span>).addClass(<span class="string">'container'</span>);</span></span><br><span class="line"><span class="actionscript">                  flag = <span class="literal">false</span>;</span></span><br><span class="line">              &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"><span class="javascript">        $(<span class="string">'#close'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">'#door'</span>).css(<span class="string">'display'</span>, <span class="string">'none'</span>);</span></span><br><span class="line"><span class="javascript">            $(<span class="string">'#container'</span>).removeClass(<span class="string">'container'</span>);</span></span><br><span class="line"><span class="actionscript">            flag = <span class="literal">true</span>;</span></span><br><span class="line">        &#125;);</span><br><span class="line"><span class="javascript">        $(<span class="built_in">window</span>).keyup(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(e.keyCode);</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">if</span>(e.keyCode === <span class="number">27</span> )&#123;</span></span><br><span class="line"><span class="actionscript">                 <span class="keyword">if</span>(flag === <span class="literal">false</span>)&#123;</span></span><br><span class="line"><span class="javascript">                     $(<span class="string">'#door'</span>).css(<span class="string">'display'</span>, <span class="string">'none'</span>);</span></span><br><span class="line"><span class="javascript">                     $(<span class="string">'#container'</span>).removeClass(<span class="string">'container'</span>);</span></span><br><span class="line"><span class="actionscript">                     flag = <span class="literal">true</span>;</span></span><br><span class="line">                 &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="遇到的问题-1"><a href="#遇到的问题-1" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><ul><li>父元素设置透明度，子元素会继承透明度，我的解决办法是将父子关系变成兄弟关系。</li><li>这时由于设置为兄弟，不再直接用body了，那我的高就变小了。希望和body是一样的，可以在body中设置高度100% ，然后再子元素里设置高度 100% 。</li></ul><h2 id="表单操作-1"><a href="#表单操作-1" class="headerlink" title="表单操作"></a>表单操作</h2><ul><li>使用时间委托——每一行有一个button，点击删除整行。</li></ul><h3 id="方法一：利用克隆"><a href="#方法一：利用克隆" class="headerlink" title="方法一：利用克隆"></a>方法一：利用克隆</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery3.4.1.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        table,tr,th,td&#123;</span><br><span class="line">            position: relative;</span><br><span class="line">            border: gray 1px solid;</span><br><span class="line">            border-spacing: 0px;</span><br><span class="line">            padding: 5px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#mask</span>&#123;</span></span><br><span class="line">            position: fixed;</span><br><span class="line"><span class="css">            <span class="selector-tag">top</span><span class="selector-pseudo">:50</span>%;</span></span><br><span class="line">            left: 50%;</span><br><span class="line">            height: 200px;</span><br><span class="line">            width: 300px;</span><br><span class="line">            margin-top: -100px;</span><br><span class="line">            margin-left: -100px;</span><br><span class="line">            border: lightgray 1px solid;</span><br><span class="line">            border-radius: 5px;</span><br><span class="line">            text-align: center;</span><br><span class="line">            display: none;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.ma</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">opacity</span>: 0<span class="selector-class">.2</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.inner</span>&#123;</span></span><br><span class="line">            margin: 30px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"increase"</span>&gt;</span>新增<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>#<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>爱好<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>小黑<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>唱<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"del"</span>&gt;</span>开除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>小白<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>跳<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"del"</span>&gt;</span>开除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>小红<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>rap<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"del"</span>&gt;</span>开除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"mask"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"name"</span>&gt;</span>姓名:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"hobby"</span>&gt;</span>爱好:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"hobby"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"sub"</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">'.del'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log($(<span class="keyword">this</span>).parent().parent()[<span class="number">0</span>]);</span></span><br><span class="line"><span class="javascript">            $(<span class="keyword">this</span>).parent().parent().remove()</span></span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br><span class="line"><span class="actionscript">    <span class="comment">//先备份一份节点，将它放在 del click的下面，这样能克隆事件</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> baba = $(<span class="string">'table'</span>).children().last();</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> node_back = $(<span class="string">'table'</span>).children().last().children().last().clone(<span class="literal">true</span>); <span class="comment">// 克隆节点和事件</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// console.log('备份的节点是:');</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// console.log(baba[0]);</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// console.log(node_back[0]);</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    $(<span class="string">'.increase'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">'table'</span>).addClass(<span class="string">'ma'</span>);</span></span><br><span class="line"><span class="javascript">        $(<span class="string">'#mask'</span>).show(<span class="number">0</span>)</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// console.log('插入----');</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// console.log('备份的节点是:');</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// console.log(node_back[0]);</span></span></span><br><span class="line"><span class="javascript">        node = $(<span class="keyword">this</span>).next().children().last().children().last().clone(<span class="literal">true</span>); <span class="comment">// 克隆节点和事件</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// console.log('克隆的节点是：');</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// console.log(node[0]);</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span> (node[<span class="number">0</span>])&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'存在'</span>);</span></span><br><span class="line"><span class="actionscript">        &#125;<span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'不存在'</span>);</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 不存的从备份克隆一份</span></span></span><br><span class="line"><span class="actionscript">            node = node_back.clone(<span class="literal">true</span>)</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="actionscript">        <span class="comment">// 修改节点内容  模态框出现了</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 获得提交的数据</span></span></span><br><span class="line"><span class="javascript">        $(<span class="string">'#sub'</span>).on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            na = $(<span class="string">'#name'</span>).val();</span></span><br><span class="line"><span class="javascript">            ho = $(<span class="string">'#hobby'</span>).val();</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// node.children().eq(1).text(na);</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// node.children().eq(2).text(ho);</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// console.log(node[0]);</span></span></span><br><span class="line">            baba.append(node)</span><br><span class="line"><span class="javascript">            $(<span class="string">'table'</span>).removeClass(<span class="string">'ma'</span>);</span></span><br><span class="line"><span class="javascript">            $(<span class="string">'#mask'</span>).hide(<span class="number">0</span>)</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 克隆的这种方法有个潜在bug，如果先把内容都删除了，那么就没有克隆的地方了，解决办法：留个备份</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 新的问题就是，前面的bug解决了，可以添加新的节点了，但是事件丢了 解决办法：将事件的定义放在前面。</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 又遇到一个问题，就是第一轮清空，第二轮清空，第三轮就删除不了了？？？事件丢了，为什么？绕了一圈又回到了? ，解决办法清空后克隆开始的克隆版本就可以</span></span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="方法二：事件委托"><a href="#方法二：事件委托" class="headerlink" title="方法二：事件委托"></a>方法二：事件委托</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>jQuery</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>Web前端</tag>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>Web前端-JavaScript</title>
    <url>/JavaScript/20190612-JavaScript_1.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>本篇介绍JavaScript。</p></blockquote><a id="more"></a><h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><h2 id="什么是JavaScript"><a href="#什么是JavaScript" class="headerlink" title="什么是JavaScript"></a>什么是JavaScript</h2><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Glossary/JavaScript" target="_blank" rel="noopener">JavaScript</a> 编程语言允许你在 Web 页面上实现复杂的功能。如果你看到一个网页不仅仅显示静态的信息，而是显示依时间更新的内容，或者交互式地图，或者 2D/3D 动画图像，或者滚动的视频播放器，等等——你基本可以确定，这需要 JavaScript 的参与。</p></blockquote><p>JavaScript 是属于 HTML 和 Web 的编程语言，它的基础又分为三个部分：</p><ul><li>ECMAScript：JavaScript的语法标准。包括变量、表达式、运算符、函数、if语句、for语句等。</li><li>DOM：文档对象模型，操作网页上的元素的API。比如让盒子移动、变色、轮播图等。</li><li>BOM：浏览器对象模型，操作浏览器部分功能的API。比如让浏览器自动滚动。</li></ul><h2 id="JavaScript的特性"><a href="#JavaScript的特性" class="headerlink" title="JavaScript的特性"></a>JavaScript的特性</h2><blockquote><p>JavaScript 语言核心之上所构建的功能更令人兴奋。<strong>应用程序接口（Application Programming Interfaces</strong>（<strong>API</strong>））将为你的代码提供额外的超能力。</p><p>API 是已经建立好的一套代码组件（轮子），可以让开发者实现原本很难甚至无法实现的程序。</p></blockquote><blockquote><p>API 通常分为两类：</p><p><strong>浏览器 API</strong> 内建于 web 浏览器中，它们可以使周边计算环境的数据暴露出来，还可以做实用的复杂工作。例如：</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document_Object_Model" target="_blank" rel="noopener"><code>文档对象模型 API（DOM（Document Object Model）API）</code></a> 能通过创建、移除和修改 HTML，为页面动态应用新样式等手段来操作 HTML 和 CSS。比如当某个页面出现了一个弹窗，或者显示了一些新内容（像上文小 demo 中看到那样），这就是 DOM 在运行。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Geolocation" target="_blank" rel="noopener"><code>地理位置 API（Geolocation API）</code></a> 获取地理信息。这就是为什么 <a href="https://www.google.cn/maps" target="_blank" rel="noopener">谷歌地图</a> 可以找到你的位置，而且标示在地图上。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API" target="_blank" rel="noopener"><code>画布（Canvas）</code></a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WebGL_API" target="_blank" rel="noopener"><code>WebGL</code></a> API 可以创建生动的 2D 和 3D 图像。人们正运用这些 web 技术制作令人惊叹的作品。参见 <a href="https://www.chromeexperiments.com/webgl" target="_blank" rel="noopener">Chrome Experiments</a> 以及 <a href="http://webglsamples.org/" target="_blank" rel="noopener">webglsamples</a>。</li><li>诸如 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLMediaElement" target="_blank" rel="noopener"><code>HTMLMediaElement</code></a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WebRTC_API" target="_blank" rel="noopener"><code>WebRTC</code></a> 等 <a href="https://developer.mozilla.org/en-US/Apps/Fundamentals/Audio_and_video_delivery" target="_blank" rel="noopener">影音类 API</a> 让你可以利用多媒体做一些非常有趣的事，比如在网页中直接播放音乐和影片，或用自己的网络摄像头获取录像，然后在其他人的电脑上展示（试用简易版 <a href="http://chrisdavidmills.github.io/snapshot/" target="_blank" rel="noopener">截图 demo</a> 以理解这个概念）。</li></ul><p><strong>第三方 API</strong> 并没有默认嵌入浏览器中，一般要从网上取得它们的代码和信息。比如：</p><ul><li><a href="https://dev.twitter.com/overview/documentation" target="_blank" rel="noopener">Twitter API</a> 和 <a href="https://open.weibo.com/" target="_blank" rel="noopener">新浪微博 API</a> 可以在网站上展示最新推文之类。</li><li><a href="https://developers.google.com/maps/" target="_blank" rel="noopener">谷歌地图 API</a> 和 <a href="https://lbs.amap.com/" target="_blank" rel="noopener">高德地图 API</a> 可以在网站嵌入定制的地图等等。</li></ul></blockquote><h2 id="JavaScript在页面上做了什么？"><a href="#JavaScript在页面上做了什么？" class="headerlink" title="JavaScript在页面上做了什么？"></a>JavaScript在页面上做了什么？</h2><p>在前文中有过css与html是如何工作（<a href="https://atlasnq.github.io/HTML-CSS/20190611-CSS_1.html#more" target="_blank" rel="noopener">CSS 如何工作</a> ）的提及。浏览器在读取一个网页时，代码（HTML, CSS 和 JavaScript）将在一个运行环境（浏览器标签）中得到执行。就像一间工厂，将原材料（代码）加工为一件产品（网页）。在 HTML 和 CSS 集合组装成一个网页后，浏览器的 JavaScript 引擎将执行 JavaScript 代码。这保证了当 JavaScript 开始运行之前，网页的结构和样式已经就位。</p><p>这样很好，因为<strong>通过 DOM API（见上文）动态修改 HTML 和 CSS 来更新 UI 正是 JavaScript 最普遍的用处所在</strong>。如果 JavaScript 在 HTML 和 CSS 就位之前加载运行，就会引发错误。</p><h3 id="浏览器在加载页面时的顺序"><a href="#浏览器在加载页面时的顺序" class="headerlink" title="浏览器在加载页面时的顺序"></a>浏览器在加载页面时的顺序</h3><ol><li>浏览器会收到服务器返回的html页面内容</li><li>建立一颗DOM树</li><li>建立一颗CSSOM树</li><li>根据DOM树和CSSOM树，合成了一颗渲染树</li><li>计算布局(元素越多，计算越耗时)</li><li>描绘</li></ol><h2 id="解释代码vs编译代码"><a href="#解释代码vs编译代码" class="headerlink" title="解释代码vs编译代码"></a>解释代码vs编译代码</h2><p>解释：代码自上而下运行，且实时返回运行结果（<strong>逐行解释</strong>）。代码在执行前，无需由浏览器将其转化为其他形式。</p><p>编译：编译型语言代码能够运行之前需要先转化（<strong>一次性编译</strong>）成另一种形式。比如 C/C++ 先被编译成汇编语言，然后才能由计算机运行。</p><p>JavaScript 是轻量级解释型语言。</p><h2 id="服务器端代码vs客户端代码"><a href="#服务器端代码vs客户端代码" class="headerlink" title="服务器端代码vs客户端代码"></a>服务器端代码vs客户端代码</h2><p>客户端代码是在用户的电脑上运行的代码，在浏览一个网页时，它的客户端代码就会被下载，然后由浏览器来运行并展示。这就是<strong>客户端 JavaScript</strong>。</p><p>服务器端代码在服务器上运行，浏览器将结果下载并展示出来。流行的服务器端 web 语言包括：PHP、Python、Ruby、ASP.NET 以及 JavaScript！JavaScript 也可用作服务器端语言，比如现在流行的 <strong>Node.js</strong> 环境</p><h2 id="js的本质"><a href="#js的本质" class="headerlink" title="js的本质"></a>js的本质</h2><p><strong>js是一种纯对象语言！</strong></p><h1 id="js的引入"><a href="#js的引入" class="headerlink" title="js的引入"></a>js的引入</h1><h2 id="内部js"><a href="#内部js" class="headerlink" title="内部js"></a>内部js</h2><p>在 <code>&lt;/body&gt;</code> 标签结束前（<code>&lt;/body&gt;</code> 标签之前，与之相邻）插入以下代码：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="actionscript">  <span class="comment">// 在此编写 JavaScript 代码</span></span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="外部js"><a href="#外部js" class="headerlink" title="外部js"></a>外部js</h2><p>创建一个 <code>.js</code> 文件，并在HTML文件中引入：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"first.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="脚本调用策略"><a href="#脚本调用策略" class="headerlink" title="脚本调用策略"></a>脚本调用策略</h1><h2 id="存在问题"><a href="#存在问题" class="headerlink" title="存在问题"></a>存在问题</h2><p>我们遇到最常见的问题是：HTML 元素是按其在页面中出现的次序调用的，如果用 JavaScript 来管理页面上的元素（更精确的说法是使用文档对象模型DOM），若 JavaScript 加载于欲操作的 HTML 元素之前，则代码将出错。</p><p>例如：如果我们把脚本调用放在head内就会出现这个问题。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><h3 id="使用事件监听器（旧）"><a href="#使用事件监听器（旧）" class="headerlink" title="使用事件监听器（旧）"></a>使用事件监听器（旧）</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"DOMContentLoaded"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//代码块</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这是一个事件监听器，它监听浏览器的 “<code>DOMContentLoaded</code>“ 事件，即 HTML 文档体加载、解释完毕事件。事件触发时将调用代码块，从而避免了错误发生。</p><h3 id="脚本元素放在文档体的底端（旧）"><a href="#脚本元素放在文档体的底端（旧）" class="headerlink" title="脚本元素放在文档体的底端（旧）"></a>脚本元素放在文档体的底端（旧）</h3><p>以前是我们要把脚本元素放在文档体的底端（<code>&lt;/html&gt;</code> 标签之前，与之相邻），这样脚本就可以在 HTML 解析完毕后加载了。此方案（以及上述的 <code>DOMContentLoaded</code> 方案）的问题是：只有在所有 HTML DOM 加载完成后才开始脚本的加载/解析过程。对于有大量 JavaScript 代码的大型网站，可能会带来显著的性能损耗。这也是 <code>async</code> 属性诞生的初衷。</p><h3 id="async"><a href="#async" class="headerlink" title="async"></a><code>async</code></h3><p>添加<code>async</code> “异步”属性来解决，它告知浏览器在遇到 <code>&lt;script&gt;</code> 元素时不要中断后续 HTML 内容的加载。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">"script.js"</span> <span class="keyword">async</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>上述情况下，脚本和 HTML 将一并加载，代码将顺利运行。</p><p>note： <code>async</code> 属性可以解决调用顺序问题，因此无需使用 <code>DOMContentLoaded</code> 事件。而 <code>async</code> 只能用于外部js，不适用于内部js。</p><h3 id="defer"><a href="#defer" class="headerlink" title="defer"></a><code>defer</code></h3><p>由于添加<code>async</code> “异步”属性导致不同脚本间的调用顺序是不确定的，如果后面的脚本依赖于前面的脚本，我们需要添加 <code>defer</code> 属性，来要求脚本必须按照页面出现的顺序加载。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script defer src=<span class="string">"js/vendor/jquery.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;script defer src=<span class="string">"js/script2.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;script defer src=<span class="string">"js/script3.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>所以对于<code>async</code>和<code>defer</code>来说：</p><ul><li>如果脚本无需等待页面解析，且无依赖独立运行，那么应使用 <code>async</code>。</li><li>如果脚本需要等待解析，且依赖于其它脚本，调用这些脚本时应使用 <code>defer</code>，将关联的脚本按所需顺序置于 HTML 中。</li></ul><h1 id="结束符和注释"><a href="#结束符和注释" class="headerlink" title="结束符和注释"></a>结束符和注释</h1><h2 id="结束符"><a href="#结束符" class="headerlink" title="结束符 ;"></a>结束符 <code>;</code></h2><p>每条语句需要使用 <code>;</code> 进行结束，因为通常我们的代码是需要压缩通过网络进行传输，所以需要做一个分隔。</p><h2 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 我是单行注释</span></span><br></pre></td></tr></table></figure><h2 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*我是</span></span><br><span class="line"><span class="comment">多行</span></span><br><span class="line"><span class="comment">注释*/</span></span><br></pre></td></tr></table></figure><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p>变量本质上是<strong>值</strong>（例如数字或字符串）的<strong>容器</strong>。 你可以使用关键字 <code>let</code> （旧代码中使用 <code>var</code>）和一个名字来创建变量。常量用于存储不希望更改的数据，用关键字 <code>const</code> 创建</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> b = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><h2 id="变量与值的区分"><a href="#变量与值的区分" class="headerlink" title="变量与值的区分"></a>变量与值的区分</h2><p>变量不是数值本身，它们仅仅是一个用于存储数值的容器。你可以把变量想象成一个个用来装东西的纸箱子。</p><h2 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h2><p>要想使用变量，需要先声明变量</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> 变量名;</span><br></pre></td></tr></table></figure><p>在控制台输入上面这条命令时会打印 <code>undefined</code> 。</p><p>声明了但没有初始化就是 <code>undefined</code> 。</p><h2 id="初始化变量"><a href="#初始化变量" class="headerlink" title="初始化变量"></a>初始化变量</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">变量名 = 值;</span><br></pre></td></tr></table></figure><p>可以进行合并</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> 变量名 = 值;</span><br></pre></td></tr></table></figure><h2 id="变量的命名规则"><a href="#变量的命名规则" class="headerlink" title="变量的命名规则"></a>变量的命名规则</h2><ul><li>使用拉丁字符(0-9,a-z,A-Z)和下划线字符</li><li>变量名不要以下划线开头—— 以下划线开头的被某些JavaScript设计为特殊的含义，因此可能让人迷惑。</li><li>变量名不要以数字开头。这种行为是不被允许的，并且将引发一个错误。</li><li>一个可靠的命名约定叫做 <a href="https://en.wikipedia.org/wiki/CamelCase#Variations_and_synonyms" target="_blank" rel="noopener">“小写驼峰命名法”</a>，用来将多个单词组在一起，小写整个命名的第一个字母然后大写剩下单词的首字符。</li><li>避免使用JavaScript的保留字给变量命名。保留字，即是组成JavaScript的实际语法的单词。</li></ul><h2 id="let与var区别（补充）"><a href="#let与var区别（补充）" class="headerlink" title="let与var区别（补充）"></a>let与var区别（补充）</h2><p><code>let</code> 是在现代版本中的 JavaScript 创建的一个新的关键字，用于创建与 <code>var</code> 工作方式有些不同的变量，解决了过程中的问题。</p><ul><li><p><strong>var</strong>可以根据需要<strong>多次声明</strong>相同名称的变量，这会出现<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/var#变量提升" target="_blank" rel="noopener">变量提升</a>。</p></li><li><p><strong>let不允许重新声明变量。</strong></p></li></ul><p>更详细的内容见<a href="https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps/Variables#var_与_let_的区别" target="_blank" rel="noopener">let 和 var 之间的区别</a>。</p><h1 id="输入与输出"><a href="#输入与输出" class="headerlink" title="输入与输出"></a>输入与输出</h1><h2 id="弹出框"><a href="#弹出框" class="headerlink" title="弹出框"></a>弹出框</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">alert(<span class="string">'hello'</span>);</span><br></pre></td></tr></table></figure><h2 id="弹出输入框"><a href="#弹出输入框" class="headerlink" title="弹出输入框"></a>弹出输入框</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">prompt(<span class="string">'你好吗？'</span>)</span><br></pre></td></tr></table></figure><h2 id="控制台输出框"><a href="#控制台输出框" class="headerlink" title="控制台输出框"></a>控制台输出框</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'hello'</span>)</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>快点我！<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> button = <span class="built_in">document</span>.querySelector(<span class="string">'button'</span>);</span></span><br><span class="line"><span class="actionscript">        button.onclick = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> res = prompt(<span class="string">'朋友，认识一下？'</span>);</span></span><br><span class="line"><span class="actionscript">            alert(<span class="string">'我也'</span>+ res);</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>note：当我们把button按钮放在script下面，在点击就不会有反映了，这是因为js先于button调用。</p><h1 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h1><ul><li>Undefined 未定义</li><li>Null 空值</li><li>Boolean 布尔类型</li><li>Number 数字类型</li><li>String 字符串类型</li><li>Object 对象类型</li><li>symbol</li></ul><h2 id="动态类型"><a href="#动态类型" class="headerlink" title="动态类型"></a>动态类型</h2><p>JavaScript是一种“动态类型语言”，不同于其他一些语言(如C、JAVA)，不需要指定变量将包含什么数据类型（例如number或string）</p><p>例如：声明并初始化，没有指定变量类型，但浏览器会知道他是一个字符串。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'hello'</span></span><br></pre></td></tr></table></figure><h2 id="查看数据类型"><a href="#查看数据类型" class="headerlink" title="查看数据类型"></a>查看数据类型</h2><figure class="highlight elm"><table><tr><td class="code"><pre><span class="line">typeof 变量;</span><br><span class="line">typeof(变量);</span><br></pre></td></tr></table></figure><h2 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h2><p>与其他编程语言不同，不管是<strong>整数</strong>还是<strong>浮点数</strong>都是<strong>Number</strong>。</p><p>NaN ：not a number</p><p>infinite ： 无穷大</p><h3 id="toFixed-i"><a href="#toFixed-i" class="headerlink" title=".toFixed(i)"></a><code>.toFixed(i)</code></h3><p>保留小数点后i位有效数字，四舍五入。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">a = <span class="number">2.867</span></span><br><span class="line">a.toFixed(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><table><thead><tr><th>运算符</th><th>名称</th><th>作用</th><th>示例</th></tr></thead><tbody><tr><td><code>+</code></td><td>加法</td><td>两个数相加。</td><td><code>6 + 9</code></td></tr><tr><td><code>-</code></td><td>减法</td><td>从左边减去右边的数。</td><td><code>20 - 15</code></td></tr><tr><td><code>*</code></td><td>乘法</td><td>两个数相乘。</td><td><code>3 * 7</code></td></tr><tr><td><code>/</code></td><td>除法</td><td>用右边的数除左边的数</td><td><code>10 / 5</code></td></tr><tr><td><code>%</code></td><td>求余(有时候也叫取模)</td><td>在你将左边的数分成同右边数字相同的若干整数部分后，返回剩下的余数</td><td><code>8 % 3</code> (返回 2，将8分成3份，余下2 。)</td></tr><tr><td><code>**</code></td><td>幂</td><td>取底数的指数次方，即指数所指定的底数相乘。它在EcmaScript 2016 中首次引入。</td><td><code>5 ** 5</code> (返回 3125，相当于 <code>5 * 5 * 5 * 5 * 5</code> 。)</td></tr><tr><td><code>++</code></td><td>增量</td><td>递增变量</td><td>num = 1<br><code>num++</code> 或 <code>++num</code></td></tr><tr><td><code>--</code></td><td>递减</td><td>递减变量</td><td>num = 1<br><code>num--</code>或<code>--num</code></td></tr></tbody></table><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><table><thead><tr><th>运算符</th><th>名称</th><th>作用</th><th>示例</th></tr></thead><tbody><tr><td>+=</td><td>递增赋值</td><td>右边的数值加上左边的变量，然后再返回新的变量。</td><td><code>x = 3;x += 4;</code></td></tr><tr><td>-=</td><td>递减赋值</td><td>左边的变量减去右边的数值，然后再返回新的变量。</td><td><code>x = 6;x -= 3;</code></td></tr><tr><td>*=</td><td>乘法赋值</td><td>左边的变量乘以右边的数值，然后再返回新的变量。</td><td><code>x = 2;x *= 3;</code></td></tr><tr><td>/=</td><td>除法赋值</td><td>左边的变量除以右边的数值，然后再返回新的变量。</td><td><code>x = 10;x /= 5;</code></td></tr></tbody></table><h3 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h3><p>如果 a&gt;b 则 c = a ；否则 c = b</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> c = a&gt;b ?  a:b</span><br></pre></td></tr></table></figure><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><table><thead><tr><th>运算符</th><th>名称</th><th>作用</th><th>示例</th></tr></thead><tbody><tr><td><code>===</code></td><td>严格等于</td><td>测试左右值是否相同</td><td><code>5 === 2 + 4</code></td></tr><tr><td><code>!==</code></td><td>严格不等于</td><td>测试左右值是否<strong>不</strong>相同</td><td><code>5 !== 2 + 3</code></td></tr><tr><td><code>&lt;</code></td><td>小于</td><td>测试左值是否小于右值。</td><td><code>10 &lt; 6</code></td></tr><tr><td><code>&gt;</code></td><td>大于</td><td>测试左值是否大于右值</td><td><code>10 &gt; 20</code></td></tr><tr><td>&lt;=</td><td>小于或等于</td><td>测试左值是否小于或等于右值。</td><td><code>3 &lt;= 2</code></td></tr><tr><td>&gt;=</td><td>大于或等于</td><td>测试左值是否大于或等于正确值。</td><td><code>5 &gt;= 4</code></td></tr></tbody></table><p>note：还有用<code>==</code>和<code>!=</code>来判断相等和不相等，它是用来测试值是否相同， 但是<strong>数据类型可能不同</strong>；而<code>===</code>/<code>!==</code>严格测试<strong>值和数据类型是否相同</strong>。 严格的版本往往导致更少的错误，建议使用。</p><p>例子: 完成一个简单灯的<strong>切换</strong>：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>关灯<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">'button'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> bod = <span class="built_in">document</span>.querySelector(<span class="string">'body'</span>);</span></span><br><span class="line"><span class="actionscript">    btn.addEventListener(<span class="string">'click'</span>,updateBtn);</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">updateBtn</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span> (btn.textContent === <span class="string">'关灯'</span>)&#123;</span></span><br><span class="line"><span class="actionscript">            btn.textContent = <span class="string">'开灯'</span>;</span></span><br><span class="line"><span class="actionscript">            bod.style.backgroundColor = <span class="string">'#000'</span>;</span></span><br><span class="line"><span class="actionscript">        &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="actionscript">            btn.textContent = <span class="string">'关灯'</span>;</span></span><br><span class="line"><span class="actionscript">            bod.style.backgroundColor = <span class="string">'#FFF'</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><ul><li><p>字符串是文本的一部分。当你给一个变量赋值为字符串时，你需要用单引号或者双引号把值给包起来，否则JavaScript将会把这个字符串值理解成别的变量名。</p></li><li><p>单引号或双引号没有什么区别。</p></li></ul><h3 id="基本字符串与字符串对象"><a href="#基本字符串与字符串对象" class="headerlink" title="基本字符串与字符串对象"></a>基本字符串与字符串对象</h3><p>字符串 (通过单引号或双引号定义) 和 直接调用 String 方法(没有通过 new 生成字符串对象实例)的字符串都是基本字符串。JavaScript会<u>自动将基本字符串转换为字符串对象，只有将基本字符串转化为字符串对象之后才可以使用字符串对象的方法</u>。当基本字符串需要调用一个字符串对象才有的方法或者查询值的时候(基本字符串是没有这些方法的)，JavaScript 会自动将基本字符串转化为字符串对象并且调用相应的方法或者执行查询。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">s1 = <span class="string">'cc'</span>;</span><br><span class="line"><span class="keyword">typeof</span> s1;   <span class="comment">//"string"</span></span><br><span class="line">s2 = <span class="keyword">new</span> <span class="built_in">String</span>(s1);</span><br><span class="line"><span class="keyword">typeof</span> s2;	<span class="comment">//"object"</span></span><br></pre></td></tr></table></figure><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>length</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'ni hao a '</span>;</span><br><span class="line">str.length；</span><br></pre></td></tr></table></figure><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><p>都是返回一个新字符串，而不改变原字符串。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">str.trim()  			<span class="comment">/*返回两边没有空白的字符串*/</span>   </span><br><span class="line"></span><br><span class="line">str.concat(<span class="string">'666'</span>);		<span class="comment">/*str拼接'666'*/</span></span><br><span class="line"></span><br><span class="line">str[<span class="number">3</span>];           		<span class="comment">/*根据索引求字符*/</span></span><br><span class="line">str.charAt(<span class="number">3</span>);    		<span class="comment">/*根据索引求字符*/</span></span><br><span class="line">str.indexOf(<span class="string">'h'</span>)  		<span class="comment">/*根据字符求索引*/</span></span><br><span class="line">str.indexOf(<span class="string">'hao'</span>);  	<span class="comment">/*打印3，打印首字符h的位置*/</span></span><br><span class="line">str.indexOf(<span class="string">'haoa'</span>); 	<span class="comment">/*打印-1，没有找到就返回-1*/</span></span><br><span class="line"></span><br><span class="line">str.slice(<span class="number">1</span>,<span class="number">5</span>);			<span class="comment">/*顾头不顾尾,可以用负数,取子串*/</span></span><br><span class="line">str.slice(<span class="number">-5</span>,<span class="number">-1</span>);		<span class="comment">/*打印"ao a"*/</span></span><br><span class="line"></span><br><span class="line">str.toUpperCase();		<span class="comment">/*全部变大写*/</span></span><br><span class="line">str.toLowerCase();		<span class="comment">/*全部变小写	*/</span></span><br><span class="line"></span><br><span class="line">str.split(<span class="string">''</span>);  		<span class="comment">/*每个字符都拆开，返回数组*/</span></span><br><span class="line">str.split(<span class="string">' '</span>);			<span class="comment">/*根据空格分割，返回数组*/</span></span><br><span class="line">str.split(<span class="string">' '</span>,<span class="number">1</span>);		<span class="comment">/*根据空格做分割，返回1个结果数组["ni"]*/</span></span><br></pre></td></tr></table></figure><p>更多方法参考<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String#Parameters" target="_blank" rel="noopener">这里</a>。</p><h3 id="正则匹配"><a href="#正则匹配" class="headerlink" title="正则匹配"></a>正则匹配</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">创建一个正则：</span><br><span class="line">第一种方式：</span><br><span class="line"><span class="keyword">let</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'\\d'</span>);</span><br><span class="line">note: \d会发生转移， 需要用\\ 来表示 \   所有带\的元字符都会被转义。</span><br><span class="line">第二种方式</span><br><span class="line"><span class="keyword">var</span> = reg2 = <span class="regexp">/\d/</span>    用<span class="comment">//来代替引号，里面的不会发生转义。</span></span><br><span class="line">reg.test(待检测的字符串)   如果字符串中含有符合表达式规则的内容就返回<span class="literal">true</span>，否则返回<span class="literal">false</span>。</span><br><span class="line">在字符串中应用正则</span><br><span class="line"></span><br><span class="line">在字符串中应用正则</span><br><span class="line"><span class="keyword">var</span> eee = <span class="string">'alex3714'</span></span><br><span class="line">eee.match(<span class="regexp">/\d/</span>);      <span class="comment">// 只匹配从左到右的第一个   </span></span><br><span class="line">[<span class="string">"3"</span>, <span class="attr">index</span>: <span class="number">4</span>, <span class="attr">input</span>: <span class="string">"alex3714"</span>, <span class="attr">groups</span>: <span class="literal">undefined</span>]</span><br><span class="line">eee.match(<span class="regexp">/\d/g</span>);     <span class="comment">// 匹配所有符合规则的，返回一个数组</span></span><br><span class="line">(<span class="number">4</span>) [<span class="string">"3"</span>, <span class="string">"7"</span>, <span class="string">"1"</span>, <span class="string">"4"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">//match</span></span><br><span class="line"><span class="keyword">var</span> exp2 = <span class="string">'Alex is a big sb'</span></span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line">exp2.match(<span class="regexp">/a/i</span>);      <span class="comment">// i表示不区分大小写</span></span><br><span class="line">[<span class="string">"A"</span>, <span class="attr">index</span>: <span class="number">0</span>, <span class="attr">input</span>: <span class="string">"Alex is a big sb"</span>, <span class="attr">groups</span>: <span class="literal">undefined</span>]</span><br><span class="line">exp2.match(<span class="regexp">/a/ig</span>);     <span class="comment">//不区分大小写并匹配所有</span></span><br><span class="line">(<span class="number">2</span>) [<span class="string">"A"</span>, <span class="string">"a"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">//search</span></span><br><span class="line">exp2.search(<span class="regexp">/a/</span>);</span><br><span class="line"><span class="number">8</span></span><br><span class="line">exp2.search(<span class="regexp">/a/i</span>);       <span class="comment">//不区分大小写，从exp字符串中字符串找出符合条件的子串的第一个索引位置</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line">exp2.search(<span class="regexp">/a/ig</span>);       </span><br><span class="line"><span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//split</span></span><br><span class="line">exp2.split(<span class="regexp">/\s/</span>);       </span><br><span class="line">exp2.split(<span class="regexp">/正则/i</span>,n);   <span class="comment">//根据正则切割，不区分大小写，返回前n个结果</span></span><br><span class="line"></span><br><span class="line">exp2.replace(<span class="regexp">/正则/gi</span>, 新的值)<span class="comment">// i 不区分大小写， g替换所有，将符合正则条件的内容替换成新的值</span></span><br><span class="line">exp2.replace(<span class="regexp">/\s/</span>,<span class="string">'--'</span>);</span><br><span class="line"><span class="string">"Alex--is a big sb"</span></span><br><span class="line">exp2.replace(<span class="regexp">/\s/g</span>,<span class="string">'--'</span>);</span><br><span class="line"><span class="string">"Alex--is--a--big--sb"</span></span><br><span class="line"></span><br><span class="line">小问题<span class="number">1</span>：</span><br><span class="line"><span class="keyword">var</span> reg2 = <span class="regexp">/\d/g</span>              <span class="comment">//正则表示要匹配多个值</span></span><br><span class="line">reg2.test(<span class="string">'a1b2c3'</span>)           <span class="comment">//多次test会得到三个true  一个 flase ，继续会循环上面的结果</span></span><br><span class="line">走三次到第四次返回<span class="literal">false</span></span><br><span class="line">通过lastIndex返回位置。</span><br><span class="line"></span><br><span class="line">小问题<span class="number">2</span>：</span><br><span class="line"><span class="keyword">var</span> reg3 = <span class="regexp">/\w&#123;5,10&#125;/</span>;</span><br><span class="line">reg3.test();    <span class="comment">// true    啥都不写，默认是一个undefined，把undefined转成一个字符串，然后符合正则。所以显示true</span></span><br></pre></td></tr></table></figure><h3 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符 \"></a>转义字符 \</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> bai = <span class="string">'I\'m bai'</span>;</span><br><span class="line">bai;</span><br></pre></td></tr></table></figure><table><thead><tr><th>Code</th><th>Output</th></tr></thead><tbody><tr><td><code>\0</code></td><td>空字符</td></tr><tr><td><code>\&#39;</code></td><td>单引号</td></tr><tr><td><code>\&quot;</code></td><td><code>双引号</code></td></tr><tr><td><code>\\</code></td><td>反斜杠</td></tr><tr><td><code>\n</code></td><td>换行</td></tr><tr><td><code>\r</code></td><td><code>回车</code></td></tr><tr><td><code>\v</code></td><td>垂直制表符</td></tr><tr><td><code>\t</code></td><td>水平制表符</td></tr><tr><td><code>\b</code></td><td>退格</td></tr><tr><td><code>\f</code></td><td>换页</td></tr></tbody></table><h2 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h2><p>Boolean 的值有2种：true或false。它们通常被用于在适当的代码之后，测试条件是否成立。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="literal">true</span> : []  &#123;&#125;</span><br><span class="line"><span class="literal">false</span> : <span class="literal">false</span>,<span class="literal">undefined</span> <span class="literal">null</span> <span class="literal">NaN</span> <span class="number">0</span> <span class="string">""</span>  (包含全部)</span><br></pre></td></tr></table></figure><h3 id="null-空和undefined未定义"><a href="#null-空和undefined未定义" class="headerlink" title="null 空和undefined未定义"></a>null 空和undefined未定义</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="literal">null</span> 表示空  boolean值为<span class="literal">false</span></span><br><span class="line"><span class="literal">undefined</span> 没有定义 创建变量但是不赋值 boolean值为<span class="literal">false</span></span><br></pre></td></tr></table></figure><h2 id="数据类型之间的转换"><a href="#数据类型之间的转换" class="headerlink" title="数据类型之间的转换"></a>数据类型之间的转换</h2><p><code>parseInt</code>、 <code>parseFloat</code>、 <code>toString</code>、<code>String</code>、 <code>Boolean</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">string --&gt; <span class="built_in">Number</span> 整</span><br><span class="line">	<span class="built_in">parseInt</span>(<span class="string">'123'</span>) <span class="comment">//123</span></span><br><span class="line">	<span class="built_in">parseInt</span>(<span class="string">'123abc'</span>) <span class="comment">//123</span></span><br><span class="line">	<span class="built_in">parseInt</span>(<span class="string">'abc'</span>) <span class="comment">//NaN  not a number</span></span><br><span class="line">string --&gt; <span class="built_in">Number</span> 浮点</span><br><span class="line">	<span class="built_in">parseFloat</span>(<span class="string">'1.233'</span>) </span><br><span class="line">float/int --&gt; <span class="built_in">String</span></span><br><span class="line">	<span class="keyword">var</span> num = <span class="number">123</span></span><br><span class="line">	<span class="built_in">String</span>(<span class="number">123</span>)</span><br><span class="line">	<span class="keyword">var</span> str = num.toString()</span><br><span class="line">    str = <span class="built_in">String</span>(num)</span><br><span class="line">任意类型 --&gt; <span class="built_in">Boolean</span></span><br><span class="line">	<span class="built_in">Boolean</span>(数据)</span><br><span class="line"></span><br><span class="line">字符串和数字相加 --&gt; 字符串</span><br><span class="line">字符串和数字相减 --&gt; 数字   <span class="literal">NaN</span></span><br></pre></td></tr></table></figure><p>note：使用 String() 方法将其它对象转化为字符串可以被认为是一种更加安全的做法，虽然该方法底层使用的也是 toString() 方法，但是针对 null/undefined/symbols，String() 方法会有特殊的处理。</p><p>例如：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.</span></span><br><span class="line">a = <span class="literal">null</span></span><br><span class="line">a.toString()   	<span class="comment">//报错</span></span><br><span class="line">Uncaught <span class="built_in">TypeError</span>: Cannot read property <span class="string">'toString'</span> <span class="keyword">of</span> <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">String</span>(a)		<span class="comment">//"null"</span></span><br><span class="line"><span class="comment">// 2.</span></span><br><span class="line"><span class="keyword">let</span> cc;</span><br><span class="line">cc.toString();  <span class="comment">//报错</span></span><br><span class="line">Uncaught <span class="built_in">TypeError</span>: Cannot read property <span class="string">'toString'</span> <span class="keyword">of</span> <span class="literal">undefined</span></span><br><span class="line"><span class="built_in">String</span>(cc)		<span class="comment">//"undefined"</span></span><br></pre></td></tr></table></figure><h1 id="内置对象类型"><a href="#内置对象类型" class="headerlink" title="内置对象类型"></a>内置对象类型</h1><h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><p>数组是一个单个对象，其中包含很多值，方括号括起来，并用逗号分隔。这是一种将一组数据存储在单个变量名下的优雅方式。</p><h3 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h3><h4 id="创建空数组"><a href="#创建空数组" class="headerlink" title="创建空数组"></a>创建空数组</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr2 = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"><span class="keyword">let</span> arr3 = []</span><br></pre></td></tr></table></figure><h4 id="创建并初始化"><a href="#创建并初始化" class="headerlink" title="创建并初始化"></a>创建并初始化</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="string">'a'</span>,[<span class="string">'b'</span>]];</span><br><span class="line"><span class="keyword">let</span> arr2 = <span class="keyword">new</span> <span class="built_in">Array</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="string">'a'</span>,[<span class="string">'b'</span>]]);</span><br></pre></td></tr></table></figure><h3 id="访问和修改数组元素"><a href="#访问和修改数组元素" class="headerlink" title="访问和修改数组元素"></a>访问和修改数组元素</h3><h4 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr[<span class="number">1</span>];</span><br></pre></td></tr></table></figure><h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr[<span class="number">1</span>]=<span class="number">666</span>;</span><br></pre></td></tr></table></figure><h3 id="Array常用的属性和方法"><a href="#Array常用的属性和方法" class="headerlink" title="Array常用的属性和方法"></a>Array常用的属性和方法</h3><h4 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*length  返回数组元素个数*/</span></span><br><span class="line">arr.length;</span><br></pre></td></tr></table></figure><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**/</span></span><br><span class="line">arr.push(<span class="number">666</span>);     			<span class="comment">/*数组尾部追加元素*/</span></span><br><span class="line">arr.pop();					<span class="comment">/*获取尾部的元素*/</span></span><br><span class="line"></span><br><span class="line">arr.unshift(<span class="number">777</span>);  			<span class="comment">/*头部插入元素*/</span>  </span><br><span class="line">arr.shift();				<span class="comment">/*获取头部元素*/</span>  </span><br><span class="line"></span><br><span class="line">arr.slice(<span class="number">1</span>, <span class="number">3</span>);			<span class="comment">/*切片，顾头不顾尾*/</span></span><br><span class="line">arr.reverse();				<span class="comment">/*翻转原数组*/</span>	</span><br><span class="line"></span><br><span class="line">str = arr.join(<span class="string">'|'</span>);		<span class="comment">/*将数组元素连接成字符串*/</span></span><br><span class="line">arr.concat(<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>);   		<span class="comment">//数组合并,得到一个新数组，原数组不变。 如 [777, Array(1), "a", 666, 1, 7, 8, 9]</span></span><br><span class="line"></span><br><span class="line">arr.sort();					<span class="comment">//排序</span></span><br><span class="line"></span><br><span class="line">arr.splice();				<span class="comment">//参数：1.从哪删(索引), 2.删几个  3.删除位置替换的新元素(可多个元素)	删除元素，并向数组添加新元素。</span></span><br><span class="line">arr.splice(<span class="number">1</span>,<span class="number">2</span>);       		<span class="comment">//从1开始删，删两个元素</span></span><br><span class="line">arr.splice(<span class="number">1</span>,<span class="number">1</span>,<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>);<span class="comment">//[777, "a", "b", "c", 1]</span></span><br></pre></td></tr></table></figure><h4 id="待补充：-sort"><a href="#待补充：-sort" class="headerlink" title="待补充： sort"></a>待补充： sort</h4><h2 id="自定义对象"><a href="#自定义对象" class="headerlink" title="自定义对象"></a>自定义对象</h2><p>在编程中，对象是现实生活中的模型的一种代码结构。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;<span class="attr">name</span>:<span class="string">'小白'</span>, <span class="attr">sex</span>:<span class="string">'男'</span>, <span class="attr">age</span>:<span class="number">18</span>&#125;</span><br></pre></td></tr></table></figure><p>查看对象的属性：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">person</span><br><span class="line">person.name</span><br><span class="line">person[<span class="string">'name'</span>]</span><br></pre></td></tr></table></figure><h2 id="Date对象"><a href="#Date对象" class="headerlink" title="Date对象"></a>Date对象</h2><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">创建对象:</span><br><span class="line">var dt = <span class="keyword">new</span> <span class="constructor">Date()</span> <span class="comment">//获取到当前时间</span></span><br><span class="line">dt.<span class="keyword">to</span><span class="constructor">LocalString()</span> <span class="comment">//转换成'2019/8/13 10:18:12'</span></span><br><span class="line">dt.get<span class="constructor">FullYear()</span> <span class="comment">//年</span></span><br><span class="line">dt.get<span class="constructor">Month()</span> <span class="comment">//月 1月是0</span></span><br><span class="line">dt.getday<span class="literal">()</span>   <span class="comment">//周中天 周日是0</span></span><br><span class="line">dt.get<span class="constructor">Date()</span>  <span class="comment">//月中天 1号是1</span></span><br><span class="line">dt.get<span class="constructor">Hours()</span> <span class="comment">//时 从0开始</span></span><br><span class="line">dt.get<span class="constructor">Minutes()</span> <span class="comment">//分 从0开始</span></span><br><span class="line">dt.get<span class="constructor">Seconds()</span> <span class="comment">//秒 从0开始</span></span><br><span class="line"></span><br><span class="line">自定义时间:</span><br><span class="line">var dt2 = <span class="keyword">new</span> <span class="constructor">Date('2018<span class="operator">/</span>1<span class="operator">/</span>1 12:12:12')</span>   <span class="number">1</span>月<span class="number">1</span>日</span><br><span class="line">var dt2 = <span class="keyword">new</span> <span class="constructor">Date(2018,1,1)</span>;             <span class="number">2</span>月<span class="number">1</span>日</span><br></pre></td></tr></table></figure><h2 id="Math对象"><a href="#Math对象" class="headerlink" title="Math对象"></a>Math对象</h2><table><thead><tr><th>方法</th><th>含义</th></tr></thead><tbody><tr><td>Math.floor()</td><td>向下取整，称为”地板函数“</td></tr><tr><td>Math.ceil()</td><td>向上取整，称为”天花板函数“</td></tr><tr><td>Math.max(a,b)</td><td>求a和b中的最大值</td></tr><tr><td>Math.min(a,b)</td><td>求a和b中的最小值</td></tr><tr><td>Math.random()</td><td>随机数，默认0-1之间的随机数，公式： <code>min + Math.random()*(max-min)</code>，求min·max之间的随机数</td></tr></tbody></table><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stu</span>(<span class="params">name, age</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.name = name</span><br><span class="line">	<span class="keyword">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> s = stu(<span class="string">'cc'</span>,<span class="number">18</span>)</span><br><span class="line">s.name       <span class="comment">//查看属性</span></span><br><span class="line">s.age</span><br></pre></td></tr></table></figure><p>prototype</p><p>类似元类type 创造者</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//绑定方法</span></span><br><span class="line">stu.prototype.show = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="keyword">this</span>.name + <span class="keyword">this</span>.age)&#125;</span><br><span class="line">s.show()</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//给祖宗添加方法</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.show = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'wahaha'</span>)</span><br><span class="line">&#125;</span><br><span class="line">ƒ ()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'wahaha'</span>)</span><br><span class="line">&#125;</span><br><span class="line">d.show()     <span class="comment">// VM2267:2 wahaha</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 所有的对象都可以用这个方法</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">'abc'</span></span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line">a.show()</span><br><span class="line">VM2267:<span class="number">2</span> wahaha</span><br></pre></td></tr></table></figure><h2 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h2><p>symbol 是避免代码冲突的一种方法。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="string">"symbol"</span></span><br></pre></td></tr></table></figure><h3 id="获取-symbol-的三种方法"><a href="#获取-symbol-的三种方法" class="headerlink" title="获取 symbol 的三种方法"></a>获取 symbol 的三种方法</h3><h4 id="调用-Symbol"><a href="#调用-Symbol" class="headerlink" title="调用 Symbol()"></a>调用 Symbol()</h4><p>每次调用都会返回一个新的唯一 symbol。</p><h4 id="调用-Symbol-for-string"><a href="#调用-Symbol-for-string" class="headerlink" title="调用 Symbol.for(string)"></a>调用 Symbol.for(string)</h4><p>这种方式会访问 symbol 注册表，其中存储了已经存在的一系列 symbol。这种方式与通过<code>Symbol()</code>定义的独立 symbol 不同，symbol 注册表中的 symbol 是共享的。如果你连续三十次调用<code>Symbol.for(&quot;cat&quot;)</code>，每次都会返回相同的 symbol。注册表非常有用，在多个 web 页面或同一个 web 页面的多个模块中经常需要共享一个 symbol。</p><h4 id="使用标准定义的-symbol"><a href="#使用标准定义的-symbol" class="headerlink" title="使用标准定义的 symbol"></a>使用标准定义的 symbol</h4><p><strong>Symbol.iterator。</strong>标准根据一些特殊用途定义了少许的几个 symbol。</p><h1 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h1><h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2><h3 id="if-语句"><a href="#if-语句" class="headerlink" title="if 语句"></a>if 语句</h3><p>任何不是 <code>false</code>, <code>undefined</code>, <code>null</code>, <code>0</code>, <code>NaN</code> 的值，或一个空字符串（’’）在作为条件语句进行测试时实际返回true</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition1) &#123;</span><br><span class="line">  <span class="comment">// 为真，运行这条代码块</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (condition2)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 为真，运行这条代码块      </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 其它条件不符合，运行这条代码块</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="switch-case语句"><a href="#switch-case语句" class="headerlink" title="switch case语句"></a>switch case语句</h3><p><code>if...else</code> 语句能够很好地实现条件代码，但是它们不是没有缺点。 它们主要适用于只有几个选择的情况，每个都需要相当数量的代码来运行。 对于只想将变量设置一系列为特定值的选项或根据条件打印特定语句的情况，语法可能会很麻烦，特别是如果<strong>您有大量选择</strong>。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> err_type = <span class="string">'info'</span></span><br><span class="line"><span class="keyword">switch</span>(err_type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'warining'</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'警告'</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'error'</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'错误'</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'没错'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>关键字 <code>switch</code>, 后跟一组括号。</li><li>括号内的表达式或值。</li><li>关键字 <code>case</code>, 后跟一个选项的表达式/值，后面跟一个冒号。</li><li>如果选择与表达式匹配，则运行一些代码。</li><li>一个 <code>break</code> 语句, 分号结尾. 如果先前的选择与表达式/值匹配，则浏览器在此停止执行代码块，并执行switch语句之后的代码。在这里，<u>case就像一个开关，当符合条件了就打开了开关，后面都会执行，所以需要加break。</u></li><li>关键字 <code>default</code>, 它后面不需要再有选项, 并且不需要 <code>break</code> 语句, 因为之后没有任何运行代码. 如果之前没有选项匹配，则运行<code>default</code>选项。</li><li>如果把default放在最前面，后面的语句就会都执行（没有break）。</li></ul><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><h3 id="for"><a href="#for" class="headerlink" title="for"></a><code>for</code></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方式一:</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>;i&lt;=<span class="number">10</span>;i++)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式二:</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">for</span> (n <span class="keyword">in</span> arr)&#123;</span><br><span class="line">    <span class="comment">// n是索引、 arr[n]是值</span></span><br><span class="line">    <span class="built_in">console</span>.log(n)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方式三：</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;arr.length;i++)&#123;</span><br><span class="line">    <span class="comment">//i 是索引，arr[i]是具体的值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>开始条件<strong>，</strong>它被初始化为一个特定的值 - 这是循环的起点。</li><li>结束条件，这是循环停止的标准 - 通常计数器达到一定值。</li><li>迭代器<strong>，</strong>这通常在每个连续循环上递增少量的计数器，直到达到退出条件。</li></ul><h3 id="while"><a href="#while" class="headerlink" title="while"></a><code>while</code></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">1</span>; <span class="comment">//初始化循环变量</span></span><br><span class="line"><span class="keyword">while</span>(i&lt;=<span class="number">9</span>)&#123; <span class="comment">//判断循环条件</span></span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">    i = i+<span class="number">1</span>; <span class="comment">//更新循环条件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="do-while"><a href="#do-while" class="headerlink" title="do while"></a><code>do while</code></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">1</span>; <span class="comment">//初始化循环变量</span></span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(i);</span><br><span class="line">    i = i+<span class="number">1</span>; <span class="comment">//更新循环条件</span></span><br><span class="line">&#125;<span class="keyword">while</span>(i&lt;=<span class="number">9</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(i&lt;=<span class="number">9</span>)&#123; <span class="comment">//判断循环条件</span></span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">    i = i+<span class="number">1</span>; <span class="comment">//更新循环条件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>note：使用 while 和 do…while — 所有循环都一样 — 你必须保证初始变量是迭代的，那么它才会逐渐地达到退出条件. 不然, 它将会永远循环下去, 要么浏览器会强制终止它，要么它自己会崩溃. 这称为无限循环.</p><h3 id="break-与-continue"><a href="#break-与-continue" class="headerlink" title="break 与 continue"></a><code>break</code> 与 <code>continue</code></h3><ul><li>使用break退出循环</li><li>使用continue跳过迭代</li></ul><h3 id="循环的选择"><a href="#循环的选择" class="headerlink" title="循环的选择"></a>循环的选择</h3><p>建议使用<code>for</code>，因为它可能是最简单地帮你记住一切 - 初始化程序，退出条件和最终表达式都必须整齐地放入括号，所以很容易看到他们在哪里并检查你没有丢失他们。</p><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="函数与方法"><a href="#函数与方法" class="headerlink" title="函数与方法"></a>函数与方法</h2><p>严格说来，内置浏览器函数并不是函数——它们是<strong>方法</strong>。这听起来有点可怕和令人困惑，但不要担心 ——函数和方法在很大程度上是可互换的。</p><p>二者区别在于方法是在对象内定义的函数。浏览器内置函数（<strong>方法</strong>）和变量（称为<strong>属性</strong>）存储在<strong>结构化对象内</strong>，以使代码更加高效，易于处理。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 函数名(<span class="params">参数</span>)</span>&#123;</span><br><span class="line">    函数体</span><br><span class="line">    <span class="keyword">return</span> 返回值</span><br><span class="line">&#125;</span><br><span class="line">函数名(参数)</span><br><span class="line"><span class="comment">//注意 : 传递的参数可以和定义的个数不一样,但是不要这么写</span></span><br><span class="line"><span class="comment">//      返回值只能有一个，如果有多个值，放在数组中返回</span></span><br></pre></td></tr></table></figure><h3 id="arguments-伪数组"><a href="#arguments-伪数组" class="headerlink" title="arguments 伪数组"></a>arguments 伪数组</h3><p>函数中内置的动态参数，可以接收所有参数。</p><p>只能看，只能改，但不能增删。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line">add(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line">add(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br></pre></td></tr></table></figure><h2 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h2><p><strong>匿名函数</strong> — 它没有函数名! I它也不会自己做任何事情。匿名函数主要用来来运行负载的代码以响应事件触发（如点击按钮） - 使用事件处理程序。,例如，如果单击相关按钮，以下操作将在函数内运行代码：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myButton = <span class="built_in">document</span>.querySelector(<span class="string">'button'</span>);</span><br><span class="line"></span><br><span class="line">myButton.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">'hello'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还可以将匿名函数分配为变量的值，例如：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> say = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hello world'</span>);</span><br><span class="line">&#125; </span><br><span class="line">say()  <span class="comment">//调用</span></span><br></pre></td></tr></table></figure><h2 id="自调用函数"><a href="#自调用函数" class="headerlink" title="自调用函数"></a>自调用函数</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a,b)</span><br><span class="line">&#125;)(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">形参</span>)</span>&#123;</span><br><span class="line"> 	<span class="comment">//函数体</span></span><br><span class="line">    <span class="keyword">return</span> 返回值    </span><br><span class="line"> &#125;)(实参)</span><br></pre></td></tr></table></figure><h1 id="再谈DOM"><a href="#再谈DOM" class="headerlink" title="再谈DOM"></a>再谈DOM</h1><h2 id="什么是dom？"><a href="#什么是dom？" class="headerlink" title="什么是dom？"></a>什么是dom？</h2><ul><li>document object modle 文档对象模型</li><li>整个文档就是一颗树</li><li>树当中的每一个节点都是一个对象 : 这个对象中维系着 <strong>属性信息</strong> <strong>文本信息</strong> <strong>关系信息</strong></li><li>在页面上还有一些动作效果:<pre><code>根据人的行为改变的 点击 鼠标悬浮、或是自动在改变的。</code></pre></li></ul><p><img src="/JavaScript/20190612-JavaScript_1/BOM%E4%B8%8EDOM%E7%9A%84%E7%BB%93%E6%9E%84%E5%B1%82%E6%AC%A1%E5%9B%BE.png" alt="BOM与DOM的结构层次图"></p><h2 id="js是怎么给前端的web加上动作的呢"><a href="#js是怎么给前端的web加上动作的呢" class="headerlink" title="js是怎么给前端的web加上动作的呢?"></a>js是怎么给前端的web加上动作的呢?</h2><ol><li>找到对应的标签</li><li>给标签绑定对应的事件</li><li>操作对应的标签</li></ol><h2 id="查找标签"><a href="#查找标签" class="headerlink" title="查找标签"></a>查找标签</h2><h3 id="直接查找"><a href="#直接查找" class="headerlink" title="直接查找"></a>直接查找</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="built_in">document</span>.getElementById(<span class="string">'baidu'</span>)           <span class="comment">//直接返回一个元素对象</span></span><br><span class="line"><span class="built_in">console</span>.log(a)</span><br><span class="line"><span class="keyword">var</span> sons = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'son'</span>)  <span class="comment">//返回元素组成的数组</span></span><br><span class="line"><span class="built_in">console</span>.log(sons)</span><br><span class="line">sons[<span class="number">0</span>] <span class="comment">//获取到一个标签对象  </span></span><br><span class="line"><span class="keyword">var</span> divs = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'div'</span>)    <span class="comment">//返回元素组成的数组</span></span><br><span class="line"><span class="built_in">console</span>.log(divs)</span><br></pre></td></tr></table></figure><h3 id="间接查找"><a href="#间接查找" class="headerlink" title="间接查找"></a>间接查找</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">关系放在属性里</span><br><span class="line">找父亲</span><br><span class="line">	节点.parentNode      				<span class="comment">//返回一个</span></span><br><span class="line">找兄弟</span><br><span class="line">	节点.previousElementsSiblings  	<span class="comment">//返回上一个</span></span><br><span class="line">	节点.nextElementsSiblings  		<span class="comment">//返回下一个</span></span><br><span class="line">	节点.siblings		   				<span class="comment">//所有兄弟</span></span><br><span class="line">找儿子</span><br><span class="line">	节点.firstElementChild            <span class="comment">//返回一个</span></span><br><span class="line">	节点.lastElementChild  			<span class="comment">//返回一个</span></span><br><span class="line">	节点.children  					<span class="comment">//返回一组</span></span><br></pre></td></tr></table></figure><p>例如：补充find</p><figure class="highlight less"><table><tr><td class="code"><pre><span class="line">节点<span class="selector-class">.siblings</span>()<span class="selector-class">.find</span>(<span class="string">'.body'</span>).</span><br></pre></td></tr></table></figure><h2 id="操作本身的标签"><a href="#操作本身的标签" class="headerlink" title="操作本身的标签"></a>操作本身的标签</h2><h3 id="标签的创建"><a href="#标签的创建" class="headerlink" title="标签的创建"></a>标签的创建</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="built_in">document</span>.createElement(<span class="string">'标签名'</span>)   <span class="comment">// a div ul li span</span></span><br><span class="line">obj就是一个新创建出来的标签对象</span><br></pre></td></tr></table></figure><h3 id="标签的添加"><a href="#标签的添加" class="headerlink" title="标签的添加"></a>标签的添加</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">父节点.appendChild(要添加的节点) <span class="comment">//添加在父节点的儿子们之后</span></span><br><span class="line">父节点.insertBefore(要添加的节点,参考儿子节点) <span class="comment">//添加在父节点的某个儿子之前</span></span><br></pre></td></tr></table></figure><h3 id="标签的删除"><a href="#标签的删除" class="headerlink" title="标签的删除"></a>标签的删除</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">父节点.removeChild(要删除的子节点)</span><br><span class="line">子节点<span class="number">1.</span>parentNode.removeChile(子节点<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h3 id="标签的替换"><a href="#标签的替换" class="headerlink" title="标签的替换"></a>标签的替换</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">父节点.replaceChild(新标签,旧儿子)</span><br></pre></td></tr></table></figure><h3 id="标签的复制"><a href="#标签的复制" class="headerlink" title="标签的复制"></a>标签的复制</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">节点.cloneNode()     <span class="comment">//只克隆标签</span></span><br><span class="line">节点.cloneNode(<span class="literal">true</span>) <span class="comment">//全部克隆，包括元素</span></span><br><span class="line">注意 :如果克隆出来的标签的id是重复的,那么修改之后才能应用到页面上</span><br></pre></td></tr></table></figure><h2 id="节点的文本操作"><a href="#节点的文本操作" class="headerlink" title="节点的文本操作"></a>节点的文本操作</h2><p><img src="/JavaScript/20190612-JavaScript_1/innerText%E3%80%81innerHTML%E4%B8%8EouterHTML.png" alt="innerText、innerHTML与outerHTML"></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">节点对象.innerText = <span class="string">'只能写文字'</span></span><br><span class="line">节点对象.innerHTML = <span class="string">'可以放标签'</span></span><br></pre></td></tr></table></figure><h2 id="节点的属性操作"><a href="#节点的属性操作" class="headerlink" title="节点的属性操作"></a>节点的属性操作</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">节点对象.getAttribute(<span class="string">'属性名'</span>)</span><br><span class="line">节点对象.setAttribute(<span class="string">'属性名'</span>,<span class="string">'属性值'</span>)</span><br><span class="line">节点对象.removeAttribute(<span class="string">'属性名'</span>)</span><br></pre></td></tr></table></figure><h3 id="节点的值操作"><a href="#节点的值操作" class="headerlink" title="节点的值操作"></a>节点的值操作</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">节点对象.value 			 <span class="comment">//查看对象的value</span></span><br><span class="line">节点对象.value = 值 		<span class="comment">//修改对象的value</span></span><br></pre></td></tr></table></figure><h3 id="节点的类操作"><a href="#节点的类操作" class="headerlink" title="节点的类操作"></a>节点的类操作</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">节点对象.classList        查看所有的类</span><br><span class="line">节点对象.classList.add(<span class="string">'类名'</span>)</span><br><span class="line">节点对象.classList.remove(<span class="string">'类名'</span>)</span><br><span class="line">节点对象.classList.contains(<span class="string">'类名'</span>)</span><br><span class="line">节点对象.classList.toggle(<span class="string">'类名'</span>)    <span class="comment">//有就删掉，没有就加上</span></span><br></pre></td></tr></table></figure><h3 id="节点的style操作"><a href="#节点的style操作" class="headerlink" title="节点的style操作"></a>节点的style操作</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">节点对象.style.样式属性 = 值    </span><br><span class="line"><span class="comment">//常用来设置行内样式，而不用来获取行内样式，所有带中线的方法都要改成驼峰命名</span></span><br></pre></td></tr></table></figure><h1 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h1><p>当事件发生时，其祖先元素都知道该事件的发生</p><ul><li>网景认为：外面的元素先收到事件，逐层向内传递(<strong>事件捕获</strong>)</li><li>微软认为：里面的元素先收到事件，逐层向外传递(<strong>事件冒泡</strong>)</li><li>W3C: 事件发生时，先从外向内传递，在从内向外传递(<strong>DOM事件流</strong>)</li></ul><p>例如</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"outer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">上面的button被点击后，事件的流经过程：</span><br><span class="line">	window   -&gt;  document   -&gt;   html    -&gt;  body    -&gt;  div.outer   -&gt;  div.inner   -&gt;  button</span><br><span class="line">	button   -&gt;  div.inner   -&gt;  div.outer   -&gt;  body    -&gt;  html    -&gt;  document    -&gt;  window</span><br></pre></td></tr></table></figure><p>无论事件是否处理，默认情况下，事件流都是存在的。<br>真正触发事件的元素，叫做：目标元素(target)</p><h2 id="常见的DOM事件"><a href="#常见的DOM事件" class="headerlink" title="常见的DOM事件"></a>常见的DOM事件</h2><table><thead><tr><th>鼠标事件</th><th>键盘事件</th><th>表单事件</th><th>文档/窗口事件</th></tr></thead><tbody><tr><td>click</td><td>keypress</td><td>submit</td><td>load</td></tr><tr><td>dblclick</td><td>keydown</td><td>change</td><td>resize</td></tr><tr><td>mouseenter/mouseover</td><td>keyup</td><td>focus</td><td>scroll</td></tr><tr><td>mouseleave/mouseout</td><td></td><td>blur</td><td>unload</td></tr><tr><td>hover</td><td></td><td></td><td></td></tr></tbody></table><h2 id="DOM0事件处理程序"><a href="#DOM0事件处理程序" class="headerlink" title="DOM0事件处理程序"></a>DOM0事件处理程序</h2><p><code>xxx.onyyyzzzjjj = function () {}</code><br>特点：</p><ol><li>绑定事件，使用on+事件名称</li><li>所有的字母都是小写</li><li>只能处理冒泡阶段的事件</li><li>在处理函数内部，this指向on前边的元素</li><li>为相同元素的同一个事件重复绑定事件，后绑定的会将先绑定的覆盖</li></ol><h2 id="DOM0：删除事件处理程序"><a href="#DOM0：删除事件处理程序" class="headerlink" title="DOM0：删除事件处理程序"></a>DOM0：删除事件处理程序</h2><p><code>xxx.onyyyzzzjjj = null;</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'button.del'</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	inner.onclick = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">绑定方式:</span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>点击一下<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">方式一:</span><br><span class="line">    var btn = document.getElementById('btn')</span><br><span class="line">    btn.onclick = function () &#123;</span><br><span class="line">        alert('点我干嘛')</span><br><span class="line">    &#125;</span><br><span class="line">方式二:</span><br><span class="line">	btn.onclick = clik</span><br><span class="line">    function clik() &#123;</span><br><span class="line">        alert('不要点')</span><br><span class="line">    &#125;</span><br><span class="line">方式三:（不推荐）</span><br><span class="line">	<span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span> <span class="attr">onclick</span>=<span class="string">"clik()"</span>&gt;</span>点击一下<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">	function clik() &#123;</span><br><span class="line">        alert('不要点')</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="鼠标状态"><a href="#鼠标状态" class="headerlink" title="鼠标状态"></a>鼠标状态</h2><ul><li><p>mousedown: 鼠标按下</p></li><li><p>mousemove: 鼠标移动</p></li><li><p>mouseup: 鼠标抬起（移动过程）</p></li><li><p>mouseover: 光标移上</p></li><li><p>mouseout: 光标移出</p></li></ul><p>on + 状态就可以绑定事件了</p><h2 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h2><p>keydown:键盘按下</p><ul><li>按键信息，被存在事件对象中</li><li>在键盘事件中，每个按键都与一个数字对应(不是字符编码)</li><li>键盘事件中的目标元素，焦点所在的元素</li></ul><p>keyup: 键盘抬起</p><ul><li>按键信息，被存在事件对象中</li><li>在键盘事件中，每个按键都与一个数字对应(不是字符编码)</li></ul><h1 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h1><ul><li>browser object model 浏览器对象模型</li></ul><ul><li><strong>window对象是BOM的顶层(核心)对象</strong>，所有对象都是通过它延伸出来的，也可以称为window的子对象。</li><li>DOM是BOM的一部分。</li></ul><p><img src="/JavaScript/20190612-JavaScript_1/BOM%E7%BB%93%E6%9E%84.png" alt="BOM结构"></p><h2 id="BOM对象大小写的区别"><a href="#BOM对象大小写的区别" class="headerlink" title="BOM对象大小写的区别"></a>BOM对象大小写的区别</h2><p>使用时我们常使用的是小写字母开头的比如window，但上图中也画了Window，那它们之间有什么关系呢？ 首先我们要在捡起来开发规范：例如面向对象语言中的<strong>类名</strong>一般采用大写，包括接口、枚举和注解等，而<strong>对象名、变量名</strong>一般采用小写，方法采用驼峰写法。</p><p>所以Window，Document等都是一个个接口（function），window，document这些才是对象，这些对象是这些BOM接口的实例，而且是单例模式！</p><h2 id="window对象"><a href="#window对象" class="headerlink" title="window对象"></a>window对象</h2><ul><li><strong>window对象是JavaScript中的顶级对象</strong>。</li><li>全局变量、自定义函数也是window对象的属性和方法。</li><li>window对象下的属性和方法调用时，可以省略window。</li></ul><p>innerWidth, innerHeight指的是页面的宽和高。这两个值，不受滚动条的影响。</p><p>outerWidth, outerHeight指浏览器的宽和高。</p><h3 id="location对象"><a href="#location对象" class="headerlink" title="location对象"></a>location对象</h3><ul><li><p>浏览器当前的URL信息</p></li><li><p>window的子对象 window.location</p></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">属性:</span><br><span class="line"><span class="built_in">window</span>.location.href 查看当前网页的url</span><br><span class="line"><span class="built_in">window</span>.location.href = <span class="string">'http://www.baidu.com'</span>   修改当前网页的url,修改之后会跳转</span><br><span class="line">方法:</span><br><span class="line"><span class="built_in">window</span>.location.reload()  刷新页面</span><br></pre></td></tr></table></figure><h3 id="history对象"><a href="#history对象" class="headerlink" title="history对象"></a>history对象</h3><ul><li>浏览器的浏览历史记录信息。</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">history.back()    	go(<span class="number">-1</span>)			<span class="comment">//回到上页</span></span><br><span class="line">history.go(<span class="number">0</span>)       <span class="built_in">window</span>.location.reload()          	<span class="comment">//刷新</span></span><br><span class="line">history.forward()   go(<span class="number">1</span>)			<span class="comment">//去下一页</span></span><br></pre></td></tr></table></figure><h3 id="screen对象"><a href="#screen对象" class="headerlink" title="screen对象"></a>screen对象</h3><ul><li>浏览器的屏幕信息。</li></ul><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">Screen &#123;<span class="string">availWidth:</span> <span class="number">1536</span>, <span class="string">availHeight:</span> <span class="number">824</span>, <span class="string">width:</span> <span class="number">1536</span>, <span class="string">height:</span> <span class="number">864</span>, <span class="string">colorDepth:</span> <span class="number">24</span>, …&#125;</span><br><span class="line"><span class="string">availHeight:</span> <span class="number">824</span></span><br><span class="line"><span class="string">availLeft:</span> <span class="number">0</span></span><br><span class="line"><span class="string">availTop:</span> <span class="number">0</span></span><br><span class="line"><span class="string">availWidth:</span> <span class="number">1536</span></span><br><span class="line"><span class="string">colorDepth:</span> <span class="number">24</span></span><br><span class="line"><span class="string">height:</span> <span class="number">864</span></span><br><span class="line"><span class="string">orientation:</span> ScreenOrientation &#123;<span class="string">angle:</span> <span class="number">0</span>, <span class="string">type:</span> <span class="string">"landscape-primary"</span>, <span class="string">onchange:</span> <span class="literal">null</span>&#125;</span><br><span class="line"><span class="string">pixelDepth:</span> <span class="number">24</span></span><br><span class="line"><span class="string">width:</span> <span class="number">1536</span></span><br><span class="line"><span class="string">__proto__:</span> Screen</span><br></pre></td></tr></table></figure><h3 id="navigator对象"><a href="#navigator对象" class="headerlink" title="navigator对象"></a>navigator对象</h3><ul><li>浏览器本身的信息</li><li>userAgent</li></ul><figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">userAgent:</span> <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36"</span></span><br></pre></td></tr></table></figure><h2 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h2><h3 id="setInterval"><a href="#setInterval" class="headerlink" title="setInterval"></a>setInterval</h3><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">每隔一段时间就完成某个操作</span><br><span class="line">var tid = set<span class="constructor">Interval(<span class="params">fn</span>,<span class="params">n</span>)</span>  每隔n毫秒就调用一次fn函数</span><br><span class="line">var tid = set<span class="constructor">Interval(<span class="string">"fn()"</span>,<span class="params">n</span>)</span> </span><br><span class="line"></span><br><span class="line">clear<span class="constructor">Interval(<span class="params">tid</span>)</span>   清除定时器</span><br></pre></td></tr></table></figure><h3 id="setTimeOut"><a href="#setTimeOut" class="headerlink" title="setTimeOut"></a>setTimeOut</h3><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">在设定时间之后执行一次来完成某个操作</span><br><span class="line">var tid = set<span class="constructor">Timeout(<span class="params">fn</span>,<span class="params">n</span>)</span>       n毫秒之后只调用一次fn函数</span><br><span class="line">var tid = set<span class="constructor">Timeout(<span class="string">"fn()"</span>,<span class="params">n</span>)</span> </span><br><span class="line"></span><br><span class="line">clear<span class="constructor">Timeout(<span class="params">tid</span>)</span>   清除定时器</span><br></pre></td></tr></table></figure><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><h2 id="猜数字游戏"><a href="#猜数字游戏" class="headerlink" title="猜数字游戏"></a>猜数字游戏</h2><p>需求：游戏应随机选择一个 100 以内的自然数, 然后邀请玩家在 10 轮以内猜出这个数字。每轮后都应告知玩家的答案正确与否，如果出错了，则告诉他数字是低了还是高了。并且应显示出玩家前一轮所猜的数字。一旦玩家猜对，或者用尽所有机会，游戏将结束。游戏结束后，可以让玩家选择再次开始。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">content</span>=<span class="string">"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.d</span>&#123;</span></span><br><span class="line">            width: 700px;</span><br><span class="line">            position: relative;</span><br><span class="line">            margin: 0 auto;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>猜数字游戏<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我刚才随机选定了一个100以内的自然数。看你能否在 10 次以内猜中它。每次我都会告诉你所猜的结果是高了还是低了。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    请猜数：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"guess"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"but"</span>&gt;</span>确定<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"result"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//生成随机数</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> num = <span class="built_in">Math</span>.ceil(<span class="built_in">Math</span>.random() * <span class="number">100</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> times = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> button = <span class="built_in">document</span>.getElementById(<span class="string">'but'</span>);</span></span><br><span class="line"><span class="actionscript">        button.onclick = <span class="function"><span class="keyword">function</span> <span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> guess = <span class="built_in">document</span>.getElementById(<span class="string">'guess'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> res = <span class="built_in">document</span>.getElementById(<span class="string">'result'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(num);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(times);</span></span><br><span class="line">            times += 1;</span><br><span class="line"><span class="actionscript">            <span class="keyword">if</span> (guess.value == num &amp;&amp; times &lt; <span class="number">10</span>)&#123;</span></span><br><span class="line"><span class="javascript">                res.innerText =<span class="string">'第'</span> +<span class="built_in">String</span>(times + <span class="number">1</span>) + <span class="string">'次: 猜对了'</span>;</span></span><br><span class="line"><span class="actionscript">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(guess.value &gt; num &amp;&amp; times &lt; <span class="number">10</span> )&#123;</span></span><br><span class="line"><span class="javascript">                res.innerText = <span class="string">'第'</span> +<span class="built_in">String</span>(times + <span class="number">1</span>) + <span class="string">'次: 猜大了'</span>;</span></span><br><span class="line"><span class="actionscript">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(guess.value &lt; num &amp;&amp; times &lt; <span class="number">10</span> )&#123;</span></span><br><span class="line"><span class="javascript">                res.innerText = <span class="string">'第'</span> +<span class="built_in">String</span>(times + <span class="number">1</span>) + <span class="string">'次: 猜小了'</span>;</span></span><br><span class="line"><span class="actionscript">            &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">                res.innerText = <span class="string">'第'</span> +<span class="built_in">String</span>(times + <span class="number">1</span>) + <span class="string">'次: 上限了'</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="红绿灯"><a href="#红绿灯" class="headerlink" title="红绿灯"></a>红绿灯</h2><p>需求：做一个红绿灯</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#foo</span>&#123;</span></span><br><span class="line">            border: gray 1px solid;</span><br><span class="line">            float: left;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.light</span>&#123;</span></span><br><span class="line">            margin: 5px;</span><br><span class="line">            width: 50px;</span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:50px</span>;</span></span><br><span class="line">            border-radius: 50%;</span><br><span class="line">            background-color: gray;</span><br><span class="line">            display: inline-block;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#redlight</span>&#123;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#greenlight</span>&#123;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#yellowlight</span>&#123;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"foo"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"redlight"</span> <span class="attr">class</span>=<span class="string">"light"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"yellowlight"</span> <span class="attr">class</span>=<span class="string">"light"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"greenlight"</span> <span class="attr">class</span>=<span class="string">"light"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> red = <span class="built_in">document</span>.querySelector(<span class="string">'#redlight'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> green = <span class="built_in">document</span>.querySelector(<span class="string">'#greenlight'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> yellow = <span class="built_in">document</span>.querySelector(<span class="string">'#yellowlight'</span>);</span></span><br><span class="line"><span class="actionscript">        setInterval(fn,<span class="number">1000</span>);     <span class="comment">// 每隔一段时间就执行fn</span></span></span><br><span class="line"><span class="actionscript">        red.style.backgroundColor = <span class="string">'red'</span>;</span></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">fn</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 利用条件依次变灯的颜色就行</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">if</span>(red.style.backgroundColor === <span class="string">'red'</span>)&#123;</span></span><br><span class="line"><span class="actionscript">                red.style.backgroundColor = <span class="string">'gray'</span>;</span></span><br><span class="line"><span class="actionscript">                yellow.style.backgroundColor = <span class="string">'yellow'</span>;</span></span><br><span class="line"><span class="actionscript">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(yellow.style.backgroundColor === <span class="string">'yellow'</span>)&#123;</span></span><br><span class="line"><span class="actionscript">                yellow.style.backgroundColor = <span class="string">'gray'</span>;</span></span><br><span class="line"><span class="actionscript">                green.style.backgroundColor = <span class="string">'green'</span>;</span></span><br><span class="line"><span class="actionscript">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (green.style.backgroundColor === <span class="string">'green'</span>)&#123;</span></span><br><span class="line"><span class="actionscript">                green.style.backgroundColor = <span class="string">'gray'</span>;</span></span><br><span class="line"><span class="actionscript">                red.style.backgroundColor = <span class="string">'red'</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="动态显示时间"><a href="#动态显示时间" class="headerlink" title="动态显示时间"></a>动态显示时间</h2><p>需求：显示时分秒，且必须是一个数子一个数字分开，类似 1 8 : 1 4 : 5 3</p><p>使用了<code>setInterval</code></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.foo</span>&#123;</span></span><br><span class="line">            padding: 5px;</span><br><span class="line">            border: gray 1px solid;</span><br><span class="line">            float: left;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.time</span>&#123;</span></span><br><span class="line">            margin: 2px;</span><br><span class="line">            text-align: center;</span><br><span class="line">            border: lightgray 1px solid;</span><br><span class="line">            border-radius: 5px;</span><br><span class="line">            padding: 5px;</span><br><span class="line">            height: 50px;</span><br><span class="line">            width: 40px;</span><br><span class="line">            font-size: 40px;</span><br><span class="line">            line-height: 100%;</span><br><span class="line">            float: left;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.sig</span>&#123;</span></span><br><span class="line">            font-size: 40px;</span><br><span class="line">            float: left;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"foo"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>  <span class="attr">id</span>=<span class="string">"11"</span> <span class="attr">class</span>=<span class="string">"time"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>  <span class="attr">id</span>=<span class="string">"12"</span> <span class="attr">class</span>=<span class="string">"time"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sig"</span>&gt;</span>:<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"21"</span> <span class="attr">class</span>=<span class="string">"time"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"22"</span> <span class="attr">class</span>=<span class="string">"time"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sig"</span>&gt;</span>:<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"31"</span> <span class="attr">class</span>=<span class="string">"time"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"32"</span> <span class="attr">class</span>=<span class="string">"time"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> t11 = <span class="built_in">document</span>.getElementById(<span class="string">'11'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> t12 = <span class="built_in">document</span>.getElementById(<span class="string">'12'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> t21 = <span class="built_in">document</span>.getElementById(<span class="string">'21'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> t22 = <span class="built_in">document</span>.getElementById(<span class="string">'22'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> t31 = <span class="built_in">document</span>.getElementById(<span class="string">'31'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> t32 = <span class="built_in">document</span>.getElementById(<span class="string">'32'</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> tid = setInterval(fn,<span class="number">1000</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> tim;</span></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">fn</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">            tim = <span class="keyword">new</span> <span class="built_in">Date</span>();</span></span><br><span class="line">            h = tim.getHours();</span><br><span class="line">            m = tim.getMinutes();</span><br><span class="line">            s = tim.getSeconds();</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(h,m,s);</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 时</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">if</span>(h/<span class="number">10</span> &gt;= <span class="number">1</span>)&#123;</span></span><br><span class="line"><span class="javascript">                t11.innerText = <span class="built_in">Math</span>.floor(h/<span class="number">10</span>);</span></span><br><span class="line">                t12.innerText = h % 10;</span><br><span class="line"><span class="actionscript">            &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="actionscript">                t11.innerText = <span class="string">'0'</span>;</span></span><br><span class="line">                t12.innerText = h;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="actionscript">            <span class="comment">// 分</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">if</span>(m/<span class="number">10</span> &gt;= <span class="number">1</span>)&#123;</span></span><br><span class="line"><span class="javascript">                t21.innerText = <span class="built_in">Math</span>.floor(m/<span class="number">10</span>);</span></span><br><span class="line">                t22.innerText = m % 10;</span><br><span class="line"><span class="actionscript">            &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="actionscript">                t21.innerText = <span class="string">'0'</span>;</span></span><br><span class="line">                t22.innerText = m;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="actionscript">            <span class="comment">// 秒</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">if</span>(s/<span class="number">10</span> &gt;= <span class="number">1</span>)&#123;</span></span><br><span class="line"><span class="javascript">                t31.innerText = <span class="built_in">Math</span>.floor(s/<span class="number">10</span>);</span></span><br><span class="line">                t32.innerText = s % 10;</span><br><span class="line"><span class="actionscript">            &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="actionscript">                t31.innerText = <span class="string">'0'</span>;</span></span><br><span class="line">                t32.innerText = s;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="置顶小广告"><a href="#置顶小广告" class="headerlink" title="置顶小广告"></a>置顶小广告</h2><p>性感荷官在线发牌！</p><ul><li><code>onclick</code> 事件</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        body&#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.ad</span>&#123;</span></span><br><span class="line">            background-color: green;</span><br><span class="line">            height: 50px;</span><br><span class="line">            width: 100%;</span><br><span class="line">            position: fixed;</span><br><span class="line">            padding: 5px;</span><br><span class="line">            color: yellow;</span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height: 50px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.content</span>&#123;</span></span><br><span class="line"></span><br><span class="line">            height: 1200px;</span><br><span class="line">        &#125;</span><br><span class="line">        button&#123;</span><br><span class="line">            float: right;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ad"</span>&gt;</span></span><br><span class="line">       澳门赌场开业了，性感荷官在线发牌！</span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"close"</span>&gt;</span>x<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是正文内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'close'</span>)</span></span><br><span class="line"><span class="actionscript">        btn.onclick = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.parentNode.style.display = <span class="string">'none'</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="鼠标悬浮时换图"><a href="#鼠标悬浮时换图" class="headerlink" title="鼠标悬浮时换图"></a>鼠标悬浮时换图</h2><p>当鼠标悬停在img上时，更换为另外一张图片；鼠标离开时，还原为本来的图片。</p><p>可以使用hover，在里面设置背景，这里使用js来设置img。</p><ul><li>onmouseover 鼠标悬停</li><li>onmouseleave 鼠标离开</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#container</span>&#123;</span></span><br><span class="line">            float: left;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.img</span>&#123;</span></span><br><span class="line">            width: 500px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"1.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"im"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 反思，先开始打算设置div为事件源，这样增加了复杂（大小等因素），其实只要改img属性就好了</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 页面加载完毕后在执行此代码</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 1.获取事件源</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> img = <span class="built_in">document</span>.getElementById(<span class="string">'im'</span>)</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 2.绑定事件</span></span></span><br><span class="line"><span class="actionscript">            img.onmouseover = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 3.书写事件驱动程序</span></span></span><br><span class="line"><span class="actionscript">                img.setAttribute(<span class="string">'src'</span>,<span class="string">'2.jpg'</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="actionscript">            img.onmouseleave = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                img.setAttribute(<span class="string">'src'</span>,<span class="string">'1.jpg'</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="模态框"><a href="#模态框" class="headerlink" title="模态框"></a>模态框</h2><p>需求：打开网页时有一个普通的按钮，点击当前按钮显示一个背景图，中心并弹出一个弹出框，点击X的时候会关闭当前的模态框。</p><ul><li>onclick</li><li>弹出框并不在中央（是因为我的top和left边框是处于中央的）， 设置margin就可以移动盒子到中央</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        body&#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">        &#125;  </span><br><span class="line"><span class="css">        <span class="selector-class">.container</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-tag">rgba</span>(255,255,255,0<span class="selector-class">.8</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#door</span>&#123;</span></span><br><span class="line">            height: 300px;</span><br><span class="line">            width: 300px;</span><br><span class="line">            display: none;</span><br><span class="line">            left: 50%;</span><br><span class="line">            top: 50%;</span><br><span class="line">            position: fixed;</span><br><span class="line">            border: lightgray 1px solid;</span><br><span class="line">            background-color: white;</span><br><span class="line">            line-height: 300px;</span><br><span class="line">            text-align: center;</span><br><span class="line">            margin-left: -150px;</span><br><span class="line">            margin-top: -150px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#close</span>&#123;</span></span><br><span class="line">            float: right;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>你<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>好<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>啊<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>啊<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>啊<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>啊<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>啊<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">'door'</span>&gt;</span>你只能看到我呦</span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"close"</span>&gt;</span> X <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> close = <span class="built_in">document</span>.getElementById(<span class="string">'close'</span>)</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(btn);</span></span><br><span class="line"><span class="actionscript">        flag = <span class="literal">true</span>;</span></span><br><span class="line"><span class="actionscript">        btn.onclick = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> door = <span class="built_in">document</span>.querySelector(<span class="string">'#door'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> con = <span class="built_in">document</span>.querySelector(<span class="string">'.container'</span>);</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">if</span> (flag === <span class="literal">true</span>)&#123;</span></span><br><span class="line"><span class="actionscript">                door.style.display = <span class="string">'block'</span>;</span></span><br><span class="line"><span class="actionscript">                con.style.display = <span class="string">'none'</span>;</span></span><br><span class="line"><span class="actionscript">                flag = <span class="literal">false</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="actionscript">        close.onclick = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">if</span> (flag === <span class="literal">false</span>)&#123;</span></span><br><span class="line"><span class="actionscript">                flag = <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> door = <span class="built_in">document</span>.querySelector(<span class="string">'#door'</span>);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> con = <span class="built_in">document</span>.querySelector(<span class="string">'.container'</span>);</span></span><br><span class="line"><span class="actionscript">                door.style.display = <span class="string">'none'</span>;</span></span><br><span class="line"><span class="actionscript">                con.style.display = <span class="string">'block'</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="select框的联动"><a href="#select框的联动" class="headerlink" title="select框的联动"></a>select框的联动</h2><p>需求:两个选择框，当我们选择省份后，另一个框生成对应的城市。</p><ul><li>onchange</li><li>this.options</li><li>this.options.selectedIndex</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"province"</span> <span class="attr">id</span>=<span class="string">"province"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"0"</span>&gt;</span>请选择省份<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"city"</span> <span class="attr">id</span>=<span class="string">"city"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"0"</span>&gt;</span>请选择城市<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    data = &#123;<span class="string">"河北"</span>: [<span class="string">"廊坊"</span>, <span class="string">"邯郸"</span>], <span class="string">"北京"</span>: [<span class="string">"朝阳区"</span>, <span class="string">"海淀区"</span>], <span class="string">"山东"</span>: [<span class="string">"威海市"</span>, <span class="string">"烟台市"</span>]&#125;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> p = <span class="built_in">document</span>.getElementById(<span class="string">'province'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> c = <span class="built_in">document</span>.getElementById(<span class="string">'city'</span>);</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">for</span> (i <span class="keyword">in</span> data)&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(i);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> t = <span class="built_in">document</span>.createElement(<span class="string">'option'</span>);</span></span><br><span class="line">        t.innerText = i;</span><br><span class="line">        p.appendChild(t)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    p.onchange = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//要先清空选项历史数据</span></span></span><br><span class="line"><span class="actionscript">        c.innerText = <span class="literal">null</span>;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// this.options  以及  this.options.selectedIndex 是特别精华的，没有他们，你只能通过增加value去联系。</span></span></span><br><span class="line"><span class="actionscript">        city = data[<span class="keyword">this</span>.options[<span class="keyword">this</span>.options.selectedIndex].innerText];</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 插入选项</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">for</span> (i <span class="keyword">in</span> city)&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(i)</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> t = <span class="built_in">document</span>.createElement(<span class="string">'option'</span>);</span></span><br><span class="line">            t.innerText = city[i];</span><br><span class="line">            c.appendChild(t)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="简易留言板"><a href="#简易留言板" class="headerlink" title="简易留言板"></a>简易留言板</h2><p>需求：当在textarea中输入内容，点击留言按钮，会添加到浏览器中。</p><h2 id="随着滚动轴移动，回到顶部"><a href="#随着滚动轴移动，回到顶部" class="headerlink" title="随着滚动轴移动，回到顶部"></a>随着滚动轴移动，回到顶部</h2><h2 id="购物车"><a href="#购物车" class="headerlink" title="购物车"></a>购物车</h2><ul><li>onmouseover</li><li>onmouseleave</li><li>z-index<ul><li><strong>如果元素是没有定位的，对其设置的 z-index 会是无效的</strong>。</li></ul></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        body&#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#c</span>&#123;</span></span><br><span class="line">            width: 300px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            background-color: red;</span><br><span class="line">            display: none;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.con</span>&#123;</span></span><br><span class="line">            position: fixed;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#car</span>&#123;</span></span><br><span class="line">            width: 50px;</span><br><span class="line">            margin: 10px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"car"</span>&gt;</span>购物车<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"c"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"con"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>正文：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>你<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>好<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>啊<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> car = <span class="built_in">document</span>.getElementById(<span class="string">'car'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> c = <span class="built_in">document</span>.getElementById(<span class="string">'c'</span>);</span></span><br><span class="line"><span class="actionscript">    car.onmouseover = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="number">6666</span>);</span></span><br><span class="line"><span class="actionscript">        c.style.display = <span class="string">'block'</span>;</span></span><br><span class="line"><span class="actionscript">        c.style.position = <span class="string">'fixed'</span>;</span></span><br><span class="line"><span class="actionscript">        c.style.float = <span class="string">'left'</span>;</span></span><br><span class="line">        c.style.zIndex = 30;</span><br><span class="line">    &#125;;</span><br><span class="line"><span class="actionscript">    car.onmouseleave = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        c.style.display = <span class="string">'none'</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="计时器"><a href="#计时器" class="headerlink" title="计时器"></a>计时器</h2><ul><li>写一个时，分，秒的 计时器</li><li>遇到的坑：按钮点击事件有问题，应该用on系列<ul><li>on与不加on的区别：onclick是绑定<strong>事件</strong>，click本身是<strong>方法</strong>作用是触发onclick事件（执行元素的click()方法）</li><li>所以想要绑定事件必须使用on系列</li></ul></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div&#123;</span><br><span class="line">            margin: 2px;</span><br><span class="line">            vertical-align: center;</span><br><span class="line">            position: relative;</span><br><span class="line">            width: 50px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            line-height: 100px;</span><br><span class="line">            border: gray 1px solid;</span><br><span class="line">            display: inline-block;</span><br><span class="line">            font-size: 50px;</span><br><span class="line">            border-radius: 5px;</span><br><span class="line">            text-align: center;</span><br><span class="line">            float: left;</span><br><span class="line"><span class="css">        <span class="comment">/*  遇到的第一个问题是，有数字的话div框就下移了,试着漂移一下,成功解决  */</span></span></span><br><span class="line">        &#125;</span><br><span class="line">        span&#123;</span><br><span class="line">            position: relative;</span><br><span class="line">            font-size: 50px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            line-height: 100px;</span><br><span class="line">            text-align: center;</span><br><span class="line">            display: inline-block;</span><br><span class="line">            float: left;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-tag">p</span><span class="selector-pseudo">:after</span>&#123;</span></span><br><span class="line">            content: "";</span><br><span class="line">            clear: both;</span><br><span class="line">            display: block;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--时--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"11"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"12"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>:<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--分--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"21"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"22"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>:<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--秒--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"31"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"32"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;span&gt;.&lt;/span&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &amp;lt;!&amp;ndash;毫秒&amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;div id="41"&gt;0&lt;/div&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;div id="42"&gt;0&lt;/div&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;div id="43"&gt;0&lt;/div&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"stop"</span>&gt;</span>暂停<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"restart"</span>&gt;</span>继续<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"reset"</span>&gt;</span>重置<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> h1 = <span class="built_in">document</span>.getElementById(<span class="string">'11'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> h2 = <span class="built_in">document</span>.getElementById(<span class="string">'12'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> m1 = <span class="built_in">document</span>.getElementById(<span class="string">'21'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> m2 = <span class="built_in">document</span>.getElementById(<span class="string">'22'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> s1 = <span class="built_in">document</span>.getElementById(<span class="string">'31'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> s2 = <span class="built_in">document</span>.getElementById(<span class="string">'32'</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> h = <span class="number">0</span>;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> m = <span class="number">0</span>;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> s = <span class="number">0</span>;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> flag = <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> btn_stop = <span class="built_in">document</span>.getElementById(<span class="string">'stop'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> btn_restart = <span class="built_in">document</span>.getElementById(<span class="string">'restart'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> btn_reset = <span class="built_in">document</span>.getElementById(<span class="string">'reset'</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    btn_stop.onclick = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(flag);</span></span><br><span class="line"><span class="actionscript">        flag = <span class="literal">false</span></span></span><br><span class="line">    &#125;;</span><br><span class="line"><span class="actionscript">    btn_restart.onclick = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(flag);</span></span><br><span class="line"><span class="actionscript">        flag = <span class="literal">true</span></span></span><br><span class="line">    &#125;;</span><br><span class="line"><span class="actionscript">    btn_reset.onclick = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line">        s = 0;</span><br><span class="line">        m = 0;</span><br><span class="line">        h = 0;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    setInterval(<span class="string">'fn(flag)'</span>,<span class="number">1000</span>);</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">fn</span><span class="params">(flag)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span>(flag)&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(s);</span></span><br><span class="line"><span class="javascript">            st = <span class="built_in">String</span>(s);</span></span><br><span class="line"><span class="javascript">            mt = <span class="built_in">String</span>(m);</span></span><br><span class="line"><span class="javascript">            ht = <span class="built_in">String</span>(h);</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">if</span>(st.length === <span class="number">2</span>)&#123;</span></span><br><span class="line">                s1.innerText = st[0];</span><br><span class="line">                s2.innerText = st[1];</span><br><span class="line"><span class="actionscript">            &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="actionscript">                s1.innerText = <span class="string">'0'</span>;</span></span><br><span class="line">                s2.innerText = st;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="actionscript">            <span class="keyword">if</span>(mt.length === <span class="number">2</span>)&#123;</span></span><br><span class="line">                m1.innerText = mt[0];</span><br><span class="line">                m2.innerText = mt[1];</span><br><span class="line"><span class="actionscript">            &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="actionscript">                m1.innerText = <span class="string">'0'</span>;</span></span><br><span class="line">                m2.innerText = mt;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="actionscript">            <span class="keyword">if</span>(ht.length === <span class="number">2</span>)&#123;</span></span><br><span class="line">                h1.innerText = ht[0];</span><br><span class="line">                h2.innerText = ht[1];</span><br><span class="line"><span class="actionscript">            &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="actionscript">                h1.innerText = <span class="string">'0'</span>;</span></span><br><span class="line">                h2.innerText = ht;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="actionscript">            <span class="comment">// 放在后面可以从0开始显示</span></span></span><br><span class="line">            s += 1;</span><br><span class="line"><span class="actionscript">            <span class="keyword">if</span> (s === <span class="number">60</span>)&#123;</span></span><br><span class="line">                s = 0;</span><br><span class="line">                m += 1;</span><br><span class="line"><span class="actionscript">                <span class="keyword">if</span> (m === <span class="number">60</span>)&#123;</span></span><br><span class="line">                    m = 0;</span><br><span class="line">                    s += 1</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>Web前端</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS笔记</title>
    <url>/CSS%E7%AC%94%E8%AE%B0/20190611-learning_CSS.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>本篇介绍CSS样式。</p></blockquote><a id="more"></a><h1 id="CSS-概述"><a href="#CSS-概述" class="headerlink" title="CSS 概述"></a>CSS 概述</h1><h2 id="什么是CSS？"><a href="#什么是CSS？" class="headerlink" title="什么是CSS？"></a>什么是CSS？</h2><ul><li>CSS 指层叠样式表 (<strong>C</strong>ascading <strong>S</strong>tyle <strong>S</strong>heets)</li><li>样式定义<strong>如何显示</strong> HTML 元素</li><li>样式通常存储在<strong>样式表</strong>中</li><li>把样式添加到 HTML 4.0 中，是为了<strong>解决内容与表现分离的问题</strong></li><li><strong>外部样式表</strong>可以极大提高工作效率</li><li>外部样式表通常存储在 <strong>CSS 文件</strong>中</li><li>多个样式定义可<strong>层叠</strong>为一</li></ul><h2 id="CSS规则集-选择器-声明"><a href="#CSS规则集-选择器-声明" class="headerlink" title="CSS规则集 = 选择器 + 声明"></a>CSS规则集 = 选择器 + 声明</h2><p>CSS 规则由两个主要的部分构成：<strong>选择器</strong>，以及一条或多条<strong>声明</strong>。</p><p><code>selector {declaration1; declaration2; ... declarationN }</code></p><p>每条声明由一个<strong>属性</strong>和一个<strong>值</strong>组成，每个属性有一个值，属性和值被<strong>冒号</strong>分开。</p><p>声明与声明之间又是由<strong>分号</strong>隔开，声明要放在<strong>花括号</strong>里。</p><p><img src="/CSS笔记/20190611-learning_CSS/CSS%E8%AF%AD%E6%B3%95%E7%BB%93%E6%9E%84.gif" alt="CSS语法结构"></p><h2 id="多重声明"><a href="#多重声明" class="headerlink" title="多重声明"></a>多重声明</h2><p>下面这个多重声明是按照前面的语法规则构建的，前面是选择器，花括号内部是声明，声明与声明之间是用<strong>分号</strong>隔开的，声明中<strong>属性</strong>和<strong>值</strong>用冒号隔开（像key:value一样）。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    div&#123;</span><br><span class="line"><span class="css">        <span class="selector-tag">color</span>: <span class="selector-id">#946453</span>;</span></span><br><span class="line">        width: 200px;</span><br><span class="line">        height: 200px;</span><br><span class="line">        background-color: chartreuse;</span><br><span class="line"><span class="css">        <span class="comment">/*background-color: chartreuse; 注释 css样式*/</span> </span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="CSS是如何工作的？"><a href="#CSS是如何工作的？" class="headerlink" title="CSS是如何工作的？"></a>CSS是如何工作的？</h2><blockquote><p>当浏览器显示文档时，它必须将文档的内容与其样式信息结合。它分两个阶段处理文档：</p><ol><li>浏览器将 <a href="https://developer.mozilla.org/en-US/docs/Glossary/HTML" target="_blank" rel="noopener">HTML</a> 和 <a href="https://developer.mozilla.org/en-US/docs/Glossary/CSS" target="_blank" rel="noopener">CSS</a> 转化成 <a href="https://developer.mozilla.org/en-US/docs/Glossary/DOM" target="_blank" rel="noopener">DOM</a> （<em>文档对象模型</em>）。DOM在计算机内存中表示文档。它把文档内容和其样式结合在一起。</li><li>浏览器显示 DOM 的内容。</li></ol></blockquote><p><img src="/CSS笔记/20190611-learning_CSS/CSS%E6%89%80%E4%BD%9C%E7%9A%84%E5%B7%A5%E4%BD%9C.png" alt="CSS所作的工作"></p><h2 id="CSS-语句（CSS-statements）"><a href="#CSS-语句（CSS-statements）" class="headerlink" title="CSS 语句（CSS statements）"></a>CSS 语句（CSS statements）</h2><p>CSS 规则是样式表的主要组成块 —— 是你在 CSS 中最常见的块。但这有一些其它类型的块，你以后偶尔会碰上 —— CSS 规则只是被称为 CSS 语句中的一种。其它类型如下：</p><ul><li><p>@-规则(At-rules)</p><p>在CSS中被用来传递<strong>元数据</strong>、<strong>条件信息</strong>或其它描述性信息。它由（<code>@</code> ）符号开始，紧跟着一个表明它是哪种规则的描述符，之后是这种规则的语法块，并最终由一个半角分号（ <code>;</code> ）结束。每种由描述符定义的@-规则，都有其特有的内部语法和语义。一些例子如下：</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/@charset" target="_blank" rel="noopener"><code>@charset</code></a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/@import" target="_blank" rel="noopener"><code>@import</code></a> （元数据）</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/@media" target="_blank" rel="noopener"><code>@media</code></a> 或 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/@document" target="_blank" rel="noopener"><code>@document</code></a> （条件信息，又被称为嵌套语句，见下方。)</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/@font-face" target="_blank" rel="noopener"><code>@font-face</code></a> （描述性信息）</li></ul><p>具体语法示例：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">@import 'custom.css';</span><br></pre></td></tr></table></figure><p>该@-规则向当前 CSS 导入其它 CSS 文件</p></li><li><p>嵌套语句</p><p>是@-规则中的一种，它的语法是 CSS 规则的嵌套块，只有在特定条件匹配时才会应用到文档上。特定条件如下：</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/@media" target="_blank" rel="noopener"><code>@media</code></a> 只有在运行浏览器的设备匹配其表达条件时才会应用该@-规则的内容；</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/@supports" target="_blank" rel="noopener"><code>@supports</code></a> 只有浏览器确实支持被测功能时才会应用该@-规则的内容；</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/@document" target="_blank" rel="noopener"><code>@document</code></a> 只有当前页面匹配一些条件时才会应用该@-规则的内容。</li></ul><p>具体语法示例</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">media</span> (min-width: <span class="number">801px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述的嵌套语句只有在页面宽度超过801像素时才会应用。</p><p>note：任何不是规则集或@-规则或嵌套语句的 CSS 语句都是无效的，并会因此被忽略。</p></li></ul><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>CSS中的注释以 <code>/*</code> 开始并以 <code>*/</code> 结束。</p><h2 id="简写"><a href="#简写" class="headerlink" title="简写"></a>简写</h2><h2 id="关于DOM"><a href="#关于DOM" class="headerlink" title="关于DOM"></a>关于DOM</h2><blockquote><p>DOM是一种<strong>树形结构</strong>. 标记语言中的每个元素,属性,文本片段都变为一个 <a href="https://developer.mozilla.org/en-US/docs/Glossary/Node/DOM" target="_blank" rel="noopener">DOM 节点</a>。这些节点由它们与其它 DOM 节点的关系来定义。有的元素是某些子节点的父节点，且这些子节点有兄弟（节点）。</p></blockquote><p>举一个例子：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  Let's use:</span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>Cascading<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>Style<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>Sheets<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在该 DOM 中，我们的 <code>&lt;p&gt;</code> 元素所对应的节点是父节点。它的子节点是一个文本节点和我们的一些 <code>&lt;span&gt;</code> 元素对应的节点。这些 <code>SPAN</code>结点也是父节点，它们各自的文本节点就是它们的子节点：</p><figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">P</span><br><span class="line">├─ <span class="string">"Let's use:"</span></span><br><span class="line">├─ SPAN</span><br><span class="line"><span class="string">|  └─ "</span>Cascading<span class="string">"</span></span><br><span class="line">├─ SPAN</span><br><span class="line"><span class="string">|  └─ "</span>Style<span class="string">"</span></span><br><span class="line">└─ SPAN</span><br><span class="line">   └─ <span class="string">"Sheets"</span></span><br></pre></td></tr></table></figure><p>结果为：</p><p><img src="/CSS笔记/20190611-learning_CSS/use_css_1.png" alt="use_css_1"></p><p>应用CSS到DOM</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 对上面的span标签进行修饰 */</span></span><br><span class="line"><span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">  <span class="attribute">background-color</span>: lime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果为：</p><p><img src="/CSS笔记/20190611-learning_CSS/use_css_2.png" alt="use_css_2"></p><p>p比作树干，span比作树枝，像不像在几个树枝上刷油漆！😄</p><h1 id="层叠机制"><a href="#层叠机制" class="headerlink" title="层叠机制"></a>层叠机制</h1><p>CSS 是 <em>Cascading Style Sheets</em> 的缩写，这暗示层叠（cascade）的概念是很重要的。在最基本的层面上，它表明CSS规则的顺序很重要，但它比那更复杂。什么选择器在层叠中胜出取决于三个因素（这些都是按重量级顺序排列的——前面的的一种会否决后一种）：</p><ol><li>重要性（Importance）</li><li>专用性（Specificity）</li><li>源代码次序（Source order）</li></ol><h2 id="重要性"><a href="#重要性" class="headerlink" title="重要性"></a>重要性</h2><p>在CSS中，有一个特别的语法可以让一条规则<strong>总是</strong>优先于其他规则：<code>!important</code>。把它加在属性值的后面可以使这条声明有无比强大的力量。</p><h2 id="专用性"><a href="#专用性" class="headerlink" title="专用性"></a>专用性</h2><p>层叠机制是多重样式将层叠为一个时的层叠次序</p><p><strong>当同一个 HTML 元素被不止一个样式定义时，会使用哪个样式呢？</strong></p><p>一般而言，所有的样式会根据下面的规则层叠于一个新的虚拟样式表中，其中数字 4 拥有最高的优先权。</p><ol><li>浏览器缺省设置</li><li>外部样式表</li><li>内部样式表（位于 <code>&lt;head&gt;</code> 标签内部）</li><li>内联样式（在 HTML 元素内部）</li></ol><p>因此，内联样式（在 HTML 元素内部）拥有最高的优先权，这意味着它将优先于以下的样式声明：<code>&lt;head&gt;</code> 标签中的样式声明，外部样式表中的样式声明，或者浏览器中的样式声明（缺省值）。</p><h1 id="样式的四种引入方式"><a href="#样式的四种引入方式" class="headerlink" title="样式的四种引入方式"></a>样式的四种引入方式</h1><h2 id="1-行内引入"><a href="#1-行内引入" class="headerlink" title="1. 行内引入"></a>1. 行内引入</h2><p>详细见前面HTML样式</p><p>设置style属性</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS基础<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引入方式一：行内引入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color: blue"</span>&gt;</span>哇哈哈<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"color: pink; height: 50px; background-color: green;"</span>&gt;</span>qq星<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-内联引入"><a href="#2-内联引入" class="headerlink" title="2. 内联引入"></a>2. 内联引入</h2><p>通过 style 标签，在head中声明</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div&#123;</span><br><span class="line">            color: blueviolet;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>你好呀！<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-链接引入"><a href="#3-链接引入" class="headerlink" title="3. 链接引入"></a>3. 链接引入</h2><p>通过 link 标签，引入css文件</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"index.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>哇哈哈<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-导入"><a href="#4-导入" class="headerlink" title="4. 导入"></a>4. 导入</h2><p>style标签 + @import</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        @<span class="keyword">import</span> <span class="string">"index.css"</span>;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>哇哈哈<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>建议：对于导入方式，我们在编写的时候可以采取内联导入的方式，然后编写完成后将它独立出去做成一个css文件，在采用方式3.</p><h1 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h1><h2 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h2><ul><li>标签选择器：标签名</li><li>id选择器：<code>#</code> + id 值</li><li>类选择器：<code>.</code>+ class 值</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>选择器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div&#123;</span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>: <span class="selector-id">#ff8a2f</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#div1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>: <span class="selector-id">#946453</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.sp</span>&#123;</span></span><br><span class="line">            color: blueviolet;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>哇哈哈<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span>爽歪歪<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sp"</span>&gt;</span>QQ星<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.baidu.com"</span>&gt;</span>百度一下<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>样式的继承：子元素会继承父元素的样式，但是a标签除外，只能直接设置a标签的颜色。</p><p>样式之间的重叠部分是有优先级的，继承下来的样式的优先级为0（最低） ？？？</p><h2 id="通用选择器"><a href="#通用选择器" class="headerlink" title="通用选择器"></a>通用选择器</h2><p>所有标签都会被选中</p><p>用以去掉所有“样式”。（漂白报纸） 待完善！！！</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">*&#123;</span><br><span class="line"><span class="attribute">color </span>: <span class="number">#946453</span>;</span><br><span class="line"><span class="attribute">text-decoration</span>:none;</span><br><span class="line"><span class="comment">/*去掉a标签下划线*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="高级选择器"><a href="#高级选择器" class="headerlink" title="高级选择器"></a>高级选择器</h2><p>后代/子代选择器、毗邻选择器、弟弟选择器、属性选择器、并集/交集选择器、伪类选择器、伪元素选择器</p><h3 id="后代-子代-毗邻-弟弟选择器"><a href="#后代-子代-毗邻-弟弟选择器" class="headerlink" title="后代/子代/毗邻/弟弟选择器"></a>后代/子代/毗邻/弟弟选择器</h3><p>后代选择器： <strong>空格</strong> ，嵌套关系，找到所有子孙。</p><p>子代选择器： <strong>&gt;</strong> , 嵌套关系，找到所有儿子。</p><p>毗邻选择器： <strong>+</strong> ，并列关系，如果兄弟两紧挨着，则可以找到。</p><p>弟弟选择器： <strong>~</strong> ，并列关系，找到所有弟弟，无论是否挨着，并列就行。</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="selector-tag">DOCTYPE</span> <span class="selector-tag">html</span>&gt;</span><br><span class="line">&lt;html lang="en"&gt;</span><br><span class="line">&lt;<span class="selector-tag">head</span>&gt;</span><br><span class="line">    &lt;meta charset="UTF-8"&gt;</span><br><span class="line">    &lt;title&gt;后代/子代/毗邻/弟弟选择器&lt;/title&gt;</span><br><span class="line">    &lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">        <span class="comment">/*找的是后代，如div下所有的span*/</span></span><br><span class="line">        <span class="selector-tag">div</span> <span class="selector-tag">b</span>&#123;</span><br><span class="line">            <span class="attribute">color</span>: <span class="number">#ff8a2f</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*找的是所有儿子*/</span></span><br><span class="line">        <span class="selector-tag">div</span>&gt;<span class="selector-tag">span</span>&#123;</span><br><span class="line">            <span class="attribute">color</span>: <span class="number">#946453</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*找到毗邻：只找下一个兄弟，strong与em是兄弟（并列的）*/</span></span><br><span class="line">        <span class="selector-tag">strong</span>+<span class="selector-tag">em</span>&#123;</span><br><span class="line">            <span class="attribute">color</span>: blueviolet;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*找到所有弟弟*/</span></span><br><span class="line">        <span class="selector-tag">ins</span>~<span class="selector-tag">del</span>&#123;</span><br><span class="line">            <span class="attribute">color</span>: blue;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span>&gt;</span><br><span class="line">        &lt;b&gt;我&lt;/b&gt;</span><br><span class="line">        &lt;b&gt;很&lt;/b&gt;</span><br><span class="line">        &lt;b&gt;好&lt;/b&gt;</span><br><span class="line">        &lt;p&gt;&lt;b&gt;!!!&lt;/b&gt;&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;<span class="selector-tag">div</span>&gt;</span><br><span class="line">        &lt;span&gt;你&lt;/span&gt;</span><br><span class="line">        &lt;span&gt;好&lt;/span&gt;</span><br><span class="line">        &lt;span&gt;啊&lt;/span&gt;</span><br><span class="line">        &lt;p&gt;&lt;span&gt;!!!&lt;/span&gt;&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;strong&gt;我&lt;/strong&gt;</span><br><span class="line">    &lt;!--&lt;b&gt;o&lt;/b&gt;--&gt;</span><br><span class="line">    &lt;!<span class="selector-tag">--</span>毗邻是兄弟两必须挨着，不然就找不到<span class="selector-tag">--</span>&gt;</span><br><span class="line">    &lt;em&gt;很&lt;/em&gt;</span><br><span class="line">    &lt;em&gt;好&lt;/em&gt;</span><br><span class="line">    &lt;em&gt;！！！&lt;/em&gt;</span><br><span class="line">    &lt;<span class="selector-tag">br</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;ins&gt;你&lt;/ins&gt;</span><br><span class="line">    &lt;del&gt;好&lt;/del&gt;</span><br><span class="line">    &lt;del&gt;呀&lt;/del&gt;</span><br><span class="line">    &lt;del&gt;！！！&lt;/del&gt;</span><br><span class="line">    &lt;b&gt;o&lt;/b&gt;</span><br><span class="line">    &lt;del&gt;xxx&lt;/del&gt;</span><br><span class="line">    &lt;!<span class="selector-tag">--</span>不论是否挨着，只要是弟弟就改变<span class="selector-tag">--</span>&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h3><p>存在和值（Presence and value）属性选择器尝试匹配精确的属性值：</p><ul><li><code>[attr]</code>：该选择器选择包含 attr 属性的所有元素，不论 attr 的值为何。</li><li><code>[attr=val]</code>：该选择器仅选择 attr 属性被赋值为 val 的所有元素。</li><li><code>[attr~=val]</code>：该选择器仅选择具有 attr 属性的元素，而且要求 <code>val</code> 值是 <code>attr</code> 值包含的被空格分隔的取值列表里中的一个。</li></ul><p>子串值（Substring value）属性选择器也被称为“伪正则选择器”，因为它们提供类似 regular expression 的灵活匹配方式（但请注意，这些选择器并不是真正的正则表达式）：</p><ul><li><code>[attr|=val]</code> : 选择attr属性的值是 <code>val</code> 或值以 <code>val-</code> 开头的元素（注意，这里的 “-” 不是一个错误，这是用来处理语言编码的）。</li><li><code>[attr^=val]</code> : 选择attr属性的值以 <code>val</code> 开头（包括 <code>val</code>）的元素。</li><li><code>[attr$=val]</code> : 选择attr属性的值以 <code>val</code> 结尾（包括 <code>val</code>）的元素。</li><li><code>[attr*=val]</code> : 选择attr属性的值中包含子字符串 <code>val</code> 的元素（一个子字符串就是一个字符串的一部分而已，例如，”cat“ 是 字符串 ”caterpillar“ 的子字符串）。</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-attr">[tt]</span>&#123;</span></span><br><span class="line">            background-color: gray;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-attr">[class='pp']</span>&#123;</span></span><br><span class="line">            color: red;</span><br><span class="line">        &#125;        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"pp"</span> <span class="attr">tt</span>&gt;</span>你好啊<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="并集选择器与交集选择器"><a href="#并集选择器与交集选择器" class="headerlink" title="并集选择器与交集选择器"></a>并集选择器与交集选择器</h3><p>并集选择器：<code>,</code> ，找到这些用 <code>,</code> 分隔的所有标签，如无序列表与有序列表。</p><p>交集选择器：<code>.</code> 或 <code>#</code> ，找到某某标签的以这类命名或以这种id命名的。注意：<strong>中间不可以有空格！</strong></p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="selector-tag">DOCTYPE</span> <span class="selector-tag">html</span>&gt;</span><br><span class="line">&lt;html lang="en"&gt;</span><br><span class="line">&lt;<span class="selector-tag">head</span>&gt;</span><br><span class="line">    &lt;meta charset="UTF-8"&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">        <span class="selector-tag">ul</span>,<span class="selector-tag">ol</span>&#123;</span><br><span class="line">            <span class="attribute">padding</span>:<span class="number">0</span>;</span><br><span class="line">            <span class="attribute">margin</span>:<span class="number">0</span>;</span><br><span class="line">            <span class="attribute">list-style</span>: none;</span><br><span class="line">            <span class="attribute">background-color</span>: yellow;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-tag">div</span><span class="selector-id">#father</span>&#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">            <span class="attribute">background-color</span>: gray;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-tag">div</span><span class="selector-class">.son</span>&#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">            <span class="attribute">background-color</span>: red;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">ul</span>&gt;</span><br><span class="line">        &lt;li&gt;你&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;好&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;啊&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;！！！&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;<span class="selector-tag">ol</span>&gt;</span><br><span class="line">        &lt;li&gt;我&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;很&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;好&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;！！！&lt;/li&gt;</span><br><span class="line">    &lt;/ol&gt;</span><br><span class="line">    &lt;div id="father"&gt;</span><br><span class="line">        &lt;div class="son"&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h3><ul><li>伪类选择器：<code>:</code> , 匹配处于<strong>确定状态</strong>的一个或多个元素，比如被鼠标指针悬停的元素，或当前被选中或未选中的复选框，或元素是DOM树中一父节点的第一个子节点。</li><li>伪类存在的意义是为了通过选择器找到那些不存在与DOM树中的信息以及不能被常规css选择器获取到的信息。</li><li>理解伪类：伪类选择器与类选择器的区别是，类选择器可以随便起名，譬如上面的”div.son” ，你也可以命名为”p.class1″ 与”p .class2″ ，然后在页面上使用”class=class1”与”class= class 2 ” ,但是伪类选择器是css 中已经<strong>定义好的选择器</strong>，不能随便起名。在css 中我们最常用的伪类选择器是使用在a(锚)元素上的几种选择器。</li></ul><p>语法：</p><ul><li><code>a:link{属性：属性值;}</code>超链接的初始状态;<strong>（当前状态）</strong></li><li><code>a:hover{属性：属性值;}</code>鼠标悬停，即鼠标划过超链接时的状态;<strong>（鼠标移上）</strong></li><li><code>a:active{属性：属性值;}</code>超链接被激活时的状态，即鼠标按下时超链接的状态;<strong>（鼠标按下：又叫激活）</strong></li><li><code>a:visited{属性：属性值;}</code>超链接被访问后的状态;<strong>（访问过后）</strong></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="comment">/*未访问的链接*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">a</span><span class="selector-pseudo">:link</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>: <span class="selector-id">#946453</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="comment">/*选定的链接*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">a</span><span class="selector-pseudo">:active</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>: <span class="selector-id">#ff8a2f</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="comment">/*已访问的链接*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>&#123;</span></span><br><span class="line">            color: red;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="comment">/*鼠标移动到链接上*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line">            color: green;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="comment">/*当光标在input内时*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">input</span><span class="selector-pseudo">:focus</span>&#123;</span></span><br><span class="line">            background: orange;</span><br><span class="line">        &#125;</span><br><span class="line">        div&#123;</span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            background-color: lightgray;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="comment">/*当鼠标悬浮在div上时*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line">            background-color: pink;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.baidu.com"</span>&gt;</span>百度一下<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.taobao.com"</span>&gt;</span>淘宝<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.jd.com"</span>&gt;</span>京东<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">from</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>emmm<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>描述</th><th><strong>CSS</strong></th></tr></thead><tbody><tr><td>:active</td><td>向被激活的元素添加样式。</td><td>1</td></tr><tr><td>:focus</td><td>向拥有键盘输入焦点的元素添加样式。</td><td>2</td></tr><tr><td>:hover</td><td>当鼠标悬浮在元素上方时，向元素添加样式。</td><td>1</td></tr><tr><td>:link</td><td>向未被访问的链接添加样式。</td><td>1</td></tr><tr><td>:visited</td><td>向已被访问的链接添加样式。</td><td>1</td></tr><tr><td>:first-child</td><td>向元素的第一个子元素添加样式。</td><td>2</td></tr><tr><td>:lang</td><td>向带有指定 lang 属性的元素添加样式。</td><td>2</td></tr></tbody></table><p>更详细的如下图：</p><p><img src="/CSS笔记/20190611-learning_CSS/%E4%BC%AA%E7%B1%BB%E9%80%89%E6%8B%A9%E5%99%A8.png" alt="伪类选择器"></p><h3 id="伪元素选择器"><a href="#伪元素选择器" class="headerlink" title="伪元素选择器"></a>伪元素选择器</h3><ul><li>匹配处于相关的<strong>确定位置</strong>的一个或多个元素，例如每个段落的第一个字，或者某个元素之前生成的内容。</li><li>伪元素在DOM树中创建了一些抽象元素，这些抽象元素是不存在与文档语言里的</li><li>伪元素由两个冒号开头，伪元素的名称使用两个冒号<code>::</code>是为了区别伪类和伪元素（css2中没有区别）。</li><li>考虑到兼容性，css2中的伪元素仍然可以使用一个冒号<code>:</code>的语法，但是css3中新增的伪元素必须使用两个冒号<code>::</code></li><li>一个选择器只能使用一个伪元素，并且伪元素必须处于选择器语句的最后</li><li>伪元素创建了一个虚拟容器，这个容器不包含任何DOM元素，但是可以包含内容，另外还可以为伪元素定制样式</li></ul><h4 id="first-letter、-first-line、-selection"><a href="#first-letter、-first-line、-selection" class="headerlink" title="::first-letter、 ::first-line、 ::selection"></a><code>::first-letter</code>、 <code>::first-line</code>、 <code>::selection</code></h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="comment">/*第一个字符*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">p</span><span class="selector-pseudo">::first-letter</span>&#123;</span></span><br><span class="line">            font-size: 40px;</span><br><span class="line">            color: green;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="comment">/*浏览器中的第一行*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">p</span><span class="selector-pseudo">::first-line</span>&#123;</span></span><br><span class="line">            background-color: gray;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="comment">/*鼠标拖动*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">p</span><span class="selector-pseudo">::selection</span>&#123;</span></span><br><span class="line">            background-color: red;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Netscape 在 20 年前以 Netvigator 开拓了民用浏览器市场，当他们正在大展拳脚之际，电脑平台上的霸主微软，突然以 Internet Explorer (IE) 向 Netscape 狂攻，开始了 “第一次浏览器大战”，结果 IE 在 Windows 的捆绑优势下，将 Netscape 击得溃不成军，最后在 1998 年只能卖盘收场。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="before、-after"><a href="#before、-after" class="headerlink" title="::before、 ::after"></a><code>::before</code>、 <code>::after</code></h4><ul><li>必须带一个属性content</li><li>在内部内容的前面或者后面插入内容</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="comment">/*插入一个简单的内容*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*div::before&#123;*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*    content: "我是插入内容";*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*    background-color: red;*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*&#125;*/</span></span></span><br><span class="line">        div&#123;</span><br><span class="line">            width: 500px;</span><br><span class="line">            height: 500px;</span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ff6700</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="comment">/*如果插入内容定义了宽和高和其他属性时，它是一个盒子（必须通过display转换，因为默认是一个行内元素）。*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*有了它，我们可以和上面的内容分割开来,从而清除浮动*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-pseudo">::before</span>&#123;</span></span><br><span class="line">            content: "插入的盒子";</span><br><span class="line">            display: block;</span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            background-color: yellow;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是一个div标签<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>清除浮动 + 列表并排</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span>, <span class="selector-class">.clearfix</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">" "</span>;  </span><br><span class="line">	<span class="comment">/*相当于添加了一个没有宽度的盒子*/</span></span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>列表并排</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span>, <span class="selector-class">.clearfix</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">" "</span>;</span><br><span class="line">    <span class="attribute">display</span>: table;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>描述</th><th>CSS</th></tr></thead><tbody><tr><td>::first-letter</td><td>向文本的第一个字母添加特殊样式。</td><td>1</td></tr><tr><td>::first-line</td><td>向文本的首行添加特殊样式。</td><td>1</td></tr><tr><td>::selection</td><td>向被鼠标选中的字段添加特殊样式。</td><td>2</td></tr><tr><td>::before</td><td>在元素之前添加内容。</td><td>2</td></tr><tr><td>::after</td><td>在元素之后添加内容。</td><td>2</td></tr></tbody></table><p>更详细的如下图：</p><p><img src="/CSS笔记/20190611-learning_CSS/%E4%BC%AA%E5%85%83%E7%B4%A0%E9%80%89%E6%8B%A9%E5%99%A8.png" alt="伪元素选择器"></p><h2 id="CSS选择器优先级"><a href="#CSS选择器优先级" class="headerlink" title="CSS选择器优先级"></a>CSS选择器优先级</h2><p>记忆：“行i类标继”</p><p>行内标签&gt;id选择器&gt;类选择器&gt;标签选择器&gt;继承</p><p>1000 100 10 1 0</p><p>所有的值可以累加但不进位。</p><p>优先级如果相同，写在后面生效（后面覆盖前面）</p><p><code>!important</code> 给最高优先权，尽量少用。</p><p>note：如果<code>!important</code>没有生效，后面可在重写一行不带<code>!important</code>的。</p><h1 id="值的类型"><a href="#值的类型" class="headerlink" title="值的类型"></a>值的类型</h1><ul><li>数值: 长度值，用于指定例如元素宽度、边框（border）宽度或字体大小；以及无单位整数。用于指定例如相对线宽或运行动画的次数。</li><li>百分比: 可以用于指定尺寸或长度——例如取决于父容器的长度或高度，或默认的字体大小。</li><li>颜色: 用于指定背景颜色，字体颜色等。</li><li>坐标位置: 例如，以屏幕的左上角为坐标原点定位元素的位置。</li><li>函数: 例如，用于指定背景图片或背景图片渐变。</li></ul><h2 id="数值"><a href="#数值" class="headerlink" title="数值"></a>数值</h2><h3 id="绝对单位"><a href="#绝对单位" class="headerlink" title="绝对单位"></a>绝对单位</h3><p>像素 (px) 是一种绝对单位（<strong>absolute units</strong>）</p><h3 id="相对单位"><a href="#相对单位" class="headerlink" title="相对单位"></a>相对单位</h3><ul><li>em：1em与当前元素的字体大小相同（更具体地说，一个大写字母M的宽度）。em单位是会继承父元素的字体大小，所以如果在父元素上设置了不同的字体大小，em的像素值就会变得复杂。</li><li><code>rem</code>: REM（root em）和em以同样的方式工作，但它总是等于默认基础字体大小的尺寸；继承的字体大小将不起作用，所以这听起来像一个比em更好的选择，虽然在旧版本的IE上不被支持</li><li><code>ex</code>, <code>ch</code>: 分别是小写x的高度和数字0的宽度。这些并不像em那样被普遍使用或很好地被支持。</li></ul><h3 id="无单位的数值"><a href="#无单位的数值" class="headerlink" title="无单位的数值"></a>无单位的数值</h3><p>例1：</p><p>让一个元素完全去除外边框和内边框，你可以只使用无单位的0——因为0就是0，不管单位是什么！ <code>margin : 0;</code></p><p>例2：</p><p>这个无单位的数值就像一个简单的乘法因子</p><p><code>line-height : 1.5</code> , 行高的1.5倍</p><p>例3：</p><p>这个无单位的数值表示次数</p><p>css动画中 <code>animation-iteration-count: 1;</code>它控制着动画启动后执行多少次。</p><h3 id="百分比"><a href="#百分比" class="headerlink" title="百分比"></a>百分比</h3><p>对于父容器中的子容器，希望它占父容器宽度的一定百分比。</p><p>动态（流体）布局</p><ul><li>跟随浏览器视口大小的变化。</li><li>可以使用动态布局来确保<strong>标准文档始终适合于屏幕</strong>，并且可以在<strong>不同大小的移动设备</strong>屏幕上表现良好。</li></ul><p>固定宽度布局</p><ul><li>不管怎样都保持不变</li><li>一个固定宽度的布局可以用来保持在线地图的大小相同；浏览器视口可以在地图上滚动，只在一个时间内查看一定数量的地图。您可以立即看到的量取决于您的视口有多大。</li></ul><h2 id="颜色表示"><a href="#颜色表示" class="headerlink" title="颜色表示"></a>颜色表示</h2><p>现代计算机中可用的标准颜色系统是24位，通过不同的红、绿、蓝通道，每个通道有256种不同的值，从而显示出大约1670万种不同的颜色。 (256 x 256 x 256 = 16,777,216.)</p><p>关键词，十六进制，RGB / HSLA / RGBA / HSLA 和不透明属性,有些因为兼容性就没有列举。</p><h2 id="rgb表示法"><a href="#rgb表示法" class="headerlink" title="rgb表示法"></a>rgb表示法</h2><p>rgb：red green blue 光谱三原色</p><p>rgb(255,255,255) = 白色</p><p>rgb(0,0,0)=黑色</p><h2 id="16进程的颜色表示法"><a href="#16进程的颜色表示法" class="headerlink" title="16进程的颜色表示法"></a>16进程的颜色表示法</h2><p><code>#000000</code> - <code>#FFFFFF</code></p><p><code>#000</code> - <code>#FFF</code></p><h2 id="单词表示法"><a href="#单词表示法" class="headerlink" title="单词表示法"></a>单词表示法</h2><p>red, green, pink, gray</p><h2 id="rgba表示法"><a href="#rgba表示法" class="headerlink" title="rgba表示法"></a>rgba表示法</h2><p>a表示<strong>alpha通道</strong>，透明度[0-1], 0是完全透明，1是不透明</p><h1 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h1><h2 id="font-size-字体大小"><a href="#font-size-字体大小" class="headerlink" title="font-size 字体大小"></a>font-size 字体大小</h2><h2 id="font-weight-字体粗细"><a href="#font-weight-字体粗细" class="headerlink" title="font-weight 字体粗细"></a>font-weight 字体粗细</h2><ul><li>100 – Thin</li><li>200 – Extra Light (Ultra Light)</li><li>300 – Light</li><li>400 – Regular (Normal、Book、Roman)</li><li>500 – Medium</li><li>600 – Semi Bold (Demi Bold)</li><li>700 – Bold</li><li>800 – Extra Bold (Ultra Bold)</li><li>900 – Black (Heavy)</li></ul><h2 id="font-family-字体类型"><a href="#font-family-字体类型" class="headerlink" title="font-family 字体类型"></a>font-family 字体类型</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">   <span class="attribute">font-family</span>: <span class="string">'Microsoft Yahei'</span>,<span class="string">'楷体'</span>,<span class="string">'仿宋'</span>;</span><br><span class="line">   <span class="attribute">font-weight</span>: bold;</span><br><span class="line">   <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h1><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">text-align</span> 文字的水平对齐</span><br><span class="line">	<span class="selector-tag">left</span> 左对齐</span><br><span class="line">    <span class="selector-tag">center</span> 居中</span><br><span class="line">    <span class="selector-tag">reght</span> 右对齐</span><br><span class="line"><span class="selector-tag">text-decoration</span> 文本装饰</span><br><span class="line">    <span class="selector-tag">none</span>;         没有下划线</span><br><span class="line">    <span class="selector-tag">line-through</span>; 中划线</span><br><span class="line">    <span class="selector-tag">overline</span>;     上划线</span><br><span class="line">    <span class="selector-tag">underline</span>;    下划线</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">text-indent</span> 文本缩进</span><br><span class="line">	<span class="selector-tag">text-indent</span>: 2<span class="selector-tag">em</span>; <span class="selector-tag">em</span>单位是一个相对单位,相对当前字体大小的像素是1<span class="selector-tag">em</span></span><br><span class="line"></span><br><span class="line">line-height	行高,设置行高=容器高度,文字自动垂直居中</span><br><span class="line">	<span class="selector-tag">line-height</span>: 200<span class="selector-tag">px</span>;</span><br><span class="line">	</span><br><span class="line"><span class="selector-tag">color</span>:设置字体颜色</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">text-shadow</span>: 5<span class="selector-tag">px</span> 5<span class="selector-tag">px</span> 5<span class="selector-tag">px</span> <span class="selector-tag">blueviolet</span>;  文本阴影</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">text-overflow</span>  文字溢出</span><br><span class="line">设置了固定宽度 + 强制在一行内显示 + 超出部分隐藏 + 显示省略号来代表被修剪的文本。</span><br><span class="line">overflow = hidden 超出部分隐藏</span><br></pre></td></tr></table></figure><h1 id="背景图片"><a href="#背景图片" class="headerlink" title="背景图片"></a>背景图片</h1><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">background-color</span>: <span class="selector-tag">red</span>;   在没有背景图片覆盖的范围显示背景颜色</span><br><span class="line">background-image: url('timg.jpg'); 设置背景图片</span><br><span class="line"><span class="selector-tag">height</span>: 400<span class="selector-tag">px</span>;</span><br><span class="line"><span class="selector-tag">width</span>: 400<span class="selector-tag">px</span>; </span><br><span class="line"><span class="selector-tag">background-repeat</span>: <span class="selector-tag">no-repeat</span>; 设置图片不重复   <span class="selector-tag">repeat-x</span>水平重复   <span class="selector-tag">repeat-y</span>垂直重复</span><br><span class="line"><span class="selector-tag">background-position</span>: <span class="selector-tag">right</span> <span class="selector-tag">top</span>; 图片的位置    左中右<span class="selector-tag">x</span> 上中下<span class="selector-tag">y</span></span><br><span class="line"><span class="comment">/*left center right /top center bottom*/</span></span><br><span class="line"><span class="selector-tag">background-attachment</span>: <span class="selector-tag">fixed</span>; 在窗口中固定图片的位置</span><br><span class="line"><span class="selector-tag">background</span><span class="selector-pseudo">:red</span> <span class="selector-tag">url</span>("<span class="selector-tag">timg</span><span class="selector-class">.jpg</span>") <span class="selector-tag">no-repeat</span> <span class="selector-tag">left</span> <span class="selector-tag">center</span>;  把所有的设置综合写在<span class="selector-tag">background</span>中</span><br></pre></td></tr></table></figure><p>图片居中：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="边框的设置"><a href="#边框的设置" class="headerlink" title="边框的设置"></a>边框的设置</h1><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">width</span>: 100<span class="selector-tag">px</span>;</span><br><span class="line"><span class="selector-tag">height</span>: 100<span class="selector-tag">px</span>;</span><br><span class="line"><span class="comment">/*border-color: tomato green gray yellow;*/</span></span><br><span class="line"><span class="comment">/*border-width: 1px 3px 5px 7px;*/</span></span><br><span class="line"><span class="comment">/*border-style: solid dotted dashed double;*/</span></span><br><span class="line"><span class="comment">/*一个值:上下左右</span></span><br><span class="line"><span class="comment">四个值:遵循顺时针上右下左</span></span><br><span class="line"><span class="comment">三个值:上 右左 下</span></span><br><span class="line"><span class="comment">两个值:遵循上下 左右</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/*border-top-style:solid ;*/</span>  单独设置顶线的样式(<span class="selector-tag">left</span>,<span class="selector-tag">bottom</span>,<span class="selector-tag">right</span>)</span><br><span class="line"><span class="comment">/*border-left-style:solid ;*/</span> 单独设置左边线的样式</span><br><span class="line"><span class="comment">/*border-top-color:red;*/</span>     单独设置顶线颜色</span><br><span class="line"><span class="selector-tag">border</span><span class="selector-pseudo">:yellow</span> <span class="selector-tag">solid</span>  10<span class="selector-tag">px</span>;    统一设置边框的颜色 样式 宽度</span><br></pre></td></tr></table></figure><h1 id="块和行内的概念以及转换"><a href="#块和行内的概念以及转换" class="headerlink" title="块和行内的概念以及转换"></a>块和行内的概念以及转换</h1><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">对于行内标签来说不能设置宽和高</span><br><span class="line">有些时候需要行内标签也设置宽和高,需要进行行内<span class="selector-tag">--</span>&gt;块,行内<span class="selector-tag">-</span>&gt;行内块</span><br><span class="line"><span class="selector-tag">display</span>的属性值 : <span class="selector-tag">block</span>块  <span class="selector-tag">inline</span>行内 <span class="selector-tag">inline-block</span>行内快 <span class="selector-tag">none</span></span><br><span class="line"><span class="selector-tag">display</span>: <span class="selector-tag">block</span>;        独占一行并且可以设置宽高</span><br><span class="line"><span class="selector-tag">display</span>: <span class="selector-tag">inline-block</span>;  既可以设置宽高又不会独占一行 行内\块转行内快</span><br><span class="line"><span class="selector-tag">display</span>: <span class="selector-tag">inline</span>;        表示一个行内元素,不能设置宽高</span><br><span class="line"><span class="selector-tag">display</span>: <span class="selector-tag">none</span>;          不仅不显示内容,连位置也不占了</span><br></pre></td></tr></table></figure><h1 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h1><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">border</span>  : 边框的宽度</span><br><span class="line"><span class="selector-tag">padding</span> : 内边距的距离</span><br><span class="line"><span class="selector-tag">content</span> : <span class="selector-tag">width</span> <span class="selector-tag">height</span></span><br><span class="line">背景包含的部分<span class="selector-pseudo">:padding</span> + <span class="selector-tag">conntent</span></span><br><span class="line">计算一个盒子的总大小: 宽<span class="selector-tag">width</span>+2<span class="selector-tag">padding</span>+2<span class="selector-tag">border</span> 高<span class="selector-tag">height</span>+2<span class="selector-tag">padding</span>+<span class="selector-tag">border</span></span><br><span class="line">外边距 <span class="selector-tag">margin</span></span><br><span class="line">    上下的盒子如果设置<span class="selector-tag">bottom</span>和<span class="selector-tag">top</span>会导致塌陷,取两个设置的最大值作为外边距</span><br><span class="line"><span class="selector-tag">margin</span>: 0 <span class="selector-tag">auto</span>;定义元素上、下边界为0<span class="selector-tag">px</span>，在浏览器中横向居中</span><br><span class="line"></span><br><span class="line">分方向的设置</span><br><span class="line"><span class="selector-tag">border-top</span> <span class="selector-tag">border-right</span>  <span class="selector-tag">border-bottom</span> <span class="selector-tag">border-left</span></span><br><span class="line"><span class="selector-tag">padding-top</span> <span class="selector-tag">padding-right</span>  <span class="selector-tag">padding-bottom</span> <span class="selector-tag">padding-left</span></span><br><span class="line"><span class="selector-tag">margin-top</span> <span class="selector-tag">margin-right</span>  <span class="selector-tag">margin-bottom</span> <span class="selector-tag">margin-left</span></span><br><span class="line"></span><br><span class="line">给图形设置圆角</span><br><span class="line"><span class="selector-tag">border-radius</span>: 5<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure><h2 id="border的使用方法"><a href="#border的使用方法" class="headerlink" title="border的使用方法"></a>border的使用方法</h2><h3 id="一句表示"><a href="#一句表示" class="headerlink" title="一句表示"></a>一句表示</h3><p>粗细（数值+单位） 颜色;</p><p><code>border:3px solid red;</code></p><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>边框大小 border-width: 10px;（边框宽）</p><p>边框类型 border-style: solid;（线型）</p><p>边框颜色 border-color: #00f;（颜色）</p><h3 id="边框border线型"><a href="#边框border线型" class="headerlink" title="边框border线型"></a>边框border线型</h3><ul><li>solid:实线</li><li>dashed:线状虚线</li><li>dotted:点状虚线</li><li>double:双线<strong>(至少3px)</strong></li></ul><h3 id="边框按方向分类"><a href="#边框按方向分类" class="headerlink" title="边框按方向分类"></a>边框按方向分类</h3><ul><li>右边框 border-right</li><li>左边框 border-left</li><li>上边框 border-top</li><li>下边框 border-bottom</li></ul><h2 id="padding的使用方法"><a href="#padding的使用方法" class="headerlink" title="padding的使用方法"></a>padding的使用方法</h2><p>内边距：padding,在设定页面中一个元素内容到元素的边缘(边框) 之间的距离。也称补白、填充。</p><ul><li>用来调整内容在容器中的位置关系</li><li>用来调整子元素在父元素中的位置关系</li><li><strong>写完padding看宽高，如果有做减法（不减容易把盒子撑高）</strong></li><li>支持背景</li></ul><h3 id="属性值的4种方式"><a href="#属性值的4种方式" class="headerlink" title="属性值的4种方式"></a>属性值的4种方式</h3><ul><li>四值法：上 右 下 左 {padding:10px 20px 30px 40px;}</li><li>三值法：上 右左 下 {padding:10px 20px 30px ;}</li><li>二值法：上下 右左 {padding:10px 20px ;}</li><li>一值法：四个方向 padding:2px;（定义元素四周填充为2px）</li></ul><h2 id="属性的继承"><a href="#属性的继承" class="headerlink" title="属性的继承"></a>属性的继承</h2><ul><li>父盒子的属性，如果子盒子能够读取得到，那么就是可以继承。</li><li>不可继承的：display、margin、border、padding、background、height、min-height、max-height、width、min-width、max-width、overflow、position、left、right、top、bottom、z-index、float、clear、table-layout、vertical-align、page-break-after、page-bread-before和unicode-bidi。</li><li><strong>文本可继承</strong>：letter-spacing、word-spacing、white-space、line-height、color、font、font-family、font-size、font-style、font-variant、font-weight、text-decoration、text-transform、direction、text-indent和text-align。</li><li><strong>列表元素可继承</strong>：list-style、list-style-type、list-style-position、list-style-image。</li></ul><h1 id="列表的样式"><a href="#列表的样式" class="headerlink" title="列表的样式"></a>列表的样式</h1><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">在<span class="selector-tag">css</span>中去掉列表的样式</span><br><span class="line"><span class="selector-tag">ul</span>,<span class="selector-tag">li</span>&#123;</span><br><span class="line">   <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h1><figure class="highlight"><table><tr><td class="code"><pre><span class="line">float:left /right</span><br><span class="line">浮动的元素会脱离标准文档流,原本块级元素就不再独占整行了</span><br><span class="line">并且在原页面中也不占位置了,之后的元素会挤到页面上影响页面的排版</span><br><span class="line">清除浮动 <span class="selector-tag">clear</span><span class="selector-pseudo">:both</span></span><br><span class="line">伪元素清除法:</span><br><span class="line">        <span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">            <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">            <span class="attribute">clear</span>: both;</span><br><span class="line">            <span class="attribute">display</span>: block;</span><br><span class="line">        &#125;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">&lt;div class="father clearfix"&gt;</span><br><span class="line">&lt;div class="box"&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class="box"&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class="main"&gt;</span><br><span class="line">    主页的内容</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h2 id="overflow"><a href="#overflow" class="headerlink" title="overflow"></a>overflow</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">内容多余标签的大小</span><br><span class="line"><span class="selector-tag">visible</span> 可见(默认)</span><br><span class="line"><span class="selector-tag">hidden</span> 超出部分隐藏</span><br><span class="line"><span class="selector-tag">scroll</span> 超出显示滚动条</span><br></pre></td></tr></table></figure><h1 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h1><p>CSS <strong>position</strong>属性用于指定一个元素在文档中的定位方式。<code>top</code>、<code>bottom</code>、<code>left</code>、<code>right</code>属性则决定了该元素的最终位置。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">position : relative /absolute /fixed</span><br><span class="line"><span class="selector-tag">top</span><span class="selector-pseudo">:10px</span>;</span><br><span class="line"><span class="selector-tag">right</span><span class="selector-pseudo">:10px</span>;</span><br><span class="line"><span class="selector-tag">bottom</span><span class="selector-pseudo">:10px</span>;</span><br><span class="line"><span class="selector-tag">left</span><span class="selector-pseudo">:10px</span>;</span><br></pre></td></tr></table></figure><p><img src="/CSS笔记/20190611-learning_CSS/%E5%AE%9A%E4%BD%8D.png" alt="定位"></p><h2 id="默认-static"><a href="#默认-static" class="headerlink" title="默认 static"></a>默认 static</h2><ul><li>该关键字指定元素使用正常的布局行为，即元素在文档常规流中当前的布局位置。此时 <code>top</code>, <code>right</code>, <code>bottom</code>, <code>left</code> 和 <code>z-index</code>属性无效。</li></ul><h2 id="相对定位"><a href="#相对定位" class="headerlink" title="相对定位"></a>相对定位</h2><ul><li>相对自己原来的位置移动,移动之后还占据原来的位置</li><li>不脱标占位，相对自身（标准流里的位置）定位，跟父盒子毫无关系</li><li><code>position:relative</code> 对 <code>table-*-group</code>, <code>table-row</code>, <code>table-column</code>, <code>table-cell</code>, <code>table-caption</code> 元素无效。</li></ul><h2 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h2><ul><li>绝对定位是相对于整个html页面,不会占据原来的位置,层级的提升</li><li>不为元素预留空间，通过指定元素相对于最近的<strong>非 static 定位祖先元素</strong>的偏移，来确定元素位置。绝对定位的元素可以设置<strong>外边距</strong>（margins），且不会与其他边距合并。</li><li><strong>脱标不占位</strong>，如果不写坐标，脱标留原位（标准流里的位置）</li></ul><h3 id="父相子绝"><a href="#父相子绝" class="headerlink" title="父相子绝"></a>父相子绝</h3><ul><li><p><strong>脱离文档流</strong></p></li><li><p>如果我们设置了绝对定位</p><ul><li>父元素如果没有设置position,那么我们对元素的所有设置都是基于整个页面；</li><li>父元素如果设置了position,那么子盒子的absolute位置会根据父盒子的位置定位</li></ul></li></ul><h2 id="固定定位"><a href="#固定定位" class="headerlink" title="固定定位"></a>固定定位</h2><ul><li><strong>脱离文档流</strong></li><li>相对屏幕视口（viewport）的位置来定位元素位置，元素的位置在屏幕滚动时不会改变。（如：返回顶部，定位在上方的导航）</li></ul><h1 id="用定位还是用浮动？"><a href="#用定位还是用浮动？" class="headerlink" title="用定位还是用浮动？"></a>用定位还是用浮动？</h1><ul><li>大布局、自适应，用“浮动” ———— 浮动一般和响应式结合的比较多；</li><li>小元素、固定宽高，用“定位”———— 一般只适用于一些很小的 icon ；</li></ul><h1 id="z-index"><a href="#z-index" class="headerlink" title="z-index"></a>z-index</h1><ul><li>z-index 值表示谁压着谁，数值大的压盖住数值小的</li><li>只有定位了的元素，才能有z-index,也就是说，不管相对定位，绝对定位，固定定位，都可以使用z-index，而浮动元素不能使用z-index</li><li>z-index值没有单位，就是一个正整数，默认的z-index值为0如果大家都没有z-index值，或者z-index值一样，那么谁写在HTML后面，谁在上面压着别人，定位了元素，永远压住没有定位的元素。</li><li>从父现象：父亲怂了，儿子再牛逼也没用</li></ul><h1 id="opacity"><a href="#opacity" class="headerlink" title="opacity"></a>opacity</h1><p>不透明度</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">opacity</span>: 0<span class="selector-class">.5</span>;调整<span class="selector-tag">d4</span>对应的整个标签的透明度是50%</span><br><span class="line"><span class="selector-class">.d4</span>&#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.5</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;div class="d4"&gt;</span><br><span class="line">    你好啊</span><br><span class="line">	&lt;img src="timg.jpg" alt=""&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h1 id="自适应"><a href="#自适应" class="headerlink" title="自适应"></a>自适应</h1><h2 id="宽高自适应"><a href="#宽高自适应" class="headerlink" title="宽高自适应"></a>宽高自适应</h2><p>网页布局中经常要定义元素的宽和高。 但很多时候我们希望元素的大小能够根据窗口或子元素自动调整，这就是自适应。</p><p>元素自适应在网页布局中非常重要，它能够使网页显示更灵活，可以适应在不同设备、不同窗口和不同分辨率下显示。</p><h3 id="最小最大高度的自适应"><a href="#最小最大高度的自适应" class="headerlink" title="最小最大高度的自适应"></a>最小最大高度的自适应</h3><p>最小高度：内容不足会呈递最小高度，内容超出会依据内容自适应高度</p><p>​ <code>min-height</code>属性：最小高度；</p><p>最大高度：内容不足最大高度时自适应，内容超出最大高度时溢出不再支撑盒子</p><p>​ <code>max-height</code>属性：最大高度；</p><h3 id="最小最大宽度自适应"><a href="#最小最大宽度自适应" class="headerlink" title="最小最大宽度自适应"></a>最小最大宽度自适应</h3><p>块元素宽度默认为100%(独占一行导致100%);</p><p><code>min-width</code>属性：最小宽度；</p><p><code>max-width</code>属性：最大宽度；</p><p>如果想给盒子应用最大最小宽度自适应，就必须将盒子转化为行内块 inline-block 或者添加float</p><h3 id="宽度自适应于当前窗口"><a href="#宽度自适应于当前窗口" class="headerlink" title="宽度自适应于当前窗口"></a>宽度自适应于当前窗口</h3><ul><li>通过百分比实现宽度自适应</li><li>盒子的百分数是参照父盒子的width的，子盒子的内外边距百分数也是参照父盒子的width</li></ul><h3 id="高度自适应于当前窗口"><a href="#高度自适应于当前窗口" class="headerlink" title="高度自适应于当前窗口"></a>高度自适应于当前窗口</h3><p>高度自适应当前窗口，必须将父盒子body和html的height都设为100%；</p><p>​ <code>body,html{ height:100%;}</code></p><p>只有这样，才能让当前盒子的{height：100%}生效；</p><h3 id="浮动元素父元素高度自适应（高度塌陷-清除浮动）"><a href="#浮动元素父元素高度自适应（高度塌陷-清除浮动）" class="headerlink" title="浮动元素父元素高度自适应（高度塌陷\清除浮动）"></a>浮动元素父元素高度自适应（高度塌陷\清除浮动）</h3><ol><li><p>给父盒子添加一个死高度；</p><p>​ （清除浮动的一种方式，并不会自适应高度，因为已经固定）</p></li><li><p>给父元素添加声明<code>overflow:hidden;</code></p></li><li><p>在浮动元素下方添加空div，并给该元素添加声明</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">clear</span><span class="selector-pseudo">:both</span>; <span class="selector-tag">height</span><span class="selector-pseudo">:0</span>; <span class="selector-tag">line-height</span><span class="selector-pseudo">:0</span>; <span class="selector-tag">font-size</span><span class="selector-pseudo">:0</span>; <span class="selector-tag">overflow</span><span class="selector-pseudo">:hidden</span>;</span><br><span class="line"></span><br><span class="line">谁不想被浮动影响谁就加清除浮动<span class="selector-tag">clear</span>：<span class="selector-tag">both</span></span><br><span class="line"></span><br><span class="line">（注意：不是给浮动的盒子加）</span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li>伪类清除浮动(万能清浮法)</li></ol><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">浮动盒子的父元素<span class="selector-pseudo">::after</span>&#123;<span class="attribute">content</span>:<span class="string">""</span>; <span class="attribute">display</span>:block;   <span class="attribute">clear</span>:both;<span class="attribute">height</span>:<span class="number">0</span>;<span class="attribute">overflow</span>:hidden;<span class="attribute">visibility</span>:hidden;&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ie7</span>以下版本浏览器不支持伪元素</span><br><span class="line">visibility:hidden/visible;隐藏/可见</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">visibility</span><span class="selector-pseudo">:hidden</span>;和<span class="selector-tag">display</span><span class="selector-pseudo">:none</span>;的区别：</span><br><span class="line"><span class="selector-tag">visibility</span><span class="selector-pseudo">:hidden</span>;属性会使对象不可见，但该对象在网页所占的空间没有改变，等于留出了一块空白区域.</span><br><span class="line"><span class="selector-tag">display</span><span class="selector-pseudo">:none</span>属性会使这个对象彻底消失。</span><br></pre></td></tr></table></figure><hr>]]></content>
      <categories>
        <category>CSS笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>Web前端</tag>
        <tag>CSS笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Web前端-HTML</title>
    <url>/HTML/20190610-HTML_1.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>本篇首先回顾http与socket的关系后引出Web前端和HTML，接下来介绍HTML特点与语法。</p></blockquote><a id="more"></a><h1 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h1><p>回顾之前在网络编程中学到的socket，选择tcp后开启服务端，以前是用另一个py文件开启客户端，两者交互。那如果我们在浏览器中输入这个网址和端口<code>http://127.0.0.1:9000</code>会怎么样呢？</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">sk = socket.socket()</span><br><span class="line">sk.bind((<span class="string">'127.0.0.1'</span>,<span class="number">9000</span>))</span><br><span class="line">sk.listen()</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    conn, addr = sk.accept()</span><br><span class="line">    ret = conn.recv(<span class="number">1024</span>)</span><br><span class="line">    print(ret)</span><br><span class="line">    conn.send(<span class="string">b'hello'</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    conn.close()</span><br><span class="line">    sk.close()</span><br></pre></td></tr></table></figure><p>打印内容如下：</p><figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">b'GET / HTTP/1.1<span class="symbol">\r</span><span class="symbol">\n</span>Cache-Control: max-age=0<span class="symbol">\r</span><span class="symbol">\n</span>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8<span class="symbol">\r</span><span class="symbol">\n</span>Accept-Language: zh-CN<span class="symbol">\r</span><span class="symbol">\n</span>Upgrade-Insecure-Requests: 1<span class="symbol">\r</span><span class="symbol">\n</span>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.140 Safari/537.36 Edge/18.17763<span class="symbol">\r</span><span class="symbol">\n</span>Accept-Encoding: gzip, deflate<span class="symbol">\r</span><span class="symbol">\n</span>Host: 127.0.0.1:9000<span class="symbol">\r</span><span class="symbol">\n</span>Connection: Keep-Alive<span class="symbol">\r</span><span class="symbol">\n</span><span class="symbol">\r</span><span class="symbol">\n</span>'</span><br></pre></td></tr></table></figure><p>通过上面，我们发现服务端接收到了http请求。那接下来服务端能否给回应一个消息呢？正如上面的 <code>conn.send(b&#39;hello&#39;)</code>，可浏览器依旧是无法访问。那接下来该怎么办呢？</p><p>答案需要从socket与http中去寻找，我们的socket是对传输层以及传输层以下的一个抽象。http协议是一个应用层协议，它建立在socket的基础上。我们前面遇到的问题是我们<strong>只用到了socket的知识</strong>，没有用到http，那么浏览器没有无法访问也在情理之中，我们需要把http的规则加进去。</p><p>应用层的协议有很多如http、https、smtp、ftp，它们都是基于socket，那它们之间必须得有所区分才能方便我们的使用。所以<strong>socket 通过协议头辨识这些不同的协议</strong>。那我们我们接下来加一个协议头，让socket按照http协议来回应。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">sk = socket.socket()</span><br><span class="line">sk.bind((<span class="string">'127.0.0.1'</span>,<span class="number">9000</span>))</span><br><span class="line">sk.listen()</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    conn, addr = sk.accept()</span><br><span class="line">    ret = conn.recv(<span class="number">1024</span>)</span><br><span class="line">    print(ret)</span><br><span class="line">    conn.send(<span class="string">b'HTTP/1.1 200 OK \r\n\r\n'</span>)  <span class="comment"># socket按照http协议来回应</span></span><br><span class="line">    conn.send(<span class="string">b'hello'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    conn.close()</span><br><span class="line">    sk.close()</span><br></pre></td></tr></table></figure><p>浏览器接收、解析、渲染。最终显示一个hello。</p><p>以上我们知道了http（超文本传输协议）是基于socket的，并且有一个协议头，是用于在服务端和客户端之间传输超文本文件。那么这个超文本是什么呢? HTML就该出场了！</p><h1 id="Web端的组成"><a href="#Web端的组成" class="headerlink" title="Web端的组成"></a>Web端的组成</h1><p>HTML：一堆标签组成的内容，包括基础的排版和样式；从语义的角度，描述页面<strong>结构</strong>。</p><p>CSS：描述了标签的样式；从审美的角度，描述<strong>样式</strong>（美化页面）。</p><p>JavaScript/jQuery：动态的效果；从交互的角度，描述<strong>行为</strong>（提升用户体验）。</p><p>一张图来形容这三者的关系：</p><p><img src="/HTML/20190610-HTML_1/html%E4%B8%8Ecss%E4%B8%8Ejs%E7%9A%84%E5%8C%BA%E5%88%AB.jpg" alt="html与css与js的区别"></p><h1 id="Browser"><a href="#Browser" class="headerlink" title="Browser"></a>Browser</h1><p>在我们的电脑上可能会装很多浏览器edge、chrome、Firefox等等。那么它们之间有什么差别呢？与我们的HTML、CSS、JS之间有什么关系呢？</p><p>浏览器的内核架构有三个分支：</p><ul><li>（<strong>挪威</strong>）KTHML，Opera -&gt; Webkit -&gt; Blink (Chrome, opera, Safari)</li><li>Gecko引擎(Mozilla基金) -&gt; Netscape -&gt; Firefox</li><li>Trident -&gt; IE/Edge</li></ul><p>Google的Blink来源于苹果开源的Webkit，苹果Safari的开源Webkit来源于KTHML，属于KDE的一部分，KDE采用的是TrollTech公司开发的Qt程序库。TrollTech公司也是挪威的一家公司而且就在Opera的楼下，他们的代码是部分共享的，因此KTHML和Opera的引擎Presto架构非常类似。</p><p>blink 基于 Webkit，两者大体一致，无非前者把 Webkit 中相关类换成 chromium 与 v8 相关的，并在此之上扩充。</p><p>浏览器的内核包括<strong>渲染引擎（Rendering Engine）</strong>和<strong>脚本引擎</strong>，具体分为：</p><ul><li>HTML、CSS解析器和DOM</li><li>排版引擎</li><li>JavaScript脚本引擎</li><li>HTTP协议引擎</li></ul><p>同的浏览器内核对网页语法的解释不尽相同，这就导致了不同浏览器渲染出的网页可能有一些差异。<strong>不同的渲染引擎是兼容性出现的根本问题</strong>。</p><h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><blockquote><p>HTML全称HyperText Markup Language，翻译为超文本<strong>标记语言</strong>，它不是一种编程语言，是一种<strong>描述</strong>性的标记语言，用于描述超文本内容的显示方式。比如字体、颜色、大小等。</p></blockquote><blockquote><p>HTML5是HTML最新的修订版本，由万维网联盟（W3C）于2014年10月完成标准制定。目标是取代1999年所制定的HTML 4.01和XHTML 1.0标准，以期能在互联网应用迅速发展的时候，使网络标准达到符合当代的网络需求。广义论及HTML5时，实际指的是包括HTML、CSS和JavaScript在内的一套技术组合。它希望能够减少网页浏览器对于需要插件的丰富性网络应用服务（Plug-in-Based Rich Internet Application，RIA），例如：Adobe Flash、Microsoft Silverlight与Oracle JavaFX的需求，并且提供更多能有效加强网络应用的标准集。</p><p>HTML5添加了许多新的语法特征，其中包括<code>&lt;video&gt;</code>、<code>&lt;audio&gt;</code>和<code>&lt;canvas&gt;</code>元素，同时集成了SVG内容。这些元素是为了更容易的在网页中添加和处理多媒体和图片内容而添加的。其它新的元素如<code>&lt;section&gt;</code>、<code>&lt;article&gt;</code>、<code>&lt;header&gt;</code>和<code>&lt;nav&gt;</code>则是为了丰富文档的数据内容。新的属性的添加也是为了同样的目的。同时也有一些属性和元素被移除掉了。一些元素，像<code>&lt;a&gt;</code>、<code>&lt;cite&gt;</code>和<code>&lt;menu&gt;</code>被修改，重新定义或标准化了。同时APIs和DOM已经成为HTML5中的基础部分了。HTML5还定义了处理非法文档的具体细节，使得所有浏览器和客户端程序能够一致地处理语法错误。</p></blockquote><h2 id="拆开解释HTML"><a href="#拆开解释HTML" class="headerlink" title="拆开解释HTML"></a>拆开解释HTML</h2><ul><li><p>超文本（HyperText）：超文本是用超链接的方法，将各种不同空间的文字信息组织在一起的网状文本。超文本更是一种用户界面范式，用以显示文本及与文本之间相关的内容。</p><p>标记语言的真正威力在于其收集能力，它可以将收集来的文档组合成一个完整的信息库，并且可以将文档库与世界上的其他文档集合链接起来。</p></li><li><p>标记：&lt;英文单词或者字母&gt;称为标记，所有内容都是包裹在标签中。</p></li></ul><p><strong>注意</strong>：HTML语言不是一个编程语言(有编译过程)，而是一个<strong>标记语言</strong>(<strong>没有编译过程</strong>)，HTML页面直接由浏览器解析执行。</p><h2 id="HTML的网络术语"><a href="#HTML的网络术语" class="headerlink" title="HTML的网络术语"></a>HTML的网络术语</h2><ul><li><p>网页 ： HTML 文档（由各种标记组成）</p></li><li><p>主页(首页) : 一个网站的起始页面或者导航页面。</p></li><li><p>标记： <code>&lt;p&gt;</code>称为开始标记 ，<code>&lt;/p&gt;</code>称为结束标记，也叫标签。每个标签都规定好了特殊的含义。</p></li><li><p>元素：<code>&lt;p&gt;内容&lt;/p&gt;</code>从开始标签到结束标签的内容称为元素.</p></li><li><p>属性：给每一个标签所做的辅助信息，属性总是在 HTML 元素的<strong>开始标签</strong>中规定。</p></li></ul><h2 id="HTML的结构"><a href="#HTML的结构" class="headerlink" title="HTML的结构"></a>HTML的结构</h2><ul><li>声明部分：主要作用是用来告诉浏览器这个页面使用的是哪个标准。是HTML5标准。</li><li>head部分：将页面的一些额外信息告诉服务器。不会显示在页面上。</li><li>body部分：我们所写的需要显示出来的代码必须放在此标签內。</li></ul><p>在pycharm中创建一个html文件，pycharm会自动写出如下内容，在pycharm中还可以用 ! + tab 来补全。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">content</span>=<span class="string">"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0"</span>&gt;</span></span><br><span class="line">    # 帮助搜索引擎爬取的话写这一块      </span><br><span class="line">          </span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    # 以最高渲染</span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="HTML的基本语法特征"><a href="#HTML的基本语法特征" class="headerlink" title="HTML的基本语法特征"></a>HTML的基本语法特征</h2><h3 id="HTML对换行不敏感，对tab不敏感"><a href="#HTML对换行不敏感，对tab不敏感" class="headerlink" title="HTML对换行不敏感，对tab不敏感"></a>HTML对换行不敏感，对tab不敏感</h3><p>HTML只在乎标签的嵌套结构，嵌套的关系。谁嵌套了谁，谁被谁嵌套了，和换行、tab无关。换不换行、tab不tab，都不影响页面的结构。</p><p>也就是说，HTML<strong>不是</strong>依靠缩进来表示嵌套的，就是看标签的包裹关系。但是，我们发现有良好的缩进，代码更易读。要求大家都正确缩进标签。</p><h3 id="空白折叠现象"><a href="#空白折叠现象" class="headerlink" title="空白折叠现象"></a>空白折叠现象</h3><p>HTML中所有的<strong>文字之间</strong>，如果有空格、换行、tab都将被折叠为一个空格显示。</p><table><thead><tr><th>显示结果</th><th>描述</th><th>实体名称</th><th>实体编号</th></tr></thead><tbody><tr><td></td><td>空格</td><td><code>&amp;nbsp;</code></td><td><code>&amp;#160;</code></td></tr><tr><td>&lt;</td><td>小于号</td><td><code>&amp;lt;</code></td><td><code>&amp;#60;</code></td></tr><tr><td>&gt;</td><td>大于号</td><td><code>&amp;gt;</code></td><td><code>&amp;#62;</code></td></tr><tr><td>&amp;</td><td>和号</td><td><code>&amp;amp;</code></td><td><code>&amp;#38;</code></td></tr><tr><td>“</td><td>双引号</td><td><code>&amp;quot;</code></td><td><code>&amp;#34;</code></td></tr><tr><td>‘</td><td>单引号</td><td><code>&amp;apos;</code></td><td><code>&amp;#39;</code></td></tr><tr><td>{</td><td></td><td></td><td><code>&amp;#123;</code></td></tr><tr><td>}</td><td></td><td></td><td><code>&amp;#125;</code></td></tr><tr><td>%</td><td></td><td></td><td><code>&amp;#37;</code></td></tr><tr><td>&copy;</td><td>版权</td><td><code>&amp;copy;</code></td><td><code>&amp;#169;</code></td></tr><tr><td>&trade;</td><td>商标</td><td><code>&amp;trade;</code></td><td><code>&amp;#8482;</code></td></tr></tbody></table><p><a href="https://www.qqxiuzi.cn/bianma/zifushiti.php" target="_blank" rel="noopener">HTML字符实体转换</a></p><h3 id="标签要严格封闭"><a href="#标签要严格封闭" class="headerlink" title="标签要严格封闭"></a>标签要严格封闭</h3><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="section">&lt;html&gt;</span><span class="section">&lt;/html&gt;</span></span><br><span class="line"><span class="section">&lt;meta /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="标记（标签）的分类"><a href="#标记（标签）的分类" class="headerlink" title="标记（标签）的分类"></a>标记（标签）的分类</h2><h3 id="分类一"><a href="#分类一" class="headerlink" title="分类一"></a>分类一</h3><ul><li>双边标记 <code>&lt;body&gt;&lt;/body&gt;</code> 开始标签，闭合标签 双闭合标记</li><li>单边标记 <code>&lt;meta /&gt;</code> 单闭合标记</li></ul><p>在开始标签中添加斜杠，比如 <code>&lt;br /&gt;</code>，是关闭空元素的正确方法即使 <code>&lt;br&gt;</code> 在所有浏览器中都是有效的，但使用 <code>&lt;br /&gt;</code> 其实是更长远的保障。</p><h3 id="分类二"><a href="#分类二" class="headerlink" title="分类二"></a>分类二</h3><ul><li>块级标签</li><li>行内标签/内联标签</li></ul><h1 id="lt-html-gt-标签"><a href="#lt-html-gt-标签" class="headerlink" title="&lt;html&gt; 标签"></a><code>&lt;html&gt;</code> 标签</h1><p><code>&lt;html&gt;</code> 元素定义了整个 HTML 文档。<code>&lt;/html&gt;</code></p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p><code>&lt;!-- 注释 --&gt;</code></p><h1 id="head：一个人的思想"><a href="#head：一个人的思想" class="headerlink" title="head：一个人的思想"></a>head：一个人的思想</h1><p>写在head标签中的所有内容在网页上都看不见</p><h2 id="meta"><a href="#meta" class="headerlink" title="meta"></a>meta</h2><p>网页元信息，编码，浏览器版本，关键字，描述（搜索相关）</p><h2 id="title"><a href="#title" class="headerlink" title="title"></a>title</h2><p>打开网页的时候标签页显示的内容</p><h2 id="style-css"><a href="#style-css" class="headerlink" title="style css"></a>style css</h2><ul><li><p>内部定义的css</p></li><li><p>详见<a href="https://atlasnq.github.io/CSS笔记/20190611-learning_CSS.html" target="_blank" rel="noopener">CSS笔记</a></p></li></ul><h2 id="link-css"><a href="#link-css" class="headerlink" title="link css"></a>link css</h2><ul><li>导入外部css</li><li>详见<a href="https://atlasnq.github.io/CSS笔记/20190611-learning_CSS.html" target="_blank" rel="noopener">CSS笔记</a></li></ul><h2 id="script-js"><a href="#script-js" class="headerlink" title="script  js"></a>script js</h2><ul><li><p>导入外部JavaScript</p></li><li><p>详见<a href="https://atlasnq.github.io/JavaScript/20190612-JavaScript_1.html" target="_blank" rel="noopener">JavaScript</a></p></li></ul><h1 id="body：一个人的身体"><a href="#body：一个人的身体" class="headerlink" title="body：一个人的身体"></a>body：一个人的身体</h1><h2 id="块级标签"><a href="#块级标签" class="headerlink" title="块级标签"></a>块级标签</h2><p>浏览器会自动地在标题的前后添加空行。这样占满一整行，所以自带换行效果。</p><h3 id="HTML-heading-标题"><a href="#HTML-heading-标题" class="headerlink" title="HTML heading 标题"></a>HTML heading 标题</h3><ul><li><p><code>&lt;h1&gt;</code> 定义最大的标题。<code>&lt;h6&gt;</code> 定义最小的标题。</p></li><li><p>搜索引擎使用标题为您的网页的结构和内容编制索引。</p></li><li><p>默认情况下，HTML 会自动地在块级元素前后添加一个额外的空行，比如段落、标题元素前后。</p></li></ul><h3 id="HTML-段落"><a href="#HTML-段落" class="headerlink" title="HTML 段落"></a>HTML 段落</h3><ul><li><p><code>&lt;p&gt;</code>是块级元素</p></li><li><p>段落是通过 <code>&lt;p&gt;</code> 标签定义的。</p></li></ul><h3 id="HTML-水平线"><a href="#HTML-水平线" class="headerlink" title="HTML 水平线"></a>HTML 水平线</h3><ul><li><p><code>&lt;hr /&gt;</code>标签在 HTML 页面中创建水平线。</p></li><li><p>hr 元素可用于分隔内容。</p></li></ul><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Block-level_elements" target="_blank" rel="noopener">块级标签列表</a></p><h2 id="内联标签-行内标签"><a href="#内联标签-行内标签" class="headerlink" title="内联标签/行内标签"></a>内联标签/行内标签</h2><h3 id="文本格式化标签"><a href="#文本格式化标签" class="headerlink" title="文本格式化标签"></a>文本格式化标签</h3><table><thead><tr><th>标签</th><th>描述</th></tr></thead><tbody><tr><td><code>&lt;b&gt;</code></td><td>定义粗体文本</td></tr><tr><td><code>&lt;big&gt;</code></td><td>定义大号字</td></tr><tr><td><code>&lt;em&gt;</code></td><td>定义着重文字</td></tr><tr><td><code>&lt;i&gt;</code></td><td>定义斜体字</td></tr><tr><td><code>&lt;small&gt;</code></td><td>定义小号字</td></tr><tr><td><code>&lt;strong&gt;</code></td><td>定义加重语气</td></tr><tr><td><code>&lt;sub&gt;</code></td><td>定义下标字</td></tr><tr><td><code>&lt;sup&gt;</code></td><td>定义上标字</td></tr><tr><td><code>&lt;ins&gt;</code></td><td>定义插入字(带下划线)</td></tr><tr><td><code>&lt;del&gt;</code></td><td>定义删除字</td></tr><tr><td><code>&lt;s&gt;</code></td><td><strong>不赞成使用。</strong>使用 <del>代替</del></td></tr><tr><td><code>&lt;strike&gt;</code></td><td><strong>不赞成使用。</strong>使用 <del>代替。</del></td></tr><tr><td><code>&lt;u&gt;</code></td><td><strong>不赞成使用。</strong>使用样式（style）代替。</td></tr></tbody></table><h3 id="换行符"><a href="#换行符" class="headerlink" title="换行符"></a>换行符</h3><p><code>&lt;br/&gt;</code></p><h3 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h3><p><code>&lt;span&gt;&lt;/span&gt;</code> 没有任何样式，但用的是最多的，配合css达到更好的表达效果。</p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>HTML 使用超级链接与网络上的另一个文档相连。几乎可以在所有的网页中找到链接。超链接可以是一个字，一个词，或者一组词，也可以是一幅图像，点击这些内容来跳转到新的文档或者当前文档中的某个部分。</p><blockquote><p>超链接（hyper text），或者按照标准叫法称为<strong>锚</strong>（anchor），是使用<code>&lt;a&gt;</code>标签标记的，可以用两种方式表示。锚的一种类型是在文档中<strong>创建一个热点</strong>，当用户激活或选中（通常是使用鼠标）这个热点时，会导致浏览器进行链接。浏览器会自动加载并显示同一文档或其他文档中的某个部分，或触发某些与因特网服务相关的操作，例如发送电子邮件或下载特殊文件等。锚的另一种类型会在文档中<strong>创建一个标记</strong>，该标记可以被超链接引用。</p><p>note：锚的这两种类型都使用同样的标签；也许这就是它们拥有同样的名称的原因。但是我们发现，如果将它们区分开，把<strong>提供热点和超链接地址的锚看作“链接”</strong>，而用于<strong>标记文档的目标部分的锚称为“锚”</strong>，那么您将更容易理解这两种类型的锚。</p></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"url"</span>&gt;</span>Link text<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="href-属性"><a href="#href-属性" class="headerlink" title="href 属性"></a>href 属性</h4><p>href 属性规定链接的目标。（引入一个锚点 anchor 拿着锚就能找到这艘船）</p><ol><li><p>网络资源：点击可以跳转到一个网址。</p></li><li><p>邮件资源： <code>&lt;a href=&quot;mailto:xxx@126.com&quot;&gt;联系我们&lt;/a&gt;</code></p></li><li><p>设置锚点：</p><ul><li>方式一：跳转到本页的起始：<code>href = &quot;#&quot;</code></li><li>方式二：如果想回到本地页的某一个地方<ol><li>给这个地方添加一个标签，属性是id</li><li>在a标签设置锚#id的值，跳转到对应的标签</li></ol></li></ul><p>补充：这里的命名方式有两种：</p><ol><li><p>使用name属性</p><ul><li>定义锚：<code>&lt;a name=&quot;label&quot;&gt;锚（显示在页面上的文本）&lt;/a&gt;</code>使用name属性</li><li>定义链接：<code>&lt;a href=&quot;#label&quot;&gt;回到标识为label的位置&lt;/a&gt;</code></li></ul></li><li><p>添加id属性</p><ul><li>定义锚：<code>&lt;h2 id=&quot;xxx&quot;&gt;我是一个h2&lt;/h2&gt;</code></li><li>定义链接：<code>&lt;a href=&quot;#xxx&quot;&gt;回到h2标签&lt;/a&gt;</code></li></ul></li></ol></li></ol><h4 id="target属性"><a href="#target属性" class="headerlink" title="target属性"></a>target属性</h4><ul><li>默认值 <code>__self</code> 在当前网页打开</li><li><code>__blank</code> 新建标签跳转</li></ul><h4 id="title属性"><a href="#title属性" class="headerlink" title="title属性"></a>title属性</h4><ul><li>鼠标悬浮显示的小标题</li></ul><h3 id="图像"><a href="#图像" class="headerlink" title="图像"></a>图像</h3><ul><li>单边标记</li></ul><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;img <span class="attribute">src</span>=<span class="string">"url"</span> <span class="attribute">width</span>=<span class="string">"200px"</span> <span class="attribute">alt</span>=<span class="string">"图片说明"</span>/&gt;</span><br></pre></td></tr></table></figure><ul><li>每一个属性都需要加<strong>引号</strong></li></ul><h4 id="src属性"><a href="#src属性" class="headerlink" title="src属性"></a>src属性</h4><ul><li>src是一张图的网络地址/本地路径</li></ul><h4 id="alt-属性"><a href="#alt-属性" class="headerlink" title="alt 属性"></a>alt 属性</h4><ul><li>图裂（加载失败）了地时候，显示的信息，如果没有就连图裂的信息都没有。要写！！！<ul><li>用户体验，爬虫</li></ul></li></ul><h4 id="width-属性"><a href="#width-属性" class="headerlink" title="width 属性"></a>width 属性</h4><p>设置图片宽度，如”200px”</p><h4 id="height-属性"><a href="#height-属性" class="headerlink" title="height  属性"></a>height 属性</h4><p>设置图片高度，如”400px”</p><ul><li>width和height二选一，不然会改变原本比例。</li></ul><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="无序列表-undefined-list"><a href="#无序列表-undefined-list" class="headerlink" title="无序列表 undefined list"></a>无序列表 undefined list</h3><p>无序列表始于 <code>&lt;ul&gt;</code> 标签。每个列表项始于 <code>&lt;li&gt;</code>。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--默认显示实心圆--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>手机<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>电脑<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>其他电器<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--设置不显示任何样式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">type</span>=<span class="string">"None"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>手机<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>电脑<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>其他电器<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--设置显示空心圆--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">type</span>=<span class="string">"circle"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>旧电脑 <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>旧家具 <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>旧手机 <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--设置显示实心方块--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">type</span>=<span class="string">"square"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>旧电脑 <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>旧家具 <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>旧手机 <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>note：列表项内部可以使用段落、换行符、图片、链接以及其他列表等等。</p><p>补充：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ul</span>&#123;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">    <span class="comment">/* 可以去掉列表前面的点 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">li</span>&#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="comment">/* 让列表横向 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="有序列表-order-list"><a href="#有序列表-order-list" class="headerlink" title="有序列表 order list"></a>有序列表 order list</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>旧电脑<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>旧冰箱<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>旧洗衣机<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><p>默认显示如下：</p><ol><li>旧电脑</li><li>旧冰箱</li><li>旧洗衣机</li></ol><p>修改 <code>type</code>属性设置显示内容，也可以修改<code>start</code>属性改变起始</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">type</span>  = <span class="string">I</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>长头发<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>旧家电<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>破剪刀<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">start</span>=<span class="string">"2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>长头发<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>旧家电<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>破剪刀<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">type</span>=<span class="string">"a"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>长头发<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>旧家电<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>破剪刀<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--从c开始--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">type</span>=<span class="string">"a"</span> <span class="attr">start</span>=<span class="string">"3"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>旧电脑<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>旧冰箱<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>旧洗衣机<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="定义列表-define-list"><a href="#定义列表-define-list" class="headerlink" title="定义列表 define list"></a>定义列表 define list</h3><p>自定义列表不仅仅是一列项目，而是<strong>项目及其注释的组合</strong>。</p><p>自定义列表以 <code>&lt;dl&gt;</code> 标签开始。每个自定义列表项以 <code>&lt;dt&gt;</code> 开始。每个自定义列表项的定义以 <code>&lt;dd&gt;</code> 开始。</p><p>dl 的 l 表示 list</p><p>dt 的 t 表示 title</p><p>dd 的 d 表示 data</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>回收旧家电<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>旧冰箱<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>旧电视<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>旧洗衣机<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>回收旧衣服<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>旧羽绒服<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>旧羊绒裤<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><h3 id="标准表格（带表头）"><a href="#标准表格（带表头）" class="headerlink" title="标准表格（带表头）"></a>标准表格（带表头）</h3><ul><li>标准表格 <code>&lt;table&gt;</code> 分为 <code>&lt;thead&gt;</code> 和 <code>&lt;tbody&gt;</code></li><li><code>&lt;tr&gt;</code> 表示每一行，tr表示表行(table row)</li><li><code>&lt;th&gt;</code> 表示<code>&lt;thead&gt;</code>中的每一个元素，th表示表头(table header)</li><li><code>&lt;td&gt;</code> 表示<code>&lt;tbody&gt;</code>中的每一个元素，td表示表格数据(table data)</li><li>border 属性 设置边框</li><li>cellpadding 属性 内容与内边框进行填充</li><li>cellspacing 属性 内边框与外边框进行填充</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span> <span class="attr">cellpadding</span>=<span class="string">"10px"</span> <span class="attr">cellspacing</span>=<span class="string">"5px"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>身高<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>nq<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>23<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>178<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">在<span class="selector-tag">css</span>中我们如下设置才能添加边框</span><br><span class="line"><span class="selector-tag">table</span>, <span class="selector-tag">th</span>, <span class="selector-tag">td</span>, <span class="selector-tag">tr</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">#0f0f0f</span> solid <span class="number">1px</span>;</span><br><span class="line">    <span class="attribute">border-spacing</span>: <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="不带表头的表格"><a href="#不带表头的表格" class="headerlink" title="不带表头的表格"></a>不带表头的表格</h3><ul><li><p>只有tbody这一部分，没有thead这一部分。</p></li><li><p>数据单元格可以包含文本、图片、列表、段落、表单、水平线、表格等等。</p></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>nq<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>23<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>178<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>小黑<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>20<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>175<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="行-列的合并"><a href="#行-列的合并" class="headerlink" title="行/列的合并"></a>行/列的合并</h3><p>例如：</p><ul><li>合并第一行的1，2列，则需让第一行的第2列为空，然后在(1，1)位置 <code>&lt;td&gt;</code> 标签中设置<code>colspan = &quot;2&quot;</code>.</li><li>合并第三列的2，3行，则需让第三列的第3行为空，然后在(2,3)位置的 <code>&lt;td&gt;</code>标签中设置<code>rowspan = &quot;2&quot;</code>.</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"0.5"</span> <span class="attr">cellpadding</span>=<span class="string">"10px"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span>row1, col1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>row1, col3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>row2, col1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>row2, col2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">"2"</span>&gt;</span>row2, col3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>row3, col1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>row3, col2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="/HTML/20190610-HTML_1/%E8%A1%A8%E6%A0%BC.png" alt="表格"></p><p>补充：设置表格的css，效果是边框没有间距。</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">  <span class="selector-tag">table</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">border</span>: black solid <span class="number">1px</span>;    <span class="comment">/* 按需修改border宽度 */</span></span><br><span class="line">    <span class="attribute">border-collapse</span>: collapse;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">table</span> <span class="selector-tag">td</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;   <span class="comment">/* 按需修改border宽度 */</span></span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="/HTML/20190610-HTML_1/%E8%A1%A8%E6%A0%BC1.png" alt="表格1"></p><h1 id="Form表单"><a href="#Form表单" class="headerlink" title="Form表单"></a>Form表单</h1><p><strong>HTML 表单用于搜集不同类型的用户输入。</strong></p><h2 id="lt-form-gt-元素"><a href="#lt-form-gt-元素" class="headerlink" title="&lt;form&gt; 元素"></a><code>&lt;form&gt;</code> 元素</h2><ul><li><p><code>&lt;form&gt;</code> 元素定义 HTML 表单</p></li><li><p>action 属性：提交到的地址，把表单中的数据提交到对应的地址上。</p></li><li><p>Method 属性：规定在提交表单时所用的 HTTP 方法（<strong>GET</strong> 或 <strong>POST</strong>）</p><ul><li>何时使用 GET？<ul><li>默认使用 GET，如果表单提交是被动的（比如搜索引擎查询），并且<strong>没有敏感信息</strong>。当您使用 GET 时，表单数据在页面地址栏中是可见的。综上GET 最适合少量数据的提交。浏览器会设定容量限制。</li></ul></li><li>何时使用 POST？<ul><li>如果表单正在更新数据，或者包含<strong>敏感信息</strong>（例如密码）。POST 的安全性更加，因为在页面地址栏中被提交的数据是不可见的。</li></ul></li></ul></li><li><p>enctype 规定被提交数据的编码（默认：url-encoded），如果是大文本数据需要修改。</p></li></ul><h2 id="lt-input-gt-元素"><a href="#lt-input-gt-元素" class="headerlink" title="&lt;input&gt; 元素"></a><code>&lt;input&gt;</code> 元素</h2><ul><li><p><code>&lt;input&gt;</code> 元素是最重要的<strong>表单元素</strong>。</p></li><li><p><code>&lt;input&gt;</code> 元素有很多形态，根据不同的 <strong>type</strong> 属性。</p></li><li><p><strong>type</strong> 属性种类：<code>text</code>, <code>passowrd</code>, <code>radio</code>, <code>checkbox</code>, <code>submit</code>, <code>reset</code>, <code>hidden</code>, <code>button</code>, <code>file</code>, <code>date</code></p></li><li><p>如何把数据提交到后台的？</p><ul><li>input标签必须设置name属性和value属性</li></ul></li><li><p>对于选择框：<code>checked</code>属性表示默认选中</p></li><li><p>submit 与 input在form表单中都表示提交</p></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"http://127.0.0.1:9000"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--我们是需要指定key：value，才能在后端拿到值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"alexander"</span> <span class="attr">readonly</span> <span class="attr">placeholder</span>=<span class="string">"用户名手机号/邮箱"</span> &gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注意：设置了readonly，那么不能修改只能提交；只能给输入框的模式设置--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注意：设置了disabled，那么不能修改不能提交；可以给所有表单元素设置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">disabled</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"1"</span> <span class="attr">checked</span> = <span class="string">"checked"</span>&gt;</span> 男</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span> 女</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">value</span>=<span class="string">"a"</span> <span class="attr">checked</span>&gt;</span>抽烟</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">value</span>=<span class="string">"b"</span>&gt;</span>喝酒</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">value</span>=<span class="string">"c"</span>&gt;</span>烫头</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"表单按钮"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>提交按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注意：在form表单中 input的submit类型和button放在form表单中都表示提交--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"reset"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"普通按钮"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"date"</span>&gt;</span>   </span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"普通按钮"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>普通按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--如果submit和button放在外面就变成普通的按钮--&gt;</span></span><br></pre></td></tr></table></figure><p>设置server端尝试接收：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">sk = socket.socket()</span><br><span class="line">sk.bind((<span class="string">'127.0.0.1'</span>,<span class="number">9000</span>))</span><br><span class="line">sk.listen()</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    conn, addr = sk.accept()</span><br><span class="line">    ret = conn.recv(<span class="number">1024</span>)</span><br><span class="line">    print(ret)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    conn.close()</span><br><span class="line">    sk.close()</span><br></pre></td></tr></table></figure><p>note：如果是file类型的input标签需要修改表单的enctype类型</p><h3 id="输入限制"><a href="#输入限制" class="headerlink" title="输入限制"></a>输入限制</h3><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>disabled</td><td>规定输入字段应该被禁用。</td></tr><tr><td>max</td><td>规定输入字段的最大值。</td></tr><tr><td>maxlength</td><td>规定输入字段的最大字符数。</td></tr><tr><td>min</td><td>规定输入字段的最小值。</td></tr><tr><td>pattern</td><td>规定通过其检查输入值的正则表达式。</td></tr><tr><td>readonly</td><td>规定输入字段为只读（无法修改）。</td></tr><tr><td>required</td><td>规定输入字段是必需的（必需填写）。</td></tr><tr><td>size</td><td>规定输入字段的宽度（以字符计）。</td></tr><tr><td>step</td><td>规定输入字段的合法数字间隔。</td></tr><tr><td>value</td><td>规定输入字段的默认值。</td></tr></tbody></table><h2 id="label框、文本框、选择框-下拉列表"><a href="#label框、文本框、选择框-下拉列表" class="headerlink" title="label框、文本框、选择框(下拉列表)"></a>label框、文本框、选择框(下拉列表)</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--label框--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"user"</span>&gt;</span>用户名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"user"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"password"</span>&gt;</span>密码：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">id</span>=<span class="string">"password"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">id</span>=<span class="string">"sex1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"sex1"</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">id</span>=<span class="string">"sex2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"sex2"</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--文本框--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"text"</span> <span class="attr">cols</span>=<span class="string">"30"</span> <span class="attr">rows</span>=<span class="string">"10"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--选择框 默认是单选--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"city"</span> <span class="attr">id</span>=<span class="string">"city"</span> <span class="attr">size</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--size表示选择框显示几条内容--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"3"</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"4"</span>&gt;</span>深圳<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--多选框：设置multiple属性--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注意：使用multiple属性设置为多选：按住鼠标下拉，按shift选，按ctrl选 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">id</span>=<span class="string">"hobby"</span> <span class="attr">multiple</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span>唱<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span>跳<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"3"</span>&gt;</span>rap<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"4"</span>&gt;</span>篮球<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="用-lt-fieldset-gt-组合表单数据"><a href="#用-lt-fieldset-gt-组合表单数据" class="headerlink" title="用 &lt;fieldset&gt;组合表单数据"></a>用 <code>&lt;fieldset&gt;</code>组合表单数据</h2><p><code>&lt;fieldset&gt;</code> 元素组合表单中的相关数据</p><p><code>&lt;legend&gt;</code> 元素为 <code>&lt;fieldset&gt;</code> 元素定义标题。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">from</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">legend</span>&gt;</span>Personal information:<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">        姓: <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"lastname"</span> <span class="attr">placeholder</span>=<span class="string">"姓"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        名：<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"firstname"</span> <span class="attr">placeholder</span>=<span class="string">"名"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="HTML-样式"><a href="#HTML-样式" class="headerlink" title="HTML 样式"></a>HTML 样式</h1><p>style 属性用于改变 HTML 元素的样式。</p><p>样式是 HTML 4 引入的，它是一种新的首选的改变 HTML 元素样式的方式。通过 HTML 样式，能够通过使用 style 属性直接将样式添加到 HTML 元素，或者间接地在独立的样式表中（CSS 文件）进行定义。</p><p>本部分通过CSS的行内引入方式来介绍几种样式，是从HTML向CSS的一个过渡。</p><h2 id="HTML-样式实例-背景颜色"><a href="#HTML-样式实例-背景颜色" class="headerlink" title="HTML 样式实例 - 背景颜色"></a>HTML 样式实例 - 背景颜色</h2><p>background-color 属性为元素定义了背景颜色。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">style</span>=<span class="string">"background-color:yellow"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">style</span>=<span class="string">"background-color:red"</span>&gt;</span>This is a heading<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"background-color:green"</span>&gt;</span>This is a paragraph.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="HTML-样式实例-字体、颜色和尺寸"><a href="#HTML-样式实例-字体、颜色和尺寸" class="headerlink" title="HTML 样式实例 - 字体、颜色和尺寸"></a>HTML 样式实例 - 字体、颜色和尺寸</h2><p>font-family：定义元素中文本的字体</p><p>color：定义元素中文本的颜色</p><p>font-size：定义元素中文本的字体尺寸</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">"font-family:verdana"</span>&gt;</span>A heading<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"font-family:arial;color:red;font-size:20px;"</span>&gt;</span>A paragraph.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="HTML-样式实例-文本对齐"><a href="#HTML-样式实例-文本对齐" class="headerlink" title="HTML 样式实例 - 文本对齐"></a>HTML 样式实例 - 文本对齐</h2><p>text-align 属性规定了元素中文本的水平对齐</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">"text-align:center"</span>&gt;</span>This is a heading<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>上面的标题相对于页面居中对齐。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="避免使用下面这些标签和属性"><a href="#避免使用下面这些标签和属性" class="headerlink" title="避免使用下面这些标签和属性"></a>避免使用下面这些标签和属性</h2><p>这些标签和属性，都被样式代替。</p><table><thead><tr><th>标签</th><th>描述</th></tr></thead><tbody><tr><td><code>&lt;center&gt;</code></td><td>定义居中的内容</td></tr><tr><td><code>&lt;font&gt; 和 &lt;basefont&gt;</code></td><td>定义HTML字体</td></tr><tr><td><code>&lt;s&gt; 和 &lt;strike&gt;</code></td><td>定义删除线文本</td></tr><tr><td><code>&lt;u&gt;</code></td><td>定义下划线文本</td></tr><tr><td>属性</td><td>描述</td></tr><tr><td>align</td><td>定义文本的对齐方式</td></tr><tr><td>bgcolor</td><td>定义背景颜色</td></tr><tr><td>color</td><td>定义文本颜色</td></tr></tbody></table><hr>]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>Web前端</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>Web前端目录</title>
    <url>/Web%E5%89%8D%E7%AB%AF/20190609-Web_index.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>本篇为Web前端目录。</p></blockquote><a id="more"></a><ul><li><a href="https://atlasnq.github.io/Web前端/20190609-Web_1.html" target="_blank" rel="noopener">概述</a></li></ul><hr><h1 id="HTML篇"><a href="#HTML篇" class="headerlink" title="HTML篇"></a>HTML篇</h1><ul><li><a href="https://atlasnq.github.io/HTML/20190610-HTML_1.html" target="_blank" rel="noopener">HTML</a></li></ul><hr><h1 id="CSS篇"><a href="#CSS篇" class="headerlink" title="CSS篇"></a>CSS篇</h1><ul><li>[CSS](<a href="https://atlasnq.github.io/CSS%E7%AC%94%E8%AE%B0/20190611-learning_CSS.html）" target="_blank" rel="noopener">https://atlasnq.github.io/CSS%E7%AC%94%E8%AE%B0/20190611-learning_CSS.html）</a></li></ul><hr><h1 id="JavaScript篇"><a href="#JavaScript篇" class="headerlink" title="JavaScript篇"></a>JavaScript篇</h1><ul><li><a href="https://atlasnq.github.io/JavaScript/20190612-JavaScript_1.html" target="_blank" rel="noopener">JavaScript</a></li></ul><hr><h1 id="jQuery篇"><a href="#jQuery篇" class="headerlink" title="jQuery篇"></a>jQuery篇</h1><ul><li><a href="https://atlasnq.github.io/jQuery/20190615-jQuery_1.html" target="_blank" rel="noopener">jQuery</a></li></ul><hr><h1 id="bootstrap篇"><a href="#bootstrap篇" class="headerlink" title="bootstrap篇"></a>bootstrap篇</h1><ul><li><a href="https://atlasnq.github.io/bootstrap/20190620-bootstrap_1.html" target="_blank" rel="noopener">bootstrap</a><ul><li>待补充</li></ul></li></ul><hr><h1 id="Django篇"><a href="#Django篇" class="headerlink" title="Django篇"></a>Django篇</h1><ul><li><a href="https://atlasnq.github.io/django/20190625-django_0.html#more" target="_blank" rel="noopener">Django学习目录</a></li></ul>]]></content>
      <categories>
        <category>Web前端</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>Web前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Web前端-概述</title>
    <url>/Web%E5%89%8D%E7%AB%AF/20190609-Web_1.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>本篇介绍Web前端基础。</p></blockquote><a id="more"></a><hr><p>通过这篇文章，你能了解到：</p><ul><li>与Web前端相关的基本概念<ul><li>C/S与B/S、TCP/IP、DNS、HTTP、组成文件</li></ul></li><li>我们访问网页时发生了什么</li><li>如何自定义一个Web框架</li></ul><h1 id="B-S与C-S"><a href="#B-S与C-S" class="headerlink" title="B/S与C/S"></a>B/S与C/S</h1><p>C/S结构是客户端服务器的意思，而现在的B/S(Browser/Server)结构是从C/S架构衍生出来的，browser相当于一个特殊的客户端。</p><h2 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h2><p>​ 开始的时候，C/S架构软件（即客户机/服务器模式）分为<strong>客户机和服务器两层</strong>：第一层是在客户机系统上结合了表示与业务逻辑，第二层是通过网络结合了数据库服务器。简单的说就是第一层是用户表示层，第二层是数据库层。</p><p>​ B/S是C/S架构的一种改进，可以说属于三层C/S架构：</p><p>客户端-服务器-数据库（三层C/S架构）</p><p><img src="/Web前端/20190609-Web_1/%E7%AC%AC%E4%B8%80%E7%A7%8D.png" alt="第一种"></p><p>流程:</p><p>1、客户端向服务器发起Http请求</p><p>2、服务器中的web服务层能够处理Http请求</p><p>3、服务器中的应用层部分调用业务逻辑，调用业务逻辑上的方法</p><p>4、如果有必要，服务器会和数据库进行数据交换. 然后将模版＋数据渲染成最终的html, 返送给客户端</p><p>以上也可以理解为：<strong>前后端不分离</strong></p><p><img src="/Web前端/20190609-Web_1/%E5%89%8D%E5%90%8E%E7%AB%AF%E4%B8%8D%E5%88%86%E7%A6%BB.png" alt="前后端不分离"></p><ul><li>模板位于后端，前端混有后端的代码，后端含有前端的后台</li><li>直接返回的 content-type 是html/text</li></ul><h2 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h2><p><strong>前后端分离</strong></p><p>客户端－web服务器－应用服务器－数据库</p><p><img src="/Web前端/20190609-Web_1/%E7%AC%AC%E4%BA%8C%E7%A7%8D.png" alt="第二种"></p><p>类似于第一种方法，只是将web服务和应用服务解耦</p><ol><li>客户端向web服务器发起Http请求</li><li>web服务能够处理Http请求，并且调用应用服务器暴露在外的RESTFUL接口</li><li>应用服务器的RESTFUL接口被调用，会执行对应的暴露方法.如果有必要和数据库进行数据交互，应用服务器会和数据库进行交互后，将json数据返回给web服务器</li><li>web服务器将模版＋数据组合渲染成html返回给客户端</li></ol><p>以上也可以理解为：<strong>前后端分离</strong></p><p><img src="/Web前端/20190609-Web_1/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB.png" alt="前后端分离"></p><ul><li>前端写前端的代码，后端写后端的代码，然后进行组合！</li><li>请求数据，可以按照restful，或者rpc规范。</li><li>返回数据通常是JSON格式</li><li>前后端分离后，应用服务器具有更强的扩展性。</li></ul><h3 id="api接口"><a href="#api接口" class="headerlink" title="api接口"></a>api接口</h3><p>为了在团队内部形成共识、防止个人习惯差异引起的混乱，我们需要找到一种大家都觉得很好的接口实现规范，而且这种规范能够让后端写的接口，用途一目了然，减少双方之间的合作成本。</p><ul><li>接口服务架构主要有：<strong>restful</strong>、<strong>rpc</strong>。</li></ul><h4 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h4><ul><li><p>Remote Procedure Call，远程过程调用/远程服务调用。</p></li><li><p>理解为：前端将需要调用的函数名与参数发到后端，后端执行相应的函数并返回数据。</p></li></ul><p>例如：</p><p>对于一个网址 <a href="http://www.xxx.com/api" target="_blank" rel="noopener">http://www.xxx.com/api</a> 发送请求 action=get_all_movies&amp;start=25</p><p>缺点：</p><ul><li>接口多了，对应函数名和参数就多了，前端在请求api接口时，就会比较难找，容易出现重复的接口。</li></ul><h4 id="RESTful"><a href="#RESTful" class="headerlink" title="RESTful"></a>RESTful</h4><ul><li><p>Representational State Transfer，表述性状态转移/ 资源状态转换.</p></li><li><p>核心：把后端所有的数据/文件都看成资源，那么接口请求数据，本质上来说就是对资源的操作了。</p></li><li><p>web项目中操作资源，无非就是增删查改。所以要求在地址栏中声明要操作的资源是什么。</p></li><li><p>然后通过<strong>HTTP请求动词</strong>来说明对资源进行哪一种操作.</p><p>POST <a href="http://www.xxx.com/api/movies/" target="_blank" rel="noopener">http://www.xxx.com/api/movies/</a> 添加电影</p><p>GET <a href="http://www.xxx.com/api/movies/" target="_blank" rel="noopener">http://www.xxx.com/api/movies/</a> 获取所有电影</p><p>DELETE <a href="http://www.xxx.com/api/movies/" target="_blank" rel="noopener">http://www.xxx.com/api/movies/</a><pk>删除1步电影</pk></p><p>GET <a href="http://www.xxx.com/api/movies/" target="_blank" rel="noopener">http://www.xxx.com/api/movies/</a><pk>获取一部电影</pk></p></li><li><p>对于API接口/后端来说，只需要执行如下过程：</p><ul><li>接收数据(反序列化) —&gt; 操作数据 —&gt; 响应数据(序列化)</li></ul></li><li><p>最后通过HTTP状态码来得到结果状态。</p></li></ul><p>当然对于把所有操作看作增删查改，有些绝对，比如说对于用户登录，我们需要在数据库中查找用户是否存在，如果存在则修改他的最后登录时间，这种混合型的该怎么处理呢？？？</p><p>推荐阅读 [RESTful API规范] 待补充！！！</p><h2 id="第三种"><a href="#第三种" class="headerlink" title="第三种"></a>第三种</h2><p><strong>负载均衡</strong></p><p>客户端－负载均衡器(Nginx)－中间服务器(Node)－应用服务器－数据库</p><p>这种模式一般用在有大量的用户，高并发的应用中。</p><p><img src="/Web前端/20190609-Web_1/%E7%AC%AC%E4%B8%89%E7%A7%8D.png" alt="第三种"></p><p>真正暴露在外的不是真正web服务器的地址，而是负载均衡器器的地址</p><ol><li><p>客户向负载均衡器发起Http请求</p></li><li><p>负载均衡器能够将客户端的Http请求均匀的转发给Node服务器集群</p></li><li><p>Node服务器接收到Http请求之后，能够对其进行解析，并且能够调用应用服务器暴露在外的RESTFUL接口</p></li><li><p>应用服务器的RESTFUL接口被调用，会执行对应的暴露方法.如果有必要和数据库进行数据交互，应用服务器会和数据库进行交互后，将json数据返回给Node</p></li><li><p>Node层将模版＋数据组合渲染成html返回反向代理服务器</p></li><li><p>反向代理服务器将对应html返回给客户端</p></li></ol><p>推荐阅读 <a href="https://www.cnblogs.com/xianyulaodi/p/5986748.html" target="_blank" rel="noopener">【原】作为前端需要了解的B/S架构</a></p><h2 id="第四种"><a href="#第四种" class="headerlink" title="第四种"></a>第四种</h2><p><strong>微服务</strong></p><p>负载均衡能解决的问题很多，但是还是不够好，比如说，只是某一个功能模块（假设是用户中心）被访问的次数特别频繁，我可不可以把这部分内容单独拿出去？用户中心的机器独立，给它单独的带宽，给他单独的服务器，给他单独的数据库？微服务随之产生！</p><ul><li>在微服务种通常使用RPC，同上面介绍的RPC。</li><li>RPC要解决两个问题：<ol><li><strong>解决分布式系统中，服务之间的调用问题。</strong></li><li><strong>远程调用时，要能够像本地调用一样方便，让调用者感知不到远程调用的逻辑。</strong></li></ol></li></ul><h1 id="网络连接"><a href="#网络连接" class="headerlink" title="网络连接"></a>网络连接</h1><ul><li><p>有了网络连接才能在互联网上发送和接收数据。</p></li><li><p>对于概念需要了解OSI七层模型与TCP/IP协议簇。</p></li><li><p>实际使用socket 套接字，应用层和传输层之间的抽象层，一个接口。</p></li></ul><h1 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h1><blockquote><p><strong>域名系统</strong>（英语：<strong>D</strong>omain <strong>N</strong>ame <strong>S</strong>ystem，缩写：<strong>DNS</strong>）是<a href="https://zh.wikipedia.org/wiki/互联网" target="_blank" rel="noopener">互联网</a>的一项服务。它作为将<a href="https://zh.wikipedia.org/wiki/域名" target="_blank" rel="noopener">域名</a>和<a href="https://zh.wikipedia.org/wiki/IP地址" target="_blank" rel="noopener">IP地址</a>相互<a href="https://zh.wikipedia.org/wiki/映射" target="_blank" rel="noopener">映射</a>的一个<a href="https://zh.wikipedia.org/wiki/分布式数据库" target="_blank" rel="noopener">分布式数据库</a>，能够使人更方便地访问<a href="https://zh.wikipedia.org/wiki/互联网" target="_blank" rel="noopener">互联网</a>。</p></blockquote><p>​ 域名系统服务器像是一本网站通讯录。当你在浏览器内输入一个网址时，浏览器获取网页之前将会查看域名系统（域名解析）。浏览器需要找到存放你想要的网页的服务器，才能发送 HTTP 请求到正确的地方。</p><h2 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h2><p>将域名解析成IP</p><p>DNS查询有两种方式：<strong>递归</strong>和<strong>迭代</strong>。</p><h3 id="递归解析"><a href="#递归解析" class="headerlink" title="递归解析"></a>递归解析</h3><p>​ 如果客户端配置的本地名称服务器不能解析的话，则后面的查询全由本地名称服务器代替DNS客户端进行查询，直到本地名称服务器从权威名称服务器得到了正确的解析结果，然后由本地名称服务器告诉DNS客户端查询的结果。</p><p><img src="/Web前端/20190609-Web_1/%E9%80%92%E5%BD%92%E8%A7%A3%E6%9E%90.png" alt="迭代解析"></p><h3 id="迭代解析"><a href="#迭代解析" class="headerlink" title="迭代解析"></a>迭代解析</h3><p>​ 递归是用户只向<strong>本地DNS服务器</strong>发出请求，然后等待肯定或否定答案。而迭代是本地服务器向<strong>根DNS服务器</strong>发出请求，而<strong>根DNS服务器</strong>只是给出下一级DNS服务器的地址，然后本地DNS服务器再向下一级DNS发送查询请求直至得到最终答案。</p><p>​ DNS服务器之间一般采用迭代查询方式。</p><p><img src="/Web前端/20190609-Web_1/%E8%BF%AD%E4%BB%A3%E8%A7%A3%E6%9E%90.png" alt="迭代解析"></p><h1 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h1><h2 id="协议简介"><a href="#协议简介" class="headerlink" title="协议简介"></a>协议简介</h2><p>超文本传输协议（英文：Hyper Text Transfer Protocol，HTTP）是一种用于分布式、协作式和超媒体信息系统的应用层协议。HTTP是万维网的数据通信的基础。HTTP有很多应用，但最著名的是用于web浏览器和web服务器之间的双工通信。</p><p>HTTP 1.1 广泛使用，HTTP/2标准未来将取代它。</p><h2 id="协议概述"><a href="#协议概述" class="headerlink" title="协议概述"></a>协议概述</h2><p>HTTP是一个客户端终端（用户）和服务器端（网站）<strong>请求和应答的标准</strong>（TCP）。</p><p>客户端：用户代理程序（user agent）</p><p>应答的服务器：源服务器（origin server），存储着一些资源，比如HTML文件和图像。</p><p>中间层：在用户代理和源服务器中间可能存在多个“中间层”，比如代理服务器、网关或者隧道（tunnel）。</p><h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><p>前面提到HTTP规定了客户端与服务器之间的请求与应答，那么这两个标准具体是怎样的呢？</p><h3 id="请求格式"><a href="#请求格式" class="headerlink" title="请求格式"></a>请求格式</h3><p><strong>请求 = 请求行 + 请求头部 + 请求数据</strong>（body）</p><p><img src="/Web前端/20190609-Web_1/%E8%AF%B7%E6%B1%82%E6%A0%BC%E5%BC%8F.jpg" alt="请求格式"></p><p>打开chrome浏览器，点击键盘F12，然后点击 Network， 网址栏中输入 <code>http://www.hao123.com/</code>，然后在下面的Name中点击 <code>www.hao123.com</code> 就可以看到Genneral、Request Headers 与 Response Headers。</p><p>Genneral中记录了 请求的URL、请求方式、状态码、服务器地址</p><p>Request Headers 中 点击 view source （注：只有http协议才有，https没有）</p><ul><li>从中结合请求格式我们可以看到第一行（请求行）为：<code>GET / HTTP/1.1</code> 采用get请求，访问根目录，采用的协议为HTTP/1.1。</li><li>剩下的为请求头部，由于是get请求，所以是没有请求数据的。</li></ul><h3 id="响应格式"><a href="#响应格式" class="headerlink" title="响应格式"></a>响应格式</h3><p>响应 = 状态行 + 响应头部 + 响应正文（body）</p><p><img src="/Web前端/20190609-Web_1/%E5%93%8D%E5%BA%94%E6%A0%BC%E5%BC%8F.jpg" alt="响应格式"></p><p>请求报文：请求行，请求头部，请求数据 、空行</p><p>响应：状态行（状态代码）、响应头部、响应数据 、空行</p><h2 id="请求方式"><a href="#请求方式" class="headerlink" title="请求方式"></a>请求方式</h2><p>HTTP/1.1协议中共定义了八种方法（也叫“动作”）来以不同方式操作指定的资源：</p><h3 id="get-（获取）"><a href="#get-（获取）" class="headerlink" title="get  （获取）"></a>get （获取）</h3><p>向指定的资源发出“显示”请求。使用GET方法应该只用在读取数据，而不应当被用于产生“副作用”的操作中，例如在Web Application中。其中一个原因是GET可能会被网络蜘蛛等随意访问。</p><p>get请求会有 Query String Parameters 它是在请求行内。</p><p>什么情况下，浏览器发送get请求？</p><ul><li>直接在浏览器地址栏输入某个地址</li><li>点击链接</li><li>表单默认的提交方式</li></ul><h3 id="HEAD"><a href="#HEAD" class="headerlink" title="HEAD"></a>HEAD</h3><p>与GET方法一样，都是向服务器发出指定资源的请求。只不过服务器将不传回资源的本文部分。它的好处在于，使用这个方法可以在不必传输全部内容的情况下，就可以<strong>获取</strong>其中“关于该资源的信息”（<strong>元信息</strong>或称<strong>元数据</strong>）。</p><h3 id="POST-（提交）"><a href="#POST-（提交）" class="headerlink" title="POST （提交）"></a>POST （提交）</h3><p>向指定资源<strong>提交数据</strong>，请求服务器进行处理（例如提交表单或者上传文件）。数据被包含在<strong>请求体</strong>中。这个请求可能会创建新的资源或修改现有资源，或二者皆有。格式一般都是<code>json</code>格式</p><p>什么情况下，浏览器会发送post请求？</p><ul><li>设置表单method = “post”</li></ul><h3 id="PUT"><a href="#PUT" class="headerlink" title="PUT"></a>PUT</h3><p>向指定资源位置<strong>上传其最新内容</strong>。</p><h3 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h3><p>请求服务器<strong>删除Request-URI所标识的资源</strong>。</p><h3 id="TRACE"><a href="#TRACE" class="headerlink" title="TRACE"></a>TRACE</h3><p>回显服务器收到的请求，主要用于<strong>测试或诊断</strong>。</p><h3 id="OPTIONS"><a href="#OPTIONS" class="headerlink" title="OPTIONS"></a>OPTIONS</h3><p>这个方法可使服务器传回<strong>该资源所支持的所有HTTP请求方法</strong>。用 <code>*</code> 来代替资源名称，向Web服务器发送OPTIONS请求，可以<strong>测试服务器</strong>功能是否正常运作。</p><h3 id="CONNECT"><a href="#CONNECT" class="headerlink" title="CONNECT"></a>CONNECT</h3><p>HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。通常用于<strong>SSL加密服务器的链接</strong>（经由非加密的HTTP代理服务器）。</p><p>note:</p><ul><li><p>HTTP服务器至少应该实现GET和HEAD方法，其他方法都是可选的。当然，所有的方法支持的实现都应当匹配下述的方法各自的语义定义。</p></li><li><p>方法名称是区分大小写的。当某个请求所针对的资源不支持对应的请求方法的时候，服务器应当返回状态码405（Method Not Allowed），当服务器不认识或者不支持对应的请求方法的时候，应当返回状态码501（Not Implemented）。</p></li></ul><h2 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h2><p>状态代码的第一个数字代表当前响应的类型：</p><ul><li>1xx消息——请求已被服务器接收，<strong>继续处理</strong></li><li>2xx成功——请求已<strong>成功</strong>被服务器接收、理解、并接受</li><li>3xx重定向——需要后续操作才能完成这一请求。 301临时重定向、302永久重定向</li><li>4xx请求错误——请求含有词法错误或者无法被执行。 404发送有误，服务器没有了、 403 权限不够 、405不支持该方法</li><li>5xx服务器错误——服务器在处理某个正确请求时发生错误。 500后台代码有误、501不支持对应的请求方法、502网络有问题。</li></ul><p>重定向的本质是:在响应头部中有 Location：url</p><h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><p>超文本传输协议（HTTP）的统一资源定位符将从因特网获取信息的五个基本元素包括在一个简单的地址中：</p><ul><li>传送协议。</li><li>层级URL<strong>标记符号</strong>（固定标记）(为<code>//</code>, 固定不变)</li><li>访问资源需要的凭证信息（可省略）</li><li>服务器。（通常为<strong>域名</strong>，有时为IP地址）</li><li>端口号。（以数字方式表示，若为http的默认值“80”可省略 ；https的默认值为443）</li><li>路径。（以“/”字符区别路径中的每一个目录名称）</li></ul><p>GET查询：GET模式的窗体参数（Query String Parmeters），以“?”字符为起点，每个参数以“&amp;”隔开，再以“=”分开参数名称与数据，通常以UTF8的URL编码，避开字符冲突的问题。query string的长度由浏览器和web服务器限制。</p><p>例如： <code>https://www.sogou.com/web?query=%E5%9B%9B%E5%85%AD%E7%BA%A7&amp;_ast=1566390027</code></p><ul><li><code>https</code> 是协议</li><li><code>//</code>是固定标记</li><li><code>www.sogou.com</code>为域名</li><li><code>web</code>是路径</li><li><code>?query=%E5%9B%9B%E5%85%AD%E7%BA%A7&amp;_ast=1566390027</code>是get查询的参数。它位于请求行中。</li><li><code>#</code> 是在页内跳转</li></ul><h2 id="HTTP协议是无状态的"><a href="#HTTP协议是无状态的" class="headerlink" title="HTTP协议是无状态的"></a>HTTP协议是无状态的</h2><p>http协议是无状态的，同一个客户端的这次请求和上次请求是没有对应关系，对http服务器来说，它并不知道这两个请求来自同一个客户端。 为了解决这个问题， Web程序引入了Cookie机制来维护状态.</p><h1 id="组成文件"><a href="#组成文件" class="headerlink" title="组成文件"></a>组成文件</h1><p>一个网页由许多文件组成，就像商店里不同的商品一样。这些文件有两种类型：</p><ul><li><strong>代码</strong> : 网页大体由 HTML、CSS、JavaScript组成，不过你会在后面看到不同的技术。</li><li><strong>资源</strong> : 这是其他组成网页的东西的集合，比如图像、音乐、视频、Word文档、PDF文件。</li></ul><h1 id="到底发生了什么？"><a href="#到底发生了什么？" class="headerlink" title="到底发生了什么？"></a>到底发生了什么？</h1><p>当你在浏览器里输入一个URL：</p><ol><li>浏览器向 <strong>DNS</strong> 服务器请求解析该 URL 中的域名所对应的 IP 地址;</li><li>解析出 IP 地址后，根据该 IP 地址和默认端口 80，和服务器<strong>建立TCP连接</strong>;</li><li>浏览器发出读取文件(URL 中域名后面部分对应的文件)的<strong>HTTP 请求</strong>，该请求报文作为 TCP 三次握手的第三个报文的数据发送给服务器;</li><li>服务器对浏览器请求作出<strong>响应</strong>，并把对应的 html 文本发送给浏览器;</li><li><strong>释放</strong> TCP连接;</li><li>浏览器<strong>解析</strong>html代码，并请求html代码中的资源</li></ol><h1 id="Python中自定义Web框架"><a href="#Python中自定义Web框架" class="headerlink" title="Python中自定义Web框架"></a>Python中自定义Web框架</h1><p>web框架的本质：<strong>socket服务端</strong>，而浏览器其实是一个socket客户端。</p><ul><li>功能： 3部分，待会儿细谈。</li></ul><p>http规范了请求与响应的格式，模仿这个格式可以简单的建立一个应用程序。</p><h2 id="版本一"><a href="#版本一" class="headerlink" title="版本一"></a>版本一</h2><p>这个版本让我们知道请求与响应是什么？</p><ul><li>符合格式的比特流</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">__author__ = <span class="string">'naqin'</span></span><br><span class="line">__date__ = <span class="string">'2019/8/21 9:06'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建socket对象</span></span><br><span class="line">sk = socket.socket()</span><br><span class="line"><span class="comment"># 绑定ip和端口</span></span><br><span class="line">sk.bind((<span class="string">'127.0.0.1'</span>,<span class="number">8848</span>))   <span class="comment"># 实际上是80</span></span><br><span class="line"><span class="comment"># 监听</span></span><br><span class="line">sk.listen()</span><br><span class="line"><span class="comment"># 等待连接</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    conn,addr = sk.accept()</span><br><span class="line">    data = conn.recv(<span class="number">1024</span>)</span><br><span class="line">    print(data)</span><br><span class="line">    <span class="comment"># conn.send(b'ok')</span></span><br><span class="line">    conn.send(<span class="string">b'HTTP/1.1 200 OK\r\n\r\n ok'</span>)</span><br><span class="line">    <span class="comment"># 没写响应头部，只有状态行和响应正文。</span></span><br><span class="line">    conn.close()</span><br></pre></td></tr></table></figure><p>回车符 <code>\r</code> , 换行符 <code>\n</code></p><figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">b'GET / HTTP/1.1</span><br><span class="line"><span class="symbol">\r</span><span class="symbol">\n</span>Host: 127.0.0.1:8848</span><br><span class="line"><span class="symbol">\r</span><span class="symbol">\n</span>Connection: keep-alive</span><br><span class="line"><span class="symbol">\r</span><span class="symbol">\n</span>Upgrade-Insecure-Requests: 1</span><br><span class="line"><span class="symbol">\r</span><span class="symbol">\n</span>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36</span><br><span class="line"><span class="symbol">\r</span><span class="symbol">\n</span>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</span><br><span class="line"><span class="symbol">\r</span><span class="symbol">\n</span>Accept-Encoding: gzip, deflate, br</span><br><span class="line"><span class="symbol">\r</span><span class="symbol">\n</span>Accept-Language: zh-CN,zh;q=0.9<span class="symbol">\r</span><span class="symbol">\n</span><span class="symbol">\r</span><span class="symbol">\n</span>'</span><br><span class="line"># get请求没有 body</span><br></pre></td></tr></table></figure><h2 id="版本二"><a href="#版本二" class="headerlink" title="版本二"></a>版本二</h2><p>上一个版本，我们明白了只要按照格式，就可以与客户端做一个简单的响应。</p><p>在这个版本中，我们完成了一个简单的服务端：</p><ol><li>使用socket收发消息</li><li>根据不同的路径生成不同的内容</li><li>返回动态的数据（字符串的替换 —&gt; 模板的渲染）（模板：html 渲染：字符串替换 ）</li></ol><p>在未来对框架的学习过程中，本质上我们也是学习的这三块内容。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">__author__ = <span class="string">'naqin'</span></span><br><span class="line">__date__ = <span class="string">'2019/8/21 9:06'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">sk = socket.socket()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绑定ip和端口</span></span><br><span class="line">sk.bind((<span class="string">'127.0.0.1'</span>,<span class="number">8848</span>))   <span class="comment"># 实际上是80</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 监听</span></span><br><span class="line">sk.listen()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数化处理请求</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'index.html'</span>,<span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">return</span> f.read()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span><span class="params">(url)</span>:</span></span><br><span class="line">    ret = <span class="string">f'欢迎回家！<span class="subst">&#123;url&#125;</span>'</span></span><br><span class="line">    <span class="keyword">return</span> ret.encode(<span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">root</span><span class="params">(url)</span>:</span></span><br><span class="line">    ret = <span class="string">f'根路径！<span class="subst">&#123;url&#125;</span>'</span></span><br><span class="line">    <span class="keyword">return</span> ret.encode(<span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timer</span><span class="params">(url)</span>:</span></span><br><span class="line">    now = time.time()</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'time.html'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        ret = f.read()</span><br><span class="line">    ret = ret.replace(<span class="string">'@@time@@'</span>,str(now))  <span class="comment"># 动态的数据</span></span><br><span class="line">    <span class="keyword">return</span> ret.encode(<span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 改变if判断，建立对应关系</span></span><br><span class="line">li = [</span><br><span class="line">    (<span class="string">'/'</span>,root),</span><br><span class="line">    (<span class="string">'/index'</span>,index),</span><br><span class="line">    (<span class="string">'/home'</span>,home),</span><br><span class="line">    (<span class="string">'/time'</span>,timer),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 规范化，我们在增加新的路径时，只需要增加函数和对应关系，其它逻辑可以不用管。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 等待连接</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    conn,addr = sk.accept()</span><br><span class="line">    data = conn.recv(<span class="number">1024</span>)</span><br><span class="line">    url = data.decode(<span class="string">'utf-8'</span>).split()[<span class="number">1</span>]</span><br><span class="line">    print(url)</span><br><span class="line">    <span class="comment"># conn.send(b'ok')</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> li:</span><br><span class="line">        <span class="keyword">if</span> i[<span class="number">0</span>] == url:</span><br><span class="line">            ret = i[<span class="number">1</span>](url)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        ret = <span class="string">'路径不存在'</span>.encode(<span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line">    conn.send(<span class="string">b'HTTP/1.1 200 OK\r\nContent-Type: text/html;charset=UTF-8\r\n\r\n'</span>)</span><br><span class="line">    conn.send(ret)</span><br><span class="line">    <span class="comment"># 没写响应头部</span></span><br><span class="line"></span><br><span class="line">    conn.close()</span><br></pre></td></tr></table></figure><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>Web依赖于协议，通过http协议规定客户端与服务端的请求与响应规则，我们可以简单的自制一个框架，它是由三部分构成：利用socket收发消息的收发；生成想要的数据；返回动态的数据（模板渲染）。</p>]]></content>
      <categories>
        <category>Web前端</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>Web前端</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL-索引</title>
    <url>/MySQL%E5%AD%A6%E4%B9%A0/20190528-MySQL_index.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>本篇介绍MySQL数据库的索引以及对前文进行补充，深化。</p></blockquote><a id="more"></a><ul><li><p>索引是帮助MySQL高效获得数据的<strong>数据结构</strong></p></li><li><p>可以用来快速查询数据库表中的特定记录。索引是提高数据库性能的重要方式。MySQL中，所有的数据类型都可以被索引。MySQL的索引包括普通索引、惟一性索引、全文索引、单列索引、多列索引和空间索引等。</p></li></ul><h1 id="索引概述"><a href="#索引概述" class="headerlink" title="索引概述"></a>索引概述</h1><h2 id="什么是索引"><a href="#什么是索引" class="headerlink" title="什么是索引"></a>什么是索引</h2><ul><li><p>索引是模式(schema)中的一个<strong>数据库对象</strong>，在数据库中用来加速对表的<strong>查询</strong>，它是帮助MySQL高效获得数据的<strong>数据结构</strong>。</p></li><li><p>数据本身之外，数据库还维护着一个满足特定查找算法的数据结构，这些数据结构以某种方式指向数据，这样就可以在数据结构的基础上实现<strong>高级查找算法</strong>，这种数据结构就是索引。</p></li><li><p>通过使用快速路径访问方法快速定位数据,减少了磁盘的I/O</p></li><li><p>与表独立存放，但不能独立存在，必须属于某个表</p></li><li><p>由数据库自动维护，表被删除时，该表上的索引自动被删除。</p></li><li><p>索引的作用类似于书的目录，几乎没有一本书没有目录，因 此几乎没有一张表没有索引。</p></li></ul><h2 id="索引优缺点"><a href="#索引优缺点" class="headerlink" title="索引优缺点"></a>索引优缺点</h2><ul><li><p>索引的优点是可以<strong>提高检索数据的速度</strong>，这是创建索引的最主要的原因；对于有依赖关系的<strong>子表</strong>和<strong>父表</strong>之间的联合查询时，可以提高查询速度；使用分组和排序子句进行数据查询时，同样可以显著节省查询中<strong>分组</strong>和<strong>排序</strong>的时间。</p></li><li><p>索引的缺点是<strong>创建和维护索引需要耗费时间</strong>，耗费时间的数量随着数据量的增加而增加；索引需要占用物理空间，每一个索引要占一定的物理空间；增加、删除和修改数据时，要动态的维护索引，造成数据的维护速度降低了。</p></li></ul><h2 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h2><ul><li>MySQL的索引包括普通索引、惟一性索引、全文索引、单列索引、多列索引和空间索引等。</li></ul><h2 id="索引的设计原则"><a href="#索引的设计原则" class="headerlink" title="索引的设计原则"></a>索引的设计原则</h2><p>1．选择惟一性索引</p><p>2．为经常需要排序、分组和联合操作的字段建立索引</p><p>3．为常作为查询条件的字段建立索引</p><p>4．限制索引的数目</p><p>5．尽量使用数据量少的索引</p><p>6．尽量使用前缀来索引</p><p>7．删除不再使用或者很少使用的索引</p><h1 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h1><p>创建索引是指在某个表的一列或多列上建立一个索引，以便提高对表的访问速度。创建索引有三种方式，这三种方式分别是创建表的时候创建索引、在已经存在的表上创建索引和使用<code>ALTER TABLE</code>语句来创建索引。</p><h2 id="创建表的时候创建索引"><a href="#创建表的时候创建索引" class="headerlink" title="创建表的时候创建索引"></a>创建表的时候创建索引</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE 表名 ( 属性名 数据类型 [完整性约束 条件],  </span><br><span class="line">                 属性名 数据类型 [完整性约束条件],  </span><br><span class="line">                 …  </span><br><span class="line">                 属性名 数据类型  </span><br><span class="line">                 [UNIQUE | FULLTEXT | SPATIAL] INDEX | KEY  </span><br><span class="line">                 [别名](属性名1 [(长度)] [ASC | DESC]) );</span><br></pre></td></tr></table></figure><h3 id="普通索引"><a href="#普通索引" class="headerlink" title="普通索引"></a>普通索引</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE t1( </span><br><span class="line">	ID int,</span><br><span class="line">    Name varchar(20),</span><br><span class="line">    Sex enum(&apos;男&apos;,&apos;女&apos;),</span><br><span class="line">    Index(ID)</span><br><span class="line">);</span><br><span class="line">show create table t1;</span><br><span class="line">explain select * from t1 where id = 1;</span><br></pre></td></tr></table></figure><p>结果如下：</p><table><thead><tr><th>id</th><th>select_type</th><th>table</th><th>type</th><th>possible_keys</th><th>key</th><th>key_len</th><th>ref</th><th>rows</th><th>Extra</th></tr></thead><tbody><tr><td>1</td><td>SIMPLE</td><td>t1</td><td>ref</td><td>ID</td><td>ID</td><td>5</td><td>const</td><td>1</td><td>NULL</td></tr></tbody></table><h3 id="唯一性索引"><a href="#唯一性索引" class="headerlink" title="唯一性索引"></a>唯一性索引</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table t2(</span><br><span class="line">	ID int ,</span><br><span class="line">    Name varchar(20),</span><br><span class="line">    Unique index t2_id(ID asc)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>疑问：为什么使用explain后发现没有命中索引呢？</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">explain select * from t2 where id = 1;</span><br></pre></td></tr></table></figure><p>结果如下：</p><table><thead><tr><th>id</th><th>select_type</th><th>table</th><th>type</th><th>p_k</th><th>key</th><th>key_len</th><th>ref</th><th>rows</th><th>Extra</th></tr></thead><tbody><tr><td>1</td><td>SIMPLE</td><td>NULL</td><td>NULL</td><td>NULL</td><td>NULL</td><td>NULL</td><td>NULL</td><td>NULL</td><td>Impossible WHERE noticed after reading const tablesNULL</td></tr></tbody></table><h3 id="全文索引"><a href="#全文索引" class="headerlink" title="全文索引"></a>全文索引</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE t3(</span><br><span class="line">	ID int,</span><br><span class="line">    Info varchar(20),</span><br><span class="line">    Fulltext index t3_info(Info)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="单列索引"><a href="#单列索引" class="headerlink" title="单列索引"></a>单列索引</h3><ul><li>给单个字段创建索引</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE t4(</span><br><span class="line">	ID int,</span><br><span class="line">    subject varchar(30),</span><br><span class="line">    Index t4_st(subject(10))</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="多列-联合-复合索引"><a href="#多列-联合-复合索引" class="headerlink" title="多列/联合/复合索引"></a>多列/联合/复合索引</h3><ul><li><p>给多个字段同时创建索引</p></li><li><p>在多个条件相连的 i 情况下，使用联合索引效率高于使用但单字段索引</p></li><li><p>where a=xxx and b = xxx;</p></li><li><p>a和b分别创建了索引，正常情况下只能命中一个，所以需要对a和b都创建索引 —— 联合索引。</p></li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE t5(</span><br><span class="line">	ID int,</span><br><span class="line">    Name varchar(20),</span><br><span class="line">    Sex char(4),</span><br><span class="line">    Index t5_ns(name,sex)    </span><br><span class="line">);</span><br><span class="line">或</span><br><span class="line">create index ind_mix on 表(字段1，字段2)</span><br></pre></td></tr></table></figure><ul><li><p>规则：</p><ul><li>使用联合/多列索引时一定要特别注意，只有使用了索引中的第一个字段时才会触发索引。 如果没有使用索引中的第一个字段，那么这个多列索引就不会起作用。</li><li>创建索引的顺序 id, email 条件中从哪一个开始出现了范围，索引就失效了。 例如 a,b,c,d where b=3 and c=4 and d= 5 and a&gt;10 从a开始就命不中索引了。</li><li>联合索引在使用的时候遵循<strong>最左前缀原则</strong></li></ul><p>​ 例如key index(a,n,c) 支持 a | a,b | a,b,c 3种组合进行查询，但不支持 b,c 进行查找，所以常常希望最左侧字段是常量引用时，索引就十分有效。</p><ol start="3"><li>联合索引中只有使用 and 能生效，使用or失效。</li></ol></li></ul><h2 id="在已经存在的表上创建索引"><a href="#在已经存在的表上创建索引" class="headerlink" title="在已经存在的表上创建索引"></a>在已经存在的表上创建索引</h2><p>1．创建普通索引</p><p>CREATE INDEX index_name ON table(column(length))</p><p>2．创建惟一性索引</p><p>CREATE UNIQUE INDEX indexName ON table(column(length))</p><p>3．创建全文索引</p><p>CREATE FULLTEXT INDEX index_content ON article(content)</p><p>4．创建单列索引</p><p>CREATE INDEX index3_name on index3 (name(10));</p><p>5．创建多列索引</p><p>CREATE INDEX index3_ns on index3 (name(10),sex);</p><h2 id="用ALTER-TABLE语句来创建索引"><a href="#用ALTER-TABLE语句来创建索引" class="headerlink" title="用ALTER TABLE语句来创建索引"></a>用ALTER TABLE语句来创建索引</h2><p>在已经存在的表上，可以通过ALTER TABLE语句直接为表上的一个或几个字段创建索引。基本形式如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER TABLE 表名 ADD [ UNIQUE | FULLTEXT | SPATIAL ] INDEX </span><br><span class="line">索引名（属性名 [ (长度) ] [ ASC | DESC]）;</span><br></pre></td></tr></table></figure><p>其中的参数与上面的两种方式的参数是一样的。</p><h2 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DROP INDEX 索引名 ON 表名 ;</span><br></pre></td></tr></table></figure><h1 id="EXPLAIN"><a href="#EXPLAIN" class="headerlink" title="EXPLAIN"></a>EXPLAIN</h1><table><thead><tr><th>id</th><th>select_type</th><th>table</th><th>type</th><th>possible_keys</th><th>key</th><th>key_len</th><th>ref</th><th>rows</th><th>Extra</th></tr></thead><tbody><tr><td>1</td><td>SIMPLE</td><td>t1</td><td>ref</td><td>ID</td><td>ID</td><td>5</td><td>const</td><td>1</td><td>NULL</td></tr></tbody></table><p>将上面得到的结果拿下来分析：</p><h2 id="id"><a href="#id" class="headerlink" title="id"></a>id</h2><p>查询的序列号</p><h2 id="select-type"><a href="#select-type" class="headerlink" title="select_type"></a>select_type</h2><p>查询的类型，主要是区别普通查询和联合查询、子查询之类的复杂查询</p><ul><li>SIMPLE：查询中不包含子查询或者UNION</li><li>查询中若包含任何复杂的子部分，最外层查询则被标记为：PRIMARY</li><li>在SELECT或WHERE列表中包含了子查询，该子查询被标记为：SUBQUERY</li></ul><h2 id="table"><a href="#table" class="headerlink" title="table"></a>table</h2><p>这是表的名字。</p><h2 id="type"><a href="#type" class="headerlink" title="type"></a>type</h2><p>连接操作的类型</p><ul><li><p>ALL: 扫描全表</p></li><li><p>index: 扫描全部索引树</p></li><li><p>range: 扫描部分索引，索引范围扫描，对索引的扫描开始于某一点，返回匹配值域的行，常见于between、&lt;、&gt;等的查询</p></li><li><p>ref: 使用非唯一索引或非唯一索引前缀进行的查找</p></li></ul><p>（eq_ref和const的区别：）</p><ul><li><p>eq_ref：唯一性索引扫描，对于每个索引键，表中只有一条记录与之匹配。常见于主键或唯一索引扫描</p></li><li><p>const, system: 单表中最多有一个匹配行，查询起来非常迅速，例如根据主键或唯一索引查询。system是const类型的特例，当查询- 的表只有一行的情况下， 使用system。</p></li><li><p>NULL: 不用访问表或者索引，直接就能得到结果，如select 1 from test where 1</p></li></ul><h2 id="possible-keys"><a href="#possible-keys" class="headerlink" title="possible_keys"></a>possible_keys</h2><p>可能可以利用的索引的名字</p><h2 id="Key"><a href="#Key" class="headerlink" title="Key"></a>Key</h2><p>它显示了MySQL实际使用的索引的名字。如果它为空（或NULL），则MySQL不使用索引。</p><h2 id="key-len"><a href="#key-len" class="headerlink" title="key_len"></a>key_len</h2><p>key_len显示的值为索引字段的最大可能长度，并非实际使用长度，即key_len是根据表定义计算而得，不是通过表内检索出的。</p><h2 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h2><p>它显示的是列的名字（或单词“const”），MySQL将根据这些列来选择行 （显示哪个字段或常数与key一起被使用）</p><h2 id="rows"><a href="#rows" class="headerlink" title="rows"></a>rows</h2><p>MySQL所认为的它在找到正确的结果之前必须扫描的记录数。显然，这里最理想的数字就是1</p><h2 id="Extra"><a href="#Extra" class="headerlink" title="Extra"></a>Extra</h2><p>这里可能出现许多不同的选项，其中大多数将对查询产生负面影响</p><ul><li>Using index：表示使用索引，如果只有 Using index，说明他没有查询到数据表，只用索引表就完成了这个查询，这个叫覆盖索引。</li><li>Using where：表示条件查询，如果不读取表的所有数据，或不是仅仅通过索引就可以获取所有需要的数据，则会出现 Using where。</li></ul><h1 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h1><p>explain中 Extra：Using index</p><p>覆盖索引（covering index）指一个查询语句的执行只需要从辅助索引中就可以得到查询记录，而不需要查询聚集索引中的记录。也可以称之为实现了<strong>索引覆盖。</strong></p><p>通俗来说就是：查一个索引不需要回表，就是覆盖索引</p><p>例如 ： select count(id) from 表;</p><p>当我们为 id 建立索引后就达到了覆盖所有的效果，只需要统计索引的数量，不需要回表，大大的提高了速度。</p><h1 id="索引合并"><a href="#索引合并" class="headerlink" title="索引合并"></a>索引合并</h1><p>创建的时候是分开创建的，用的时候临时合在一起。</p><p>Using union(ind_id, ind_email)</p><p>explain select * from s1 where id = 1000000 or email = ‘1121559571@qq’;</p><h1 id="慢日志"><a href="#慢日志" class="headerlink" title="慢日志"></a>慢日志</h1><p>直到MySQL有慢日志，通过配置文件开启，如果数据库在你手里，自己开。如果不在你手里，你也可以要求dba帮你开。</p><h1 id="7表联查速度慢怎么办？"><a href="#7表联查速度慢怎么办？" class="headerlink" title="7表联查速度慢怎么办？"></a>7表联查速度慢怎么办？</h1><ol><li>表结构<ol><li>尽量用固定长度的数据类型代替可变长数据类型</li><li>把固定长度的字段放在前面</li></ol></li><li>数据的角度上来说<ol><li>如果表中的数据越多 查询效率越慢<ol><li>列多 也慢 ： 垂直分表</li><li>行多：水平分表</li></ol></li></ol></li><li>从sql的角度上<ol><li>尽量把条件显得细致点儿， where条件多做筛选</li><li>多表的时候连表代替子查询</li><li>创建有效的索引，而规避无效的索引</li></ol></li><li>从配置角度上<ol><li>开启慢日志查询，确认具体的有问题的sql语句</li></ol></li><li>数据库<ol><li>读写分离（专门做写的服务器，专门做读的服务器，然后做同步。）</li><li>主库用来写，从库用来读</li><li>解决数据库读的瓶颈</li></ol></li></ol><h1 id="哪些SQL语句会真正利用索引"><a href="#哪些SQL语句会真正利用索引" class="headerlink" title="哪些SQL语句会真正利用索引"></a>哪些SQL语句会真正利用索引</h1><ul><li><p>B-Tree可被用于sql中对列做比较的表达式，如=, &gt;, &gt;=, &lt;, &lt;=及between操作</p></li><li><p>若like语句的条件是不以通配符开头的常量串，MySQL也会使用索引。</p><p>比如：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM tbl_name WHERE key_col LIKE &apos;Patrick%&apos;</span><br><span class="line">或 </span><br><span class="line">SELECT * FROM tbl_name WHERE key_col LIKE &apos;Pat%_ck%&apos;</span><br></pre></td></tr></table></figure><p>可以利用索引，而</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM tbl_name WHERE key_col LIKE &apos;%Patrick%&apos;（以通配符开头）</span><br><span class="line">和</span><br><span class="line">SELECT * FROM tbl_name WHERE key_col LIKE other_col（like条件不是常量串）</span><br></pre></td></tr></table></figure><p>无法利用索引。</p><p>对于形如LIKE ‘%string%’的sql语句，若通配符后面的string长度大于3，则MySQL会利用Turbo Boyer-Moore algorithm算法进行查找.</p></li><li><p>若已对名为col_name的列建了索引，则形如”col_name is null”的SQL会用到索引。</p></li><li><p>对于联合索引，sql条件中的最左前缀匹配字段会用到索引。</p></li><li><p>若sql语句中的where条件不只1个条件，则MySQL会进行Index Merge优化来缩小候选集</p></li></ul><h1 id="影响性能的因素"><a href="#影响性能的因素" class="headerlink" title="影响性能的因素"></a>影响性能的因素</h1><p>应用程序、查询、事务管理、数据库设计、数据分布、网络、操作系统、硬件</p><h1 id="系统优化"><a href="#系统优化" class="headerlink" title="系统优化"></a>系统优化</h1><h2 id="硬件优化"><a href="#硬件优化" class="headerlink" title="硬件优化"></a>硬件优化</h2><p>cpu 64位 一台机器8-16颗CPU</p><p>内存 96-128G 3-4个实例</p><p>硬盘：数量越多越好 性能：ssd（高并发业务） &gt; sas （普通业务）&gt;sata（线下业务）</p><p>raid 4块盘，性能 raid0 &gt; raid10 &gt; raid5 &gt; raid1</p><p>网卡：多块网卡bond</p><h2 id="软件优化"><a href="#软件优化" class="headerlink" title="软件优化"></a>软件优化</h2><p>操作系统：使用64位系统</p><p>软件：MySQL 编译优化</p><h1 id="服务优化"><a href="#服务优化" class="headerlink" title="服务优化"></a>服务优化</h1><p>MySQL配置原则</p><ul><li><p>配置合理的MySQL服务器，尽量在应用本身达到一个MySQL最合理的使用</p></li><li><p>针对 MyISAM 或 InnoDB 不同引擎进行不同定制性配置</p></li><li><p>针对不同的应用情况进行合理配置</p></li><li><p>针对 my.cnf 进行配置</p></li></ul><h1 id="应用优化"><a href="#应用优化" class="headerlink" title="应用优化"></a>应用优化</h1><ul><li>设计合理的数据表结构：适当的数据冗余</li><li>对数据表建立合适有效的数据库索引</li><li>数据查询：编写简洁高效的SQL语句</li></ul><h2 id="表结构设计原则"><a href="#表结构设计原则" class="headerlink" title="表结构设计原则"></a>表结构设计原则</h2><ul><li><p>选择合适的数据类型：如果能够定长尽量定长</p></li><li><p>使用 ENUM 而不是 VARCHAR,ENUM类型是非常快和紧凑的，在实际上，其保存的是 TINYINT，但其外表上显示为字符串。这样一来，用这个字段来做一些选项列表变得相当的完美 。</p></li><li><p>不要使用无法加索引的类型作为关键字段，比如 text类型</p></li><li><p>为了避免联表查询，有时候可以适当的数据冗余，比如邮箱、姓名这些不容易更改的数据</p></li><li><p>选择合适的表引擎，有时候 MyISAM 适合，有时候InnoDB适合</p></li><li><p>为保证查询性能，最好每个表都建立有 auto_increment 字段， 建立合适的数据库索引</p></li><li><p>最好给每个字段都设定 default 值</p></li></ul><h2 id="索引建立原则"><a href="#索引建立原则" class="headerlink" title="索引建立原则"></a>索引建立原则</h2><ul><li><p>一般针对数据分散的关键字进行建立索引，比如ID、QQ，<br>像性别、状态值等等建立索引没有意义字段唯一，最少，不可为null</p></li><li><p>对大数据量表建立聚集索引，避免更新操作带来的碎片。</p></li><li><p>尽量使用短索引，一般对int、char/varchar、date/time 等类型的字段建立索引</p></li><li><p>需要的时候建立联合索引，但是要注意查询SQL语句的编写</p></li><li><p>谨慎建立 unique 类型的索引（唯一索引）</p></li><li><p>大文本字段不建立为索引，如果要对大文本字段进行检索，可以考虑全文索引</p></li><li><p>频繁更新的列不适合建立索引</p></li><li><p>order by 字句中的字段，where 子句中字段，最常用的sql语句中字段，应建立索引。</p></li><li><p>唯一性约束，系统将默认为该字段建立索引。</p></li><li><p>对于只是做查询用的数据库索引越多越好，但对于在线实时系统建议控制在5个以内。</p></li><li><p>索引不仅能提高查询SQL性能，同时也可以提高带where字句的update，Delete SQL性能。</p></li><li><p>Decimal 类型字段不要单独建立为索引，但覆盖索引可以包含这些字段。</p></li><li><p>只有建立索引以后，表内的行才按照特地的顺序存储，按照需要可以是asc或desc方式。</p></li><li><p>如果索引由多个字段组成将最用来查询过滤的字段放在前面可能会有更好的性能。</p></li></ul><h2 id="编写高效的SQL"><a href="#编写高效的SQL" class="headerlink" title="编写高效的SQL"></a>编写高效的SQL</h2><ul><li><p>能够快速缩小结果集的 WHERE 条件写在前面，如果有恒量条件，也尽量放在前面</p></li><li><p>尽量避免使用 GROUP BY、DISTINCT 、OR、IN 等语句的使用，避免使用联表查询和子查询，因为将使执行效率大大下降</p></li><li><p>能够使用索引的字段尽量进行有效的合理排列，如果使用了联合索引，请注意提取字段的前后顺序</p></li><li><p>针对索引字段使用 &gt;, &gt;=, =, &lt;, &lt;=, IF NULL和BETWEEN 将会使用索引，如果对某个索引字段进行 LIKE 查询，使用 LIKE ‘%abc%’不能使用索引，使用 LIKE ‘abc%’ 将能够使用索引</p></li><li><p>如果在SQL里使用了MySQL部分自带函数，索引将失效，同时将无法使用 MySQL 的 Query Cache，比如 LEFT(), SUBSTR(), TO_DAYS()，DATE_FORMAT(), 等，如果使用了 OR 或 IN，索引也将失效</p></li><li><p>使用 Explain 语句来帮助改进我们的SQL语句</p></li><li><p>不要在where 子句中的“=”左边进行算术或表达式运算，否则系统将可能无法正确使用索引</p></li><li><p>尽量不要在where条件中使用函数，否则将不能使用索引</p></li><li><p>避免使用 select *, 只取需要的字段</p></li><li><p>对于大数据量的查询，尽量避免在SQL语句中使用order by 字句，避免额外的开销，替代为使用ADO.NET 来实现。</p></li><li><p>如果插入的数据量很大，用select into 替代 insert into 能带来更好的性能</p></li><li><p>采用连接操作，避免过多的子查询，产生的CPU和IO开销</p></li><li><p>只关心需要的表和满足条件的数据</p></li><li><p>适当使用临时表或表变量</p></li><li><p>对于连续的数值，使用between代替in</p></li><li><p>where 字句中尽量不要使用CASE条件</p></li><li><p>尽量不用触发器，特别是在大数据表上</p></li><li><p>更新触发器如果不是所有情况下都需要触发，应根据业务需要加上必要判断条件</p></li><li><p>使用union all 操作代替OR操作，注意此时需要注意一点查询条件可以使用聚集索引，如果是非聚集索引将起到相反的结果</p></li><li><p>当只要一行数据时使用 LIMIT 1</p></li><li><p>尽可能的使用 NOT NULL填充数据库</p></li><li><p>拆分大的 DELETE 或 INSERT 语句</p></li><li><p>批量提交SQL语句</p></li></ul><h1 id="架构优化"><a href="#架构优化" class="headerlink" title="架构优化"></a>架构优化</h1><ul><li><p>业务拆分：搜索功能，like ，前后都有%，一般不用MySQL数据库</p></li><li><p>业务拆分：某些应用使用nosql持久化存储，例如memcahcedb、redis、ttserver 比如粉丝关注、好友关系等；</p></li><li><p>数据库前端必须要加cache，例如memcached，用户登录，商品查询</p></li><li><p>动态数据静态化。整个文件静态化，页面片段静态化</p></li><li><p>数据库集群与读写分离；</p></li><li><p>单表超过2000万，拆库拆表，人工或自动拆分（登录、商品、订单等）</p></li></ul><h1 id="流程、制度、安全优化"><a href="#流程、制度、安全优化" class="headerlink" title="流程、制度、安全优化"></a>流程、制度、安全优化</h1><p>任何一次人为数据库记录的更新，都要走一个流程</p><ul><li><p>人的流程：开发–&gt;核心开发–&gt;运维或DBA</p></li><li><p>测试流程：内网测试–&gt;IDC测试–&gt;线上执行</p></li><li><p>客户端管理：phpmyadmin等</p></li></ul>]]></content>
      <categories>
        <category>MySQL学习</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>MySQL</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Python操作MySQL数据库</title>
    <url>/MySQL%E5%AD%A6%E4%B9%A0/20190528-Python_MySQL.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>本篇为使用python连接并操作MySQL数据库，涉及PyMySql模块。</p></blockquote><a id="more"></a><h1 id="安装PyMySql模块"><a href="#安装PyMySql模块" class="headerlink" title="安装PyMySql模块"></a>安装<code>PyMySql</code>模块</h1><h2 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h2><p><code>pip3 install pymsql</code></p><h2 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h2><p>点击<code>pycharm/settings/Project Iterpreter</code>右侧的加号，搜索<code>pymysql</code>然后点击 <code>Install Package</code></p><h1 id="PyMySql模块"><a href="#PyMySql模块" class="headerlink" title="PyMySql模块"></a><code>PyMySql</code>模块</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><a href="https://github.com/PyMySQL/PyMySQL" target="_blank" rel="noopener">PyMySQL</a> 是一个纯 Python 实现的 MySQL 客户端操作库，支持事务、存储过程、批量执行等。</p><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><h3 id="连接MySQL"><a href="#连接MySQL" class="headerlink" title="连接MySQL"></a>连接MySQL</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">conn = pymysql.Connection(host=<span class="string">'127.0.0.1'</span>, user=<span class="string">'root'</span>,password=<span class="string">'2296'</span>,database =<span class="string">'test'</span>,charset=<span class="string">'utf8'</span>)</span><br></pre></td></tr></table></figure><h3 id="获取游标"><a href="#获取游标" class="headerlink" title="获取游标"></a>获取游标</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cursor = connection.cursor()</span><br></pre></td></tr></table></figure><h3 id="执行SQL"><a href="#执行SQL" class="headerlink" title="执行SQL"></a>执行SQL</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cursor.execute(sql, args) 执行单条 SQL</span><br><span class="line">cursor.executemany(sql, args) 批量执行 SQL</span><br></pre></td></tr></table></figure><p>补充：</p><ol><li>INSERT、UPDATE、DELETE 等修改数据的语句需手动执行<code>connection.commit()</code>完成对数据修改的提交。</li><li>对于大段文字（包含单引号、双引号等特殊符号），我们将它放在<code>args</code> 中，而不是直接手动拼接在SQL语句中。</li></ol><p>简单的一个例子：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">conn = pymysql.Connection(host=<span class="string">'127.0.0.1'</span>, user=<span class="string">'root'</span>,password=<span class="string">'2296'</span>,database =<span class="string">'test'</span>,charset=<span class="string">'utf8'</span>)</span><br><span class="line">cur = conn.cursor()   <span class="comment"># 游标  数据库操作符</span></span><br><span class="line"><span class="comment"># sql = 'select %s,%s from employee'      # 只有值能拼接,不能拼字段名</span></span><br><span class="line">sql = <span class="string">'select emp_name,salary from employee'</span>      <span class="comment"># 只有值能拼接,不能拼字段名</span></span><br><span class="line"><span class="comment"># cur.execute(sql,('emp_name','salary'))</span></span><br><span class="line">cur.execute(sql)</span><br><span class="line">ret1 = cur.fetchone()</span><br><span class="line">ret2 = cur.fetchmany(<span class="number">2</span>)</span><br><span class="line">ret3 = cur.fetchall()</span><br><span class="line">print(ret1)</span><br><span class="line">print(ret2)</span><br><span class="line">print(ret3)</span><br><span class="line"><span class="comment"># 插入</span></span><br><span class="line"></span><br><span class="line">sql = <span class="string">'insert into employee(id, emp_name, sex, age, hire_date) values(%s,%s,%s,%s,%s )'</span></span><br><span class="line">cur.execute(sql,(<span class="number">20</span>,<span class="string">'小小'</span>,<span class="string">'male'</span>,<span class="number">88</span>,<span class="number">20181218</span>))   <span class="comment"># 传可迭代对象</span></span><br><span class="line">conn.commit()    <span class="comment"># 只要修改就得用它，不然保存不到硬盘上</span></span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h2 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 打开数据库连接</span></span><br><span class="line">db = pymysql.connect(host=<span class="string">"localhost"</span>,user=<span class="string">"testuser"</span>,password=<span class="string">"pw"</span>,database =<span class="string">'test'</span>,charset=<span class="string">'utf8'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 使用 cursor() 方法创建一个游标对象 cursor</span></span><br><span class="line">cursor = db.cursor()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 使用 execute() 方法执行 SQL，如果表存在则删除</span></span><br><span class="line">cursor.execute(<span class="string">"DROP TABLE IF EXISTS EMPLOYEE"</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 使用预处理语句创建表</span></span><br><span class="line">sql = <span class="string">"""CREATE TABLE EMPLOYEE (</span></span><br><span class="line"><span class="string">         FIRST_NAME  CHAR(20) NOT NULL,</span></span><br><span class="line"><span class="string">         LAST_NAME  CHAR(20),</span></span><br><span class="line"><span class="string">         AGE INT,  </span></span><br><span class="line"><span class="string">         SEX CHAR(1),</span></span><br><span class="line"><span class="string">         INCOME FLOAT )"""</span></span><br><span class="line"> </span><br><span class="line">cursor.execute(sql)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 关闭数据库连接</span></span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure><h2 id="操作数据"><a href="#操作数据" class="headerlink" title="操作数据"></a>操作数据</h2><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 打开数据库连接</span></span><br><span class="line">db = pymysql.connect(host=<span class="string">"localhost"</span>,user=<span class="string">"testuser"</span>,password=<span class="string">"pw"</span>,database =<span class="string">'test'</span>,charset=<span class="string">'utf8'</span>)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 使用cursor()方法获取操作游标 </span></span><br><span class="line">cursor = db.cursor()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># SQL 插入语句</span></span><br><span class="line">sql = <span class="string">"""INSERT INTO EMPLOYEE(FIRST_NAME,</span></span><br><span class="line"><span class="string">         LAST_NAME, AGE, SEX, INCOME)</span></span><br><span class="line"><span class="string">         VALUES (%s, %s, %s, %s, %s)"""</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">   <span class="comment"># 执行sql语句</span></span><br><span class="line">   cursor.execute(sql,(<span class="string">'Mac'</span>, <span class="string">'Mohan'</span>, <span class="number">20</span>, <span class="string">'M'</span>, <span class="number">2000</span>))</span><br><span class="line">   <span class="comment"># 提交到数据库执行</span></span><br><span class="line">   db.commit()</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">   <span class="comment"># 如果发生错误则回滚</span></span><br><span class="line">   db.rollback()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 关闭数据库连接</span></span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure><p>建议：将变量传给 <code>args</code> ，而不是手动拼接！</p><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 执行查询 SQL</span></span><br><span class="line">cursor.execute(<span class="string">'SELECT * FROM tables'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取单条数据</span></span><br><span class="line">cursor.fetchone()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取前N条数据</span></span><br><span class="line">cursor.fetchmany(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取所有数据</span></span><br><span class="line">cursor.fetchall()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这是一个只读属性，并返回执行execute()方法后影响的行数。</span></span><br><span class="line">rowcount</span><br></pre></td></tr></table></figure><h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 打开数据库连接</span></span><br><span class="line">db = pymysql.connect(host=<span class="string">"localhost"</span>,user=<span class="string">"testuser"</span>,password=<span class="string">"pw"</span>,database =<span class="string">'test'</span>,charset=<span class="string">'utf8'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 使用cursor()方法获取操作游标 </span></span><br><span class="line">cursor = db.cursor()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># SQL 更新语句</span></span><br><span class="line">sql = <span class="string">"UPDATE EMPLOYEE SET AGE = AGE + 1 WHERE SEX = '%c'"</span> % (<span class="string">'M'</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">   <span class="comment"># 执行SQL语句</span></span><br><span class="line">   cursor.execute(sql)</span><br><span class="line">   <span class="comment"># 提交到数据库执行</span></span><br><span class="line">   db.commit()</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">   <span class="comment"># 发生错误时回滚</span></span><br><span class="line">   db.rollback()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 关闭数据库连接</span></span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 打开数据库连接</span></span><br><span class="line">db = pymysql.connect(host=<span class="string">"localhost"</span>,user=<span class="string">"testuser"</span>,password=<span class="string">"pw"</span>,database =<span class="string">'test'</span>,charset=<span class="string">'utf8'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 使用cursor()方法获取操作游标 </span></span><br><span class="line">cursor = db.cursor()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># SQL 删除语句</span></span><br><span class="line">sql = <span class="string">"DELETE FROM EMPLOYEE WHERE AGE &gt; %s"</span> % (<span class="number">20</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">   <span class="comment"># 执行SQL语句</span></span><br><span class="line">   cursor.execute(sql)</span><br><span class="line">   <span class="comment"># 提交修改</span></span><br><span class="line">   db.commit()</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">   <span class="comment"># 发生错误时回滚</span></span><br><span class="line">   db.rollback()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 关闭连接</span></span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure><h2 id="执行事务"><a href="#执行事务" class="headerlink" title="执行事务"></a>执行事务</h2><p>事务具有4个属性：原子性、一致性、隔离性、持久性。这四个属性通常称为ACID特性。</p><ul><li>原子性（atomicity）。一个事务是一个不可分割的工作单位，事务中包括的诸操作要么都做，要么都不做。</li><li>一致性（consistency）。事务必须是使数据库从一个一致性状态变到另一个一致性状态。一致性与原子性是密切相关的。</li><li>隔离性（isolation）。一个事务的执行不能被其他事务干扰。即一个事务内部的操作及使用的数据对并发的其他事务是隔离的，并发执行的各个事务之间不能互相干扰。</li><li>持久性（durability）。持续性也称永久性（permanence），指一个事务一旦提交，它对数据库中数据的改变就应该是永久性的。接下来的其他操作或故障不应该对其有任何影响。</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除年龄大于20的人</span></span><br><span class="line">sql = <span class="string">"DELETE FROM EMPLOYEE WHERE AGE &gt; %s"</span> % (<span class="number">20</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">   <span class="comment"># 执行SQL语句</span></span><br><span class="line">   cursor.execute(sql)</span><br><span class="line">   <span class="comment"># 向数据库提交</span></span><br><span class="line">   db.commit()</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">   <span class="comment"># 发生错误时回滚</span></span><br><span class="line">   db.rollback()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>MySQL学习</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>python</tag>
        <tag>MySQL</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL-DML操作</title>
    <url>/MySQL%E5%AD%A6%E4%B9%A0/20190527-MySQL_DML.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>本篇为数据表的DML操作。</p></blockquote><a id="more"></a><h1 id="增（INSERT与REPLACE）"><a href="#增（INSERT与REPLACE）" class="headerlink" title="增（INSERT与REPLACE）"></a>增（INSERT与REPLACE）</h1><h2 id="INSERT-INTO"><a href="#INSERT-INTO" class="headerlink" title="INSERT INTO"></a>INSERT INTO</h2><h2 id="一次插入一行"><a href="#一次插入一行" class="headerlink" title="一次插入一行"></a>一次插入一行</h2><p><code>INSERT INTO table [(column [, column...])] VALUES(value [, value...]);</code></p><h2 id="一次插入多行"><a href="#一次插入多行" class="headerlink" title="一次插入多行"></a>一次插入多行</h2><p><code>INSERT INTO table [(column [, column...])] VALUES(value [, value...])，(value [, value...]);</code></p><h2 id="结合SELECT查询语句："><a href="#结合SELECT查询语句：" class="headerlink" title="结合SELECT查询语句："></a>结合SELECT查询语句：</h2><p><code>Insert into 表名[(字段列表1)] select (字段列表2) from 源表 where 条件表达式；</code></p><p>note: 如果不想在表名后列出列名，可以为那些无法指定的值插入null，</p><p>如果需要插入其他特殊字符，应该采用\转义字符做前缀。</p><h2 id="REPLACE"><a href="#REPLACE" class="headerlink" title="REPLACE"></a>REPLACE</h2><h2 id="语法格式1"><a href="#语法格式1" class="headerlink" title="语法格式1"></a>语法格式1</h2><p><code>replace into 表名 [（字段列表）] values （值列表）</code></p><h2 id="语法格式2"><a href="#语法格式2" class="headerlink" title="语法格式2"></a>语法格式2</h2><p><code>replace [into] 表名 set 字段1=值1, 字段2=值2;</code></p><h2 id="语法格式3"><a href="#语法格式3" class="headerlink" title="语法格式3"></a>语法格式3</h2><p><code>replace [into] 目标表名[(字段列表1)] select (字段列表2) from 源表 where 条件表达式;</code></p><p>replace语句的功能与insert语句的功能基本相同，不同之处在于：使用replace语句向表插入新记录时，如果新纪录的主键值或者唯一性约束的字段值与已有记录相同，则已有记录先被删除（注意：已有记录删除时也不能违背外键约束条件），然后再插入新记录。</p><p>使用replace的最大好处就是可以将<strong>delete和insert合二为一</strong>，形成一个原子操作，这样就无需将delete操作与insert操作置于事务中了。</p><h1 id="删（DELETE）"><a href="#删（DELETE）" class="headerlink" title="删（DELETE）"></a>删（DELETE）</h1><p><code>DELETE FROM TABLE table_name WHERE condition</code></p><p>从表中删除选出记录。</p><h1 id="改（UPDATE）"><a href="#改（UPDATE）" class="headerlink" title="改（UPDATE）"></a>改（UPDATE）</h1><p><code>UPDATE table SET column = value [, column = value] … [WHERE condition];</code></p><p>修改可以一次修改多行数据，修改的数据可用where子句限定，where子句里是一个条件表达式，只有<strong>符合该条件的行才会被修改</strong>。没有where子句意味着where字句的表达式值为true。</p><p>也可以同时修改多列，多列的修改中间采用逗号(,)隔开。</p><h1 id="查（SELECT）"><a href="#查（SELECT）" class="headerlink" title="查（SELECT）"></a>查（SELECT）</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT	selection_list				想要的列	                </span><br><span class="line">FROM	table_list					表（从何处选择行）	               		  	</span><br><span class="line">WHERE	primary_constraint			筛选行（行必须满足什么条件）					 </span><br><span class="line">GROUP BY	grouping_columns 		分组（怎样对结果分组）						   </span><br><span class="line">HAVING	secondary_constraint		对组进行过滤（行必须满足的第二条件）             </span><br><span class="line">ORDER BY	sorting_columns			排序（怎样对结果排序）	                   </span><br><span class="line">LIMIT	offset_start, row_count		结果限定</span><br></pre></td></tr></table></figure><p>select 语句做了什么？</p><p>循环记录找到想要的列</p><h2 id="AS"><a href="#AS" class="headerlink" title="AS"></a>AS</h2><p>定义字段的<strong>别名</strong></p><ul><li><p>改变列的标题头</p></li><li><p>用于表示计算结果的含义</p></li><li><p>作为列的别名</p></li><li><p>如果别名中使用特殊字符,或者是强制大小写敏感,或有空格时,都可以通过为别名添加加双引号实现。</p></li></ul><p><code>SELECT emp_name &quot;姓名&quot;, salary &quot;薪水&quot; FROM employee;</code></p><p><code>SELECT emp_name as &quot;姓名&quot;, salary as &quot;薪水&quot; FROM employee;</code></p><h2 id="查看所有用户"><a href="#查看所有用户" class="headerlink" title="查看所有用户"></a>查看所有用户</h2><p><code>SELECT User,Host,Password FROM mysql.user;</code></p><h2 id="四则运算"><a href="#四则运算" class="headerlink" title="四则运算"></a>四则运算</h2><p><code>SELECT last_name, salary, salary*12+100 FROM employees;</code></p><p><code>SELECT last_name, salary, salary*(12+100) FROM employees;</code></p><p>计算薪水</p><h2 id="去重（DISTINCT）"><a href="#去重（DISTINCT）" class="headerlink" title="去重（DISTINCT）"></a>去重（DISTINCT）</h2><p><code>SELECT DISTINCT 字段1,字段2,字段3 FROM 表名;</code></p><ul><li><p>使用DISTINCT关键字可从查询结果中清除重复行</p></li><li><p>DISTINCT的作用范围是后面<strong>所有字段的组合</strong></p><p>例如：上面这个组合：字段1,字段2,字段3</p></li></ul><h2 id="WHERE"><a href="#WHERE" class="headerlink" title="WHERE"></a>WHERE</h2><ul><li><p><strong>限制</strong>所选择的记录</p></li><li><p>使用WHERE子句限定返回的记录</p></li><li><p>WHERE子句在FROM 子句后</p><p><code>SELECT [DISTINCT] {*, column [alias], ...} FROM table–[WHEREcondition(s)];</code></p></li></ul><h2 id="筛选条件"><a href="#筛选条件" class="headerlink" title="筛选条件"></a>筛选条件</h2><p>行必须满足什么条件</p><h3 id="范围查询"><a href="#范围查询" class="headerlink" title="范围查询"></a>范围查询</h3><ul><li><p>= &lt; &lt;= &gt; &gt;= != &lt;&gt;</p></li><li><p>BETWEEN 1000 AND 1500; 闭区间（包含），左边小右边大（反过来不行）。</p></li><li><p>in (list) 匹配所有列出的值</p></li></ul><h3 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h3><h4 id="字段名-like-xxx"><a href="#字段名-like-xxx" class="headerlink" title="字段名 like xxx"></a><code>字段名 like xxx</code></h4><h5 id="“-”-百分号"><a href="#“-”-百分号" class="headerlink" title="“%” (百分号)"></a>“%” (百分号)</h5><p>代表任意长度（可为0）的字符串。</p><ul><li>a%: 开头</li><li>%ing：结尾</li><li>%a%：中间含有</li></ul><p>例如：</p><p><code>select * from employee where emp_name like &#39;e%&#39;;</code></p><p>匹配emplyee表中，员工姓名以e开头的所有信息。</p><h5 id="“-”-下划线"><a href="#“-”-下划线" class="headerlink" title="“_” (下划线)"></a>“_” (下划线)</h5><p>代表任意单个字符。</p><ul><li>a_ 可以匹配以a开头，长度为2的任意字符串。如ab。</li></ul><h4 id="REGEXP运算符"><a href="#REGEXP运算符" class="headerlink" title="REGEXP运算符"></a>REGEXP运算符</h4><p>（UNIX正则表达式）</p><ul><li>‘^a’</li><li>‘\d+’</li></ul><p>例如：</p><p><code>select * from employee where emp_name regexp &#39;^e&#39;;</code></p><p>匹配emplyee表中，员工姓名以e开头的所有信息。</p><h3 id="身份查询（is、is-not）"><a href="#身份查询（is、is-not）" class="headerlink" title="身份查询（is、is not）"></a>身份查询（is、is not）</h3><ul><li>is null</li><li>is not null</li></ul><h4 id="NULL值的使用"><a href="#NULL值的使用" class="headerlink" title="NULL值的使用"></a>NULL值的使用</h4><ul><li><p>空值是指<strong>不可用、未分配</strong>的值</p></li><li><p>空值<strong>不等于零或空格</strong></p></li><li><p>任意类型都可以支持空值</p></li><li><p>包括<strong>空值</strong>的任何<strong>算术表达式都等于空</strong></p></li><li><p>字符串和null进行连接运算，得到也是null</p></li></ul><h3 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h3><ul><li>and</li><li>or</li><li>not</li></ul><h3 id="运算优先级"><a href="#运算优先级" class="headerlink" title="运算优先级"></a>运算优先级</h3><p>所有的比较运算 &gt; NOT &gt; AND &gt; OR</p><h1 id="单表查询"><a href="#单表查询" class="headerlink" title="单表查询"></a>单表查询</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT	selection_list				想要的列	                </span><br><span class="line">FROM	table_list					得到表（从何处选择行）	            		  	</span><br><span class="line">WHERE	primary_constraint			筛选行（行必须满足什么条件）					 </span><br><span class="line">GROUP BY	grouping_columns 		分组（怎样对结果分组）						   </span><br><span class="line">HAVING	secondary_constraint		对组进行过滤（行必须满足的第二条件）             </span><br><span class="line">ORDER BY	sorting_columns			排序（怎样对结果排序）	                   </span><br><span class="line">LIMIT	offset_start, row_count		结果限定</span><br></pre></td></tr></table></figure><h2 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h2><p>常用函数</p><ul><li><p>字符串函数：<code>concat</code>,</p></li><li><p>数值函数</p></li><li><p>日期和时间函数</p></li><li><p>流程函数</p></li><li><p>其他常用函数</p></li><li><p>聚合函数/组和函数</p></li></ul><h3 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h3><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td><strong>CONCAT(str1,str2,…)</strong></td><td>连接字符串</td></tr><tr><td>CONCAT_WS(str,str1,str2,…)</td><td>使用str来连接str1，str2，…</td></tr><tr><td>INSERT(str, pos, len, newstr)</td><td>字符串str从第pos位置开始的len个字符替换为新串newstr</td></tr><tr><td>LOWER(str)</td><td>转成小写</td></tr><tr><td>UPPER(str)</td><td>转成大写</td></tr><tr><td>CHAR_LENGTH(str)</td><td>返回字符串str的长度</td></tr><tr><td>LENGTH(str)</td><td>返回字符串str的长度</td></tr><tr><td>LPAD(str, len, padstr)</td><td>返回字符串str，其左边由字符串padstr填补到len字符长度</td></tr><tr><td>RPAD(str, len, padstr)</td><td>返回字符串str，其右边由字符串padstr填补到len字符长度</td></tr><tr><td>TRIM(str)</td><td>去掉字符串str前缀和后缀的空格</td></tr><tr><td>REPEAT(str, count)</td><td>返回str重复count次的结果</td></tr><tr><td>REPLACE(str, from_str, to_str)</td><td>用字符串to_str替换字符串中所有的字符串from_str</td></tr><tr><td>SUBSTRING(str, pos, len)</td><td>返回从字符串str的pos位置起len个字符长度的字串</td></tr></tbody></table><h3 id="数值函数"><a href="#数值函数" class="headerlink" title="数值函数"></a>数值函数</h3><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>ABS(X)</td><td>返回X的绝对值</td></tr><tr><td>CEIL(X)</td><td>返回不小于X的最小整数值（向上取整）</td></tr><tr><td>FLOOR(X)</td><td>返回不大于X的最大整数值（向下取整）</td></tr><tr><td>MOD(X,Y)</td><td>返回x/y的模</td></tr><tr><td>RAND()</td><td>返回0~1之间的随机浮点数 v(0 &lt;= v &lt;= 1.0)</td></tr><tr><td>ROUND(X,Y)</td><td>返回参数X的四舍五入的有Y位小数的值</td></tr><tr><td>TRUNCATE(X,Y)</td><td>返回数字x截断为y位小数的结果</td></tr></tbody></table><h3 id="日期和时间函数"><a href="#日期和时间函数" class="headerlink" title="日期和时间函数"></a>日期和时间函数</h3><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>CURDATE()</td><td>返回当前日期</td></tr><tr><td>CURTIME()</td><td>返回当前时间</td></tr><tr><td><strong>NOW()</strong></td><td><strong>返回当前的日期和时间</strong></td></tr><tr><td>WEEK(date)</td><td>返回指定日期为一年中的第几周</td></tr><tr><td>YEAR(date)</td><td>返回日期的年份</td></tr><tr><td>HOUR(time)</td><td>返回time的小时值</td></tr><tr><td>MINUT(time)</td><td>返回time的分钟值</td></tr><tr><td>MONTHNAME(date)</td><td>返回date的月份名</td></tr><tr><td><strong>DATE_FORMAT(date, fmt)</strong></td><td><strong>返回字符串fmt格式化日期date值（%Y…）</strong></td></tr><tr><td>DATE_ADD(date, INTERVAL exp type)</td><td>返回一个日期或时间值加上一个时间间隔的时间值</td></tr><tr><td>DATEDIFF(expr, expr2)</td><td>返回起始时间expr和结果时间expr2之间的天数</td></tr></tbody></table><h3 id="流程函数"><a href="#流程函数" class="headerlink" title="流程函数"></a>流程函数</h3><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>IF(<em>expr1</em>, <em>expr2</em>, <em>expr3</em>)</td><td>如果<em>expr1</em> 是TRUE(expr1 &lt;&gt; 0 and expr1 is not null ), 则IF()的返回值为<em>expr2<em>；否则返回值则为</em>expr3</em>. （类似三元运算符）</td></tr><tr><td>IFNULL(<em>expr1</em>, <em>expr2</em>)</td><td>假如<em>expr1<em>不为NULL，则IFNULL()的返回值为</em>expr1<em>；否则其返回值为</em>expr2</em>.</td></tr><tr><td>CASE<br>WHEN [<em>value*] THEN *result</em><br>ELSE default<br>END</td><td>如果<em>value</em>是真，返回<em>result</em>；否则返回<em>default</em>。</td></tr><tr><td>CASE [expr]<br>WHEN [<em>value1*] THEN *result1</em><br>[ WHEN [<em>value2*] THEN *result2</em> ]<br>[ ELSE default ]<br>END</td><td>如果<em>expr</em>等于<em>value1</em>，返回<em>result1</em>，如果等于<em>value2</em>，返回<em>result2</em>，否则返回<em>default</em>。</td></tr></tbody></table><h4 id="CASE-WHEN剖析"><a href="#CASE-WHEN剖析" class="headerlink" title="CASE WHEN剖析"></a>CASE WHEN剖析</h4><h5 id="式一"><a href="#式一" class="headerlink" title="式一"></a>式一</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CASE </span><br><span class="line">WHEN &lt;判断表达式&gt; THEN &lt;表达式&gt;</span><br><span class="line">     WHEN &lt;判断表达式&gt; THEN &lt;表达式&gt; </span><br><span class="line">     WHEN &lt;判断表达式&gt; THEN &lt;表达式&gt;</span><br><span class="line">     ...</span><br><span class="line">     ELSE &lt;表达式&gt;</span><br><span class="line">END</span><br></pre></td></tr></table></figure><p>CASE表达式会对最初的WHEN字句中的&lt;判断表达式&gt;进行判断开始执行。</p><p>如果该表达式的真值为真（TRUE），那么就返回THEN字句中的表达式，CASE表达式到此为止。</p><p>如果结果不为真，那么就跳转到下一句WHEN字句的判断之中。</p><p>如果直到最后的WHEN字句为止返回结果都不为真，那么就会返回ELSE中的表达式，执行终止。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT </span><br><span class="line">CASE id</span><br><span class="line">WHEN id &gt; 2  THEN &apos;&gt;2&apos;</span><br><span class="line">WHEN id &lt;= 2  THEN &apos;&lt;=2&apos;</span><br><span class="line">ELSE</span><br><span class="line">	id</span><br><span class="line">END </span><br><span class="line">AS &apos;显示&apos;</span><br><span class="line">FROM tt1;</span><br><span class="line"></span><br><span class="line"># 为什么上面这样查询结果有问题</span><br><span class="line">SELECT </span><br><span class="line">CASE </span><br><span class="line">WHEN id &gt; 2  THEN &apos;&gt;2&apos;</span><br><span class="line">WHEN id &lt;= 2  THEN &apos;&lt;=2&apos;</span><br><span class="line">ELSE</span><br><span class="line">	id</span><br><span class="line">END </span><br><span class="line">AS &apos;显示&apos;</span><br><span class="line">FROM tt1;</span><br></pre></td></tr></table></figure><h5 id="式二"><a href="#式二" class="headerlink" title="式二"></a>式二</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CASE  case_expression</span><br><span class="line">   WHEN when_expression_1 THEN commands</span><br><span class="line">   WHEN when_expression_2 THEN commands</span><br><span class="line">   ...</span><br><span class="line">   ELSE commands</span><br><span class="line">END</span><br></pre></td></tr></table></figure><p><code>case_expression</code>可以是任何有效的表达式。</p><p>将<code>case_expression</code>的值与每个<code>WHEN</code>子句中的<code>when_expression</code>进行比较，</p><p>例如<code>when_expression_1</code>，<code>when_expression_2</code>等。</p><p><strong>如果<code>case_expression</code>和<code>when_expression_n</code>的值相等</strong>，则<strong>执行</strong>相应的<code>WHEN</code>分支中的命令(<code>commands</code>)。</p><p>这也就解释了为什么前面的查询会产生问题，原因在于 when_expression是布尔运算 它的结果是0 或 1，所以只有case_expression也就是id为0，1的时候才会执行相应的分支。</p><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="code">+--------+</span></span><br><span class="line">| 显示   |</span><br><span class="line"><span class="code">+--------+</span></span><br><span class="line">| &gt;2     |   # id = 0</span><br><span class="line">| &lt;=2    |   # id = 1</span><br><span class="line">| 2      |</span><br><span class="line">| 3      |</span><br><span class="line">| 4      |</span><br><span class="line">| 5      |</span><br><span class="line"><span class="code">+--------+</span></span><br></pre></td></tr></table></figure><h3 id="其他常用函数"><a href="#其他常用函数" class="headerlink" title="其他常用函数"></a>其他常用函数</h3><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>DATABASE()</td><td>返回当前数据库名</td></tr><tr><td>VERSION()</td><td>返回当前数据库版本</td></tr><tr><td>USER()</td><td>返回当前登录用户名</td></tr><tr><td>INET_ATON(ip)</td><td>返回IP地址的数字表示</td></tr><tr><td>INET_NTOA(ip)</td><td>返回数字代表的IP地址</td></tr><tr><td>PASSWORD(str)</td><td>返回字符串str的加密版本，加密是单向的（不可逆），适用于MySQL数据库的用户密码加密</td></tr><tr><td>MD5(str)</td><td>返回字符串str的MD5值，该值以32位十六进制数字形式返回</td></tr></tbody></table><h3 id="聚合函数-组和函数"><a href="#聚合函数-组和函数" class="headerlink" title="聚合函数/组和函数"></a>聚合函数/组和函数</h3><p>聚合函数对一组值进行运算，并返回单个值。也叫组合函数。</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>COUNT(*|列名)</td><td>统计行数</td></tr><tr><td>AVG(数值类型列名)</td><td>平均值</td></tr><tr><td>SUM (数值类型列名)</td><td>求和</td></tr><tr><td>MAX(列名)</td><td>最大值</td></tr><tr><td>MIN(列名)</td><td>最小值</td></tr></tbody></table><p>note：除了COUNT()以外，聚合函数都会<strong>忽略NULL值</strong>。</p><p>聚合函数不能在where中使用，不是所有函数都是聚合函数 例如year()可以放在where中。</p><h2 id="GROUP-BY"><a href="#GROUP-BY" class="headerlink" title="GROUP BY"></a>GROUP BY</h2><p>GROUP BY子句的真正作用在于与各种聚合函数配合使用。它用来对查询出来的数据进行分组。</p><p>分组的含义是：把<strong>该列具有相同值的多条记录当成一组记录处理</strong>，最后<strong>只输出一条记录</strong>。</p><p>一旦分组了，就不能对具体某一条数据进行操作了，永远都是考虑这个组怎么怎么样。</p><p>分组函数忽略空值。</p><p>结果集隐式按升序排列,如果需要改变排序方式可以使用Order by 子句。</p><p><code>SELECT column, group_function FROM table [WHERE condition] [GROUP BY group_by_expression] [ORDER BY column];</code></p><p>例1：</p><p><code>select * from employee group by sex;</code></p><p>根据性别分组：男的一组，女的一组。</p><ul><li><p>显示找到的组的第一个人信息，不能显示每一个人的信息。</p></li><li><p>根据某个重复率比较高的字段进行的，这个字段有多少种可能就分成多少个组</p></li></ul><p>例2:</p><p>如果没有使用分组，默认<strong>一整张表为一组</strong></p><p><code>select min(hire_date) from employee;</code></p><p>查所有人中最早入职的日期</p><h3 id="分组函数重要规则"><a href="#分组函数重要规则" class="headerlink" title="分组函数重要规则"></a><strong>分组函数</strong>重要规则</h3><p>如果使用了分组函数，或者使用GROUP BY 的查询：出现在SELECT列表中的字段，要么出现在组合函数里，要么出现在GROUP BY 子句中。</p><p>GROUP BY 子句的字段可以不出现在SELECT列表当中。</p><p>使用<strong>集合函数</strong>可以不使用GROUP BY子句，此时所有的查询结果作为一组。</p><h3 id="group-concat"><a href="#group-concat" class="headerlink" title="group_concat"></a><code>group_concat</code></h3><p>只用来做最终的显示，不能作为中间结果操作其他数据。</p><p>别胡乱使用。</p><h2 id="HAVING子句"><a href="#HAVING子句" class="headerlink" title="HAVING子句"></a>HAVING子句</h2><p>限定组的结果</p><p>HAVING子句用来对分组后的结果再进行条件过滤。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT column, group_function  FROM table  [WHERE condition]</span><br><span class="line">[GROUP BY group_by_expression]   </span><br><span class="line">[HAVING group_condition] </span><br><span class="line">[ORDER BYcolumn];</span><br></pre></td></tr></table></figure><p>不建议用在不分组的地方。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select id,emp_name  from employee having age&gt;20;  # 报错</span><br><span class="line"># ERROR 1054 (42S22): Unknown column &apos;age&apos; in &apos;having clause&apos;</span><br><span class="line">select id,emp_name,age from employee having age&gt;20;</span><br></pre></td></tr></table></figure><h3 id="HAVING与WHERE的区别"><a href="#HAVING与WHERE的区别" class="headerlink" title="HAVING与WHERE的区别"></a>HAVING与WHERE的区别</h3><p>WHERE是在分组前进行条件过滤， HAVING子句是在分组后进行条件过滤，WHERE子句中不能使用聚合函数，HAVING子句可以使用聚合函数。</p><h2 id="ORDER-BY"><a href="#ORDER-BY" class="headerlink" title="ORDER BY"></a>ORDER BY</h2><p>order by 字段 [asc/desc]</p><p>默认升序 asc,desc降序</p><p>根据年龄进行排序后， 根据薪资进行排序。</p><h2 id="LIMIT"><a href="#LIMIT" class="headerlink" title="LIMIT"></a>LIMIT</h2><p>MySQL中独有的。用来对结果进行限定。</p><h3 id="显示分页"><a href="#显示分页" class="headerlink" title="显示分页"></a>显示分页</h3><h4 id="写法一"><a href="#写法一" class="headerlink" title="写法一"></a>写法一</h4><p><code>limit m,n</code></p><p>从m+1开始，取n条</p><p>limit 0，6 表示从1开始取6条</p><p>limit 6，6 表示从1开始取6条</p><p>limit 12，6 表示从1开始取6条</p><h4 id="写法二"><a href="#写法二" class="headerlink" title="写法二"></a>写法二</h4><p>limit n offset m :</p><p>从m+1开始，取n条</p><p>和 <code>limit m,n</code> 一样。</p><h3 id="取前n名"><a href="#取前n名" class="headerlink" title="取前n名"></a>取前n名</h3><p><code>limit n</code></p><p>m默认为0</p><ul><li>跟order by 一起用</li></ul><p><code>select * from employee order by salary desc limit 3;</code></p><h3 id="LIMIT存在的问题"><a href="#LIMIT存在的问题" class="headerlink" title="LIMIT存在的问题"></a>LIMIT存在的问题</h3><p>它会把所有的数据都读出来</p><p>limit 1000000，6</p><p>它会把所有数据都读出来，这样才能从这个序号继续往后读。</p><h2 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select	想要的列	                 5</span><br><span class="line">from	表	               		  	1</span><br><span class="line">where	查询的行					  2</span><br><span class="line">group by 分组						    3</span><br><span class="line">having 对组进行过滤	                4  </span><br><span class="line">order by	排序	                    6</span><br><span class="line">limit	去一个区间;                    7</span><br><span class="line"></span><br><span class="line">5 1 2 3 4 6 7</span><br></pre></td></tr></table></figure><p>例如：重命名结果和顺序有关</p><p>select name as n from table where n = 1;</p><p>错误，因为 在where的时候 n 还没有重命名</p><h1 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h1><p>使用单个SELECT语句从多个表中取出相关的数据，通过多表之间的关系，构建相关数据的查询。</p><p>多表连接通常是建立在有相互关系的父子表上。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT	...	FROM	</span><br><span class="line">join_table	JOIN_TYPE	join_table	ON	join_condition	 # 这一行可看作一张新表</span><br><span class="line">WHERE	where_condition</span><br></pre></td></tr></table></figure><ul><li><p>join_table 参与连接的表</p></li><li><p>JOIN_TYPE 连接类型：内连接、外连接、交叉连接、自连接</p></li><li><p>join_condition 连接条件</p></li><li><p>where_condition where过滤条件</p></li></ul><h2 id="交叉连接-CROSS-JOIN"><a href="#交叉连接-CROSS-JOIN" class="headerlink" title="交叉连接 CROSS JOIN"></a>交叉连接 CROSS JOIN</h2><p>使用交叉连接来得到笛卡尔积（两张表记录的乘积）</p><p>示例：</p><p>下面是查询员工表与部门表的笛卡尔积：</p><p><code>SELECT * FROM employee, department;</code></p><p><code>SELECT * FROM employee CROSS JOIN department;</code></p><p>note: 结果按照表的左右顺序显示。</p><h2 id="内连接-INNER-JOIN"><a href="#内连接-INNER-JOIN" class="headerlink" title="内连接 INNER JOIN"></a>内连接 INNER JOIN</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT ... FROM </span><br><span class="line">join_table [INNER] JOIN join_table2	[ON join_condition]</span><br><span class="line">WHERE where_definition</span><br><span class="line"># 习惯上我们的 INNER是不省略的。</span><br></pre></td></tr></table></figure><p><strong>只列出这些连接表中与连接条件相匹配的数据行。</strong></p><h3 id="内连接分类"><a href="#内连接分类" class="headerlink" title="内连接分类"></a>内连接分类</h3><p>等值连接：在连接条件中使用等号（=）运算符来比较被连接列的列值。</p><p>非等值连接：在连接条件中使用等号运算符以外的其它比较运算符来比较被连接的列的列值。（&lt; &lt;= &gt; &gt;= &lt;&gt;）</p><p>自然连接：在连接条件中使用（=）运算符来比较被连接列的列值，但它使用选择列表指出查询结果集合中所包括的列，并删除连接表中的<strong>重复列</strong>。</p><p>例子：</p><p><code>select * from employee inner join department on dep_id = department.id;</code></p><p>没有人的部门以及不再任何部门的人是不会查出来的。</p><h2 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h2><p>（MySQL中没有全外连接FULL JOIN）</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT ... FROM </span><br><span class="line">join_table (LEFT|RIGHT) [OUTER] JOIN join_table2  [ON join_condition]</span><br><span class="line">WHERE where_definition</span><br><span class="line"># 习惯上 OUTER是省略的。</span><br></pre></td></tr></table></figure><p>在外连接中，某些不满足条件的列也会显示出来，也就是说，只限制其中一个表的行，而不限制另一个表的行。</p><h3 id="左外连接"><a href="#左外连接" class="headerlink" title="左外连接"></a>左外连接</h3><p>左连接，左边的表为主表，左边的表记录全部显示，如果没找到记录则补NULL。</p><h3 id="右外连接"><a href="#右外连接" class="headerlink" title="右外连接"></a>右外连接</h3><p>右连接，右边的表为主表，右边的表记录全部显示，如果没找到记录则补NULL。</p><h3 id="全外连接"><a href="#全外连接" class="headerlink" title="全外连接"></a>全外连接</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT ... FROM </span><br><span class="line">join_table LEFT JOIN join_table2  [ON join_condition] </span><br><span class="line">WHERE where_definition</span><br><span class="line">union</span><br><span class="line">SELECT ... FROM </span><br><span class="line">join_table RIGHT JOIN join_table2  [ON join_condition] </span><br><span class="line">WHERE where_definition</span><br></pre></td></tr></table></figure><p>note: 注意 join_table与join_table2的顺序不能变。</p><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p>1.查询所有员工以及部门信息。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from employee left join department on dep_id = department.id </span><br><span class="line">union </span><br><span class="line">select * from employee right join department on dep_id = department.id;</span><br></pre></td></tr></table></figure><p>结果如下</p><figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">+------+------------+--------+------+--------+------+--------------+</span><br><span class="line">|<span class="string"> id   </span>|<span class="string"> name       </span>|<span class="string"> sex    </span>|<span class="string"> age  </span>|<span class="string"> dep_id </span>|<span class="string"> id   </span>|<span class="string"> name         </span>|</span><br><span class="line">+------+------------+--------+------+--------+------+--------------+</span><br><span class="line">|<span class="string">    1 </span>|<span class="string"> 悟空       </span>|<span class="string"> male   </span>|<span class="string">   18 </span>|<span class="string">    200 </span>|<span class="string">  200 </span>|<span class="string"> 技术         </span>|</span><br><span class="line">|<span class="string">    5 </span>|<span class="string"> 沙僧       </span>|<span class="string"> male   </span>|<span class="string">   18 </span>|<span class="string">    200 </span>|<span class="string">  200 </span>|<span class="string"> 技术         </span>|</span><br><span class="line">|<span class="string">    2 </span>|<span class="string"> 猪八戒     </span>|<span class="string"> male   </span>|<span class="string">   48 </span>|<span class="string">    201 </span>|<span class="string">  201 </span>|<span class="string"> 人力资源     </span>|</span><br><span class="line">|<span class="string">    3 </span>|<span class="string"> 至尊宝     </span>|<span class="string"> male   </span>|<span class="string">   38 </span>|<span class="string">    201 </span>|<span class="string">  201 </span>|<span class="string"> 人力资源     </span>|</span><br><span class="line">|<span class="string">    4 </span>|<span class="string"> 安其拉     </span>|<span class="string"> female </span>|<span class="string">   28 </span>|<span class="string">    202 </span>|<span class="string">  202 </span>|<span class="string"> 销售         </span>|</span><br><span class="line">|<span class="string">    6 </span>|<span class="string"> 貂蝉       </span>|<span class="string"> female </span>|<span class="string">   18 </span>|<span class="string">    204 </span>|<span class="string"> NULL </span>|<span class="string"> NULL         </span>|</span><br><span class="line">|<span class="string"> NULL </span>|<span class="string"> NULL       </span>|<span class="string"> NULL   </span>|<span class="string"> NULL </span>|<span class="string">   NULL </span>|<span class="string">  203 </span>|<span class="string"> 运营         </span>|</span><br><span class="line">+------+------------+--------+------+--------+------+--------------+</span><br></pre></td></tr></table></figure><p>2.年龄大于25的员工的姓名以及员工所在的部门</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT e.name, d.name FROM employee AS e LEFT JOIN department AS d ON dep_id = d.id WHERE age &gt; 25;</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="code">+---------+</span>--------------+</span><br><span class="line">| name    | name         |</span><br><span class="line"><span class="code">+---------+</span>--------------+</span><br><span class="line">| 猪八戒  | 人力资源      |</span><br><span class="line">| 至尊宝  | 人力资源      |</span><br><span class="line">| 安其拉  | 销售          |</span><br><span class="line"><span class="code">+---------+</span>--------------+</span><br></pre></td></tr></table></figure><h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><p>某些情况下，当进行查询的时候，需要的条件是另外一个SELECT语句的结果，这个时候就要用到子查询，换句话说他们是可以拆分的。</p><p>为了给主查询（外部查询）提供数据而首先执行的查询（内部查询）被叫做子查询。</p><p>用于子查询的关键字主要包括 in、not in 、 = 、&lt;&gt;等。</p><p>一边来说。子查询的效率低于连接查询。表连接都可以用子查询替换，但反过来却不一定。</p><h3 id="特殊的子查询"><a href="#特殊的子查询" class="headerlink" title="特殊的子查询"></a>特殊的子查询</h3><p>例子：</p><p><code>select name as n,(select age from employee where name = n) from employee;</code></p><p>子查询可以放在条件中，还可以放在连表中，还可以放在select字段（要求查询的结果必须是一个单行单列的值）中。</p><h3 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h3><p>查询平均年龄在25岁以上的部门名</p><p>方法一：</p><ol><li>找到平均年龄&gt;=25的员工所在部门的dep_id</li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT dep_id,AVG(age) a  FROM employee GROUP BY dep_id HAVING AVG(age) &gt;= 25;</span><br></pre></td></tr></table></figure><ol start="2"><li>将得到的新表与部门表进行连接</li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT name,avg_name FROM department AS d INNER JOIN (SELECT dep_id,AVG(age) avg_name  FROM employee GROUP BY dep_id HAVING AVG(age) &gt;= 25) AS e ON  d.id = e.dep_id;</span><br></pre></td></tr></table></figure><p>以上，先子查询得出的表连接新的表。</p><p>方法二：</p><ol><li>得到部门中员工的平均年龄以及部门dep_id</li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT dep_id,AVG(age) AS avg_name  FROM employee GROUP BY dep_id;</span><br></pre></td></tr></table></figure><ol start="2"><li>将得到的新表与部门表连接，并选出平均年龄在25岁以上的部门名</li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT name,avg_name FROM department AS d INNER JOIN (SELECT dep_id,AVG(age) AS avg_name  FROM employee GROUP BY dep_id ) AS e ON  d.id = e.dep_id WHERE avg_name &gt;= 25;</span><br></pre></td></tr></table></figure><p>结果如下:</p><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="code">+--------------+</span>----------+</span><br><span class="line">| name         | avg<span class="emphasis">_name |</span></span><br><span class="line"><span class="emphasis">+--------------+----------+</span></span><br><span class="line"><span class="emphasis">| 人力资源     |  43.0000 |</span></span><br><span class="line"><span class="emphasis">| 销售         |  28.0000 |</span></span><br><span class="line"><span class="emphasis">+--------------+----------+</span></span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本篇介绍了有关数据表的DML操作：</p><p>增：INSERT INTO 、删：DELETE、改：UPDATE</p><p>单表查询：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT	selection_list				想要的列	                </span><br><span class="line">FROM	table_list					得到表（从何处选择行）	            		  	</span><br><span class="line">WHERE	primary_constraint			筛选行（行必须满足什么条件）		</span><br><span class="line"># 以上为条件查询</span><br><span class="line">GROUP BY	grouping_columns 		分组（怎样对结果分组）						   </span><br><span class="line">HAVING	secondary_constraint		对组进行过滤（行必须满足的第二条件）   </span><br><span class="line"># 以上为分组查询，在这里使用聚合函数来配合(count,sum,avg,max,min)</span><br><span class="line">ORDER BY	sorting_columns			排序（怎样对结果排序）	                   </span><br><span class="line">LIMIT	offset_start, row_count		结果限定          </span><br><span class="line"># 以上为查询排序</span><br></pre></td></tr></table></figure><p>多表查询：</p><p>CROSS JOIN（交叉连接）</p><p>INNER JOIN（内连接）</p><p>OUTER JOIN（外连接）</p><p>子查询：</p><p>一句话中有两个select，当我们可以使用多表查询就可以得出结果的时候使用表连接，因为子查询的效率不如多表查询的效率高。</p><p>小技巧：在cmd中，有时候无法从子句退出时语句输入 <code>\c</code></p><hr><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select book_id,a.name pname from app01_book_author inner join (select id,name from app01_Author) a on a.id =author_id;</span><br><span class="line">select b.pname,count(*) from app01_Book c inner join(select book_id,a.name pname from app01_book_author inner join (select id,name from app01_Author) a on a.id =author_id)b on b.book_id =id group by pname;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">select author_id from app01_book_author inner join (select id from app01_Book where title=&apos;跟金老板学开车&apos;) a on a.id=book_id;</span><br><span class="line">select name,id from app01_Author where id in (select author_id from app01_book_author inner join (select id from app01_Book where title=&apos;跟金老板学开车&apos;) a on a.id=book_id);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">select author_id, book_id from app01_book_author inner join (select id from app01_Book where title=&apos;跟金老板学开车&apos;) a on a.id=book_id;</span><br><span class="line"></span><br><span class="line">select b.author_id aid,title,price from app01_Book inner join (select author_id, book_id from app01_book_author inner join (select id from app01_Book where title=&apos;跟金老板学开车&apos;) a on a.id=book_id) b on b.book_id = id;</span><br><span class="line"></span><br><span class="line">select name,c.title,c.price from app01_Author inner join(select b.author_id aid,title,price from app01_Book inner join (select author_id, book_id from app01_book_author inner join (select id from app01_Book where title=&apos;跟金老板学开车&apos;) a on a.id=book_id) b on b.book_id = id) c on c.aid=id;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>MySQL学习</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>MySQL</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL-库表操作</title>
    <url>/MySQL%E5%AD%A6%E4%B9%A0/20190526-MySQL_table_action.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>本篇主要介绍了MySQL库表的基本操作以及常用数据类型。</p></blockquote><a id="more"></a><h1 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h1><p><strong>插件式存储引擎</strong>是MySQL数据库最重要的特性之一😄</p><p>数据的存储方式——存储引擎 engines，使用不同的存储引擎，数据是以不同的方式存储的</p><p><code>show engines;</code> 查看存储引擎</p><h2 id="innodb"><a href="#innodb" class="headerlink" title="innodb"></a>innodb</h2><p>innodb：MySQL5.6以上默认存储方式</p><ul><li>transactions <strong>支持事务</strong> 保证数据安全 数据的完整性而设置的概念。（先做内存级别的事情，整个事务完成了，才保存到硬盘）</li><li>row-level locking <strong>行级锁</strong>，行锁大幅度进步了多用户并发操纵的功能。可是InnoDB的行锁，只有通过索引条件检索数据，InnoDB才使用行级锁，否则，InnoDB将使用表锁。<ul><li>支持事务和行级锁是innodb的最大特点。</li></ul></li><li>foreign keys 外键</li><li>树 tree —— 加速查询 （树形结构（数据+树） + 表结构）</li></ul><h3 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h3><p>innodb在磁盘上存储为2个文件</p><p><code>show create table staff</code></p><p><code>staff.frm——frame</code>表结构</p><p><code>staff.ibd——innodb</code>引擎</p><h2 id="myisam"><a href="#myisam" class="headerlink" title="myisam"></a>myisam</h2><p>myisam ：MySQL5.5以下 默认的存储方式</p><ul><li>table-level 只支持表级锁</li><li>树 tree （平衡二叉树） —— 加速查询（树形结构 + 数据 + 表结构）</li></ul><h3 id="存储结构-1"><a href="#存储结构-1" class="headerlink" title="存储结构"></a>存储结构</h3><p>myisam在磁盘上存储为3个文件</p><p>创建一个以myisam为引擎的table</p><p><code>create table myisam_t(id int) engine=myisam;</code></p><p><code>myisam_t.frm</code>结构</p><p><code>myisam_t.MYD</code>数据</p><p><code>myisam_t.MYI</code>索引</p><h2 id="memory"><a href="#memory" class="headerlink" title="memory"></a>memory</h2><ul><li><p>memory：</p><ul><li>基于hash</li><li>热数据 以前用，现在用redis代替了。</li></ul></li></ul><p>1个文件</p><p><code>create table memory_t(id int) engine=memory;</code></p><p><code>memory_t.frm</code>结构</p><p>它存在内存中，关闭服务就会消失</p><h2 id="MySQL的工作流程"><a href="#MySQL的工作流程" class="headerlink" title="MySQL的工作流程"></a>MySQL的工作流程</h2><p><img src="/MySQL学习/20190526-MySQL_table_action/MySQL%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.jpg" alt="MySQL执行流程"></p><p>上图来自<a href="https://kknews.cc/zh-tw/other/r5nk36r.html" target="_blank" rel="noopener">掌握MySQL的逻辑结构</a>。</p><h1 id="SQL语句基础"><a href="#SQL语句基础" class="headerlink" title="SQL语句基础"></a>SQL语句基础</h1><h2 id="SQL简介"><a href="#SQL简介" class="headerlink" title="SQL简介"></a>SQL简介</h2><p>SQL是结构化查询语言(Structured Query Language)</p><p>它是在关系型数据库上执行数据操作、数据检索以及数据维护的标准语言。</p><h2 id="SQL语句分类"><a href="#SQL语句分类" class="headerlink" title="SQL语句分类"></a>SQL语句分类</h2><p>在MySql数据库中，SQL语句主要可以划分为以下几类：</p><p>DDL(Data Definition Language)数据<strong>定义</strong>语言</p><ul><li>定义对数据库对象(库、表、列、索引)的操作。</li><li>CREATE、DROP、ALTER、RENAME、 TRUNCATE等</li></ul><p>DML(Data Manipulation Language)数据<strong>操作</strong>语言</p><ul><li>定义对数据库记录的操作。</li><li>INSERT、DELETE、UPDATE、SELECT等</li></ul><p>DCL(Data Control Language)数据<strong>控制</strong>语言</p><ul><li>定义对数据库、表、字段、用户的访问权限和安全级别。</li><li>GRANT、REVOKE等</li></ul><p>Transaction Control事务控制</p><ul><li>COMMIT、ROLLBACK、SAVEPOINT等</li></ul><h2 id="识别符"><a href="#识别符" class="headerlink" title="识别符"></a>识别符</h2><p>数据库名、表名、索引名、列名和别名是识别符</p><p>操作系统的大小写敏感性决定了数据库名和表名的大小写敏感性：</p><ul><li>Windows操作系统大小写不敏感</li><li>Linux，unix系统大小写敏感</li></ul><p>列、索引、存储子程序和触发器名在任何平台上对大小写不敏感，列的别名也不敏感。</p><h1 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h1><h2 id="SHOW-DATABASES"><a href="#SHOW-DATABASES" class="headerlink" title="SHOW DATABASES"></a>SHOW DATABASES</h2><p><code>SHOW DATABASES [LIKE wild]</code></p><ul><li>列出在MySql服务器主机上的数据库。</li><li>如果使用LIKE wild不符，wild字符串可以是一个使用SQL的”%”和”_”通配符的字符串。</li></ul><p>MySql自带数据库：</p><ul><li>information_schema:主要存储了系统中的一些数据库对象信息：如用户表信息、列信息、权限信息、字符集信息、分区信息等。(数据字典表)。该数据库主要关注server运行过程中的<strong>元数据信息</strong>。</li><li>performance_schema:用于监控MySQL server在一个较低级别的运行过程中的资源消耗、资源等待等情况。该数据库主要关注数据库运行过程中的<strong>性能相关的数据</strong>。</li><li>mysql:存储了系统的用户权限信息及帮助信息。</li><li>Test:系统自动创建的测试数据库，任何用户都可以使用。</li></ul><h2 id="CREATE-DATABASE"><a href="#CREATE-DATABASE" class="headerlink" title="CREATE DATABASE"></a>CREATE DATABASE</h2><p><code>CREATE DATABASE [IF NOT EXISTS]数据库名;</code></p><ul><li>用给定的名字创建一个数据库，如果数据库已经存在，发生一个错误。</li><li>查看创建数据库：<code>SHOW CREATE DATABASE &lt;数据库名&gt;；</code></li></ul><p>note：CHARACTER SET 没有指定的话会依据配置文件。</p><h2 id="DROP-DATABASE"><a href="#DROP-DATABASE" class="headerlink" title="DROP DATABASE"></a>DROP DATABASE</h2><p><code>DROP DATABASE [IF EXISTS]数据库名;</code> 小心使用</p><ul><li>删除数据库中得所有表和数据库</li></ul><h2 id="使用USE-选用数据库"><a href="#使用USE-选用数据库" class="headerlink" title="使用USE 选用数据库"></a>使用USE 选用数据库</h2><p><code>USE 数据库名;</code></p><ul><li>把指定数据库作为默认(当前)数据库使用，用于后续语句。</li></ul><h2 id="SELECT"><a href="#SELECT" class="headerlink" title="SELECT"></a>SELECT</h2><h3 id="查看当前连接的数据库"><a href="#查看当前连接的数据库" class="headerlink" title="查看当前连接的数据库"></a>查看当前连接的数据库</h3><p><code>SELECT DATABASE();</code></p><h3 id="查看数据库版本"><a href="#查看数据库版本" class="headerlink" title="查看数据库版本"></a>查看数据库版本</h3><p><code>SELECT VERSION();</code></p><h3 id="查看当前用户"><a href="#查看当前用户" class="headerlink" title="查看当前用户"></a>查看当前用户</h3><p><code>SELECT USER();</code></p><h2 id="执行Linux命令"><a href="#执行Linux命令" class="headerlink" title="执行Linux命令"></a>执行Linux命令</h2><p><code>SYSTEM &lt;命令&gt;</code></p><h2 id="数据库对象"><a href="#数据库对象" class="headerlink" title="数据库对象"></a>数据库对象</h2><h3 id="数据库对象命名规则"><a href="#数据库对象命名规则" class="headerlink" title="数据库对象命名规则"></a>数据库对象命名规则</h3><ul><li>必须以字母开头</li><li>可包括数字和三个特殊字符（# _ $）</li><li>不要使用MySQL的保留字</li><li>同一Schema（架构）下的对象不能同名</li></ul><table><thead><tr><th>对象名称</th><th>描述</th></tr></thead><tbody><tr><td>表</td><td>基本的数据存储对象，以行和列的形式存在；列就是<strong>字段</strong>，行就是<strong>记录</strong></td></tr><tr><td>约束</td><td>执行数据校验，保证了数据完整性</td></tr><tr><td>数据字典</td><td>是系统表，存放数据库相关信息的表</td></tr><tr><td>视图</td><td>一个或者多个表数据的逻辑表示</td></tr><tr><td>索引</td><td>用于提高查询的性能</td></tr></tbody></table><h1 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h1><p>数据库中的表包括用户表和数据字典表（视图）两类</p><h2 id="用户表"><a href="#用户表" class="headerlink" title="用户表"></a>用户表</h2><p>被用户创建和维护的一些表，包括了用户自己的信息。</p><h2 id="数据字典表-视图"><a href="#数据字典表-视图" class="headerlink" title="数据字典表(视图)"></a>数据字典表(视图)</h2><p>被数据库系统创建和维护的一些表，包括了数据库的信息。</p><p>例如，由information_schema数据库负责维护：</p><table><thead><tr><th>数据字典表</th><th>描述</th></tr></thead><tbody><tr><td>tables</td><td>存放数据库里所有的数据表、以及每个表所在数据库</td></tr><tr><td>schemata</td><td>存放数据库里所有的数据库信息</td></tr><tr><td>views</td><td>存放数据库里所有的视图信息</td></tr><tr><td>columns</td><td>存放数据库里所有的列信息</td></tr><tr><td>triggers</td><td>存放数据库里所有的触发器</td></tr><tr><td>routines</td><td>存放数据库里所有存储过程和函数</td></tr><tr><td>key_column_usage</td><td>存放数据库所有的主外键</td></tr><tr><td>table_constraints</td><td>存放数据库全部约束</td></tr><tr><td>statistics</td><td>存放了数据表的索引</td></tr></tbody></table><h2 id="表的基本操作"><a href="#表的基本操作" class="headerlink" title="表的基本操作"></a>表的基本操作</h2><h3 id="创建-CREATE-TABLE"><a href="#创建-CREATE-TABLE" class="headerlink" title="创建 CREATE TABLE"></a>创建 CREATE TABLE</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> CREATE TABLE [schema.]table</span><br><span class="line">  (column datatype[DEFAULT expr] , …</span><br><span class="line">  ) ENGINE = 存储机制</span><br><span class="line"></span><br><span class="line"># 简单：</span><br><span class="line"> CREATE TABLE 表名(字段 数据类型(宽度) 约束,</span><br><span class="line">				字段 数据类型(宽度) 约束)</span><br></pre></td></tr></table></figure><ul><li>标准的建表（table）语法(列定义之间以英文逗号,隔开)</li><li>数据表的<strong>每行</strong>称为一条<strong>记录（record）</strong>，<strong>每一列</strong>称为一个<strong>字段（field）</strong>。</li></ul><p>主键列：唯一能够标识每条记录的列。</p><h3 id="删除-DROP、DELETE、TRUNCATE"><a href="#删除-DROP、DELETE、TRUNCATE" class="headerlink" title="删除 DROP、DELETE、TRUNCATE"></a>删除 DROP、DELETE、TRUNCATE</h3><h4 id="DROP-TABLE"><a href="#DROP-TABLE" class="headerlink" title="DROP TABLE"></a>DROP TABLE</h4><p><code>DROP TABLE [IF EXISTS] 表名；</code></p><p>删除指定的表</p><h4 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h4><p><code>DELETE TABLE table_name</code></p><p>清空一个表。</p><p>不是很彻底，例如它不会清空AUTO_INCREMENT。</p><h4 id="TRUNCATE"><a href="#TRUNCATE" class="headerlink" title="TRUNCATE"></a>TRUNCATE</h4><p><code>TRUNCATE TABLE table_name</code></p><p>完全清空一个表。</p><p>DDL语句</p><h4 id="DROP、TRUNCATE、DELETE比较"><a href="#DROP、TRUNCATE、DELETE比较" class="headerlink" title="DROP、TRUNCATE、DELETE比较"></a>DROP、TRUNCATE、DELETE比较</h4><ul><li>delete 删除数据，保留表结构，可以回滚，如果数据量大，很慢</li><li>truncate 删除所有数据，保留表结构，不可以回滚，一次全部删除所有数据，速度相对很快</li><li>drop 删除数据和表结构,删除速度最快。</li></ul><h3 id="查看表与表结构"><a href="#查看表与表结构" class="headerlink" title="查看表与表结构"></a>查看表与表结构</h3><h4 id="DESCRIBE"><a href="#DESCRIBE" class="headerlink" title="DESCRIBE"></a>DESCRIBE</h4><p><code>{DESCRIBE|DESC}表名[列名];</code></p><p>查看数据表中各列的信息</p><p><code>SHOW CREATE TABLE 表名</code></p><p>可以查看更全面的表定义信息</p><h4 id="SHOW"><a href="#SHOW" class="headerlink" title="SHOW"></a>SHOW</h4><p><code>SHOW TABLES[FROM 数据库名][LIKE wild];</code></p><p>显示当前数据库中已有的数据表的信息</p><h3 id="修改表-ALTER-TABLE"><a href="#修改表-ALTER-TABLE" class="headerlink" title="修改表 ALTER TABLE"></a>修改表 ALTER TABLE</h3><p>在实际中，基本不修改表，它是项目开始前决定好的。</p><h4 id="修改列类型-MODIFY"><a href="#修改列类型-MODIFY" class="headerlink" title="修改列类型 MODIFY"></a>修改列类型 MODIFY</h4><p><code>ALTER TABLE 表名 MODIFY 存在的字段 新的类型 （宽度） 约束;</code></p><p>MODIFY 除了名字不能改，其它都能改</p><h4 id="增加列-ADD"><a href="#增加列-ADD" class="headerlink" title="增加列 ADD"></a>增加列 ADD</h4><p><code>ALTER TABLE 表名 ADD 新字段 类型（宽度） 约束；</code></p><p>增加一个列并放在某个列的后面：</p><p><code>ALTER TABLE 表名 ADD 新字段 类型（宽度） 约束 AFTER 某个列;</code></p><p>增加一个列并放在首位：</p><p><code>ALTER TABLE 表名 ADD 新字段 类型（宽度） 约束 FIRST;</code></p><h4 id="删除列-DROP"><a href="#删除列-DROP" class="headerlink" title="删除列 DROP"></a>删除列 DROP</h4><p><code>ALTER TABLE 表名 DROP 列名;</code></p><h4 id="列改名-CHANGE"><a href="#列改名-CHANGE" class="headerlink" title="列改名 CHANGE"></a>列改名 CHANGE</h4><p><code>ALTER TABLE 表名 CHANGE 旧字段 新字段 类型（宽度） 约束;</code></p><p><code>ALTER TABLE 表名 CHANGE 旧字段 新字段 类型（宽度） 约束 after id;</code></p><p>CHANGE 啥也可以修改，如改名，修改属性等等。</p><h4 id="更改表名-RENAME"><a href="#更改表名-RENAME" class="headerlink" title="更改表名 RENAME"></a>更改表名 RENAME</h4><p><code>ALTER TABLE 表名 RENAME 新表名;</code></p><p><code>RENAME TABLE 表名 TO 新表名;</code></p><h3 id="复制表的结构"><a href="#复制表的结构" class="headerlink" title="复制表的结构"></a>复制表的结构</h3><p>复制一个表结构的实现方法有两种</p><ol><li><p>在create table语句的末尾添加like子句，可以将源表的<strong>表结构复制</strong>到新表中，语法格式如下。</p><p><code>create table 新表名 like 源表</code></p></li><li><p>在create table语句的末尾添加一个select语句，可以实现<strong>表结构的复制</strong>，甚至可以将<strong>源表的表记录拷贝</strong>到新表中。下面的语法格式将源表的表结构以及源表的所有记录拷贝到新表中。</p><p><code>create table 新表名 select * from 源表</code></p><p><code>INSERT INTO 新表名(部分字段) SELECT (部分字段) FROM 源表</code></p></li></ol><h2 id="表的操作-约束"><a href="#表的操作-约束" class="headerlink" title="表的操作-约束"></a>表的操作-约束</h2><p>约束是在表上强制执行的<strong>数据校验</strong>规则。</p><p>约束主要用于保证数据库的<strong>完整性</strong>。</p><p>当表中数据有<strong>相互依赖</strong>性时,可以保护相关的数据<strong>不被删除</strong>。</p><p>约束作为数据库对象，存放在系统表中，也有自己的名字。</p><p>创建约束的时机</p><ul><li>在建表的同时创建</li><li>建表后创建（修改表）</li></ul><p>可定义列级或表级约束</p><p>有单列约束和多列约束</p><h3 id="列级约束"><a href="#列级约束" class="headerlink" title="列级约束"></a>列级约束</h3><h4 id="定义列的同时定义约束"><a href="#定义列的同时定义约束" class="headerlink" title="定义列的同时定义约束"></a>定义列的同时定义约束</h4><p>定义列的同时定义约束</p><p><code>列定义 约束类型</code></p><p>NOT NULL和DEFAULT只存在<strong>列级约束</strong>。</p><p>PRIMARY KEY、UNIQUE、FOREIGN KEY同时存在<strong>表级约束和列级约束</strong>。</p><h3 id="表级约束"><a href="#表级约束" class="headerlink" title="表级约束"></a>表级约束</h3><h4 id="创建表的时候定义约束"><a href="#创建表的时候定义约束" class="headerlink" title="创建表的时候定义约束"></a>创建表的时候定义约束</h4><p><code>列定义...,</code></p><p><code>[CONSTRAINT 约束名] 约束类型(列名)</code></p><h4 id="创建完表后添加"><a href="#创建完表后添加" class="headerlink" title="创建完表后添加"></a>创建完表后添加</h4><p><code>ALTER TABLE 表名 ADD CONSTRAINT 约束名 约束类型(要约束的列名)</code></p><h4 id="约束名的取名规则"><a href="#约束名的取名规则" class="headerlink" title="约束名的取名规则"></a>约束名的取名规则</h4><p>推荐： <code>表名_列名_约束类型简写</code></p><h3 id="无符号（UNSIGNED）"><a href="#无符号（UNSIGNED）" class="headerlink" title="无符号（UNSIGNED）"></a>无符号（UNSIGNED）</h3><p>用于数值型</p><h3 id="非空约束-NOT-NULL"><a href="#非空约束-NOT-NULL" class="headerlink" title="非空约束(NOT NULL)"></a>非空约束(NOT NULL)</h3><p>确保字段值不允许为空，只能在字段级定义。</p><p>所有数据类型的值都可以是NULL。</p><p>空字符串不等于NULL。</p><p>0也不等于NULL。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE t1(id INT NOT NULL , name CHAR(12) NOT NULL , age TINYINT UNSIGNED);</span><br></pre></td></tr></table></figure><p>但是：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INSERT INTO t1(id,age) VALUES(1,20);</span><br></pre></td></tr></table></figure><p>虽然not null可还是写入了</p><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="code">+----+</span>------<span class="code">+------+</span></span><br><span class="line">| id | name | age  |</span><br><span class="line"><span class="code">+----+</span>------<span class="code">+------+</span></span><br><span class="line">|  1 |      |   20 |</span><br><span class="line"><span class="code">+----+</span>------<span class="code">+------+</span></span><br></pre></td></tr></table></figure><p>当你的not null不生效的时候，改变设置为严格模式</p><p><strong>严格模式</strong>的特点：</p><ul><li>不支持对not null字段插入null值</li><li>不支持对自增长字段插入值</li><li>不支持text字段有默认值</li></ul><p>存在两种情况：一种暂时，一种写入文件。</p><ul><li>直接在mysql中生效(重启失效):</li></ul><p><code>set sql_mode=&quot;STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION&quot;;</code></p><ul><li>配置文件添加(永久失效)：</li></ul><p><code>sql-mode=&quot;STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION&quot;</code></p><p>重复之前的操作，发现这次并没有成功</p><p><code>ERROR 1364 (HY000): Field &#39;name&#39; doesn&#39;t have a default value</code></p><h3 id="默认（DEFAULT）"><a href="#默认（DEFAULT）" class="headerlink" title="默认（DEFAULT）"></a>默认（DEFAULT）</h3><p>设置默认值</p><h3 id="唯一约束（UNIQUE）"><a href="#唯一约束（UNIQUE）" class="headerlink" title="唯一约束（UNIQUE）"></a>唯一约束（UNIQUE）</h3><ul><li><p>唯一性约束条件确保所在的<strong>字段</strong>或者<strong>字段组合</strong>不出现重复值</p><p>同一张表内可<strong>建多个唯一约束</strong></p><p>唯一约束可由多列组合而成</p><p>建唯一约束时MySQL会为之建立对应的索引。</p><p>如果不给唯一约束起名，该唯一约束默认与列名相同。</p></li><li><p>唯一性约束条件的字段允许出现多个NULL</p><p>数据与数据之间相等就是重复，null不能用等号判断</p><p>is null 判断等于 null</p></li><li><p><strong>联合唯一</strong></p><p>单独的看某一列是不唯一的，但搭配起来是唯一的。</p></li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE t2(</span><br><span class="line">    id INT PRIMARY KEY,</span><br><span class="line">    servername CHAR(12) NOT NULL,</span><br><span class="line">    ip CHAR(15),</span><br><span class="line">    port INT,</span><br><span class="line">    UNIQUE(ip, port)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">INSERT INTO t2 VALUES(1,&apos;输入法皮肤&apos;,&apos;10.10.3.1&apos;,8800);</span><br><span class="line">INSERT INTO t2 VALUES(2,&apos;mysql&apos;,&apos;10.10.2.4&apos;,3306);</span><br><span class="line">INSERT INTO t2 VALUES(3,&apos;mysql&apos;,&apos;10.10.2.5&apos;,3306);</span><br><span class="line">INSERT INTO t2 VALUES(4,&apos;输入法皮肤&apos;,&apos;10.10.3.1&apos;,8802);</span><br><span class="line">INSERT INTO t2 VALUES(5,&apos;redis&apos;,&apos;10.10.2.4&apos;,3306);</span><br></pre></td></tr></table></figure><ul><li>去掉字段的唯一约束：</li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student <span class="keyword">DROP</span> <span class="keyword">INDEX</span> class_id;</span><br></pre></td></tr></table></figure><h3 id="自增（AUTO-INCREMENT）"><a href="#自增（AUTO-INCREMENT）" class="headerlink" title="自增（AUTO_INCREMENT）"></a>自增（AUTO_INCREMENT）</h3><ul><li><p>只针对int</p></li><li><p>自带 not null</p></li><li><p>对字段进行设置unique/primarily key，且一张表只能有一列为自增。</p><p><code>ERROR 1075 (42000): Incorrect table definition; there can be only one auto column and it must be defined as a key</code></p><p>尝试： 那么foreign key呢？ 可以，但很鸡肋。</p></li><li><p>内部有记录 AUTO_INCREMENT = x 这个数字为插入时的id。</p></li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE t3(</span><br><span class="line">	id int UNIQUE AUTO_INCREMENT,</span><br><span class="line">	name CHAR(12) NOT NULL</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">INSERT INTO t3(name) VALUES(&apos;aa&apos;);</span><br><span class="line">INSERT INTO t3(name) VALUES(&apos;bb&apos;);</span><br><span class="line"></span><br><span class="line"># 第一种情况：</span><br><span class="line">DELETE FROM t3 where id = 2;</span><br><span class="line">INSERT INTO t3(name) VALUES(&apos;cc&apos;);</span><br><span class="line">	# cc 的 id 为 3  </span><br><span class="line"></span><br><span class="line"># 第二种情况：</span><br><span class="line">INSERT INTO t3(name) VALUES(&apos;bb&apos;);</span><br><span class="line">	# bb 的 id 为 4</span><br><span class="line"># 上面两种情况的原因为：新的id是AUTO_INCREMENT的值（使用SHOW CREATE TABLE t3可以看到AUTO_INCREMENT = 5 ）</span><br><span class="line"></span><br><span class="line">DELETE FROM t3; </span><br><span class="line"># 清空表 它不会清空AUTO_INCREMENT  所以不推荐用delete</span><br><span class="line"></span><br><span class="line"># 建议使用 它会清空AUTO_INCREMENT</span><br><span class="line">TRUNCATE TABLE t3;</span><br></pre></td></tr></table></figure><h3 id="主键约束（PRIMARY-KEY）"><a href="#主键约束（PRIMARY-KEY）" class="headerlink" title="主键约束（PRIMARY KEY）"></a>主键约束（PRIMARY KEY）</h3><ul><li><p>主键从功能上看相当于<strong>非空且唯一</strong></p><p>一个表中只允许<strong>一个主键</strong></p><p>主键是表中唯一确定一行数据的字段</p><p>主键字段可以是<strong>单字段</strong>或者是<strong>多字段</strong>的组合</p><p>当建立主键约束时，MySQL为主键创建对应的索引</p></li><li><p>联合主键（多字段组合）</p></li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE t4 (</span><br><span class="line">	id INT PRIMARY KEY,</span><br><span class="line">    name CHAR(14)</span><br><span class="line">);</span><br><span class="line">INSERT INTO t4(name) values(&apos;aa&apos;);</span><br><span class="line">INSERT INTO t4(name) values(&apos;bb&apos;);   # 报错</span><br><span class="line"># ERROR 1062 (23000): Duplicate entry &apos;0&apos; for key &apos;PRIMARY&apos;</span><br><span class="line"># 没有写默认为0</span><br><span class="line"></span><br><span class="line"># 联合主键</span><br><span class="line">CREATE TABLE t5(</span><br><span class="line">	family_name CHAR(4),</span><br><span class="line">    name CHAR(12),</span><br><span class="line">    PRIMARY KEY(family_name, name)</span><br><span class="line">);</span><br><span class="line">INSERT INTO t5 VALUES(&apos;a&apos;,&apos;tlas&apos;);</span><br><span class="line">INSERT INTO t5 VALUES(&apos;a&apos;,&apos;atlas&apos;);</span><br><span class="line">INSERT INTO t5 VALUES(&apos;ab&apos;,&apos;tlas&apos;);</span><br><span class="line"></span><br><span class="line"># 尽量不设置联合主键，设置联合唯一，和查询效率相关</span><br><span class="line">CREATE TABLE t6(</span><br><span class="line">	family_name CHAR(4) NOT NULL,</span><br><span class="line">    name CHAR(12) NOT NULL,</span><br><span class="line">    UNIQUE(family_name, name)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 结果为</span></span><br><span class="line">| t6    | <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`t6`</span> (</span><br><span class="line">  <span class="string">`family_name`</span> <span class="built_in">char</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">char</span>(<span class="number">12</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="string">`family_name`</span> (<span class="string">`family_name`</span>,<span class="string">`name`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 |</span><br></pre></td></tr></table></figure><h3 id="外键（FOREIGN-KEY）"><a href="#外键（FOREIGN-KEY）" class="headerlink" title="外键（FOREIGN KEY）"></a>外键（FOREIGN KEY）</h3><ul><li>外键关联的字段 必须是unique / primary key 。推荐设置<strong>主键</strong></li><li>级联更新 ON UPDATE CASCADE</li><li>级联删除 ON DELETE CASCADE</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE student(</span><br><span class="line">	id INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">    name CHAR(12) NOT NULL,</span><br><span class="line">    gender ENUM(&apos;男&apos;,&apos;女&apos;),</span><br><span class="line">    cid int </span><br><span class="line">);</span><br><span class="line">CREATE TABLE class(</span><br><span class="line">    id INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">	cname CHAR(12) NOT NULL UNIQUE,</span><br><span class="line">    start_date DATE,</span><br><span class="line">    period CHAR(12),</span><br><span class="line">    course CHAR(12),</span><br><span class="line">    teacher CHAR(12)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">INSERT INTO student VALUES(1, &apos;ATLAS&apos;, &apos;男&apos;, 1);</span><br><span class="line">INSERT INTO class VALUES(1, &apos;小红旗&apos;, 20190505, &apos;1 year&apos;, &apos;python&apos;,  &apos;小红&apos;);</span><br><span class="line"></span><br><span class="line"># 现在两个表是存在问题的，当class改变后，student会没有班级，所以需要一个新的约束</span><br><span class="line"># 删除student表，在重新创建</span><br><span class="line">CREATE TABLE student(</span><br><span class="line">	id INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">    name CHAR(12) NOT NULL,</span><br><span class="line">    gender ENUM(&apos;男&apos;,&apos;女&apos;),</span><br><span class="line">    cid int ,</span><br><span class="line">    FOREIGN KEY(cid) REFERENCES class(id)</span><br><span class="line">);</span><br><span class="line">INSERT INTO student VALUES(1, &apos;ATLAS&apos;, &apos;男&apos;, 1);</span><br><span class="line">#情况一： 增加学生时没有这个班级号会报错</span><br><span class="line">INSERT INTO student VALUES(2, &apos;小飞&apos;, &apos;女&apos;, 2);  # 报错</span><br><span class="line"># ERROR 1452 (23000): Cannot add or update a child row: a foreign key constraint fails</span><br><span class="line"># 因为班级表里面还没有 2 班</span><br><span class="line">#情况二： 删除班级中的1班</span><br><span class="line"></span><br><span class="line">#情况二：修改班级中的1班的班号改为2班</span><br><span class="line"></span><br><span class="line"># 那我们非要改呢?可以在创建的时候 </span><br><span class="line"># 级联更新 + 级联删除(非常危险)， 可以只用级联更新</span><br><span class="line">CREATE TABLE student1(</span><br><span class="line">	id INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">    name CHAR(12) NOT NULL,</span><br><span class="line">    gender ENUM(&apos;男&apos;,&apos;女&apos;),</span><br><span class="line">    cid int ,</span><br><span class="line">    FOREIGN KEY(cid) REFERENCES class(id) ON DELETE CASCADE ON UPDATE CASCADE   </span><br><span class="line">);</span><br><span class="line">CREATE TABLE class1(</span><br><span class="line">    id INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">	cname CHAR(12) NOT NULL UNIQUE,</span><br><span class="line">    start_date DATE,</span><br><span class="line">    period CHAR(12),</span><br><span class="line">    course CHAR(12),</span><br><span class="line">    teacher CHAR(12)</span><br><span class="line">);</span><br><span class="line">INSERT INTO class VALUES(1, &apos;小红旗&apos;, 20190505, &apos;1 year&apos;, &apos;python&apos;,  &apos;小红&apos;);</span><br><span class="line">INSERT INTO student VALUES(1, &apos;ATLAS&apos;, &apos;男&apos;, 1);</span><br><span class="line">UPDATE class1 set id = 2 where id = 1;</span><br><span class="line"># 这样我们改了班级的id后，学生的id也改了</span><br><span class="line">DELETE class1 WHERE id = 2;</span><br><span class="line"># 学生也没了。</span><br></pre></td></tr></table></figure><p>创建表后，添加外键约束</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER TABLE student ADD FOREIGN KEY student_class(class_id) REFERENCES class(cid);</span><br></pre></td></tr></table></figure><p>删除外键约束：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show create table student;   # 记录外键名</span><br><span class="line">alter table student drop foreign key 外键名</span><br></pre></td></tr></table></figure><h2 id="表与表之间的关系"><a href="#表与表之间的关系" class="headerlink" title="表与表之间的关系"></a>表与表之间的关系</h2><h3 id="一对多关系"><a href="#一对多关系" class="headerlink" title="一对多关系"></a>一对多关系</h3><p>例子：校区表 班级表</p><ul><li>校区表 一个校区可以有多个班级 一对多</li><li>班级表 一个班级只对应一个校区</li></ul><h4 id="如何建表：设置foreign"><a href="#如何建表：设置foreign" class="headerlink" title="如何建表：设置foreign"></a>如何建表：设置foreign</h4><ul><li><u>多的那一方 创建 FOREIGN KEY 关联少的那张表。奔着减少冗余去的。</u></li></ul><h3 id="多对多关系"><a href="#多对多关系" class="headerlink" title="多对多关系"></a>多对多关系</h3><p>例子：学生与课程：</p><ul><li>学生角度上： 一个学生可以选多个课程，一对多</li><li>课程角度上：一个课程有多个学生，多对一</li></ul><h4 id="如何建表：设置新表-两个foreign-key"><a href="#如何建表：设置新表-两个foreign-key" class="headerlink" title="如何建表：设置新表 + 两个foreign key"></a>如何建表：设置新表 + 两个foreign key</h4><ul><li><p>拆成一对多，在键一张表。</p></li><li><p>多对多产生第三张表</p><ul><li><strong>foreign + 新表</strong></li><li>一个字段是外键关联一张表的主键</li><li>另一个字段外键关联另一张表的主键</li></ul></li></ul><h3 id="一对一关系"><a href="#一对一关系" class="headerlink" title="一对一关系"></a>一对一关系</h3><p>例子:会员表 客户表</p><ul><li>会员表中创建客户字段（不会空），反过来会有很多空缺（不是所有客户都是会员的）。</li></ul><h4 id="如何建表：-foreign-key-unique"><a href="#如何建表：-foreign-key-unique" class="headerlink" title="如何建表： foreign key + unique"></a>如何建表： foreign key + unique</h4><p>客户字段（关联）（多的那方）设置为 foreign key + unique</p><p>相当于在一对多的基础上 + unique</p><h1 id="MySQL中的常用数据类型"><a href="#MySQL中的常用数据类型" class="headerlink" title="MySQL中的常用数据类型"></a>MySQL中的常用数据类型</h1><p>MySQL支持多种列类型：</p><ul><li>数值类型：常用 tinyint, int, float</li><li>日期/时间类型：常用 datetime, date, time, now()函数</li><li>字符串(字符)类型：常用 char, varchar</li><li>set和enum：多选去重, 单选</li></ul><h2 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h2><table><thead><tr><th>类型</th><th>c存储字节</th><th>范围（有符号）</th><th>范围（无符号）unsigned约束</th><th>用途</th></tr></thead><tbody><tr><td>TINYINT</td><td>1 字节</td><td>(-128，127)</td><td>(0，255)</td><td>小整数值</td></tr><tr><td>SMALLINT</td><td>2 字节</td><td>(-32 768，32 767)</td><td>(0，65 535)</td><td>大整数值</td></tr><tr><td>MEDIUMINT</td><td>3 字节</td><td>(-8 388 608，8 388 607)</td><td>(0，16 777 215)</td><td>大整数值</td></tr><tr><td>INT或INTEGER</td><td>4 字节</td><td>(-2 147 483 648，2 147 483 647)</td><td>(0，4 294 967 295)</td><td>大整数值</td></tr><tr><td>BIGINT</td><td>8 字节</td><td>(-9 233 372 036 854 775 808，9 223 372 036 854 775 807)</td><td>(0，18 446 744 073 709 551 615)</td><td>极大整数值</td></tr><tr><td>FLOAT</td><td>4 字节 float(255,30)</td><td>(-3.402 823 466 E+38，-1.175 494 351 E-38)，0，(1.175 494 351 E-38，3.402 823 466 351 E+38)</td><td>0，(1.175 494 351 E-38，3.402 823 466 E+38)</td><td>单精度浮点数值</td></tr><tr><td>DOUBLE</td><td>8 字节 double(255,30)</td><td>(-1.797 693 134 862 315 7 E+308，-2.225 073 858 507 201 4 E-308)，0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td><td>0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td><td>双精度浮点数值</td></tr><tr><td>DECIMAL</td><td>对DECIMAL(M,D) ，如果M&gt;D，为M+2否则为D+2 double(65,30)</td><td>依赖于M和D的值</td><td>依赖于M和D的值</td><td>小数值</td></tr></tbody></table><ul><li>当你插入的数超过了数据类型的上限/下限，它会以上限/下限进行保存。</li><li>单精度和双精度它们的精度有限<ul><li>float(255,30) 左边表示以共多少位，右边表示小数点保留位数。</li><li>百万级 float(9,2)</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 创建名为fd_t的表</span><br><span class="line">CREATE TABLE fd_t(f float, d double, f2 float(5,2), d2 double(5,2));</span><br><span class="line"># 插入很长的数，来验证结果</span><br><span class="line">INSERT INTO fd_t VALUES(1.234567890987654321,1.23456789087654321,2.87654321,2.87654321);</span><br><span class="line"></span><br><span class="line">INSERT INTO fd_t VALUES(1.23456789087654321, 1.23456789087654321, 1.23456789087654321, 1.23456789087654321)</span><br></pre></td></tr></table></figure><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">结果为：</span><br><span class="line"><span class="code">+---------+</span>--------------------<span class="code">+------+</span>------+</span><br><span class="line">| f       | d                  | f2   | d2   |</span><br><span class="line"><span class="code">+---------+</span>--------------------<span class="code">+------+</span>------+</span><br><span class="line">| 1.23457 | 1.2345678908765432 | 2.88 | 2.88 |</span><br><span class="line">| 1.23457 | 1.2345678908765432 | 1.23 | 1.23 |</span><br></pre></td></tr></table></figure><p>结论：</p><ul><li>精确位会做<strong>四舍五入</strong>。</li><li>float 精度问题，小数点<strong>后5位</strong></li><li>精度更高但也不准确</li></ul><p>DECIMAL(M,D)</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE dec_t(dec1 decimal, dec2 decimal(30,20));</span><br><span class="line">INSERT INTO deci_t VALUES(1.23456789087654321,1.23456789087654321);</span><br><span class="line"></span><br><span class="line">INSERT INTO deci_t VALUES(1.23456789087654321,9876543210987654321.23456789087654321);</span><br></pre></td></tr></table></figure><p>结果为：</p><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="code">+------+</span>---------------------------------+</span><br><span class="line">| dec1 | dec2                            |</span><br><span class="line"><span class="code">+------+</span>---------------------------------+</span><br><span class="line">|    1 |          1.23456789087654321000 |</span><br><span class="line">|    1 | 9999999999.99999999999999999999 |</span><br><span class="line"><span class="code">+------+</span>---------------------------------+</span><br></pre></td></tr></table></figure><p>结论：</p><ul><li>M表示最大显示宽度；D表示小数点后面的位数。</li><li>默认为decimal(10,0)</li><li>定点数DECIMAL在内部以字符串形式存放，适合表示货币等高精度的数据。</li></ul><h2 id="日期-时间"><a href="#日期-时间" class="headerlink" title="日期/时间"></a>日期/时间</h2><table><thead><tr><th>类型</th><th>存储字节</th><th>范围</th><th>格式</th><th>用途</th></tr></thead><tbody><tr><td>DATE</td><td>3</td><td>1000-01-01/9999-12-31</td><td>YYYY-MM-DD</td><td>年月日</td></tr><tr><td>TIME</td><td>3</td><td>‘-838:59:59’/<br>‘838:59:59’</td><td>HH:MM:SS</td><td>时分秒</td></tr><tr><td>YEAR</td><td>1</td><td>1901/2155</td><td>YYYY</td><td>年份值</td></tr><tr><td>DATETIME</td><td>8</td><td>1000-01-01 00:00:00/9999-12-31 23:59:59</td><td>YYYY-MM-DD HH:MM:SS</td><td>年月日时分秒</td></tr><tr><td>TIMESTAMP</td><td>4</td><td>1970-01-01 00:00:00/2038 结束时间是第 <strong>2147483647</strong> 秒，北京时间 <strong>2038-1-19 11:14:07</strong>，格林尼治时间 2038年1月19日 凌晨 03:14:07</td><td>YYYYMMDD HHMMSS</td><td>混合日期和时间值，时间戳</td></tr></tbody></table><p>常用内置函数： now()</p><p>datetime：常用于日志/论坛博客类的评论，文章 <code>*****</code></p><p>date：常用于员工生日，入职日期，离职日期 <code>****</code></p><p>time：常用于每天固定的时间</p><p>timestamp：只能到2038年 由于表示范围的问题，导致用的少了 不能为空，默认值是当前时间，在修改的时候同时更新时间。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE time_t(d DATE, dt DATETIME, ts TIMESTAMP, t TIME, y YEAR);</span><br><span class="line">INSERT INTO time_t VALUES(now(), now(), now(), now(), now());</span><br><span class="line">INSERT INTO time_t VALUES(&apos;2038-1-19&apos;,&apos;2038-1-19 12:12:12&apos;,&apos;2038-1-19 12:12:12&apos;,&apos;12:12:12&apos;,2038 );</span><br><span class="line">INSERT INTO time_t VALUES(&apos;2038-1-19&apos;,&apos;2038-1-19 10:12:12&apos;,&apos;2038-1-19 10:12:12&apos;,&apos;10:12:12&apos;,2038 );</span><br></pre></td></tr></table></figure><p>结果为：</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">+------------+---------------------+---------------------+----------+------+</span><br><span class="line">| d          | dt                  | ts                  | t        | y    |</span><br><span class="line">+------------+---------------------+---------------------+----------+------+</span><br><span class="line">| <span class="number">2019</span><span class="number">-05</span><span class="number">-26</span> | <span class="number">2019</span><span class="number">-05</span><span class="number">-26</span> <span class="number">20</span>:<span class="number">23</span>:<span class="number">57</span> | <span class="number">2019</span><span class="number">-05</span><span class="number">-26</span> <span class="number">20</span>:<span class="number">23</span>:<span class="number">57</span> | <span class="number">20</span>:<span class="number">23</span>:<span class="number">57</span> | <span class="number">2019</span> |</span><br><span class="line">| <span class="number">2038</span><span class="number">-01</span><span class="number">-19</span> | <span class="number">2038</span><span class="number">-01</span><span class="number">-19</span> <span class="number">12</span>:<span class="number">12</span>:<span class="number">12</span> | <span class="number">0000</span><span class="number">-00</span><span class="number">-00</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> | <span class="number">12</span>:<span class="number">12</span>:<span class="number">12</span> | <span class="number">2038</span> |</span><br><span class="line">| <span class="number">2038</span><span class="number">-01</span><span class="number">-19</span> | <span class="number">2038</span><span class="number">-01</span><span class="number">-19</span> <span class="number">10</span>:<span class="number">12</span>:<span class="number">12</span> | <span class="number">2038</span><span class="number">-01</span><span class="number">-19</span> <span class="number">10</span>:<span class="number">12</span>:<span class="number">12</span> | <span class="number">10</span>:<span class="number">12</span>:<span class="number">12</span> | <span class="number">2038</span> |</span><br><span class="line">+------------+---------------------+---------------------+----------+------+</span><br></pre></td></tr></table></figure><p>结论：</p><ul><li>使用<code>now()</code>函数</li><li>上面验证了TIMESTAMP到了北京时间 2038-1-19 11:14:07就会结束。</li><li>TIMESTAMP跟时区相关，插入日期时，会先转化为本地时区后存放，而取出时，也会将日期转化为本地时区后显示。</li></ul><p>单项插入整形时间，注意位数得对应</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INSERT INTO time_t(dt) VALUES(20180705112222);</span><br></pre></td></tr></table></figure><p>验证当本行数据改变后，<code>TIMESTAMP</code>发生变化</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">UPDATE time_t SET y = 2020 WHERE y = 2019;</span><br></pre></td></tr></table></figure><p>基于以上<code>TIMESTAMP</code>的特点，如果我们修改<code>DATETIME</code>使它不能为空，默认值是当前时间，在修改的时候同时更新时间。我们可以参考<code>TIMESTAMP</code>的定义。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SHOW CREATE TABLE time_t;</span><br></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">| time_t | CREATE TABLE `time_t` (</span><br><span class="line">  `d` date<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</span><br><span class="line">  `dt` datetime<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</span><br><span class="line">  `ts` timestamp <span class="keyword">NOT</span> <span class="literal">NULL</span><span class="built_in"> DEFAULT </span>CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,</span><br><span class="line">  `t` time<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</span><br><span class="line">  `y` year(4)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span></span><br><span class="line">) <span class="attribute">ENGINE</span>=InnoDB<span class="built_in"> DEFAULT </span><span class="attribute">CHARSET</span>=utf8 |</span><br></pre></td></tr></table></figure><p>所以我们在定义的时候需要加入NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER TABLE time_t ADD dts DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP;</span><br></pre></td></tr></table></figure><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><table><thead><tr><th>类型</th><th>存储字节</th><th>描述</th></tr></thead><tbody><tr><td>CHAR</td><td>0-255字节</td><td>定长字符串</td></tr><tr><td>VARCHAR</td><td>0-65535 字节</td><td>变长字符串</td></tr><tr><td>TINYBLOB</td><td>0-255字节</td><td>不超过 255 个字符的二进制字符串</td></tr><tr><td>TINYTEXT</td><td>0-255字节</td><td>短文本字符串</td></tr><tr><td>BLOB</td><td>0-65 535字节</td><td>二进制形式的长文本数据</td></tr><tr><td>TEXT</td><td>0-65 535字节</td><td>长文本数据</td></tr><tr><td>MEDIUMBLOB</td><td>0-16 777 215字节</td><td>二进制形式的中等长度文本数据</td></tr><tr><td>MEDIUMTEXT</td><td>0-16 777 215字节</td><td>中等长度文本数据</td></tr><tr><td>LONGBLOB</td><td>0-4 294 967 295字节</td><td>二进制形式的极大文本数据</td></tr><tr><td>LONGTEXT</td><td>0-4 294 967 295字节</td><td>极大文本数据</td></tr><tr><td>ENUM</td><td>对1-255个成员的枚举需要1个字节存储; 对于255-65535个成员，需要2个字节存储; 最多允许65535个成员。</td><td>单选：选择性别</td></tr><tr><td>SET</td><td>1-8个成员的集合，占1个字节 9-16个成员的集合，占2个字节 17-24个成员的集合，占3个字节 25-32个成员的集合，占4个字节 33-64个成员的集合，占8个字节</td><td>多选：兴趣爱好</td></tr></tbody></table><p>char：定长存储，存储速度更快，占用更多的空间 <code>*****</code></p><ul><li><p>char(12)</p><p>‘alex’ —&gt; ‘alex ‘</p></li><li><p>手机号码，身份证，用户名，密码 有一定范围，弹性不大</p></li></ul><p>varchar：变长存储，存储速度相对慢，占用空间小 <code>****</code></p><ul><li><p>varchar(12)</p></li><li><p>‘alex’ —&gt; ‘alex4’</p></li><li><p>微博评论，文章</p></li></ul><p>验证定长存储，与变长存储：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE ch_t(c CHAR, vc VARCHAR(1), c2 CHAR(5), vc2 VARCHAR(5) );</span><br><span class="line">INSERT INTO ch_t VALUES(&apos;我是naqin&apos;, &apos;我是naqin&apos;, &apos;我是naqin&apos;, &apos;我是naqin&apos;);</span><br><span class="line">INSERT INTO ch_t(c2, vc2) VALUES( &apos;a     &apos;, &apos;a        &apos;);</span><br><span class="line">SELECT CONCAT(c2,&apos;|&apos;), CONCAT(vc2, &apos;|&apos;) from ch_t;</span><br></pre></td></tr></table></figure><p>note: varchar需要<strong>指定长度</strong></p><p>显示的时候会自动清除空格，所以需要加上<code>concat()</code></p><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="code">+----------------+</span>------------------+</span><br><span class="line">| CONCAT(c2,<span class="emphasis">'|'</span>) | CONCAT(vc2, <span class="emphasis">'|'</span>) |</span><br><span class="line"><span class="code">+----------------+</span>------------------+</span><br><span class="line">| 我是naq|       | 我是naq|          |</span><br><span class="line">| a|             | a    |           |</span><br><span class="line"><span class="code">+----------------+</span>------------------+</span><br></pre></td></tr></table></figure><h2 id="enum和set"><a href="#enum和set" class="headerlink" title="enum和set"></a>enum和set</h2><p><strong>单选</strong>，<code>enum(&#39;男&#39;,&#39;女&#39;)</code> 约束中写入后完成二选一:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE enum_t(id INT, name CHAR(12), gender ENUM(&apos;male&apos;,&apos;female&apos;));</span><br><span class="line">INSERT INTO enum_t VALUES(1,&apos;小白&apos;,&apos;male&apos;);</span><br></pre></td></tr></table></figure><p><strong>多选题</strong> 从有限的条件中选则:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE set_t(id INT, name CHAR(12), hobby SET(&apos;唱&apos;,&apos;跳&apos;,&apos;rap&apos;,&apos;篮球&apos;));</span><br><span class="line"></span><br><span class="line">INSERT INTO set_t VALUES(1, &apos;小白&apos;, &apos;唱&apos;,&apos;跳&apos;);</span><br><span class="line">INSERT INTO set_t VALUES(2,&apos;小黑&apos;,7);  </span><br><span class="line"># 1 + 2 + 4 = 2^0 + 2^1 + 2^2 = 7</span><br><span class="line">insert into set_t values(3, &apos;小小&apos;, 120);</span><br></pre></td></tr></table></figure><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="code">+------+</span>--------<span class="code">+----------------+</span></span><br><span class="line">| id   | name   | hobby          |</span><br><span class="line"><span class="code">+------+</span>--------<span class="code">+----------------+</span></span><br><span class="line">|    1 | 小白   | 唱,rap          |</span><br><span class="line">|    2 | 小黑   | 唱,跳,篮球      |</span><br><span class="line">|    3 | 小小   | 篮球            |</span><br><span class="line"><span class="code">+------+</span>--------<span class="code">+----------------+</span></span><br></pre></td></tr></table></figure><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><h2 id="有关数据库的DDL操作"><a href="#有关数据库的DDL操作" class="headerlink" title="有关数据库的DDL操作"></a>有关数据库的DDL操作</h2><p><code>SHOW DATABASES;</code></p><p><code>CREATE DATABASE 数据库名；</code></p><p><code>DROP DATABASE [IF EXISTS] 数据库名；</code></p><p><code>USE 数据库名；</code></p><h2 id="有关数据表的DDL操作"><a href="#有关数据表的DDL操作" class="headerlink" title="有关数据表的DDL操作"></a>有关数据表的DDL操作</h2><p><code>SHOW TABLES ;</code></p><p><code>DESC 表名；</code></p><p><code>CREATE TABLE 表名(……);</code></p><p><code>DROP TABLE 表名；</code></p><p><code>ALTER TABLE 表名；</code></p><h2 id="常用的数据类型"><a href="#常用的数据类型" class="headerlink" title="常用的数据类型"></a>常用的数据类型</h2><p>数值类型：int tinyint float(建议设置宽度)</p><p>日期/时间：datetime date time timestamp</p><p>字符串：char varchar</p><p>enum和set：enum(单选) set(多选，去重)</p><p>本篇介绍了MySQL库表的操作以及常用的数据类型。</p><hr>]]></content>
      <categories>
        <category>MySQL学习</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>MySQL</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL-数据库概念</title>
    <url>/MySQL%E5%AD%A6%E4%B9%A0/20190525-basic-knowledge-of-MySQL.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>本篇是对数据库概念，历史，类型的简单介绍以及MySQL的安装与简单使用。</p></blockquote><a id="more"></a><h1 id="数据库概念"><a href="#数据库概念" class="headerlink" title="数据库概念"></a>数据库概念</h1><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p>数据库是大量数据的集合，它们存储在计算机中，有组织，可扩展，并能快速更新、存取，服务于不同的用户。</p><p>简单来讲：数据库具有永久存储，有组织和可共享三个基本特点。</p><p>企业数据存储面临的问题</p><ul><li><p>存储大量数据</p></li><li><p>大量数据的检索和访问</p></li><li><p>保持数据信息的一致、完整</p></li><li><p>数据共享和安全</p></li><li><p>通过分析整合，产生新的有用的信息</p></li></ul><h2 id="数据库的发展史"><a href="#数据库的发展史" class="headerlink" title="数据库的发展史"></a>数据库的发展史</h2><p>初始阶段—–人工管理（人力手工整理存储数据）</p><p>萌芽阶段—–文件系统 (使用磁盘文件来存储数据)</p><p>初级阶段—–第一代数据库 (出现了<strong>网状模型</strong>、<strong>层次模型</strong>的数据库)</p><p>中级阶段—–第二代数据库 (<strong>关系型</strong>数据库和结构化查询语言)</p><p>高级阶段——新一代数据库 (关系-对象 型数据库)</p><h2 id="数据库管理系统-DBMS"><a href="#数据库管理系统-DBMS" class="headerlink" title="数据库管理系统(DBMS)"></a>数据库管理系统(DBMS)</h2><ul><li><p>数据库系统<strong>成熟</strong>的标志就是数据库管理系统的出现。数据库管理系统(DataBase Management System，简称DBMS)是管理数据库的一个软件，它充当所有数据的知识库，并对它的存储、安全、一致性、并发操作、恢复和访问负责。是对数据库的一种完整和统一的管理和控制机制。数据库管理系统不仅让我们能够实现对数据的快速检索和维护，还为数据的安全性、完整性、并发控制和数据恢复提供了保证。数据库管理系统的核心是一个用来存储大量数据的数据库。</p></li><li><p>DBMS是所有数据的知识库，并对数据的存储、安全、一致性、并发操作、恢复和访问负责。</p></li><li><p>DBMS有一个<strong>数据字典</strong>（有时被称为<strong>系统表</strong>），用于贮存它拥有的每个事物的相关信息，例如名字、结构、位置和类型，这种关于数据的数据也被称为<strong>元数据</strong>（metadata）</p></li></ul><h2 id="数据库分类"><a href="#数据库分类" class="headerlink" title="数据库分类"></a>数据库分类</h2><h3 id="关系型数据库"><a href="#关系型数据库" class="headerlink" title="关系型数据库"></a>关系型数据库</h3><p>(一列数据之间是互相联系的)</p><ul><li>nMySQL （开源、小公司直接用、大公司二次开发）</li><li>Oracle（严谨，安全性最高、金融）</li><li>SQL server（微软）</li><li>SQLlite</li><li>Access（小金融公司）</li></ul><h3 id="非关系型数据库（大数据）"><a href="#非关系型数据库（大数据）" class="headerlink" title="非关系型数据库（大数据）"></a>非关系型数据库（大数据）</h3><p>键值对 key：value</p><ul><li>redis（最好用的）</li><li>mongodb（轻量级）</li><li>memcache（内存级别的断电会消失）</li></ul><h2 id="数据库管理系统常用的数学模型"><a href="#数据库管理系统常用的数学模型" class="headerlink" title="数据库管理系统常用的数学模型"></a>数据库管理系统常用的数学模型</h2><h3 id="层次模型"><a href="#层次模型" class="headerlink" title="层次模型"></a>层次模型</h3><p>层次数据模型是用<strong>树</strong>状（层次）结构来组织数据的数据模型。</p><p><img src="/MySQL学习/20190525-basic-knowledge-of-MySQL/%E5%B1%82%E6%AC%A1%E6%A8%A1%E5%9E%8B.png" alt="层次模型"></p><h4 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h4><ul><li>有且仅有一个节点无父节点，这个节点称为<strong>根节点</strong></li><li>其他节点有且仅有一个父节点。</li></ul><h4 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h4><ul><li>层次数据模型的结构简单、清晰、明朗，很容易看到各个实体之间的联系</li><li>操作层次数据类型的数据库语句比较简单，只需要几条语句就可以完成数据库的操作</li><li>层次数据模型提供了较好的数据完整性支持，正如上所说，如果要删除父节点，那么其下的所有子节点都要同时删除</li><li>查询效率较高，在层次数据模型中，节点的有向边表示了节点之间的联系，在DBMS中如果有向边借助指针实现，那么依据路径很容易找到待查的记录</li></ul><h4 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h4><ul><li><p>现实世界中，事物之间的联系更多的是非层次关系的，用层次模型表示非树型结构是很不直接的。</p></li><li><p>查询节点的时候必须知道其<strong>双亲节点</strong>的，因此限制了对数据库存取路径的控制</p></li><li><p>结构呆板，缺乏灵活性</p></li><li><p>层次数据模型只能表示实体之间的1:n的关系，<strong>不能表示m:n</strong>的复杂关系，因此现实世界中的很多模型不能通过该模型方便的表示</p></li></ul><h3 id="网状模型"><a href="#网状模型" class="headerlink" title="网状模型"></a>网状模型</h3><p>用<strong>有向图</strong>表示实体和实体之间的联系的数据结构模型称为网状数据模型。</p><p><img src="/MySQL学习/20190525-basic-knowledge-of-MySQL/%E7%BD%91%E7%8A%B6%E6%A8%A1%E5%9E%8B.png" alt="网状模型"></p><h4 id="特点：-1"><a href="#特点：-1" class="headerlink" title="特点："></a>特点：</h4><ul><li>允许一个以上的节点无父节点；</li><li>一个节点可以有多于一个的父节点。</li></ul><h4 id="优点：-1"><a href="#优点：-1" class="headerlink" title="优点："></a>优点：</h4><ul><li>网状数据模型可以很方便的表示现实世界中的很多复杂的关系</li><li>修改网状数据模型时，没有层次状数据模型的那么多的严格限制，可以删除一个节点的父节点而依旧保留该节点；也允许插入一个没有任何父节点的节点，这样的插入在层次状数据模型中是不被允许的，除非是首先插入的是根节点</li><li>实体之间的关系在底层中可以借由指针指针实现，因此在这种数据库中的执行操作的效率较高</li></ul><h4 id="缺点：-1"><a href="#缺点：-1" class="headerlink" title="缺点："></a>缺点：</h4><ul><li>网状数据模型的结构复杂，使用不易，随着应用环境的扩大，数据结构越来越复杂，数据的插入、删除牵动的相关数据太多，<strong>不利于数据库的维护和重建</strong></li><li>网状数据模型数据之间的彼此关联比较大，该模型其实一种<strong>导航式的数据模型结构</strong>，不仅要说明要对数据做些什么，还说明操作的记录的路径</li></ul><p>note：网状数据库和层次数据库都很好地解决了数据的集中和共享问题，但在<strong>数据独立性</strong>和<strong>抽象性</strong>上有很大欠缺。</p><h3 id="关系模型"><a href="#关系模型" class="headerlink" title="关系模型"></a>关系模型</h3><p>使用<strong>表格</strong>表示实体和实体之间关系的数据模型称之为关系数据模型。</p><p><img src="/MySQL学习/20190525-basic-knowledge-of-MySQL/%E5%85%B3%E7%B3%BB%E6%A8%A1%E5%9E%8B.png" alt="关系模型"></p><h4 id="特点：-2"><a href="#特点：-2" class="headerlink" title="特点："></a>特点：</h4><p>关系模型数据库采用表组织数据（表称为“关系”），一个数据库由许多个表组成，多个表数据之间存在着关系，在这些表上的数据操作依赖于关系，关系用来描述多个表之间的数据依存，包括了一对一、一对多、多对多的关系。</p><p><strong>实体</strong>（Entity）、<strong>属性</strong>（Attribute）、<strong>关系</strong>（Relationship）。</p><p>关系数据库：用于存储各种类型数据的”仓库”，是二维表的集合。</p><p>表：实体的映射</p><p>行和列：行代表一个具体的实体的数据。也叫一条记录。列是属性的映射，用于描述实体的。</p><p><img src="/MySQL学习/20190525-basic-knowledge-of-MySQL/%E8%A1%A8.png" alt="表"></p><h4 id="优点：-2"><a href="#优点：-2" class="headerlink" title="优点："></a>优点：</h4><ul><li><p>结构简单，关系数据模型是一些表格的框架，实体的属性是表格中列的条目，实体之间的关系也是通过表格的公共属性表示，结构简单明了</p></li><li><p>关系数据模型中的存取路径对用户而言是完全隐蔽的，是程序和数据具有高度的独立性，其数据语言的非过程化程度较高</p></li><li><p>操作方便，在关系数据模型中操作的基本对象是集合而不是某一个元组</p></li><li><p>有坚实的数学理论做基础，包括逻辑计算、数学计算等</p></li></ul><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点:"></a>缺点:</h4><ul><li>查询效率低，关系数据模型提供了较高的数据独立性和非过程化的查询功能（查询的时候只需指明数据存在的表和需要的数据所在的列，不用指明具体的查找路径），因此加大了系统的负担</li><li>由于查询效率较低，因此需要数据库管理系统对查询进行优化，加大了DBMS的负担</li></ul><h3 id="面向对象模型"><a href="#面向对象模型" class="headerlink" title="面向对象模型"></a>面向对象模型</h3><p>九十年代，受当时面向对象技术风潮的影响，</p><p><img src="/MySQL学习/20190525-basic-knowledge-of-MySQL/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B.png" alt="面向对象模型"></p><h4 id="特点：-3"><a href="#特点：-3" class="headerlink" title="特点："></a>特点：</h4><ul><li><p>此面向对象数据库最大的性能优势是能以使用<strong>数据的方式组织数据</strong>，但也由此带来了<strong>对象－关系不匹配</strong>障碍。面向对象模型是以<strong>分类为基础</strong>的，类用来定义存储在数据库内对象的结构及行为；而<strong>关系模型的基础是关系</strong>，也就是基于关系的<strong>表</strong>，它要求将数据组织成规范的二维表，这种组织方式往往要求对象在经过分解后才能进入数据库，使用对象时再通过 SQL 语言进行组装。</p></li><li><p>从关系型数据库向面向对象数据库转换的工作量和开支是关系型数据库老用户们不愿意承受的。</p></li><li><p>它再通用性方面失去了优势</p></li></ul><h1 id="MySQL初识"><a href="#MySQL初识" class="headerlink" title="MySQL初识"></a>MySQL初识</h1><h2 id="mysql卸载与安装"><a href="#mysql卸载与安装" class="headerlink" title="mysql卸载与安装"></a>mysql卸载与安装</h2><h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h3><ol><li>net stop mysql 停止mysql服务</li><li>删除服务 mysqld remove</li><li>把安装软件删除</li><li>删除环境变量</li><li>清除注册表/重启计算机</li></ol><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>路径： 不能有中文，不能有特殊字符</p><p>修改配置文件</p><ol><li>编码设为<code>utf-8</code></li><li>配置项后面不要有空格</li><li>修改<code>basedir</code> 和 <code>datadir</code></li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[mysql]</span><br><span class="line"># 设置mysql客户端默认字符集</span><br><span class="line">default-character-set=utf8</span><br><span class="line">[mysqld]</span><br><span class="line">#设置3306端口</span><br><span class="line">port = 3306</span><br><span class="line"># 设置mysql的安装目录</span><br><span class="line">basedir=D:\mysql\mysql-5.6.45-winx64</span><br><span class="line"># 设置mysql数据库的数据的存放目录</span><br><span class="line">datadir=D:\mysql\mysql-5.6.45-winx64\data</span><br><span class="line"># 允许最大连接数</span><br><span class="line">max_connections=200</span><br><span class="line"># 服务端使用的字符集默认为8比特编码的latin1字符集</span><br><span class="line">character-set-server=utf8</span><br><span class="line"># 创建新表时将使用的默认存储引擎</span><br><span class="line">default-storage-engine=INNODB</span><br></pre></td></tr></table></figure><p>上述为 <code>my.ini</code>的配置，将它放到 <code>my-default.ini</code>旁边。</p><p>配置环境变量<br>再path中添加 mysql的bin目录</p><p>以管理员身份重新打开cmd</p><ol><li>执行安装<pre><code>mysqld install    </code></pre></li><li>启动mysql<pre><code>net start mysql</code></pre></li><li>cmd启动mysql客户端<pre><code>mysql</code></pre></li></ol><h2 id="数据库的基本使用"><a href="#数据库的基本使用" class="headerlink" title="数据库的基本使用"></a>数据库的基本使用</h2><h3 id="服务端mysqld"><a href="#服务端mysqld" class="headerlink" title="服务端mysqld"></a>服务端mysqld</h3><p>服务是MYSQL</p><p><code>net start mysql</code> 启动mysql的服务</p><p><code>net stop mysql</code> 停止mysql服务</p><h3 id="客户端mysql"><a href="#客户端mysql" class="headerlink" title="客户端mysql"></a>客户端mysql</h3><p>客户端会自动连接本地的3306端口</p><h3 id="查看当前用户"><a href="#查看当前用户" class="headerlink" title="查看当前用户"></a>查看当前用户</h3><p><code>select user();</code></p><h3 id="退出"><a href="#退出" class="headerlink" title="退出"></a>退出</h3><p><code>exit</code></p><h3 id="用root用户登录"><a href="#用root用户登录" class="headerlink" title="用root用户登录"></a>用root用户登录</h3><p>初识时输入： <code>mysql -uroot;</code> 默认密码是空。</p><p>设置密码 <code>set password = password(&#39;123&#39;);</code></p><p>方法一：使用密码登录 mysql -uroot -p 回车后输入密码</p><p>方法二： mysql -uroot -p2296</p><h3 id="创建账号"><a href="#创建账号" class="headerlink" title="创建账号"></a>创建账号</h3><p><code>create user &#39;nq&#39;@&#39;对方的ip&#39; identified by &#39;123&#39;;</code><br>192.168.13.%</p><h3 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h3><p>​ <code>mysql -unq-h 192.168.13.254 -p123</code></p><h3 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h3><p>权限种类： 增删查改 查，增<br>grant all 授予所有权限<br><code>grant select on 数据库.表 to &#39;nq&#39;@&#39;192.168.13.254&#39;;</code> 给一个已经存在的nq账号授予【数据库.表】的select权限。<br><code>grant select on 数据库.* to &#39;nq&#39;@&#39;192.168.13.%&#39;identified by &#39;123&#39;;</code> 创建nq账号并授予【数据库所有表的】select权限<br>grant select on <em>.</em> to … 格式</p><p>例如:</p><p>​ <code>grant select on nq.* to &#39;nq&#39;@&#39;%&#39; identified by &#39;123&#39;;</code></p><h2 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h2><p>以数据库名ftp为例：</p><h3 id="查看有哪些数据库"><a href="#查看有哪些数据库" class="headerlink" title="查看有哪些数据库"></a>查看有哪些数据库</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show databases;</span><br></pre></td></tr></table></figure><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create database ftp;</span><br></pre></td></tr></table></figure><h3 id="切换数据库"><a href="#切换数据库" class="headerlink" title="切换数据库"></a>切换数据库</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use ftp;</span><br></pre></td></tr></table></figure><h3 id="修改数据库的字符集"><a href="#修改数据库的字符集" class="headerlink" title="修改数据库的字符集"></a>修改数据库的字符集</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter database ftp charset latin1;</span><br></pre></td></tr></table></figure><h3 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">drop database ftp;</span><br></pre></td></tr></table></figure><h2 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h2><p>以表 userinfo为例</p><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table userinfo(id int, name char(12));</span><br></pre></td></tr></table></figure><h3 id="查看当前库中的表"><a href="#查看当前库中的表" class="headerlink" title="查看当前库中的表"></a>查看当前库中的表</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show tables;</span><br></pre></td></tr></table></figure><h3 id="查看表的结构"><a href="#查看表的结构" class="headerlink" title="查看表的结构"></a>查看表的结构</h3><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">desc userinfo;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">describle userinfo;</span><br></pre></td></tr></table></figure><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show create table userinfo;</span><br></pre></td></tr></table></figure><h3 id="修改表"><a href="#修改表" class="headerlink" title="修改表"></a>修改表</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table userinfo rename 新名字;</span><br></pre></td></tr></table></figure><h3 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> userinfo;</span><br></pre></td></tr></table></figure><h2 id="数据的操作"><a href="#数据的操作" class="headerlink" title="数据的操作"></a>数据的操作</h2><h3 id="查"><a href="#查" class="headerlink" title="查"></a>查</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from userinfo</span><br></pre></td></tr></table></figure><h3 id="增"><a href="#增" class="headerlink" title="增"></a>增</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert into userinfo values(1,&apos;nq&apos;),(2,&apos;xiao&apos;)</span><br></pre></td></tr></table></figure><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">update userinfo set name=&apos;bai&apos; where id = 1;</span><br></pre></td></tr></table></figure><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">delete from userinfo;  # 清空userinfo表 （不用）</span><br><span class="line">delete from userinfo where id=1;</span><br></pre></td></tr></table></figure><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>本篇第一部分对数据库概念，历史，类型进行简单介绍，对于历史推荐阅读：<a href="https://cloud.tencent.com/developer/article/1461510" target="_blank" rel="noopener">数据库风云五十载：老骥伏枥，新秀迭起</a>,读后会有很多感触；</p><p>第二部分是MySQL的安装与简单使用。</p>]]></content>
      <categories>
        <category>MySQL学习</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>MySQL</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>Python并发编程</title>
    <url>/learn-python/20190521-python-concurrent-programming.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>本篇是对前两篇进程和线程的一个补充，加上协程也是对整个并发的一个补充。</p></blockquote><a id="more"></a><h1 id="简单方便的“池”"><a href="#简单方便的“池”" class="headerlink" title="简单方便的“池”"></a>简单方便的“池”</h1><h2 id="进程池"><a href="#进程池" class="headerlink" title="进程池"></a>进程池</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ProcessPoolExecutor</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">f'<span class="subst">&#123;os.getpid()&#125;</span>准备接客'</span>)</span><br><span class="line">    time.sleep(random.randint(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    p = ProcessPoolExecutor(max_workers=<span class="number">5</span>) <span class="comment"># 设置进程数量，默认为cpu的个数</span></span><br><span class="line">    <span class="comment"># 5个进程池接23个任务</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">23</span>):</span><br><span class="line">        p.submit(task)  <span class="comment"># 给进程池放置任务，传参。</span></span><br><span class="line">    p.shutdown(wait=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">f'<span class="subst">&#123;os.getpid()&#125;</span>准备接客'</span>)</span><br><span class="line">    time.sleep(random.randint(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    p = ThreadPoolExecutor(max_workers=<span class="number">5</span>) <span class="comment"># 设置线程程数量，默认为 = cpu的个数 乘以 5</span></span><br><span class="line">    <span class="comment"># 5个线程池接23个任务</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">23</span>):</span><br><span class="line">        p.submit(task)  <span class="comment"># 给线程池放置任务，传参。</span></span><br><span class="line">    p.shutdown(wait=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><ul><li>进程池与线程池属于鸭子类型，我们在使用的时候，只是类名不同（<code>ThreadPoolExecutor</code>与<code>ProcessPoolExecutor</code>）</li></ul><ol><li>实例化对象，设置进程池和线程池的上限 <code>max_workers=</code></li><li>使用<code>submit</code>向池中投递任务。</li><li>可以使用<code>shutdown</code>，它可以阻止在向进程池投放新的任务，设置wait = True，如果投放了23个任务，则总数为23.如果一个任务完成，总数减一，直至为0才执行下一行。（和join很像）</li></ol><h1 id="异步，同步、阻塞、非阻塞"><a href="#异步，同步、阻塞、非阻塞" class="headerlink" title="异步，同步、阻塞、非阻塞"></a>异步，同步、阻塞、非阻塞</h1><h2 id="阻塞、非阻塞"><a href="#阻塞、非阻塞" class="headerlink" title="阻塞、非阻塞"></a>阻塞、非阻塞</h2><p>角度：<strong>程序运行</strong>中表现得状态： 阻塞，运行，就绪</p><p>阻塞：程序遇到I/O阻塞，程序遇到I/O立马会挂起，cpu马上切换，等到I/O结束之后，进入就绪状态。</p><p>非阻塞：程序没有I/O或者 遇到I/O通过某种手段，让cpu去执行其它的任务，尽可能的占用cpu。</p><h2 id="异步，同步"><a href="#异步，同步" class="headerlink" title="异步，同步"></a>异步，同步</h2><p>站在<strong>任务发布</strong>的角度（start，submit）</p><p>同步（串行）：任务发出去之后，如果程序遇到I/O继续等待，直到这个任务最终结束之后，我在发布下一个任务。</p><p>异步：所有的任务同时发出，我就继续下一个</p><p>换句话说就是：同步就是<strong>我强依赖你</strong>(对方)，我必须等到你的回复，才能做出下一步响应。即我的操作(行程)是顺序执行的，中间少了哪一步都不可以，或者说中间哪一步出错都不可以，类似于编程中程序被解释器顺序执行一样；同时如果我没有收到你的回复，我就一直处于等待、也就是<strong>阻塞的状态</strong>。 异步则相反，我并不强依赖你，我对你响应的时间也不敏感，无论你返回还是不返回，我都能继续运行；你响应并返回了，我就继续做之前的事情，你没有响应，我就做其他的事情。也就是说我不存在等待对方的概念，我就是<strong>非阻塞的</strong>。</p><p>例子：</p><ul><li>同步发布任务：我要发布10个任务，先把第一个任务给第一个进程，等到第一个进程完成，再将第二个任务给了下一个进程。。。</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 同步：</span></span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ProcessPoolExecutor</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">f'<span class="subst">&#123;os.getpid()&#125;</span>is running'</span>)</span><br><span class="line">    time.sleep(random.randint(<span class="number">0</span>,<span class="number">2</span>))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f'<span class="subst">&#123;os.getpid()&#125;</span> finish'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    p = ProcessPoolExecutor(max_workers=<span class="number">4</span>)</span><br><span class="line">    obj_l1 = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        obj = p.submit(task,)   <span class="comment"># 同步发布</span></span><br><span class="line">        print(obj.result())     <span class="comment"># 发一个就等结果。 </span></span><br><span class="line">        <span class="comment"># result是有阻塞的。</span></span><br></pre></td></tr></table></figure><ul><li>异步发布任务：我直接将10个任务抛给4个进程，我就继续执行下一行代码了，等结果。</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 异步：</span></span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ProcessPoolExecutor</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">f'<span class="subst">&#123;os.getpid()&#125;</span>is running'</span>)</span><br><span class="line">    time.sleep(random.randint(<span class="number">0</span>,<span class="number">2</span>))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f'<span class="subst">&#123;os.getpid()&#125;</span> finish'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    p = ProcessPoolExecutor(max_workers=<span class="number">4</span>)</span><br><span class="line">    obj_l1 = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        obj = p.submit(task,)  <span class="comment"># 异步发出。</span></span><br><span class="line">        obj_l1.append(obj)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># time.sleep(3)</span></span><br><span class="line">    p.shutdown(wait=<span class="literal">True</span>)     <span class="comment"># 和join很像</span></span><br><span class="line">    <span class="comment"># 1.阻止在向进程池投放新的任务，</span></span><br><span class="line">    <span class="comment"># 2. wait = True 10个任务是10，一个任务完成减一，直至为0才执行下一行。</span></span><br><span class="line">    print(<span class="number">666</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> obj_l1:</span><br><span class="line">        <span class="comment"># print(i)</span></span><br><span class="line">        print(i.result())  <span class="comment"># 阻塞到拿到返回值才停下</span></span><br></pre></td></tr></table></figure><p><code>shutdown（）</code>：</p><ul><li>阻止在向进程池投放新的任务</li><li>wait = True 10个任务是10，一个任务完成减一，直至为0才执行下一行。</li></ul><p>上面异步，我们使用列表来统一回收结果，是异步回收结果的一种方式。</p><h2 id="异步-调用机制"><a href="#异步-调用机制" class="headerlink" title="异步 + 调用机制"></a>异步 + 调用机制</h2><p>以爬虫为例：</p><p>浏览器做的事情很简单：</p><p>​ 浏览器封装头部，发一个请求—&gt; <a href="http://www.taobao.com()" target="_blank" rel="noopener">www.taobao.com()</a> —&gt; 服务器获取到请求信息，分析正确 —-&gt; 给你返回一个文件 —–&gt; 浏览器将这个文件的代码渲染，就成了你看的样子。</p><p>爬虫：利用requests模块，模拟浏览器封装头，给服务器发送请求，骗过服务器之后，服务器也给你返回一个文件，爬虫拿到文件，进行数据清洗，获取到你想要的信息。</p><p>爬虫：两步，</p><p>​ 第一步：爬取服务端的文件（I/O阻塞）</p><p>​ 第二步：拿到文件，进行数据分析（非I/O，I/O极少）</p><p>理想状态：每个爬取的任务，耗费时间长；分析任务，耗时时间短。</p><p>本次例子中：</p><p>​ 第一步：爬取服务端的文件</p><p>​ 第二部：对第一步得到的字符串使用<code>len</code>简单统计字符个数来模拟数据分析的逻辑。</p><p>版本一：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ProcessPoolExecutor</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(url)</span>:</span></span><br><span class="line">    response = requests.get(url)</span><br><span class="line">    print(<span class="string">f'<span class="subst">&#123;os.getpid()&#125;</span> 正在爬取<span class="subst">&#123;url&#125;</span>'</span>)</span><br><span class="line">    time.sleep(random.randint(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line">    <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">        <span class="keyword">return</span> response.text</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(text)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    对爬取回来的字符串的分析</span></span><br><span class="line"><span class="string">    简单用len模拟一下</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    print(<span class="string">f'<span class="subst">&#123;os.getpid()&#125;</span>分析结果：<span class="subst">&#123;len(text)&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    start_time =time.time()</span><br><span class="line">    url_list = [</span><br><span class="line">        <span class="string">'http://www.taobao.com'</span>,<span class="string">'http://www.baidu.com'</span>,<span class="string">'http://www.JD.com'</span>,<span class="string">'https://atlasnq.github.io/'</span>,<span class="string">'http://www.baidu.com'</span>,</span><br><span class="line">        <span class="string">'http://www.sohu.com'</span>, <span class="string">'http://www.youku.com'</span>, <span class="string">'https://www.cnblogs.com/chennaqin/'</span>, <span class="string">'https://atlasnq.github.io/'</span>,</span><br><span class="line">        <span class="string">'http://www.sina.com'</span></span><br><span class="line">    ]</span><br><span class="line">    pool = ProcessPoolExecutor(<span class="number">4</span>)</span><br><span class="line">    <span class="comment"># 方法一：  耗时：6.932577848434448</span></span><br><span class="line">    obj_list = []</span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> url_list:</span><br><span class="line">        obj = pool.submit(get, url)</span><br><span class="line">        obj_list.append(obj)</span><br><span class="line">    pool.shutdown(wait=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">for</span> obj <span class="keyword">in</span> obj_list:     <span class="comment"># 主程序是串行，分析结果的过程是串行</span></span><br><span class="line">        parse(obj.result())</span><br><span class="line">    print(<span class="string">f'耗时：<span class="subst">&#123;time.time() - start_time&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><p>版本一缺陷出现在哪里：</p><ol><li>分析结果是串行。</li><li>结果有先有后，我们要做到，爬一个分析一个。 所有的结果全部都爬取成功之后，放在列表中，分析。</li></ol><p>版本二：我们想把分析结果也做成并行</p><p>如何再开进程池，再开进程，耗费资源</p><p>这个版本，让4个进程，异步发出10个爬取网页 + 分析的任务，然后4个进程并发（并行）的先去完成4个爬取网页 + 分析的任务，谁先结束，谁进行下一个爬取 + 分析任务，直至10个任务爬取 + 分析的任务全部爬取成功。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ProcessPoolExecutor</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(url)</span>:</span></span><br><span class="line">    response = requests.get(url)</span><br><span class="line">    print(<span class="string">f'<span class="subst">&#123;os.getpid()&#125;</span> 正在爬取<span class="subst">&#123;url&#125;</span>'</span>)</span><br><span class="line">    time.sleep(random.randint(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line">    <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">        parse(response.text)  <span class="comment"># 增加耦合</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(text)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    对爬取回来的字符串的分析</span></span><br><span class="line"><span class="string">    简单用len模拟一下</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    print(<span class="string">f'<span class="subst">&#123;os.getpid()&#125;</span>分析结果：<span class="subst">&#123;len(text)&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    start_time =time.time()</span><br><span class="line">    url_list = [</span><br><span class="line">        <span class="string">'http://www.taobao.com'</span>,<span class="string">'http://www.baidu.com'</span>,<span class="string">'http://www.JD.com'</span>,<span class="string">'https://atlasnq.github.io/'</span>,<span class="string">'http://www.baidu.com'</span>,</span><br><span class="line">        <span class="string">'http://www.sohu.com'</span>, <span class="string">'http://www.youku.com'</span>, <span class="string">'https://www.cnblogs.com/chennaqin/'</span>, <span class="string">'https://atlasnq.github.io/'</span>,</span><br><span class="line">        <span class="string">'http://www.sina.com'</span></span><br><span class="line">    ]</span><br><span class="line">    pool = ProcessPoolExecutor(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">    obj_list = []</span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> url_list:</span><br><span class="line">        obj = pool.submit(get, url)</span><br><span class="line">        obj_list.append(obj)</span><br><span class="line">    pool.shutdown(wait=<span class="literal">True</span>)</span><br><span class="line">    print(<span class="string">f'耗时：<span class="subst">&#123;time.time() - start_time&#125;</span>'</span>)     <span class="comment"># 耗时：6.248297452926636</span></span><br></pre></td></tr></table></figure><p>缺陷：这个版本虽然效率提高了，但是两个任务有了耦合，我们增加了两个函数的耦合性。</p><p>版本三：对第二个版本进行解耦 （使用回调函数）</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ProcessPoolExecutor</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(url)</span>:</span></span><br><span class="line">    response = requests.get(url)</span><br><span class="line">    print(<span class="string">f'<span class="subst">&#123;os.getpid()&#125;</span> 正在爬取<span class="subst">&#123;url&#125;</span>'</span>)</span><br><span class="line">    time.sleep(random.randint(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line">    <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">        <span class="keyword">return</span> response.text</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(obj)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    对爬取回来的字符串的分析</span></span><br><span class="line"><span class="string">    简单用len模拟一下</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">f'<span class="subst">&#123;os.getpid()&#125;</span>分析结果：<span class="subst">&#123;len(obj.result())&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    start_time =time.time()</span><br><span class="line">    url_list = [</span><br><span class="line">        <span class="string">'http://www.taobao.com'</span>,<span class="string">'http://www.baidu.com'</span>,<span class="string">'http://www.JD.com'</span>,<span class="string">'https://atlasnq.github.io/'</span>,<span class="string">'http://www.baidu.com'</span>,</span><br><span class="line">        <span class="string">'http://www.sohu.com'</span>, <span class="string">'http://www.youku.com'</span>, <span class="string">'https://www.cnblogs.com/chennaqin/'</span>, <span class="string">'https://atlasnq.github.io/'</span>,</span><br><span class="line">        <span class="string">'http://www.sina.com'</span></span><br><span class="line">    ]</span><br><span class="line">    pool = ProcessPoolExecutor(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">    obj_list = []</span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> url_list:</span><br><span class="line">        obj = pool.submit(get, url)</span><br><span class="line">        obj.add_done_callback(parse)  <span class="comment"># 增加一个回调函数（方法），隐藏传参。</span></span><br><span class="line">        <span class="comment"># 现在的进程还是完成的网络爬取的任务，拿到了返回值之后，丢给回调函数，add_done_callback，</span></span><br><span class="line">        <span class="comment"># 进程继续完成下一个任务。</span></span><br><span class="line">    pool.shutdown(wait=<span class="literal">True</span>)</span><br><span class="line">    print(<span class="string">f'耗时：<span class="subst">&#123;time.time() - start_time&#125;</span>'</span>)     <span class="comment"># 耗时：5.954453945159912</span></span><br></pre></td></tr></table></figure><p>上述代码中：</p><ul><li><p>使用回调函数帮助你分析结果，而且是由主进程帮助你实现的，回调函数帮你分析任务，明确了进程的任务：只有一个网络爬取。</p></li><li><p>分析任务：回调函数执行了，对函数之间解耦。</p></li><li><p>回调函数是串行的。</p></li><li><p>考虑极致情况：如果回调函数是I/O任务，那么由于你的回调函数是主进程做的，有可能影响效率。它是串行。</p></li><li><p>异步 + 回调机制不是万能的，如果你的回调的任务是I/O，那么异步 + 回调机制 不好，此时你要效率，只能牺牲开销，再开进程池和线程池。</p></li></ul><p>有人说异步就是回调？ 其实它两不是一个概念，回调是基于异步的。 它两是两个概念。</p><h1 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h1><p>并发的执行某个任务，多个线程（进程），一个线程执行到中间时暂停通知另一个线程开始执行。</p><p>以前再没学习事件之前我们是用 <code>flag</code> 来解决的。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> current_thread</span><br><span class="line">flag = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">f'<span class="subst">&#123;current_thread().name&#125;</span>:检测服务器是否开启'</span>)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">global</span> flag</span><br><span class="line">    flag = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        print(<span class="string">f'<span class="subst">&#123;current_thread().name&#125;</span> 正在尝试连接'</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> flag:</span><br><span class="line">           print(<span class="string">'连接成功'</span>)</span><br><span class="line">           <span class="keyword">return</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    t1 = Thread(target=task1)</span><br><span class="line">    t2 = Thread(target=task1)</span><br><span class="line">    t3 = Thread(target=task1)</span><br><span class="line"></span><br><span class="line">    t = Thread(target=task)</span><br><span class="line"></span><br><span class="line">    t.start()</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line">    t3.start()</span><br></pre></td></tr></table></figure><p>使用Event类</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Event</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> current_thread</span><br><span class="line">event = Event()    <span class="comment"># 默认False</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">f'<span class="subst">&#123;current_thread().name&#125;</span>:检测服务器是否开启'</span>)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    event.set()   <span class="comment"># 改成了True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">f'<span class="subst">&#123;current_thread().name&#125;</span> 正在尝试连接'</span>)</span><br><span class="line">    event.wait()   <span class="comment"># 轮询检测event是否为True，当其为True，继续下一行代码。</span></span><br><span class="line">    event.wait(timeout=<span class="number">1</span>)   <span class="comment"># 设置超时事件，阻塞1s，改没改都会进行下一行。</span></span><br><span class="line">    print(<span class="string">f'<span class="subst">&#123;current_thread().name&#125;</span> 连接成功！'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    t1 = Thread(target=task1)</span><br><span class="line">    t2 = Thread(target=task1)</span><br><span class="line">    t3 = Thread(target=task1)</span><br><span class="line">    t = Thread(target=task)</span><br><span class="line"></span><br><span class="line">    t.start()</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line">    t3.start()</span><br></pre></td></tr></table></figure><h1 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h1><p>是操作系统不可见的。<br>协程本质就是一条线程，多个任务在一条线程上来回切换<br>利用协程这个概念实现的内容 : 来规避IO操作,就达到了我们将一条线程中的io操作降到最低的目的。</p><p>设置非阻塞 sk.setblocking(Flase)</p><p>异步io 待补充！！！</p><p>io多路复用 待补充！！！</p><h2 id="gevent"><a href="#gevent" class="headerlink" title="gevent"></a><code>gevent</code></h2><p>利用了<code>greenlet</code>底层模块完成的切换 + 自动规避<code>io</code>的功能</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> monkey</span><br><span class="line">monkey.patch_all()</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> gevent</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'start func'</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">'end func'</span>)</span><br><span class="line">g1 = gevent.spawn(func)</span><br><span class="line">g2 = gevent.spawn(func)</span><br><span class="line">g3 = gevent.spawn(func)</span><br><span class="line">gevent.joinall([g1, g2, g3])</span><br></pre></td></tr></table></figure><h2 id="asyncio"><a href="#asyncio" class="headerlink" title="asyncio"></a><code>asyncio</code></h2><p>利用了<code>yield</code>底层语法完成的切换 + 自动规避<code>io</code>的功能</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">'start'</span>,name)</span><br><span class="line">    <span class="comment"># await 可能会发生阻塞的方法</span></span><br><span class="line">    <span class="comment"># await 关键字必须写在一个async函数里</span></span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">'end'</span>)</span><br><span class="line"></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(asyncio.wait([func(<span class="string">'小白'</span>),func(<span class="string">'小黑'</span>)]))</span><br></pre></td></tr></table></figure><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>进程：数据隔离，数据不安全，操作系统级别，开销非常大，能利用多核。<br>线程：数据共享，数据不安全，操作系统级别，开销小，不能利用多核 ，一些和文件操作相关的io只有操作系统能感知到<br>协程：数据共享，数据安全，用户级别，开销更小，不能利用多核，协程的所有的切换都基于用户，只有在用户级别能够感知到的io才会用协程模块做切换来规避（socket，请求网页的）</p><p>用户级别的协程还有什么好处：</p><ul><li>减轻了操作系统的负担。</li><li>一条线程如果开了多个协程，那么给操作系统的印象是线程很忙，这样能多争取一些时间片时间来被CPU执行,程序的效率就提高了。</li></ul><hr>]]></content>
      <categories>
        <category>python学习</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>python</tag>
        <tag>并发编程</tag>
      </tags>
  </entry>
  <entry>
    <title>Python GIL</title>
    <url>/learn-python/20190520-python-global-interpreter-lock.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>本篇是在学习进程]和线程的基础知识和相关模块后对并发编程的继续深入学习。首先是对<code>Cpython</code>的GIL进行介绍，GIL为什么会被质疑以及对GIL的正确认识。</p></blockquote><a id="more"></a><h2 id="GIL-Global-Interpreter-lock"><a href="#GIL-Global-Interpreter-lock" class="headerlink" title="GIL(Global Interpreter lock)"></a>GIL(Global Interpreter lock)</h2><p>GIL并不是Python的特性，它是在实现Python解析器（CPython）时所引入的一个概念。由于CPython是大部分环境下默认的Python执行环境，很多人就把CPython同Python画上等号，也就像当然把GIL归结为Python语言的缺陷。下面是官方文档的解释：</p><blockquote><p><em>The mechanism used by the <strong>CPython</strong> interpreter to assure that only <strong>one thread</strong> executes Python bytecode at a time. This simplifies the CPython implementation by making the object model (including critical built-in<br>types such as dict) implicitly safe against concurrent access. Locking the entire interpreter makes it easier for the interpreter to be multi-threaded, at the expense of much of the parallelism afforded by multi-processor machines.</em></p></blockquote><p>​ GIL机制使<code>Cpython</code>解释器一次只执行一条线程，这种设计简化了CPython的实现，使得对象模型，包括关键的内建类型如字典，都是隐含可以并发访问的。锁住全局解释器使得比较容易的实现对多线程的支持，但也损失了多处理器主机的并行计算能力。</p><p>​ 简单的一句话就是GIL是一种阻止同时有多个线程执行Python字节码的互斥机制，对于一个进程下的<strong>多线程</strong>，我们只能做到<strong>并发</strong>，无法达到<strong>并行</strong>。</p><p>​ GIL本质就是一把<strong>互斥锁</strong>，既然是互斥锁，所有互斥锁的本质都一样，都是将<strong>并发运行变成串行</strong>，以此来控制<strong>同一时间内共享数据只能被一个任务所修改</strong>，进而保证数据安全。</p><p>​ 可能大家看到这里会有一丝疑惑，怎么一会儿说是并发，一会儿说是串行。这是因为多个线程的代码，轮流被解释器执行（执行的是拿到GIL的那个线程），只不过切换的频率很高，给人一种多个进程在“同时”执行的错觉，所以多线程可以做到并发，串行是体现在只有一个线程能拿到GIL锁。</p><p><img src="/learn-python/20190520-python-global-interpreter-lock/%E7%BA%BF%E7%A8%8B%E6%89%A7%E8%A1%8C.png" alt="线程执行"></p><p>结合上图，在多线程环境中，Python虚拟机按照以下方式执行：</p><ul><li>设置GIL</li><li>切换到一个线程去执行</li><li>运行</li><li>把线程设置为睡眠状态</li><li>解锁GIL</li><li>再次重复以上步骤</li></ul><h2 id="GIL的历史"><a href="#GIL的历史" class="headerlink" title="GIL的历史"></a>GIL的历史</h2><p>​ Python出现的时候还是<strong>单核</strong>CPU的时代。<strong>Python代码的执行依赖于解释器</strong>，由Python 虚拟机(也叫解释器主循环，CPython版本)来控制，Python 在设计之初就考虑到要在解释器的主循环中，同时只有一个线程在执行，<strong>即在任意时刻，只有一个线程在解释器中运行</strong>。对Python 虚拟机的访问由全局解释器锁（GIL）来控制，正是这个锁能保证同一时刻只有一个线程在运行。在那个单核时代，这种设计方式使得<strong>单线程更快</strong>，并且在和C库结合时更方便，不用考虑线程安全问题。</p><p>​ 随着双核CPU的问世，人们就会意识到线程实际上可以在同一时间运行。真正的并行性，而不仅仅是并发性。虽然线程不是为了这个目的，但它们很好地发挥了作用，甚至不需要引入新的概念。但是对于Python，此时由于内置库和第三方库已经对GIL形成了牢不可破的依赖，想改革GIL反而变得困难了。有些项目试图在没有GIL的情况下实现Python项目，甚至有些人直接从CPython中删除了GIL，但效果很不理想。</p><p>Python的解析器 ：</p><ul><li>含有GIL的有：CPython、PyPy、Psyco；</li><li>没有GIL的有：Jython，IronPython。</li></ul><h2 id="验证Cpython的并发效率"><a href="#验证Cpython的并发效率" class="headerlink" title="验证Cpython的并发效率"></a>验证Cpython的并发效率</h2><h3 id="I-O密集型任务"><a href="#I-O密集型任务" class="headerlink" title="I/O密集型任务"></a>I/O密集型任务</h3><p>开启150个进程，执行I/O任务，计算耗时：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 多进程</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"I/O密集型"</span></span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    tasks = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">150</span>):</span><br><span class="line">        p = Process(target=task1)</span><br><span class="line">        p.start()</span><br><span class="line">        tasks.append(p)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> tasks:</span><br><span class="line">        j.join()</span><br><span class="line">    print(<span class="string">f'主: <span class="subst">&#123;time.time() - start_time&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">结果是:</span></span><br><span class="line"><span class="section">主: 8.226112842559814</span></span><br></pre></td></tr></table></figure><p>开启150个线程，执行I/O任务，计算耗时：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 多线程</span></span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"I/O密集型"</span></span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    tasks = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">150</span>):</span><br><span class="line">        p = Thread(target=task1)</span><br><span class="line">        p.start()</span><br><span class="line">        tasks.append(p)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> tasks:</span><br><span class="line">        j.join()</span><br><span class="line">    print(<span class="string">f'主: <span class="subst">&#123;time.time() - start_time&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">结果是：</span><br><span class="line">主: <span class="number">3.042125940322876</span></span><br></pre></td></tr></table></figure><h4 id="结论："><a href="#结论：" class="headerlink" title="结论："></a>结论：</h4><p>任务是I/O密集型并且任务数量很大，用单进程下的多线程效率很高。</p><h3 id="计算密集型任务"><a href="#计算密集型任务" class="headerlink" title="计算密集型任务"></a>计算密集型任务</h3><p>开启10个进程，并计算耗时：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"计算密集型"</span></span><br><span class="line">    res = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">100000000</span>):</span><br><span class="line">        res += i</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    tasks = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        p = Process(target=task1)</span><br><span class="line">        p.start()</span><br><span class="line">        tasks.append(p)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> tasks:</span><br><span class="line">        j.join()</span><br><span class="line">    print(<span class="string">f'主: <span class="subst">&#123;time.time() - start_time&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">结果：</span><br><span class="line">主: <span class="number">17.270192623138428</span></span><br></pre></td></tr></table></figure><p>开启10个线程，并计算耗时：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"计算密集型"</span></span><br><span class="line">    res = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">100000000</span>):</span><br><span class="line">        res += i</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">    start_time = time.time()</span><br><span class="line">    tasks = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        p = Thread(target=task1)</span><br><span class="line">        p.start()</span><br><span class="line">        tasks.append(p)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> tasks:</span><br><span class="line">        j.join()</span><br><span class="line">    print(<span class="string">f'主: <span class="subst">&#123;time.time() - start_time&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">结果：</span><br><span class="line">主: <span class="number">65.70263719558716</span></span><br></pre></td></tr></table></figure><h2 id="GIL与互斥锁的关系"><a href="#GIL与互斥锁的关系" class="headerlink" title="GIL与互斥锁的关系"></a>GIL与互斥锁的关系</h2><ol><li><p>GIL自动上锁，解锁；文件中的互斥锁Lock是手动上锁，解锁。</p></li><li><p>GIL锁保护解释器的数据安全；文件中的互斥锁Lock保护文件的数据安全。</p></li><li><p>GIL锁保证了进程安全；Lock锁保证了线程安全。</p><p>GIL要保证同一时刻只有一个线程在解释器中运行，进而保证了<strong>进程安全</strong></p><p>进程是<strong>系统资源分配</strong>的最小单位，线程是程序执行的最小单位。多线程环境中，<strong>共享数据</strong>同一时间只能有一个<strong>线程</strong>来操作，不然中间过程可能会产生不可预制的结果，所以这就保证了<strong>线程安全</strong></p></li></ol><h2 id="当前GIL设计的缺陷"><a href="#当前GIL设计的缺陷" class="headerlink" title="当前GIL设计的缺陷"></a>当前GIL设计的缺陷</h2><p>以下图片来自[Understanding the Python GIL][<a href="https://speakerdeck.com/dabeaz/understanding-the-python-gil]，还有[Youtube视频解释][https://www.youtube.com/watch?v=Obt-vMVdM8s]。" target="_blank" rel="noopener">https://speakerdeck.com/dabeaz/understanding-the-python-gil]，还有[Youtube视频解释][https://www.youtube.com/watch?v=Obt-vMVdM8s]。</a></p><h3 id="对于单核CPU下的多线程"><a href="#对于单核CPU下的多线程" class="headerlink" title="对于单核CPU下的多线程"></a>对于单核CPU下的多线程</h3><p><img src="/learn-python/20190520-python-global-interpreter-lock/%E5%8D%95%E6%A0%B8.png" alt="单核"></p><ul><li>线程交替执行，但切换频率远低于你的想象，在线程上下文切换之前可能会发生数百上千次检查。</li><li>这是没有问题，也是表现很好的。但问题随着多核的出现而出现。</li></ul><h3 id="对于多核CPU下的多线程："><a href="#对于多核CPU下的多线程：" class="headerlink" title="对于多核CPU下的多线程："></a>对于多核CPU下的多线程：</h3><p><img src="/learn-python/20190520-python-global-interpreter-lock/%E5%A4%9A%E6%A0%B8.png" alt="多核"></p><ul><li><p>使用多个cpu，可运行的线程可以同时（在不同的cpu上）进行调度，并通过GIL进行争夺。</p></li><li><p>线程2不断地接受信号，可当它醒来时GIL已经被其他线程取走了。</p></li></ul><p><img src="/learn-python/20190520-python-global-interpreter-lock/%E5%A4%9A%E6%A0%B82.png" alt="多核2"></p><ul><li>对于计算密集型任务来说，想要处理事件的其他线程很难获取GIL。</li></ul><p>虽然在Python3.2出现了一个新的GIL，对上面的这种不公平现象进行了一定的解决（<strong>convoy effect(FCFS算法)</strong>，但也出现了其它方面的下降。</p><h2 id="替代方案"><a href="#替代方案" class="headerlink" title="替代方案"></a>替代方案</h2><h3 id="计算密集型任务交给multiprocess（多进程）"><a href="#计算密集型任务交给multiprocess（多进程）" class="headerlink" title="计算密集型任务交给multiprocess（多进程）"></a>计算密集型任务交给multiprocess（多进程）</h3><p>multiprocess库的出现很大程度上是为了弥补thread库因为GIL而低效的缺陷。它完整的复制了一套thread所提供的接口方便迁移。唯一的不同就是它使用了多进程而不是多线程。每个进程有自己的独立的GIL，因此也不会出现进程之间的GIL争抢。但它也存在着开辟耗费的资源高，进程间的通信复杂，我们要做好平衡。</p><h3 id="用其他解释器（不推荐）"><a href="#用其他解释器（不推荐）" class="headerlink" title="用其他解释器（不推荐）"></a>用其他解释器（不推荐）</h3><p>之前也提到既然GIL只是CPython的产物，那么其他解析器是不是更好呢？没错，像Jython和IronPython这样的解析器由于实现语言的特性，他们不需要GIL的帮助。然而由于用了Java/C#用于解析器实现，他们也失去了利用社区众多C语言模块有用特性的机会。所以这些解析器也因此一直都比较小众。毕竟功能和性能大家在初期都会选择前者，<strong>Done is better than perfect。</strong></p><h3 id="通过C扩展实现-难度高"><a href="#通过C扩展实现-难度高" class="headerlink" title="通过C扩展实现(难度高)"></a>通过C扩展实现(难度高)</h3><p>​ 只需要把关键部分用 C/C++ 写成 Python 扩展，其它部分还是用 Python 来写，让 Python 的归Python，C 的归 C。一般计算密集性的程序都会用 C 代码编写并通过扩展的方式集成到 Python 脚本里（如 NumPy 模块）。在扩展里就完全可以用 C 创建原生线程，而且不用锁 GIL，充分利用 CPU 的计算资源了。</p><p>[推荐阅读][<a href="https://blog.csdn.net/nbadwde/article/details/80713819]" target="_blank" rel="noopener">https://blog.csdn.net/nbadwde/article/details/80713819]</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>GIL是一把大锁，它带来了方便和安全，但也留下了遗憾（无法并行）。</p><p>Python GIL其实是功能和性能之间权衡后的产物，它尤其存在的合理性，也有较难改变的客观因素。</p><p>我们要根据任务性质来决定使用多线程还是多进程，还是通过C扩展来完成计算密集型。</p>]]></content>
      <categories>
        <category>python学习</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>python</tag>
        <tag>并发编程</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/learn-python/20190519-python-programming-with-threads.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>本节介绍Python并发编程下的线程，先介绍线程的相关知识，然后对python中threading模块进行介绍。</p></blockquote><a id="more"></a><h2 id="线程的理论知识"><a href="#线程的理论知识" class="headerlink" title="线程的理论知识"></a>线程的理论知识</h2><h3 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h3><p>​ 在多线程（multithreaded，MT）编程出现之前，计算机程序的执行是由单个步骤序列组成的，该序列在主机的 CPU 中按照同步顺序执行。无论是任务本身需要按照步骤顺序执行，还是整个程序实际上包含多个子任务，都需要按照这种顺序方式执行。那么，假如这些<strong>子任务相互独立，没有因果关系</strong>（也就是说，各个子任务的结果并不影响其他子任务的结果），这种做法是不是不符合逻辑呢？要是让这些<strong>独立的任务同时运行</strong>，会怎么样呢？很明显，这种并行处理方式可以显著地提高整个任务的性能。这就是多线程编程。</p><p>​ 多线程编程对于具有如下特点的编程任务而言是非常理想的：本质上是异步的；需要多个并发活动；每个活动的处理顺序可能是不确定的，或者说是随机的、不可预测的。这种编程任务可以被组织或划分成多个执行流，其中每个执行流都有一个指定要完成的任务。根据应用的不同，这些子任务可能需要计算出中间结果，然后合并为最终的输出结果。</p><h3 id="什么是线程"><a href="#什么是线程" class="headerlink" title="什么是线程"></a>什么是线程</h3><p>线程（有时候称为轻量级进程）（线程就是一条流水线）是在同一个进程下执行的，并共享相同的上下文。</p><p>线程包括开始、执行顺序和结束三部分。它有一个指令指针，用于记录当前运行的上下文。当其他线程运行时，它可以被抢占（中断）和临时挂起（也称为睡眠）——这种做法叫做让步（yielding）。</p><h3 id="什么是进程？进程开启经历了什么？"><a href="#什么是进程？进程开启经历了什么？" class="headerlink" title="什么是进程？进程开启经历了什么？"></a>什么是进程？进程开启经历了什么？</h3><ul><li><p>进程（有时称为重量级进程）是一个执行中的程序。</p></li><li><p>开启进程：内存中开空间，加载资源与数据，调用cpu执行，可能还会使用这个空间的资源。</p><ul><li>进程：划分空间，加载资源。 （进程是没有执行力的）（静态的）</li><li>线程：执行代码。（动态地）</li><li>例如：开启qq：开启一个进程（在内存中开辟空间，加载数据），启动一个线程执行代码。</li></ul></li></ul><p>​ 线程是依赖于进程的，一个进程中的各个线程与主线程共享同一片数据空间。线程一般是以并发方式执行的，正是由于这种并行和数据共享机制，使得多任务间的协作成为可能。</p><p>​ 当然，这种共享并不是没有风险的。如果两个或多个线程访问同一片数据，由于数据访问顺序不同，可能导致结果不一致。这种情况通常称为<strong>竞态条件</strong>（race condition）。幸运的是，大多数线程库都有一些<strong>同步原语</strong>，以允许线程管理器控制执行和访问。</p><h3 id="线程vs进程（理论）"><a href="#线程vs进程（理论）" class="headerlink" title="线程vs进程（理论）"></a>线程vs进程（理论）</h3><ol><li><p>开启多进程，开销非常大；10-100倍，开启线程开销非常小。</p></li><li><p>开启多进程的速度慢，开启多线程的速度快</p></li><li><p>进程之间的数据不能直接共享，通信通过队列；同一个进程下的线程之间的数据可以共享。</p></li></ol><h3 id="多线程的应用场景介绍"><a href="#多线程的应用场景介绍" class="headerlink" title="多线程的应用场景介绍"></a>多线程的应用场景介绍</h3><p>并发：一个cpu来回切换（在线程上切换的），包括多进程的并发和多线程的并发。</p><p>多进程并发：开启多个进程，每个进程里面的主线程执行任务。</p><p>多线程并发：开启1个进程，此进程里面多个线程执行任务。</p><p>多进程多线程：（ 待补充！！！）</p><h3 id="什么时候用多进程，什么时候用多线程？"><a href="#什么时候用多进程，什么时候用多线程？" class="headerlink" title="什么时候用多进程，什么时候用多线程？"></a>什么时候用多进程，什么时候用多线程？</h3><p>一个程序：三个不同的任务。word中写文章</p><p>键盘输入，显示在屏幕上，自动保存。 ——多线程！！！</p><p><strong>I/O 密集型</strong>的 Python 程序要比计算密集型的代码能够更好地利用多线程环境。</p><h2 id="在Python中使用线程"><a href="#在Python中使用线程" class="headerlink" title="在Python中使用线程"></a>在Python中使用线程</h2><h3 id="开启线程的两种方式"><a href="#开启线程的两种方式" class="headerlink" title="开启线程的两种方式"></a>开启线程的两种方式</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 第一种方式</span></span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">f'<span class="subst">&#123;name&#125;</span>is running'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    t = Thread(target=task,args=(<span class="string">'小白'</span>,))</span><br><span class="line">    t.start()</span><br><span class="line">    print(<span class="string">'主线程'</span>)  <span class="comment"># 主线程与非主线程本来没有主子线程的说法，它们是平等的</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二种方式</span></span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span><span class="params">(Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">f'<span class="subst">&#123;self.name&#125;</span>is running'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    t = MyThread(name=<span class="string">'小白'</span>)</span><br><span class="line">    t.start()</span><br><span class="line">    print(<span class="string">'主线程'</span>)</span><br></pre></td></tr></table></figure><h3 id="线程与进程之间的对比（验证理论）"><a href="#线程与进程之间的对比（验证理论）" class="headerlink" title="线程与进程之间的对比（验证理论）"></a>线程与进程之间的对比（验证理论）</h3><h4 id="速度的对比"><a href="#速度的对比" class="headerlink" title="速度的对比"></a>速度的对比</h4><p>不像进程那样，它的速度很快</p><h4 id="pid："><a href="#pid：" class="headerlink" title="pid："></a>pid：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">f'子线程：<span class="subst">&#123;os.getpid()&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    t = Thread(target=task,args=())</span><br><span class="line">    t.start()</span><br><span class="line">    print(<span class="string">f'主线程：<span class="subst">&#123;os.getpid()&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><p>结论：它们在同一个进程。</p><h4 id="线程之间共享资源"><a href="#线程之间共享资源" class="headerlink" title="线程之间共享资源"></a>线程之间共享资源</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span>  Thread</span><br><span class="line">x = <span class="number">1000</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> x</span><br><span class="line">    x = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    t = Thread(target=task)</span><br><span class="line">    t.start()</span><br><span class="line">    t.join()</span><br><span class="line">    print(<span class="string">f'主进程: <span class="subst">&#123;x&#125;</span>'</span>)</span><br><span class="line"><span class="comment"># 有I/O才能提高效率，否则都不如以前的串行</span></span><br></pre></td></tr></table></figure><h3 id="线程的其他方法"><a href="#线程的其他方法" class="headerlink" title="线程的其他方法"></a>线程的其他方法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">f'<span class="subst">&#123;name&#125;</span> is running '</span>)</span><br><span class="line">    print(threading.current_thread().name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    t = Thread(target=task, args=(<span class="string">'小白'</span>,),name = <span class="string">'线程1'</span>)</span><br><span class="line">    t.start()</span><br><span class="line">    <span class="comment"># 编程对象的方法</span></span><br><span class="line">    <span class="comment"># print(t.is_alive())     # 判断子线程是否存活</span></span><br><span class="line">    <span class="comment"># print(t.getName())      # 获取线程名</span></span><br><span class="line">    <span class="comment"># t.setName('线程1111')</span></span><br><span class="line">    <span class="comment"># print(t.getName())  # 获取线程名</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># threading模块的方法</span></span><br><span class="line">    <span class="comment"># print(threading.current_thread().name)  # 获取当前线程名</span></span><br><span class="line">    print(threading.enumerate())        <span class="comment"># 返回一个列表，放置所有的线程对象</span></span><br><span class="line">    print(threading.active_count())     <span class="comment"># len()上面就可以得到下面这个。 获取活跃的线程数量，包括主线程。</span></span><br><span class="line">    print(<span class="string">"主线程"</span>)</span><br></pre></td></tr></table></figure><h3 id="threading模块的对象与函数"><a href="#threading模块的对象与函数" class="headerlink" title="threading模块的对象与函数"></a>threading模块的对象与函数</h3><table><thead><tr><th>threading模块的对象与函数</th><th align="left">描述</th></tr></thead><tbody><tr><td><strong>对象</strong></td><td align="left"></td></tr><tr><td>Thread</td><td align="left">表示一个执行线程的对象</td></tr><tr><td>Lock</td><td align="left">锁原语对象（和 thread 模块中的锁一样）</td></tr><tr><td>RLock</td><td align="left">可重入锁对象，使单一线程可以（再次）获得已持有的锁（递归锁）</td></tr><tr><td>Condition</td><td align="left">条件变量对象，使得一个线程等待另一个线程满足特定的“条件”，比如改变状态或某个数据值</td></tr><tr><td>Event</td><td align="left">条件变量的通用版本，任意数量的线程等待某个事件的发生，在该事件发生后所有线程将被激活</td></tr><tr><td>Semaphore</td><td align="left">为线程间共享的有限资源提供了一个“计数器”，如果没有可用资源时会被阻塞</td></tr><tr><td>BoundedSemaphore</td><td align="left">与 Semaphore 相似，不过它不允许超过初始值</td></tr><tr><td>Timer</td><td align="left">与 Thread 相似，不过它要在运行前等待一段时间</td></tr><tr><td>barrier</td><td align="left">创建一个“障碍”，必须达到指定数量的线程后才可以继续</td></tr><tr><td><strong>函数</strong></td><td align="left"></td></tr><tr><td><code>active_count()</code></td><td align="left">当前活动的 Thread 对象个数</td></tr><tr><td><code>current_thread</code></td><td align="left">返回当前的 Thread 对象</td></tr><tr><td><code>enumerate()</code></td><td align="left">返回当前活动的 Thread 对象列表</td></tr><tr><td><code>settrace (*func*)</code></td><td align="left">为所有线程设置一个 trace 函数</td></tr><tr><td><code>setprofile *(func*)</code></td><td align="left">为所有线程设置一个 profile 函数</td></tr><tr><td>stack_size (<em>size</em>=0)</td><td align="left">返回新创建线程的栈大小；或为后续创建的线程设定栈的大小为size</td></tr></tbody></table><h3 id="Thread类"><a href="#Thread类" class="headerlink" title="Thread类"></a>Thread类</h3><table><thead><tr><th>属性与方法</th><th>描 述</th></tr></thead><tbody><tr><td><strong>Thread对象数据属性</strong></td><td></td></tr><tr><td>name</td><td>线程名</td></tr><tr><td>ident</td><td>线程的标识符</td></tr><tr><td>daemon</td><td>布尔标志，表示这个线程是否是守护线程</td></tr><tr><td><strong>Thread 对象方法</strong></td><td></td></tr><tr><td><code>_init_(group=None, *tatget*=None, *name*=None, *args*=(), kwargs* ={}, *verbose*=None, *daemon*=None)</code></td><td>实例化一个线程对象，需要有一个可调用的 <em>target<em>，以及其参数 *args</em>或 <em>kwargs</em>。还可以传递 *name</em> 或 <em>group</em> 参数，不过后者还未实现。此外 ， <em>verbose</em> 标志也是可接受的。而 <em>daemon</em> 的值将会设定 <em>thread.daemon</em> 属性/标志</td></tr><tr><td><code>start()</code></td><td>开始执行该线程</td></tr><tr><td><code>run()</code></td><td>定义线程功能的方法（通常在子类中被应用开发者重写）</td></tr><tr><td><code>join(timeout=None)</code></td><td>直至启动的线程终止之前一直挂起；除非给出了 <em>timeout</em>（秒），否则会一直阻塞</td></tr><tr><td><code>getName()</code></td><td>返回线程名</td></tr><tr><td><code>setName()</code></td><td>设定线程名</td></tr><tr><td><code>is_alive()</code></td><td>布尔标志，表示这个线程是否还存活</td></tr><tr><td><code>isDaemon()</code></td><td>如果是守护线程，则返回 True；否则，返回 False</td></tr></tbody></table><h3 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h3><p>注意和守护线程区分：主进程/主线程 什么时候结束</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 回顾守护进程</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="number">123</span>)  <span class="comment"># 进程启动慢，还没来得及打印123，主进程就已经执行完了。</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">'end123'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="number">456</span>)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    print(<span class="string">"end456"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    f = Process(target=foo)</span><br><span class="line">    b = Process(target=bar)</span><br><span class="line">    f.daemon = <span class="literal">True</span></span><br><span class="line">    f.start()</span><br><span class="line">    b.start()</span><br><span class="line">    print(<span class="string">'main-------'</span>)  <span class="comment"># 进程启动慢</span></span><br></pre></td></tr></table></figure><p>守护线程：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="number">123</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    f = Thread(target=foo)</span><br><span class="line">    f.daemon = <span class="literal">True</span></span><br><span class="line">    f.start()</span><br><span class="line">    print(<span class="string">"主线程"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="number">123</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">'end123'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="number">456</span>)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    print(<span class="string">"end456"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    f = Thread(target=foo)</span><br><span class="line">    b = Thread(target=bar)</span><br><span class="line">    f.daemon = <span class="literal">True</span></span><br><span class="line">    f.start()</span><br><span class="line">    b.start()</span><br><span class="line">    print(<span class="string">"主线程---"</span>) <span class="comment"># 主进程的主流水线，主进程中，相当于主流水线over，主进程结束，所以守护它的子进程也要结束。</span></span><br></pre></td></tr></table></figure><ul><li><p>守护：子守护主，只要主结束，子马上结束。</p></li><li><p><strong>如果把一个线程设置为守护线程，就表示这个线程是不重要的，进程退出时不需要等待这个线程执行完成。</strong></p></li><li><p>主线程什么时候结束？？？（进程和线程的守护的根本上的一个差别）</p><ul><li>主线程是进程存活在内存中的一个必要条件。</li><li>主线程将在所有非守护线程退出之后才退出，换句话说，就是没有剩下存活的非守护线程时就退出。</li></ul></li><li><p>结论：守护线程，必须等待所有的非守护线程以及主线程结束之后才能结束。</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 验证</span></span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="number">123</span>)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    print(<span class="string">'end123'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="number">456</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">"end456"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    f = Thread(target=foo)</span><br><span class="line">    b = Thread(target=bar)</span><br><span class="line">    f.daemon = <span class="literal">True</span></span><br><span class="line">    f.start()</span><br><span class="line">    b.start()</span><br><span class="line">    print(<span class="string">"主线程---"</span>)  <span class="comment"># 主进程的主流水线，主进程中，相当于主流水线over，主进程结束，所以守护它的子进程也要结束。</span></span><br></pre></td></tr></table></figure><ul><li>当把守护进程的时间增加时，它得等主线程结束和其它非守护进程结束。</li><li>主线程又在等其它非守护进程的结束。所以，守护进程没有打印end123就被终止了。</li></ul><h2 id="线程同步（同步原语）"><a href="#线程同步（同步原语）" class="headerlink" title="线程同步（同步原语）"></a>线程同步（同步原语）</h2><p>​ 一般在多线程代码中，总会有一些特定的函数或代码块不希望（或不应该）被多个线程同时执行，通常包括修改数据库、更新文件或其他会产生<strong>竞态条件</strong>的类似情况。</p><p>​ 当任意数量的线程可以访问临界区的代码）但在给定的时刻只有一个线程可以通过时，就是使用同步的时候了。程序员选择适合的同步原语，或者线程控制机制来执行同步。</p><p>​ 两个重要的<strong>同步原语</strong> ：<strong>互斥锁</strong>与<strong>信号量</strong>。</p><p>​ 锁是所有机制中最简单、最低级的机制，而信号量用于多线程竞争有限资源的情况。锁比较容易理解，因此先从锁开始，然后再讨论信号量。</p><blockquote><p>什么是竞态条件？</p><p>当两个线程竞争同一资源时，如果对资源的访问顺序敏感，就称存在竞态条件。</p><p>导致竞态条件发生的代码区称作<strong>临界区</strong>。</p><p>在临界区中使用适当的同步就可以避免竞态条件。</p></blockquote><h3 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h3><p>互斥锁，锁，同步锁都是一把锁。</p><p>如果没有锁会出现：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Lock</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">x = <span class="number">100</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> x</span><br><span class="line">    <span class="comment"># print(x)</span></span><br><span class="line">    temp = x</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    temp -= <span class="number">1</span></span><br><span class="line">    x = temp</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    t_l = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">        t = Thread(target=task)</span><br><span class="line">        t.start()</span><br><span class="line">        t_l.append(t)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> t_l:           <span class="comment"># 主线程等待所有线程都结束。</span></span><br><span class="line">        i.join()</span><br><span class="line">    print(<span class="string">f'主线程程<span class="subst">&#123;x&#125;</span>'</span>)    <span class="comment"># 主线程程99</span></span><br></pre></td></tr></table></figure><p>使用锁的话，才能达到要求。</p><p>​ 当多线程争夺锁时，允许第一个获得锁的线程进入<strong>临界区</strong>，并执行代码。所有之后到达的线程将被<strong>阻塞</strong>，直到第一个线程执行结束，退出临界区，并释放锁。此时，其他等待的线程可以获得锁并进入临界区。不过请记住，<u>那些被阻塞的线程是没有顺序的（即不是先到先执行），胜出线程的选择是不确定的，而且还会根据 Python 实现的不同而有所区别。</u></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Lock</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">x = <span class="number">100</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">(lock)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> x</span><br><span class="line">    <span class="comment"># print(x)   # print放在上面就会出现进程当时演示的效果。cpu会切换过来</span></span><br><span class="line">    lock.acquire()</span><br><span class="line">    <span class="comment"># lock.acquire()   # 非递归锁，多一次就阻塞了,即使release也一样</span></span><br><span class="line">    <span class="comment"># global x    # global只是声明，放前放后都一样，真正动态可变的是x</span></span><br><span class="line">    print(x)</span><br><span class="line">    temp = x</span><br><span class="line">    <span class="comment"># time.sleep(0.1)</span></span><br><span class="line">    temp -= <span class="number">1</span></span><br><span class="line">    x = temp</span><br><span class="line">    lock.release()</span><br><span class="line">    <span class="comment"># lock.release()</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">第一个线程：x = 100， 剩下的线程拿到的都是x</span></span><br><span class="line"><span class="string">第一个线程执行完毕： x = 99</span></span><br><span class="line"><span class="string">第二个线程：x = 99，剩下的</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    lock = Lock()</span><br><span class="line">    t_l = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">        t = Thread(target=task, args=(lock,))</span><br><span class="line">        t.start()</span><br><span class="line">        t_l.append(t)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> t_l:</span><br><span class="line">        i.join()</span><br><span class="line">    print(<span class="string">f'主线程:<span class="subst">&#123;x&#125;</span>'</span>) 		<span class="comment"># 主线程:0</span></span><br></pre></td></tr></table></figure><p>互斥锁与join区别？</p><ul><li>异：互斥锁 随机抢锁，公平；join 提前排好顺序，不公平</li><li>同：它们都是串行。</li></ul><h4 id="使用上下文管理"><a href="#使用上下文管理" class="headerlink" title="使用上下文管理"></a>使用上下文管理</h4><p>如果你使用 Python 2.5 或更新版本，还有一种方案可以不再调用锁的 acquire()和 release()</p><p>方法，从而更进一步简化代码。这就是使用 with 语句，此时每个对象的上下文管理器负责在</p><p>进入该套件之前调用 acquire()并在完成执行之后调用 release()。</p><p>threading 模块的对象 Lock、RLock、Condition、Semaphore 和 BoundedSemaphore 都包含</p><p>上下文管理器。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用上下文管理 方法1</span></span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Lock</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">x = <span class="number">100</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">(lock)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> lock:</span><br><span class="line">        <span class="keyword">global</span> x</span><br><span class="line">        print(x)</span><br><span class="line">        temp = x</span><br><span class="line">        temp -= <span class="number">1</span></span><br><span class="line">        x = temp</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    lock = Lock()</span><br><span class="line">    t_l = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">        t = Thread(target=task, args=(lock,))</span><br><span class="line">        t.start()</span><br><span class="line">        t_l.append(t)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> t_l:</span><br><span class="line">        i.join()</span><br><span class="line">    print(<span class="string">f'主线程:<span class="subst">&#123;x&#125;</span>'</span>) 		<span class="comment"># 主线程:0</span></span><br></pre></td></tr></table></figure><p>再次精简一下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Lock</span><br><span class="line"></span><br><span class="line">x = <span class="number">100</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> x</span><br><span class="line">    print(x)</span><br><span class="line">    temp = x</span><br><span class="line">    temp -= <span class="number">1</span></span><br><span class="line">    x = temp</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    lock = Lock()</span><br><span class="line">    t_l = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">        t = Thread(target=task,)</span><br><span class="line">        <span class="keyword">with</span> lock:</span><br><span class="line">            t.start()</span><br><span class="line">            t_l.append(t)</span><br><span class="line">    print(<span class="string">f'主线程:<span class="subst">&#123;x&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><h3 id="死锁现象，递归锁"><a href="#死锁现象，递归锁" class="headerlink" title="死锁现象，递归锁"></a>死锁现象，递归锁</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> RLock</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">lock_A = lock_B = RLock()  <span class="comment"># 获得一把递归锁</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span><span class="params">(Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.f1()</span><br><span class="line">        self.f2()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(self)</span>:</span></span><br><span class="line">        lock_A.acquire()</span><br><span class="line">        print(<span class="string">f'<span class="subst">&#123;self.name&#125;</span>拿到A锁'</span>)</span><br><span class="line"></span><br><span class="line">        lock_B.acquire()</span><br><span class="line">        print(<span class="string">f'<span class="subst">&#123;self.name&#125;</span>拿到B锁'</span>)</span><br><span class="line">        lock_B.release()</span><br><span class="line"></span><br><span class="line">        lock_A.release()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">(self)</span>:</span></span><br><span class="line">        lock_B.acquire()</span><br><span class="line">        print(<span class="string">f'<span class="subst">&#123;self.name&#125;</span>拿到A锁'</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        lock_A.acquire()</span><br><span class="line">        print(<span class="string">f'<span class="subst">&#123;self.name&#125;</span>拿到B锁'</span>)</span><br><span class="line">        lock_A.release()</span><br><span class="line">        lock_B.release()</span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    t1 = MyThread()</span><br><span class="line">    t1.start()</span><br><span class="line">    t2 = MyThread()</span><br><span class="line">    t2.start()</span><br><span class="line">    t3 = MyThread()</span><br><span class="line">    t3.start()</span><br><span class="line">    print(<span class="string">'主线程'</span>)</span><br></pre></td></tr></table></figure><ul><li>使用递归锁去解决死锁问题。</li><li>递归锁是一把锁。锁上有记录，只要acquire一次，锁上计数一次，acquire两次，计数两次。 release一次，计数减一。只要递归锁计数不为0，其它线程不能抢。</li><li>从两把锁变成一把锁，根本上是为了执行这个程序，要给它所有可用的资源。</li></ul><h3 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h3><p>​ 信号量是最古老的同步原语之一。它是一个<strong>计数器</strong>，当资源消耗时递减，当资源释放时递增。你可以认为信号量代表它们的资源可用或不可用。<strong>消耗资源使计数器递减的操作习惯上称为 P()</strong>（来源于荷兰单词 probeer/proberen），也称为 wait、try、acquire、pend 或 procure。</p><p>​ 相对地，当一个线程对一个资源完成操作时，<strong>该资源需要返回资源池中。这个操作一般称为 V()</strong>（来源于荷兰单词 verhogen/verhoog），也称为 signal、increment、release、post、vacate。</p><p>​ Python 简化了所有的命名，使用和锁的函数/方法一样的名字：acquire 和 release。信号量比锁更加灵活，因为可以有多个线程，每个线程拥有有限资源的一个实例。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread,Semaphore,current_thread</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">sm = Semaphore(<span class="number">4</span>)</span><br><span class="line"><span class="comment"># 同一时刻允许4个进入</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">go_public_wc</span><span class="params">()</span>:</span></span><br><span class="line">    sm.acquire()</span><br><span class="line">    time.sleep(random.randint(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line">    print(<span class="string">f'<span class="subst">&#123;current_thread().name&#125;</span>正在厕所'</span>)</span><br><span class="line">    <span class="comment"># print(f'&#123;current_thread().name&#125;over')</span></span><br><span class="line">    sm.release()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">20</span>):</span><br><span class="line">        t = Thread(target=go_public_wc)</span><br><span class="line">        t.start()</span><br></pre></td></tr></table></figure><h1 id="线程Queue"><a href="#线程Queue" class="headerlink" title="线程Queue"></a>线程Queue</h1><p>在线程中我们使用queue模块，这里面我们使用到栈、队列和优先级队列</p><h2 id="队列-FIFO"><a href="#队列-FIFO" class="headerlink" title="队列 FIFO"></a>队列 FIFO</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> queue</span><br><span class="line"></span><br><span class="line">q = queue.Queue(<span class="number">3</span>)</span><br><span class="line">q.put(<span class="number">1</span>)</span><br><span class="line">q.put(<span class="number">2</span>)</span><br><span class="line">q.put(<span class="number">3</span>)</span><br><span class="line">q.put(<span class="number">666</span>)  <span class="comment"># 超过上限默认进入阻塞</span></span><br><span class="line">print(q.get())</span><br><span class="line">print(q.get())</span><br><span class="line">print(q.get())</span><br></pre></td></tr></table></figure><h2 id="栈-LIFO"><a href="#栈-LIFO" class="headerlink" title="栈 LIFO"></a>栈 LIFO</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> queue</span><br><span class="line">q = queue.LifoQueue()</span><br><span class="line">q.put(<span class="number">1</span>)</span><br><span class="line">q.put(<span class="number">2</span>)</span><br><span class="line">q.put(<span class="number">3</span>)</span><br><span class="line">print(q.get())</span><br><span class="line">print(q.get())</span><br><span class="line">print(q.get())</span><br></pre></td></tr></table></figure><h2 id="优先级队列"><a href="#优先级队列" class="headerlink" title="优先级队列"></a>优先级队列</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> queue</span><br><span class="line">q = queue.PriorityQueue(<span class="number">3</span>)</span><br><span class="line">q.put((<span class="number">10</span>,<span class="string">'垃圾消息'</span>))     <span class="comment"># 需要元组的形式（priority number, data)， 数字越小，优先级越高。</span></span><br><span class="line">q.put((<span class="number">-10</span>,<span class="string">'紧急消息'</span>))</span><br><span class="line">q.put((<span class="number">3</span>,<span class="string">'一般消息'</span>))</span><br><span class="line">print(q.get())</span><br><span class="line">print(q.get())</span><br><span class="line">print(q.get())    <span class="comment"># 越小的，越重要</span></span><br></pre></td></tr></table></figure><hr>]]></content>
      <categories>
        <category>python学习</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>python</tag>
        <tag>并发编程</tag>
      </tags>
  </entry>
  <entry>
    <title>Python并发编程之进程</title>
    <url>/learn-python/20190518-python-programming-with-multiprocesses.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>本篇介绍Python并发编程下的进程，先介绍进程的相关知识，然后对python中multiprocessing模块进行介绍（<code>Process</code>、<code>Pipe</code>、<code>Queue</code>以及 <code>Lock</code>）。</p></blockquote><a id="more"></a><h1 id="进程（process）"><a href="#进程（process）" class="headerlink" title="进程（process）"></a>进程（process）</h1><p>在面向线程设计的系统（如当代多数操作系统、Linux 2.6及更新的版本）中，进程本身不是基本运行单位，而是<strong>线程的容器</strong>。</p><p>进程拥有自己<strong>独立</strong>的内存空间，所属线程可以访问进程的空间。</p><p>程序本身只是指令、数据及其组织形式的描述，进程才是程序的真正运行实例。 例如，我们在PyCharm开发环境中写好一个程序，运行的时候python解释器完成解释并执行该程序。</p><p>进程 = 程序段 + 数据段 + PCB</p><h2 id="全局解释器锁GIL"><a href="#全局解释器锁GIL" class="headerlink" title="全局解释器锁GIL"></a>全局解释器锁GIL</h2><p>​ GIL是计算机程序设计语言解释器用于<strong>同步线程</strong>的一种机制，它使得任何时刻仅有一个线程在执行。即便在多核心处理器上，使用 GIL 的解释器也只允许<strong>同一时间执行一个线程</strong>。Python的Cpython解释器（普遍使用的解释器）使用GIL，在一个Python解释器进程内可以执行多线程程序，但每次一个线程执行时就会获得全局解释器锁，使得别的线程只能等待，由于GIL几乎释放的同时就会被原线程马上获得，那些等待线程可能刚唤醒，所以经常造成<strong>线程不平衡享受CPU资源</strong>，此时多线程的效率比单线程还要低下。</p><blockquote><p>In CPython, the global interpreter lock, or GIL, is a mutex that prevents multiple native threads from executing Python bytecodes at once. <strong>This lock is necessary mainly because CPython’s memory management is not thread-safe.</strong> (However, since the GIL exists, other features have grown to depend on the guarantees that it enforces.)</p></blockquote><p>​ 可以说它的初衷是很好的，为了保证<strong>线程间的数据安全性</strong>；但是随着时代的发展，GIL却成为了python并行计算的最大障碍，但这个时候GIL已经遍布CPython的各个角落，修改它的工作量太大，特别是对这种开源性的语音来说。但幸好GIL只锁了线程，我们可以再新建解释器进程来实现并行，那这就是multiprocessing的工作了。</p><h1 id="multiprocessing模块介绍"><a href="#multiprocessing模块介绍" class="headerlink" title="multiprocessing模块介绍"></a>multiprocessing模块介绍</h1><blockquote><p>doc：The multiprocessing package offers both local and remote concurrency, effectively side-stepping the Global Interpreter Lock by using subprocesses instead of threads.</p></blockquote><h2 id="开启子进程的两种方式"><a href="#开启子进程的两种方式" class="headerlink" title="开启子进程的两种方式"></a>开启子进程的两种方式</h2><h3 id="第一种：直接调用"><a href="#第一种：直接调用" class="headerlink" title="第一种：直接调用"></a>第一种：直接调用</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">f'<span class="subst">&#123;name&#125;</span>is running '</span>)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    print(<span class="string">f'<span class="subst">&#123;name&#125;</span> is done'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># windows操作系统开启多进程，必须得写在main下面。</span></span><br><span class="line">    p = Process(target=task,args=(<span class="string">'小黑'</span>,))   <span class="comment"># args 一定是一个元组的形式</span></span><br><span class="line">    p.start()</span><br><span class="line">    print(<span class="string">'===主进程'</span>)</span><br><span class="line">    <span class="comment"># start与print几乎是同时发出，但是由于操作系统调用子进程会慢一些。#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 整个py文件是主进程</span></span><br><span class="line"><span class="comment"># p.start通知操作系统，你给我在内存中开辟一个空间，将p进程放进去，让cpu执行。</span></span><br></pre></td></tr></table></figure><h3 id="第二种-：继承式调用"><a href="#第二种-：继承式调用" class="headerlink" title="第二种 ：继承式调用"></a>第二种 ：继承式调用</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Myprocess</span><span class="params">(Process)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name)</span>:</span></span><br><span class="line">        <span class="comment"># 这里的顺序是有要求，不然反过来写会覆盖。</span></span><br><span class="line">        super().__init__()  <span class="comment"># 必须要执行父类的init</span></span><br><span class="line">        self.name = name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span>   <span class="comment"># 必须定义这个名字</span></span><br><span class="line">        print(<span class="string">f'<span class="subst">&#123;self.name&#125;</span>is running '</span>)</span><br><span class="line">        time.sleep(<span class="number">3</span>)</span><br><span class="line">        print(<span class="string">f'<span class="subst">&#123;self.name&#125;</span> is done'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    p = Myprocess(<span class="string">'小黑'</span>)</span><br><span class="line">    p.start()</span><br><span class="line">    print(<span class="string">'主进程'</span>)</span><br></pre></td></tr></table></figure><h2 id="获取进程以及父进程的pid"><a href="#获取进程以及父进程的pid" class="headerlink" title="获取进程以及父进程的pid"></a>获取进程以及父进程的pid</h2><p>操作系统如何区分进程？每个进程都有一个唯一标识，pid</p><ol><li><p>在终端查看进程的pid，cmd中输入<code>tasklist</code></p></li><li><p>在终端查看指定的进程pid，cmd中输入 <code>tasklist | findstr pycharm</code></p><p><img src="/learn-python/20190518-python-programming-with-multiprocesses/%E6%9F%A5%E7%9C%8B%E8%BF%9B%E7%A8%8B%E4%BF%A1%E6%81%AF.png" alt="查看进程信息"></p></li><li><p>通过代码查看pid</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">print(<span class="string">f'子进程：<span class="subst">&#123;os.getpid()&#125;</span>'</span>)  <span class="comment"># 查看当前进程pid</span></span><br><span class="line">print(<span class="string">f'父进程：<span class="subst">&#123;os.getppid()&#125;</span>'</span>) <span class="comment"># 查看父进程pid</span></span><br><span class="line">time.sleep(<span class="number">50000</span>)</span><br></pre></td></tr></table></figure></li></ol><h2 id="进程之间的数据隔离"><a href="#进程之间的数据隔离" class="headerlink" title="进程之间的数据隔离"></a>进程之间的数据隔离</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">x = <span class="number">1000</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> x</span><br><span class="line">    x = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    p1 = Process(target=task,)</span><br><span class="line">    p1.start()  <span class="comment"># 不是瞬发的，可能会等一会儿</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">f'主进程：<span class="subst">&#123;x&#125;</span>'</span>)   <span class="comment"># 主进程没有运行task这个函数，所以主进程内的x并未改变。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 但上面有些瑕疵，是主进程先执行的，我们想让子进程先执行，这样才能验证是否正的改变x,所以用一下time来使主进程慢一步。</span></span><br></pre></td></tr></table></figure><p>结论：进程之间的数据是相互隔离的。</p><p>下面测试是否有小数据池：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">x = <span class="number">100</span>  <span class="comment"># (-5 - 256)</span></span><br><span class="line">s = <span class="string">'h'</span></span><br><span class="line">l1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">f'子进程：<span class="subst">&#123;id(x)&#125;</span>'</span>)</span><br><span class="line">    print(<span class="string">f'子进程：<span class="subst">&#123;id(s)&#125;</span>'</span>)</span><br><span class="line">    print(<span class="string">f'子进程：<span class="subst">&#123;id(l1)&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(<span class="string">f'主进程:<span class="subst">&#123;id(x)&#125;</span>'</span>)</span><br><span class="line">    print(<span class="string">f'主进程:<span class="subst">&#123;id(s)&#125;</span>'</span>)</span><br><span class="line">    print(<span class="string">f'主进程:<span class="subst">&#123;id(l1)&#125;</span>'</span>)</span><br><span class="line">    p1 = Process(target=task,)</span><br><span class="line">    p1.start()</span><br></pre></td></tr></table></figure><p>结论：只有数字满足小数据池（-5-256）初始化时子进程与主进程是沿用一个.</p><h2 id="join方法"><a href="#join方法" class="headerlink" title="join方法"></a>join方法</h2><p>join ：阻塞目前父进程，它是通知主进程，等我执行完毕，主进程才能执行。</p><h3 id="情景一"><a href="#情景一" class="headerlink" title="情景一"></a>情景一</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">(name,sec)</span>:</span></span><br><span class="line">    time.sleep(sec)</span><br><span class="line">    print(<span class="string">f'<span class="subst">&#123;name&#125;</span> is running'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    p1 = Process(target=task, args=(<span class="string">'1'</span>,<span class="number">1</span>))</span><br><span class="line">    p2 = Process(target=task, args=(<span class="string">'2'</span>,<span class="number">2</span>))</span><br><span class="line">    p3 = Process(target=task, args=(<span class="string">'3'</span>,<span class="number">3</span>))</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    </span><br><span class="line">p1.start()</span><br><span class="line">p2.start()</span><br><span class="line">p3.start()</span><br><span class="line">p1.join()  <span class="comment"># p1 1s</span></span><br><span class="line">p2.join()  <span class="comment"># p2 2s</span></span><br><span class="line">p3.join()  <span class="comment"># p3 3s</span></span><br><span class="line">print(<span class="string">f'主进程<span class="subst">&#123;time.time()-start_time&#125;</span>秒后执行'</span>)  <span class="comment"># 主进程3.194712162017822秒后执行</span></span><br></pre></td></tr></table></figure><p>①当 <code>p1.join</code> 通知主进程等p1结束后，主进程开始执行，这里的主进程是 <code>p2.join</code>以后后面的内容。</p><p>②当p1执行结束后，<code>p2.join</code>通知主程序等p2结束后，主程序开始执行，这里面的主程序是 <code>p3.join</code>以及后面的内容。</p><p>③当p2执行结束后， <code>p3.join</code>通知主程序等p3结束后，主程序开始执行，这里面的主程序是<code>print</code>.</p><p>结论，由于p1,p2,p3是同时发出的通知，它们三个在同时处理，所以，最下面的<code>print</code>要等待这三个程序结束，也就是等待执行时间最长的进程结束后，才开始执行，</p><h3 id="情景二"><a href="#情景二" class="headerlink" title="情景二"></a>情景二</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">(name,sec)</span>:</span></span><br><span class="line">    time.sleep(sec)</span><br><span class="line">    print(<span class="string">f'<span class="subst">&#123;name&#125;</span> is running'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    p1 = Process(target=task, args=(<span class="string">'1'</span>,<span class="number">1</span>))</span><br><span class="line">    p2 = Process(target=task, args=(<span class="string">'2'</span>,<span class="number">2</span>))</span><br><span class="line">    p3 = Process(target=task, args=(<span class="string">'3'</span>,<span class="number">3</span>))</span><br><span class="line">    start_time = time.time()</span><br><span class="line">  </span><br><span class="line">p1.start()</span><br><span class="line">p1.join()</span><br><span class="line">p2.start()</span><br><span class="line">p2.join()</span><br><span class="line">p3.start()</span><br><span class="line">p3.join()</span><br><span class="line">print(<span class="string">f'主进程<span class="subst">&#123;time.time()-start_time&#125;</span>秒后执行'</span>) <span class="comment"># 主进程6.424545526504517秒后执行</span></span><br></pre></td></tr></table></figure><p>①当 <code>p1.join</code>通知主程序等p1 结束后，主程序开始执行，这里的主程序是 <code>p2.start</code>及以后的内容，所以，由于不是同时发出的通知，是一种串行的效果。</p><h2 id="进程对象的其它属性"><a href="#进程对象的其它属性" class="headerlink" title="进程对象的其它属性"></a>进程对象的其它属性</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">f'<span class="subst">&#123;name&#125;</span> is running'</span>)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    print(<span class="string">f'<span class="subst">&#123;name&#125;</span> is done'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    p = Process(target=task, args=(<span class="string">'1'</span>,),name = <span class="string">'任务1'</span>)  <span class="comment"># 给进程对象设置name属性</span></span><br><span class="line">    p.start()         <span class="comment"># start 只是一个通知，它会慢一拍。</span></span><br><span class="line">    <span class="comment"># print(p.pid)    # 获取进程pid号</span></span><br><span class="line">    <span class="comment"># print(p.name)</span></span><br><span class="line">    <span class="comment"># time.sleep(1)</span></span><br><span class="line">    <span class="comment"># p.terminate()     # 终止（结束）子进程, 它也不是立即的</span></span><br><span class="line">    <span class="comment"># terminate 与 start一样的工作原理：通知操作系统终止或开启一个子进程，内存中终止或开启是会耗费时间的。</span></span><br><span class="line">    <span class="comment"># print(p.is_alive())        # 判断子进程是否存活</span></span><br><span class="line">    <span class="comment"># is_alive 只是查看内存中p子进程是否运行，比terminat，start快。 这是否矛盾呢？</span></span><br><span class="line">    <span class="comment"># 问如何主动杀死子进程， terminate</span></span><br><span class="line">    print(<span class="string">'主进程'</span>)</span><br></pre></td></tr></table></figure><h4 id="对象-pid"><a href="#对象-pid" class="headerlink" title="对象.pid()"></a><code>对象.pid()</code></h4><p>获取对象pid号。</p><h4 id="对象-name"><a href="#对象-name" class="headerlink" title="对象.name"></a><code>对象.name</code></h4><p>在初始化时，给进程对象设置name属性。</p><h4 id="对象-terminate"><a href="#对象-terminate" class="headerlink" title="对象.terminate()"></a><code>对象.terminate()</code></h4><p>终止（结束）子进程</p><p>terminate 与 start一样的工作原理：通知操作系统终止或开启一个子进程，内存中终止或开启是会耗费时间的。</p><h4 id="对象-is-alive"><a href="#对象-is-alive" class="headerlink" title="对象.is_alive()"></a><code>对象.is_alive()</code></h4><p>判断子进程是否存活.</p><p>如何<code>terminate()</code>与<code>对象.is_alive()</code>挨着，会打印True,因为<code>对象.is_alive()</code>的速度比terminate()快一些</p><p>补充：为什么</p><h2 id="僵尸进程与孤儿进程（重要）"><a href="#僵尸进程与孤儿进程（重要）" class="headerlink" title="僵尸进程与孤儿进程（重要）"></a>僵尸进程与孤儿进程（重要）</h2><p><strong>僵尸进程</strong>：在类UNIX系统中，僵尸进程是指<strong>子进程</strong>完成执行，父进程没有通过<code>wait</code>系统调用来读取这个子进程的退出状态的话（在操作系统的进程表中仍有一个表项（进程控制块PCB）（在Linux中具体是<code>task_struct</code>结构）），这个子进程就会一直维持僵尸进程状态，称为“僵尸进程”。</p><p><strong>回收</strong>：子进程需要保留表项以允许其<strong>父进程</strong>读取子进程的 <code>exit status</code>：一旦退出态通过 <code>wait系统调用</code>读取，僵尸进程条目就从进程表中删除，称之为<strong>回收</strong>（reaped）</p><p>并且僵尸进程是无法通过 <code>kill</code>命令来清除。</p><blockquote><p>僵尸进程的状态为<code>EXIT_ZOMBIE</code>，缩写<code>Z</code>，ps命令也会打印僵尸进程，但无法使用kill杀死。</p><p>可以使用命令： <code>ps aux | grep Z</code> 查看</p></blockquote><p><strong>在回收僵尸进程之前，如果父进程退出了，则僵尸进程变为“孤儿进程”</strong>，进而被<code>init</code>进程接管、回收。</p><p><strong>孤儿进程</strong>：<strong>父进程</strong>执行完成或被<strong>终止</strong>后仍继续运行的一类进程。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">f'<span class="subst">&#123;name&#125;</span> is running'</span>)</span><br><span class="line">    print(<span class="string">f'子进程开始了<span class="subst">&#123;os.getpid()&#125;</span>'</span>)</span><br><span class="line">    time.sleep(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    p = Process(target=task, args=(<span class="string">'1'</span>,))  <span class="comment"># 给进程对象设置name属性</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10000</span>):</span><br><span class="line">        p =Process(target=task, args=(str(i),))</span><br><span class="line">        p.start()</span><br><span class="line">    print(<span class="string">f'主进程开始了<span class="subst">&#123;os.getpid()&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><p>以上代码在pycharm运行时，会产生大量的僵尸进程，当我们点击停止（红色正方形）时，会出现一个红色骷髅的标志。</p><p><img src="/learn-python/20190518-python-programming-with-multiprocesses/%E9%AA%B7%E9%AB%85.png" alt="骷髅"></p><h3 id="僵尸进程有害？"><a href="#僵尸进程有害？" class="headerlink" title="僵尸进程有害？"></a>僵尸进程有害？</h3><p>​ 一种情景：父进程（僵尸进程）无限的开启子进程，递归的开启，子进程越来越多，僵尸进程越来越多，导致<strong>资源泄露</strong>。</p><h3 id="为什么需要僵尸进程？"><a href="#为什么需要僵尸进程？" class="headerlink" title="为什么需要僵尸进程？"></a>为什么需要僵尸进程？</h3><p>​ 之所以保留 <code>task_struct</code>，是因为它里面保存了进程的pid，退出码、以及一些统计信息，父进程很可能会关心这些信息。</p><h3 id="如何清除僵尸进程？"><a href="#如何清除僵尸进程？" class="headerlink" title="如何清除僵尸进程？"></a>如何清除僵尸进程？</h3><p>第一种方法：结束父进程，使之成为孤儿进程。当然者个是暴力的手段，因为我们一般肯定是希望父进程继续运行的。</p><p>第二种方法：通过wait调用来读取子进程退出状态。比如通过 <code>multiprocessing.Process</code>产出的进程可以通过 <code>子进程.join()</code>的方法来wait，也可以在父进程中处理 <code>SIGCHLD</code>信号，在处理程序中调用<code>wait</code>系统调用或者直接设置为 <code>SIG_IGN</code>来清除僵尸进程。</p><h2 id="守护进程（重要）"><a href="#守护进程（重要）" class="headerlink" title="守护进程（重要）"></a>守护进程（重要）</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生产者与消费者模型会讲到。</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">f'<span class="subst">&#123;name&#125;</span> is running'</span>)</span><br><span class="line">    print(<span class="string">f'子进程开始了<span class="subst">&#123;os.getpid()&#125;</span>'</span>)</span><br><span class="line">    time.sleep(<span class="number">50</span>)</span><br><span class="line">    print(<span class="string">f'<span class="subst">&#123;name&#125;</span> is done'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    p = Process(target=task, args=(<span class="string">'1'</span>,))  <span class="comment"># 给进程对象设置name属性</span></span><br><span class="line">    p.daemon = <span class="literal">True</span>  <span class="comment"># 将p子进程设置成守护进程，守护主进程，只要主进程结束，子进程无论执行与否，都马上结束</span></span><br><span class="line">    <span class="comment"># 守护进程设置必须在 start前面！</span></span><br><span class="line">    p.start()</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    print(<span class="string">f'主进程开始了<span class="subst">&#123;os.getpid()&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><p>通俗：守护：我守护着你，你要是死了，我就与你一起</p><p>doc：当一个进程退出的时候，它试图关闭所有守护着它的子进程。</p><p>使用地方：生产者与消费者模型。</p><p>守护进程是不能开启子进程的，不然当父进程结束的时候，守护进程结束，那么由守护进程开启的进程会成为孤儿进程。</p><p>注意：守护进程设置必须在 start前面！</p><h2 id="进程同步"><a href="#进程同步" class="headerlink" title="进程同步"></a>进程同步</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>在系统中有一些需要相互合作、协同工作的进程，它们之间的相互联系称为<strong>进程的同步</strong>。</p><h3 id="进程同步的主要任务"><a href="#进程同步的主要任务" class="headerlink" title="进程同步的主要任务"></a>进程同步的主要任务</h3><p>使并发执行的诸进程之间能有效地<strong>共享资源</strong>和<strong>相互合作</strong>，从而使程序的并发执行具有可再现性。</p><h3 id="进程的两种制约关系"><a href="#进程的两种制约关系" class="headerlink" title="进程的两种制约关系"></a>进程的两种制约关系</h3><ul><li><p>间接制约：竞争同一资源而产生的<strong>相互排斥</strong>的关系 。</p><ul><li>解释： 当某一进程访问某一资源时，不允许别的进程同时访问，这种限制称为<strong>互斥</strong>， 即多个进程在访问某些资源（如临界资源）时，也要有一种执行次序上的协调 ，当一个进程访问完毕，另一个进程才能访问。所以就其本质来讲，互斥仍是一种同步。</li></ul></li><li><p>直接制约：进程间共同完成一项任务时直接发生<strong>相互作用</strong>的关系。</p></li></ul><h3 id="临界资源"><a href="#临界资源" class="headerlink" title="临界资源"></a>临界资源</h3><ul><li>临界资源：一次仅允许一个进程访问的资源。例如打印机。</li><li>临界区：访问临界资源的代码段，不允许多个并发进程交叉执行的一段程序。</li></ul><h3 id="临界区必须互斥访问"><a href="#临界区必须互斥访问" class="headerlink" title="临界区必须互斥访问"></a>临界区必须<strong>互斥</strong>访问</h3><ul><li><p>进入区：(1) 检查临界资源是否被访问，未被访问，转(2)，否则转(1)。</p><p>​ (2) 进入临界区，并设访问标志。</p></li><li><p>退出区：恢复访问标志，允许其它进程进入</p></li></ul><h3 id="同步机制应遵循的准则"><a href="#同步机制应遵循的准则" class="headerlink" title="同步机制应遵循的准则"></a>同步机制应遵循的准则</h3><ul><li>空闲让进——有效利用</li><li>忙则等待——互斥</li><li>有限等待——避免“死等”</li><li>让权等待——避免“忙等”</li></ul><h2 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h2><p>业务背景：3个进程，同一时刻共抢一个资源：输出平台。</p><p>分析：多个进程共抢一个资源，你要是做到结果第一位，效率第二位。你应该牺牲效率，保证结果。做到串行。</p><p>方法一：<code>join</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'task1 开始打印'</span>)</span><br><span class="line">    time.sleep(random.randint(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line">    print(<span class="string">'task1 打印完成'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task2</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'task2 开始打印'</span>)</span><br><span class="line">    time.sleep(random.randint(<span class="number">1</span>, <span class="number">3</span>))</span><br><span class="line">    print(<span class="string">'task2 打印完成'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task3</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'task3 开始打印'</span>)</span><br><span class="line">    time.sleep(random.randint(<span class="number">1</span>, <span class="number">3</span>))</span><br><span class="line">    print(<span class="string">'task3 打印完成'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    p1 = Process(target=task1)</span><br><span class="line">    p2 = Process(target=task2)</span><br><span class="line">    p3 = Process(target=task3)</span><br><span class="line">    p1.start()</span><br><span class="line">    p1.join()</span><br><span class="line">    p2.start()</span><br><span class="line">    p2.join()</span><br><span class="line">    p3.start()</span><br><span class="line">    p3.join()</span><br></pre></td></tr></table></figure><p>虽然上面这个版本完成了串行结果，保证了顺序，但是没有保证公平。顺序是人为写好的。我们要做到公平的去抢占资源，谁先抢到，先执行谁。</p><p>方法二：<code>Lock</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Lock</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="comment"># lock = Lock()  # 这样的话，子进程各会拷贝一份，也就是创建一把锁，会出问题，好多把锁</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task1</span><span class="params">(lock)</span>:</span></span><br><span class="line">    print(<span class="string">'task1'</span>)      <span class="comment"># 第一种验证方法：验证cpu遇到I/O切换了</span></span><br><span class="line">    lock.acquire()</span><br><span class="line">    print(<span class="string">'task1 开始打印'</span>)</span><br><span class="line">    time.sleep(random.randint(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line">    print(<span class="string">'task1 打印完成'</span>)</span><br><span class="line">    lock.release()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task2</span><span class="params">(lock)</span>:</span></span><br><span class="line">    print(<span class="string">'task2'</span>)</span><br><span class="line">    lock.acquire()</span><br><span class="line">    print(<span class="string">'task2 开始打印'</span>)</span><br><span class="line">    time.sleep(random.randint(<span class="number">1</span>, <span class="number">3</span>))</span><br><span class="line">    print(<span class="string">'task2 打印完成'</span>)</span><br><span class="line">    lock.release()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task3</span><span class="params">(lock)</span>:</span></span><br><span class="line">    print(<span class="string">'task3'</span>)</span><br><span class="line">    lock.acquire()</span><br><span class="line">    <span class="comment"># lock.acquire()  # 多加一次会进入死锁</span></span><br><span class="line">    print(<span class="string">'task3 开始打印'</span>)</span><br><span class="line">    time.sleep(random.randint(<span class="number">1</span>, <span class="number">3</span>))</span><br><span class="line">    print(<span class="string">'task3 打印完成'</span>)</span><br><span class="line">    lock.release()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task4</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'task4 开始打印'</span>)</span><br><span class="line">    time.sleep(random.randint(<span class="number">1</span>, <span class="number">3</span>))</span><br><span class="line">    print(<span class="string">'task4 打印完成'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    lock = Lock()       <span class="comment"># 在这里实例化是要保证同一把锁！ 所以要以参数的形式传入</span></span><br><span class="line">    p1 = Process(target=task1,args=(lock,))</span><br><span class="line">    p2 = Process(target=task2,args=(lock,))</span><br><span class="line">    p3 = Process(target=task3,args=(lock,))</span><br><span class="line">    p4 = Process(target=task4)</span><br><span class="line">    p1.start()</span><br><span class="line">    p2.start()</span><br><span class="line">    p3.start()</span><br><span class="line">    <span class="comment"># p4.start()    # 第二种验证方法，当如果p1拿到锁，并遇到I/O阻塞的时候，cpu会进行切换，找其它可用的进程。</span></span><br></pre></td></tr></table></figure><p>上面的程序中：当第一个到达的时候，假如p1开始执行，遇到阻塞的时候，cpu要切换，发现其它也需要同一把锁，所以cpu就停下来等待p1的阻塞结束。</p><p>上锁：一定要是同一把锁：上锁一次，解锁一次。</p><p>互斥锁与join区别共同点？ （重点）</p><ul><li>共同点：都完成了进程之间的串行</li><li>区别：join是人为控制的进程串行， 互斥锁是随机的抢占资源</li></ul><p>情景二：模拟抢票</p><p>需求分析：买票之前需要查票，必经流程，有可能你查票的同时，100个人也在查本次车票。买票时，你要先从服务端获取票数，票数 &gt; 0，买票，然后服务端票数减一，中间肯定有网络延迟。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Lock</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">()</span>:</span></span><br><span class="line">    time.sleep(random.random())</span><br><span class="line">    dic = json.load(open(<span class="string">'db.json'</span>,encoding=<span class="string">'utf-8'</span>))</span><br><span class="line">    print(<span class="string">f"剩余票数：<span class="subst">&#123;dic[<span class="string">'count'</span>]&#125;</span>"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">()</span>:</span></span><br><span class="line">    dic = json.load(open(<span class="string">'db.json'</span>, encoding=<span class="string">'utf-8'</span>))</span><br><span class="line">    time.sleep(random.randint(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line">    <span class="keyword">if</span> dic[<span class="string">'count'</span>] &gt; <span class="number">0</span>:</span><br><span class="line">        dic[<span class="string">'count'</span>] -= <span class="number">1</span></span><br><span class="line">        json.dump(dic,open(<span class="string">'db.json'</span>,mode = <span class="string">'w'</span> ,encoding=<span class="string">'utf-8'</span>))</span><br><span class="line">        print(<span class="string">f'<span class="subst">&#123;os.getpid()&#125;</span>用户 购买成功'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'没票了....'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">(lock)</span>:</span></span><br><span class="line">    search()</span><br><span class="line">    lock.acquire()</span><br><span class="line">    get()</span><br><span class="line">    lock.release()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    lock = Lock()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        p = Process(target=task,args=(lock,))</span><br><span class="line">        p.start()</span><br><span class="line">    <span class="comment"># with open('db.json',mode='w',encoding='utf-8') as f1:</span></span><br><span class="line">    <span class="comment">#     json.dump(&#123;'count':3&#125;,f1)     # 写入票数</span></span><br></pre></td></tr></table></figure><p>多进程原则上是不能互相通信的，它们在内存级别数据隔离的。不代表硬盘的数据隔离,它们可以共同操作一个文件。</p><p>多个进程抢占同一个（）资源，要想公平按照顺序，只能串行。</p><h2 id="进程之间的通信：队列（multiprocessing-Queue）"><a href="#进程之间的通信：队列（multiprocessing-Queue）" class="headerlink" title="进程之间的通信：队列（multiprocessing.Queue）"></a>进程之间的通信：队列（multiprocessing.Queue）</h2><p>多个进程间的通信：基于文件以及加锁的方式。</p><p>缺点：</p><ol><li>操作文件效率低</li><li>自己加锁很麻烦，很容易出现死锁，递归锁。</li></ol><p>进程之间的通信最好的方式是基于队列。底层是利用管道和锁。</p><p>什么是队列？</p><p>队列是存在于内存中的一个容器，最大的一个特点：队列的特性就是FIFO，完全支持先进先出的原则。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Queue</span><br><span class="line"></span><br><span class="line">q = Queue(<span class="number">3</span>)   <span class="comment"># 可以设置元素的最大个数</span></span><br><span class="line">q.put(<span class="string">'小黑'</span>)</span><br><span class="line">q.put(&#123;<span class="string">'count'</span>:<span class="number">1</span>&#125;)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'in func'</span>)</span><br><span class="line">q.put(func)</span><br><span class="line"><span class="comment"># q.put(666)    # 当队列中的数据已经达到上限，再插入数据的时候，该进程就会夯住，阻塞，等待别的进程取出数据。</span></span><br><span class="line">print(q.get())</span><br><span class="line">print(q.get())</span><br><span class="line">print(q.get())</span><br><span class="line">print(q.get()) <span class="comment"># 当你将数据取完继续在取值的时候，该进程会夯住，阻塞，等待别的进程插入数据。</span></span><br></pre></td></tr></table></figure><p>队列的<code>maxsize</code> <code>q = Queue(maxsize)</code> 数据量不宜过大。精简的重要的数据。比如：各种请求链接。</p><p>常用方法介绍：</p><p><code>put(self, obj, block=True, timeout=None)</code></p><ul><li>当超过最大限度时，默认阻塞 block=True 改成False 如果继续 <code>put</code> 报queue.Full异常</li><li>timeout 延时报错，超过设置的时间间隔后还插不进去数据，会报queue.Full异常</li></ul><p><code>get(self, block=True, timeout=None)</code></p><ul><li>当队列为空的时候，默认阻塞；改为False后如果继续 <code>get</code> 报queue.Empty异常</li><li>timeout 延时作业，超过设置的时间间隔还取不出来数据，会报queue.Empty异常。</li></ul><h3 id="进程之间的通信实例"><a href="#进程之间的通信实例" class="headerlink" title="进程之间的通信实例"></a>进程之间的通信实例</h3><p>背景：抢小米手环4，预期发售10个，100个人去抢。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Queue</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> queue</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">(q)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        q.put(<span class="string">f'<span class="subst">&#123;os.getpid()&#125;</span>'</span>,block=<span class="literal">False</span>)</span><br><span class="line">    <span class="keyword">except</span> queue.Full:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    q = Queue(<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">        p  = Process(target=task,args=(q,))</span><br><span class="line">        p.start()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">        print(<span class="string">f"排名<span class="subst">&#123;i&#125;</span>的 用户<span class="subst">&#123;q.get()&#125;</span>抢到了"</span>)</span><br></pre></td></tr></table></figure><p>利用队列进行进程之间通信：简单，方便，不用自己手动加锁。队列自带阻塞，可持续化读取数据。</p><h2 id="进程之间的通信：管道（multiprocessing-Pipe）"><a href="#进程之间的通信：管道（multiprocessing-Pipe）" class="headerlink" title="进程之间的通信：管道（multiprocessing.Pipe）"></a>进程之间的通信：管道（multiprocessing.Pipe）</h2><h3 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h3><ul><li>在UNIX系统中，它连接一个<strong>读进程</strong>和一个<strong>写进程</strong>，以实现它们之间通信的共享文件，又称pipe文件。它是以文件为基础，实质是以<strong>外存</strong>来进行<strong>数据通信</strong>。</li><li>在windows中是一段共享内存。这段共享的内存设计采用<strong>数据流I/0</strong>的方式来访问。由一个<strong>进程读</strong>、另一个<strong>进程写</strong>。</li><li>类似于一根管道的两端，所以这种进程间的通信方式被称作“管道”。</li></ul><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">Python官方文档的描述：</span><br><span class="line">Returns a pair (conn1, conn2) of<span class="built_in"> Connection </span>objects representing the ends of a pipe.</span><br></pre></td></tr></table></figure><p>因此, Pipe仅仅适用于只有两个进程<strong>一读一写的单双工</strong>情况，也就是说信息是只向一个方向流动。例如电视、广播，看电视的人只能看，电视台是能播送电视节目。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pipe,Process</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">(x,pipe)</span>:</span></span><br><span class="line">    _out_pipe, _in_pipe = pipe</span><br><span class="line">    print(<span class="string">'子进程开始啦'</span>)</span><br><span class="line">    <span class="comment"># 关闭fork过来的输入端(关闭进水口)</span></span><br><span class="line">    _in_pipe.close()</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 放水</span></span><br><span class="line">            msg = _out_pipe.recv()</span><br><span class="line">            print(msg)</span><br><span class="line">        <span class="keyword">except</span> EOFError:</span><br><span class="line">            <span class="comment"># 当out_pipe接受不到输出的时候且输入被关闭的时候，会抛出EORFError，可以捕获并且退出子进程</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    out_pipe, in_pipe = Pipe() <span class="comment"># duplex为True，创建的管道是双向的，默认为</span></span><br><span class="line">    p1 = Process(target=task, args=(<span class="number">100</span>, (out_pipe, in_pipe)))</span><br><span class="line">    p1.start()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 等pipe被fork 后，关闭主进程的输出端</span></span><br><span class="line">    <span class="comment"># 这样，创建的Pipe一端连接着主进程的输入，一端连接着子进程的输出口</span></span><br><span class="line">    out_pipe.close()      <span class="comment"># 关闭出水口，开始进水</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">        in_pipe.send(x)</span><br><span class="line">    print(<span class="string">'xxxxxxx'</span>)</span><br><span class="line">    in_pipe.close()       <span class="comment"># 关闭进水口。 当进水口关闭后，子进程才开始使用这个管道。</span></span><br><span class="line">    p1.join()</span><br><span class="line">    print(<span class="string">"主程序运行结束"</span>)</span><br></pre></td></tr></table></figure><p>上面的代码主要用到了pipe的send()、recv()、close()方法。当pipe的输入端被关闭，且无法接收到输入的值，那么就会抛出EOFError。</p><p>新建一个Pipe(duplex)的时候，如果duplex为True，那么创建的管道是双向的；如果duplex为False，那么创建的管道是单向的。</p><p>形象的举例就是：</p><ul><li>主程序关闭出水口，放水，当水充满后，关闭进水口；</li><li>子程序拿到管道。先关闭进水口，开始放水，等水流完后，关闭出水口。</li></ul><h2 id="生产者消费者模型"><a href="#生产者消费者模型" class="headerlink" title="生产者消费者模型"></a>生产者消费者模型</h2><p>回顾：以前学到的模型，设计模式（单例模式），归一化设计，理论等待，都是交给你一个编程思路，如果以后遇到类似的情况，直接套用即可。</p><p>生产者：生产数据的进程。</p><p>消费者：对生产者生产出来的数据做进一步的处理的进程。</p><p>吃包子举例：<strong>厨师</strong>生产出包子，不可能直接塞你嘴里，他要放在<strong>盆</strong>中；<strong>消费者</strong>从盆中取出包子食用。</p><p><strong>三个主体</strong>：（生产者）厨师、（容器队列）盆、（消费者）人。</p><p>为什么夹杂这个容器？</p><p>（容器）盆起到一个缓冲区的作用，也起到了解耦的作用（只有生产者和消费者话它们是强耦合的）。</p><p><strong>平衡了生产力和消费力。</strong></p><p>生产者消费者模型多用于<strong>并发</strong>。</p><p>方法一：利用队列实现</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Queue</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">producer</span><span class="params">(q)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">6</span>):</span><br><span class="line">        time.sleep(random.randint(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line">        res = <span class="string">f'<span class="subst">&#123;i&#125;</span>号包子'</span></span><br><span class="line">        q.put(res)</span><br><span class="line">        print(<span class="string">f'\033[0;32m 生产者生产了<span class="subst">&#123;res&#125;</span>\033[0m'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">consumer</span><span class="params">(q)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            time.sleep(random.randint(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line">            ret = q.get(timeout= <span class="number">5</span>)</span><br><span class="line">            print(<span class="string">f'消费者吃了<span class="subst">&#123;ret&#125;</span>'</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    q = Queue()</span><br><span class="line">    p1 = Process(target=producer,args=(q,))</span><br><span class="line">    p2 = Process(target=consumer,args=(q,))</span><br><span class="line">    p1.start()</span><br><span class="line">    p2.start()</span><br></pre></td></tr></table></figure><p>生产者消费者模型：</p><p>合理的去调控多个进行去生产数据以及提取数据，中间有个必不可少的环节容器队列。</p><p>本质上：利用队列进行通信。</p><p>方法二：利用管道实现</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process,Pipe</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">producer</span><span class="params">(out_pipe, in_pipe)</span>:</span></span><br><span class="line">    out_pipe.close()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">101</span>):</span><br><span class="line">        s = <span class="string">f"第<span class="subst">&#123;i&#125;</span>号包子"</span></span><br><span class="line">        print(<span class="string">f'生产者生产了<span class="subst">&#123;s&#125;</span>'</span>)</span><br><span class="line">        in_pipe.send(s)</span><br><span class="line">    in_pipe.close()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">consumer</span><span class="params">(out_pipe, in_pipe)</span>:</span></span><br><span class="line">    in_pipe.close()</span><br><span class="line">    <span class="comment"># while True:</span></span><br><span class="line">    <span class="comment">#     try:</span></span><br><span class="line">    <span class="comment">#         s = out_pipe.recv()</span></span><br><span class="line">    <span class="comment">#         print(f"消费者吃了&#123;s&#125;")</span></span><br><span class="line">    <span class="comment">#     except EOFError:          # 只有在进水口关闭的时候才能引发异常</span></span><br><span class="line">    <span class="comment">#         print('xxx')</span></span><br><span class="line">    <span class="comment">#         return</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">        s = out_pipe.recv()</span><br><span class="line">        print(<span class="string">f"消费者吃了<span class="subst">&#123;s&#125;</span>"</span>)</span><br><span class="line">    out_pipe.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    out_pipe, in_pipe = Pipe()</span><br><span class="line">    pro = Process(target=producer,args=(out_pipe, in_pipe))</span><br><span class="line">    con = Process(target=consumer,args=(out_pipe, in_pipe))</span><br><span class="line">    pro.start()</span><br><span class="line">    con.start()</span><br><span class="line">    con.join()</span><br><span class="line">    print(<span class="string">'主进程结束'</span>)</span><br></pre></td></tr></table></figure><hr>]]></content>
      <categories>
        <category>python学习</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>python</tag>
        <tag>并发编程</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统</title>
    <url>/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/20190517-operating-system.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>as you will，如果你认为操作系统没有用，那是因为你的编程和程序开发处在一个低级的水平。</p></blockquote><a id="more"></a><h1 id="引论"><a href="#引论" class="headerlink" title="引论"></a>引论</h1><h2 id="操作系统的形成"><a href="#操作系统的形成" class="headerlink" title="操作系统的形成"></a>操作系统的形成</h2><h3 id="人工操作阶段"><a href="#人工操作阶段" class="headerlink" title="人工操作阶段"></a>人工操作阶段</h3><p><img src="/操作系统/20190517-operating-system/%E4%BA%BA%E5%B7%A5%E6%93%8D%E4%BD%9C%E9%98%B6%E6%AE%B5.png" alt="人工操作阶段"></p><p>特点：</p><ul><li>用户独占全机——资源利用率低</li><li>机等人：CPU等待人工操作（装带、卸带时）</li></ul><p>缺点:</p><ul><li>输入、纸带、电传都可能出错</li><li>多个用户不能同时使用</li></ul><h3 id="脱机输入输出技术"><a href="#脱机输入输出技术" class="headerlink" title="脱机输入输出技术"></a>脱机输入输出技术</h3><p>引入： 为缓解人机矛盾，CPU速度与I/O设备速度不匹配的矛盾。</p><p><img src="/操作系统/20190517-operating-system/%E8%84%B1%E6%9C%BA%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E6%8A%80%E6%9C%AF.png" alt="脱机输入输出技术"></p><p>优点：</p><ul><li>减少了CPU的空闲时间，缓解了人机矛盾。</li><li>缓和了CPU和I/O设备速度不匹配的矛盾，进一步减少CPU空闲时间。</li></ul><h3 id="批处理技术（单道批处理技术）"><a href="#批处理技术（单道批处理技术）" class="headerlink" title="批处理技术（单道批处理技术）"></a>批处理技术（单道批处理技术）</h3><p>​ 在磁带中有若干作业（一批作业），配有专门编制的监督程序，主机一启动，以监督程序自动完成作业的切换，使作业自动的一个接一个的处理。</p><p><img src="/操作系统/20190517-operating-system/%E5%8D%95%E9%81%93%E6%89%B9%E5%A4%84%E7%90%86%E6%8A%80%E6%9C%AF.png" alt="单道批处理技术"></p><p>特征：</p><p>自动性、顺序性、单道性（内存任何时候只有一道作业；FCFS）</p><p>优点：实现作业自动转接，克服了机等人。<br>缺点：输入时，主机空闲；计算时，外围设备空闲——计算机使用效率仍然不高。</p><h3 id="多道批处理技术"><a href="#多道批处理技术" class="headerlink" title="多道批处理技术"></a>多道批处理技术</h3><p>引入：提高资源利用率。</p><p>思想：内存中同时存放几道相互独立的程序，一个I/O时，另一个用CPU，多道程序合理搭配交替运行，充分利用资源，提高效率。</p><p>需要解决的问题：</p><ul><li>处理机管理问题：CPU分配和回收</li><li>内存管理问题：内存分配、扩充和回收</li><li>I/O设备的管理问题</li><li>文件管理问题</li><li>作业管理问题</li></ul><p>操作系统是在不断改善计算机系统性能和提高资源利用率，方便用户的过程中诞生的。<strong>多道程序设计技术</strong>的出现，标志着操作系统的诞生。</p><h3 id="分时系统"><a href="#分时系统" class="headerlink" title="分时系统"></a>分时系统</h3><p>​ 当用户的需求表现为：人机交互；共享主机；便于用户上机。多个用户同时使用一台计算，互不干扰，就象独占一样。</p><p>​ 一般采用<strong>时间片轮转</strong>的方式，使一台计算机为多个终端服务，对每个用户能保证足够快的时间响应，并提供交互会话能力。</p><p>特点：多路性、独立性、及时性、交互性</p><h2 id="什么是操作系统"><a href="#什么是操作系统" class="headerlink" title="什么是操作系统"></a>什么是操作系统</h2><ul><li>操作系统是一个介于计算机和应用程序之间的一个软件系统。它使计算机变得更好用，使计算机运行变得有序。</li><li><u>操作系统是掌握是计算机上所有事情的软件系统</u></li></ul><h2 id="操作系统的特征"><a href="#操作系统的特征" class="headerlink" title="操作系统的特征"></a>操作系统的特征</h2><h3 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h3><p>并行性：两个或两个以上的操作在<strong>同一时刻</strong>发生。</p><p>并发性：两个或两个以上的操作在<strong>同一时间间隔</strong>内发生。</p><h3 id="共享"><a href="#共享" class="headerlink" title="共享"></a>共享</h3><p>共享：系统中的资源供内存中多个并发执行的进程共同使用。</p><p>类型：</p><ul><li>互斥共享方式</li><li>同时访问方式</li></ul><p>并发与共享：互为存在条件，<strong>共享以并发为条件</strong>，<strong>共享影响并发</strong>。</p><h3 id="虚拟"><a href="#虚拟" class="headerlink" title="虚拟"></a>虚拟</h3><p>虚拟：是指通过某种技术把一个物理实体变成若干个逻辑上的对应物。</p><h3 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h3><p>多道程序环境下，进程以异步方式运行。</p><h2 id="操作系统扮演着两个角色："><a href="#操作系统扮演着两个角色：" class="headerlink" title="操作系统扮演着两个角色："></a>操作系统扮演着两个角色：</h2><h3 id="魔术师："><a href="#魔术师：" class="headerlink" title="魔术师："></a>魔术师：</h3><p>操作系统通过进程抽象让每一个用户都感觉有一台自己<strong>独享的cpu</strong>；通过<strong>虚拟内存</strong>的抽象，让用户感觉物理内存具有无限扩张性。（当然这种把少变多不是无中生有，变多也不是无限，只是针对磁盘容量大小）</p><h3 id="管理者："><a href="#管理者：" class="headerlink" title="管理者："></a>管理者：</h3><p>为了让用户很好的利用硬件资源，资源需要<strong>分块（parcels out）</strong>，把硬件分块出来给应用程序使用。管理者要做到的是<strong>有效和公平</strong>。有效指的是不能浪费资源，公平指的是每个人都有享有资源的可能，不能有不公平的现象。</p><p>根据管理的资源不同，操作系统的<strong>具体功能</strong>包括：</p><ul><li>CPU管理：如何分配CPU给不同应用和用户。</li><li>内存管理：如何分配内存给不同应用和用户。</li><li>外存管理：如何分配外存（磁盘）给不同应用和用户。</li><li>I/O管理：如何分配输入输出设备给应用和用户。</li><li>健壮性管理：即如何确保操作系统自身的正常运行。</li><li>安全性管理：即如何防止非法操作和入侵。</li></ul><h1 id="进程的描述与控制"><a href="#进程的描述与控制" class="headerlink" title="进程的描述与控制"></a>进程的描述与控制</h1><h2 id="程序与进程"><a href="#程序与进程" class="headerlink" title="程序与进程"></a>程序与进程</h2><p>引入：为描述<strong>并发</strong>下程序的执行情况</p><p>进程：进程是<strong>程序</strong>的一次执行过程，是系统进行<strong>资源分配</strong>和<strong>处理机调度</strong>的一个<strong>独立单位</strong>。</p><p>进程 = 程序段 + 数据段 + PCB（进程控制块）</p><ul><li><p>数据段：操作对象及工作区</p></li><li><p>程序块：描述要完成的功能</p></li><li><p>PCB：动态特征的集中体现</p></li></ul><p>程序：程序就是文件，是控制计算机的指令。</p><h3 id="程序是如何运行的？"><a href="#程序是如何运行的？" class="headerlink" title="程序是如何运行的？"></a>程序是如何运行的？</h3><p><img src="/操作系统/20190517-operating-system/%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B.png" alt="程序的执行过程"></p><p>程序运行至少需要如下4要素</p><ul><li>程序设计语言</li><li>编译系统</li><li>操作系统</li><li>指令集结构（计算机硬件系统）</li></ul><h3 id="进程的三种基本状态"><a href="#进程的三种基本状态" class="headerlink" title="进程的三种基本状态"></a>进程的三种基本状态</h3><ul><li>就绪状态(ready):等处理机</li><li>执行状态(running):用处理机</li><li>阻塞状态(blocked):等事件</li></ul><p>有了基本的状态我们就有了最基本的状态演变：</p><p><img src="/操作系统/20190517-operating-system/%E5%9F%BA%E6%9C%AC%E7%8A%B6%E6%80%81%E6%BC%94%E5%8F%98%E5%9B%BE.png" alt="基本状态演变图"></p><p>但这个还不够，我们还需要调节系统负荷、满足终端用户，操作系统的需要。</p><p><strong>挂起</strong>：使正在活动的进程（或执行、或就绪、或阻塞）处于静止状态，此时系统回收被这些进程占用的<strong>内存</strong>资源。</p><p><img src="/操作系统/20190517-operating-system/%E5%85%B7%E6%9C%89%E5%88%9B%E5%BB%BA%E5%92%8C%E6%8C%82%E8%B5%B7%E7%9A%84%E7%8A%B6%E6%80%81%E6%BC%94%E5%8F%98.png" alt="具有创建和挂起的状态演变"></p><h3 id="进程控制块PCB"><a href="#进程控制块PCB" class="headerlink" title="进程控制块PCB"></a>进程控制块PCB</h3><p>PCB是进程存在的唯一标志，OS根据PCB来对并发执行的进程进行控制和管理。</p><p>组织方式：</p><ul><li><p>链接方式</p></li><li><p>索引方式</p><p>它两的区别在于，索引方式会在链接方式的基础上增加索引表</p></li></ul><h3 id="进程控制"><a href="#进程控制" class="headerlink" title="进程控制"></a>进程控制</h3><p>到此为止，逐步深入，了解了进程，那么进程是被谁控制的呢？ <strong>OS内核</strong>。</p><p>进程控制，就是对系统中所有进程的<strong>生命历程</strong>实施控制。也即：进程控制是管理进程生灭及状态转换的<strong>程序的集合</strong>。</p><p>内核：在层次结构中最里层的程序模块集合。即：内核是计算机硬件的<strong>第一层扩充软件</strong>。</p><p>内核的基本功能：</p><ul><li>资源管理：<ul><li>进程管理、存储器管理、设备管理</li></ul></li><li>支撑功能<ul><li>中断处理、时钟管理、原语操作</li></ul></li></ul><p>内核的实现：</p><ul><li>它是由<strong>原语</strong>实现</li><li>原语：由若干条机器指令构成的，完成特定功能的一段程序，其执行过程不可分割，就象一条指令一样</li><li>例如：进程的创建、终止；进程的阻塞、唤醒；进程的挂起、激活。</li></ul><h3 id="进程同步"><a href="#进程同步" class="headerlink" title="进程同步"></a>进程同步</h3><p>在系统中有一些需要相互合作、协同工作的进程，它们之间的相互联系称为<strong>进程的同步</strong>。</p><h4 id="进程同步的主要任务"><a href="#进程同步的主要任务" class="headerlink" title="进程同步的主要任务"></a>进程同步的主要任务</h4><p>使并发执行的诸进程之间能有效地<strong>共享资源</strong>和<strong>相互合作</strong>，从而使程序的并发执行具有可再现性。</p><h4 id="进程的两种制约关系"><a href="#进程的两种制约关系" class="headerlink" title="进程的两种制约关系"></a>进程的两种制约关系</h4><ul><li>间接制约：竞争同一资源而产生的<strong>相互排斥</strong>的关系 。<ul><li>解释： 当某一进程访问某一资源时，不允许别的进程同时访问，这种限制称为<strong>互斥</strong>， 即多个进程在访问某些资源（如临界资源）时，也要有一种执行次序上的协调 ，当一个进程访问完毕，另一个进程才能访问。所以就其本质来讲，互斥仍是一种同步。</li></ul></li><li>直接制约：进程间共同完成一项任务时直接发生<strong>相互作用</strong>的关系。</li></ul><h4 id="临界资源"><a href="#临界资源" class="headerlink" title="临界资源"></a>临界资源</h4><ul><li>临界资源：一次仅允许一个进程访问的资源。例如打印机。</li><li>临界区：访问临界资源的代码段，不允许多个并发进程交叉执行的一段程序。</li></ul><h4 id="临界区必须互斥访问"><a href="#临界区必须互斥访问" class="headerlink" title="临界区必须互斥访问"></a>临界区必须<strong>互斥</strong>访问</h4><ul><li><p>进入区：(1) 检查临界资源是否被访问，未被访问，转(2)，否则转(1)。</p><p>​ (2) 进入临界区，并设访问标志。</p></li><li><p>退出区：恢复访问标志，允许其它进程进入</p></li><li></li></ul><h4 id="同步机制应遵循的准则"><a href="#同步机制应遵循的准则" class="headerlink" title="同步机制应遵循的准则"></a>同步机制应遵循的准则</h4><ul><li>空闲让进——有效利用</li><li>忙则等待——互斥</li><li>有限等待——避免“死等”</li><li>让权等待——避免“忙等”</li></ul><h1 id="处理机调度与死锁"><a href="#处理机调度与死锁" class="headerlink" title="处理机调度与死锁"></a>处理机调度与死锁</h1><h3 id="进程调度时机"><a href="#进程调度时机" class="headerlink" title="进程调度时机"></a>进程调度时机</h3><ul><li>正在执行的进程执行完毕;</li><li>执行中的进程因提出I/O请求或发生等事 件而暂停执行;</li><li>时间片完成;</li><li>在进程通信或同步过程中执行了某种原 语操作，如P操作(wait操作)阻塞;</li><li>高优先者进入;</li></ul><h3 id="处理机调度的层次"><a href="#处理机调度的层次" class="headerlink" title="处理机调度的层次"></a>处理机调度的层次</h3><p>作业调度</p><p>进程调度</p><p>内存调度</p><h1 id="存储器管理"><a href="#存储器管理" class="headerlink" title="存储器管理"></a>存储器管理</h1><h1 id="虚拟存储器"><a href="#虚拟存储器" class="headerlink" title="虚拟存储器"></a>虚拟存储器</h1><p>未完待续！！！</p><hr>]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>python之socket编程</title>
    <url>/learn-python/20190516-python-socket.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>本文介绍socket的基础知识、python中socket模块的使用方法，对于tcp通过自定制报头解决黏包问题。对于udp做一个简单的例子。</p></blockquote><a id="more"></a><h2 id="socket基础"><a href="#socket基础" class="headerlink" title="socket基础"></a>socket基础</h2><h3 id="铺垫"><a href="#铺垫" class="headerlink" title="铺垫"></a>铺垫</h3><p>传输层向高层用户<strong>屏蔽</strong>了下面网络核心的细节（如网络拓扑、所采用的路由选择协议等），它使应用进程看见的就是好像在两个运输层实体之间有一条<strong>端到端的逻辑通信信道。</strong></p><p>当传输层采用面向连接的 TCP 协议时，尽管下面的网络是不可靠的（只提供尽最大努力服务），但这种逻辑通信信道就相当于一条全双工的<strong>可靠信道</strong>。</p><p>当传输层采用无连接的 UDP 协议时，这种逻辑通信信道是一条<strong>不可靠信道</strong>。</p><h3 id="什么是socket"><a href="#什么是socket" class="headerlink" title="什么是socket"></a>什么是socket</h3><p>socket 套接字，它存在于传输层与应用层之间的抽象层，是对底层网络通信的一层抽象，让程序员可以像文件那样操作网络上发送和接收的数据。</p><ol><li>避免你学习各层的接口，以及协议的使用，socket已经封装好了所有的接口。直接使用这些接口或者方法即可，使用起来方便，提升开发效率。</li><li>Python中socket就是一个模块，通过使用学习模块提供的方法，建立客户端与服务端的通信，建立客户端与服务端的通信，使用方便。</li></ol><p><img src="/learn-python/20190516-python-socket/socket.png" alt="socket"></p><p>所以，从传输层包括传输层以下，都是操作系统帮助我们封装的各种header，你不用去关心。我们只需要掌握socket这个模块就行。</p><h3 id="创建socket对象"><a href="#创建socket对象" class="headerlink" title="创建socket对象"></a>创建socket对象</h3><p>创建socket的时候需要指定socket的类型，一般有三种：</p><ol><li>SOCK_STREAM：面向连接的稳定通信，底层是 TCP 协议，参数默认是这个</li><li>SOCK_DGRAM：无连接的通信，底层是 UDP 协议，需要上层的协议来保证可靠性。</li><li>SOCK_RAW：更加灵活的数据控制，能让你指定 IP 头部</li></ol><p>还需要指定套接字的家族，有两种</p><ol><li>基于文件类型的套接字家族：AF_UNIX</li><li>基于网络类型的套接字家族：AF_INET，最为广泛，本文也将使用这个</li></ol><h2 id="基于TCP协议的socket通信"><a href="#基于TCP协议的socket通信" class="headerlink" title="基于TCP协议的socket通信"></a>基于TCP协议的socket通信</h2><p>下图是基于TCP协议的socket通信流程</p><p><img src="/learn-python/20190516-python-socket/TCP%E5%8D%8F%E8%AE%AE%E4%B8%8B%E7%9A%84socket.png" alt="TCP协议下的socket"></p><p>下面通过一个形象的例子来讲解，把上图的整个流程比作打电话。</p><p>版本一：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># server.py</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="comment"># phone = socket.socket(socket.AF_INET,socket.SOCK_STREAM)   # 基于网络的套接字AF_INET , 流式（tcp）</span></span><br><span class="line"><span class="comment"># 1. 创建socket对象（买手机）</span></span><br><span class="line">phone = socket.socket()   <span class="comment"># 可以默认不写</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 绑定ip地址和端口（办卡）</span></span><br><span class="line">phone.bind((<span class="string">'127.0.0.1'</span>,<span class="number">8848</span>))   <span class="comment"># 本地回环地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 监听（开机状态）</span></span><br><span class="line">phone.listen(<span class="number">5</span>)  <span class="comment"># 参数数字没什么用，半连接池</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.接受连接</span></span><br><span class="line">print(<span class="string">'start'</span>)</span><br><span class="line">conn,addr = phone.accept()          <span class="comment"># 等待。</span></span><br><span class="line">print(conn,addr)</span><br><span class="line"><span class="comment"># 5.收发消息</span></span><br><span class="line">from_client_data = conn.recv(<span class="number">1024</span>)  <span class="comment"># 最多接收1024个字节 ，过大会出现MemoryError</span></span><br><span class="line">conn.send(from_client_data.upper())</span><br><span class="line"><span class="comment"># 6.关闭管道（挂断电话）</span></span><br><span class="line">conn.close()   </span><br><span class="line"><span class="comment"># 7.关闭服务(关机)</span></span><br><span class="line">phone.close()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># client.py</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 创建socket对象（买手机）</span></span><br><span class="line">phone = socket.socket()   				<span class="comment"># 可以默认不写</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.连接服务器的ip和端口</span></span><br><span class="line">phone.connect((<span class="string">'127.0.0.1'</span>,<span class="number">8848</span>))</span><br><span class="line"><span class="comment"># 3.发送接收消息。</span></span><br><span class="line">phone.send(<span class="string">'hello'</span>.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">from_server_data = phone.recv(<span class="number">1024</span>)		<span class="comment"># 等待</span></span><br><span class="line">print(from_server_data)</span><br><span class="line"><span class="comment"># 4.关机</span></span><br><span class="line">phone.close()</span><br></pre></td></tr></table></figure><h2 id="单个客户端与服务端循环通信"><a href="#单个客户端与服务端循环通信" class="headerlink" title="单个客户端与服务端循环通信"></a>单个客户端与服务端循环通信</h2><p>上面的版本的最基本的，他只能互发固定的一句话，接下来的版本二实现，两个人的循环通信</p><p>版本二：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># server.py</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">so = socket.socket()</span><br><span class="line">server = (<span class="string">'127.0.0.1'</span>,<span class="number">8848</span>)</span><br><span class="line">so.bind(server)</span><br><span class="line"></span><br><span class="line">so.listen()</span><br><span class="line"></span><br><span class="line">print(<span class="string">'start'</span>)</span><br><span class="line">conn,addr = so.accept()</span><br><span class="line"><span class="comment"># 两个人的循环通信，所以我们就需要循环了</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span> :</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        from_client_data = conn.recv(<span class="number">1024</span>).decode(<span class="string">'utf-8'</span>)</span><br><span class="line">        <span class="comment"># 增加判断，可以在客户端停止的时候，被动关闭服务器。</span></span><br><span class="line">        <span class="keyword">if</span> from_client_data == <span class="string">'byebye'</span>:</span><br><span class="line">            print(from_client_data)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        print(<span class="string">f"来自客户端<span class="subst">&#123;addr&#125;</span> 消息：<span class="subst">&#123;from_client_data&#125;</span>"</span>)</span><br><span class="line">        to_client = input(<span class="string">'&gt;&gt;&gt;'</span>)</span><br><span class="line">        conn.send(to_client.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">    <span class="keyword">except</span> (ConnectionResetError):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">conn.close()</span><br><span class="line">so.close()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># client.py</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">so = socket.socket()</span><br><span class="line">server = (<span class="string">'127.0.0.1'</span>,<span class="number">8848</span>)</span><br><span class="line">so.connect(server)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    to_server = input(<span class="string">'&gt;&gt;&gt;'</span>)</span><br><span class="line">    <span class="comment"># 为了能够停止对话，增加一步判断，如果输入Q退出，则发送一句b'byebye'并且终止客户端。</span></span><br><span class="line">    <span class="keyword">if</span> to_server.upper() == <span class="string">'Q'</span>:</span><br><span class="line">        so.send(<span class="string">b'byebye'</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    so.send(to_server.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">    from_server_data = so.recv(<span class="number">1024</span>).decode(<span class="string">'utf-8'</span>)</span><br><span class="line">    print(<span class="string">f"来自服务端<span class="subst">&#123;server&#125;</span>消息：<span class="subst">&#123;from_server_data&#125;</span>"</span>)</span><br><span class="line">so.close()</span><br></pre></td></tr></table></figure><h2 id="通信，连接循环"><a href="#通信，连接循环" class="headerlink" title="通信，连接循环"></a>通信，连接循环</h2><p>上面这个版本实现了单用户与服务器的循环通信，接下来要实现多用户与服务器的循环通信，其实只是在版本二的基础上增加一层循环。</p><p>版本三：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># server.py</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">so = socket.socket()</span><br><span class="line">server = (<span class="string">'127.0.0.1'</span>,<span class="number">8848</span>)</span><br><span class="line">so.bind(server)</span><br><span class="line"></span><br><span class="line">so.listen()</span><br><span class="line"><span class="comment"># 在这里加一层循环，达到和多用户聊天的效果，不过，只能是与一个用户结束聊天后才能和下一个用户开始聊天。</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    print()</span><br><span class="line">    print(<span class="string">'start'</span>)</span><br><span class="line">    conn,addr = so.accept()</span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span> :</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            from_client_data = conn.recv(<span class="number">1024</span>).decode(<span class="string">'utf-8'</span>)</span><br><span class="line">            <span class="keyword">if</span> from_client_data == <span class="string">'byebye'</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            print(<span class="string">f"来自<span class="subst">&#123;addr&#125;</span> 消息： <span class="subst">&#123;from_client_data&#125;</span>"</span>)</span><br><span class="line">            to_client = input(<span class="string">'&gt;&gt;&gt;'</span>)</span><br><span class="line">            conn.send(to_client.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">        <span class="keyword">except</span> (ConnectionResetError):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    print(<span class="string">f'结束与<span class="subst">&#123;addr&#125;</span>的通话'</span>)</span><br><span class="line">    conn.close()</span><br><span class="line"></span><br><span class="line">so.close()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># client.py</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">so = socket.socket()</span><br><span class="line">server = (<span class="string">'127.0.0.1'</span>,<span class="number">8848</span>)</span><br><span class="line">so.connect(server)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    to_server = input(<span class="string">'&gt;&gt;&gt;'</span>)</span><br><span class="line">    <span class="keyword">if</span> to_server.upper() == <span class="string">'Q'</span>:</span><br><span class="line">        so.send(<span class="string">b'byebye'</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    so.send(to_server.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">    from_server = so.recv(<span class="number">1024</span>).decode(<span class="string">'utf-8'</span>)</span><br><span class="line">    print(<span class="string">f"来自<span class="subst">&#123;server&#125;</span> 消息： <span class="subst">&#123;from_server&#125;</span>"</span>)</span><br><span class="line">so.close()</span><br></pre></td></tr></table></figure><h2 id="利用socket完成获取远端命令"><a href="#利用socket完成获取远端命令" class="headerlink" title="利用socket完成获取远端命令"></a>利用socket完成获取远端命令</h2><h3 id="铺垫-1"><a href="#铺垫-1" class="headerlink" title="铺垫"></a>铺垫</h3><p>既然想执行远端命令，那我们就需要学习新的模块来实现这个功能，这个模块就是subprocess模块，下面这个例子是完成dir目录查询。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line">obj = subprocess.Popen(</span><br><span class="line">    <span class="string">'dir'</span>,</span><br><span class="line">    shell=<span class="literal">True</span>,</span><br><span class="line">    stdout=subprocess.PIPE,</span><br><span class="line">    stderr=subprocess.PIPE,</span><br><span class="line">)</span><br><span class="line">print(obj.stdout.read().decode(<span class="string">'gbk'</span>))  <span class="comment"># 正确目录</span></span><br><span class="line">print(obj.stderr.read().decode(<span class="string">'gbk'</span>))  <span class="comment"># 错误命令</span></span><br></pre></td></tr></table></figure><p>在版本三的基础上，我们先将上面这个简单的例子做成一个函数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sub</span><span class="params">(command)</span>:</span></span><br><span class="line">    obj = subprocess.Popen(</span><br><span class="line">        command,</span><br><span class="line">        shell=<span class="literal">True</span>,</span><br><span class="line">        stdout=subprocess.PIPE,</span><br><span class="line">        stderr=subprocess.PIPE,</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> obj.stdout.read() + obj.stderr.read()</span><br><span class="line"><span class="comment"># print(sub('dir').decode('gbk'))  # 测试函数</span></span><br></pre></td></tr></table></figure><p>然后放入版本三中：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># server.py</span></span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sub</span><span class="params">(command)</span>:</span></span><br><span class="line">    obj = subprocess.Popen(</span><br><span class="line">        command,</span><br><span class="line">        shell=<span class="literal">True</span>,</span><br><span class="line">        stdout=subprocess.PIPE,</span><br><span class="line">        stderr=subprocess.PIPE,</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> obj.stdout.read() + obj.stderr.read()</span><br><span class="line"><span class="comment"># print(sub('dir').decode('gbk'))  # 测试函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">so = socket.socket()</span><br><span class="line">server = (<span class="string">'127.0.0.1'</span>,<span class="number">8848</span>)</span><br><span class="line">so.bind(server)</span><br><span class="line"></span><br><span class="line">so.listen()</span><br><span class="line"><span class="comment"># 在这里加一层循环，达到和多用户聊天的效果，不过，只能是与一个用户结束聊天后才能和下一个用户开始聊天。</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    print()</span><br><span class="line">    print(<span class="string">'start'</span>)</span><br><span class="line">    conn,addr = so.accept()</span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span> :</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            from_client_data = conn.recv(<span class="number">1024</span>).decode(<span class="string">'utf-8'</span>)</span><br><span class="line">            <span class="keyword">if</span> from_client_data == <span class="string">'byebye'</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            to_client = sub(from_client_data)</span><br><span class="line">            conn.send(to_client)</span><br><span class="line">        <span class="keyword">except</span> (ConnectionResetError):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    print(<span class="string">f'结束与<span class="subst">&#123;addr&#125;</span>的通话'</span>)</span><br><span class="line">    conn.close()</span><br><span class="line"></span><br><span class="line">so.close()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># client.py</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">so = socket.socket()</span><br><span class="line">server = (<span class="string">'127.0.0.1'</span>,<span class="number">8848</span>)</span><br><span class="line">so.connect(server)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    to_server = input(<span class="string">'&gt;&gt;&gt;'</span>)</span><br><span class="line">    <span class="keyword">if</span> to_server.upper() == <span class="string">'Q'</span>:</span><br><span class="line">        so.send(<span class="string">b'byebye'</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    so.send(to_server.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">    from_server = so.recv(<span class="number">1024</span>).decode(<span class="string">'gbk'</span>)</span><br><span class="line">    print(<span class="string">f"来自<span class="subst">&#123;server&#125;</span> 消息：\n <span class="subst">&#123;from_server&#125;</span>"</span>)</span><br><span class="line">so.close()</span><br></pre></td></tr></table></figure><p>但是我们在实际测试中发现，打印的结果并不完整，产生了<strong>黏包现象</strong>！</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>tcp创建服务端的四大步骤：</p><p>sbla （socket，bind，listen，accept）</p><h2 id="黏包现象"><a href="#黏包现象" class="headerlink" title="黏包现象"></a>黏包现象</h2><p><img src="/learn-python/20190516-python-socket/%E7%BC%93%E5%86%B2%E5%8C%BA.png" alt="缓冲区"></p><h3 id="黏包现象-1"><a href="#黏包现象-1" class="headerlink" title="黏包现象"></a>黏包现象</h3><p>现象一： recv端产生的黏包现象</p><ul><li><p>第一次 dir 数据 &lt; 1024</p><ul><li>服务端产生 508字节 客户端接收508字节</li></ul></li><li><p>第二次 ipconfig 数据 &gt; 1024</p><ul><li>服务端产生1455字节 客户端接收1024字节</li></ul></li><li><p>第三次 dir 数据 &lt; 1024</p><ul><li>服务端产生508字节 客户端接收431字节</li></ul><p>send把数据发送输出缓冲区后，recv进入阻塞状态，recv等待抓取输入缓冲区的数据。</p><p>粘包现象的根本原因：缓冲区</p><p><img src="/learn-python/20190516-python-socket/%E7%8E%B0%E8%B1%A11.png" alt="现象1"></p></li></ul><p>———————————加入sleep进行验证———————————</p><ul><li><p>第一次 dir 数据 &lt; 1024</p><ul><li>服务端产生 508字节 客户端接收508字节</li></ul></li><li><p>第二次 ipconfig 数据 &gt; 1024</p><ul><li>服务端产生1455字节 客户端接收1024字节</li></ul></li><li><p>第三次 dir 数据 &lt; 1024</p><ul><li>sleep(3) 第二次间隔3秒钟接收数据， 发现此数据和之前没有取完的数据黏在一起。</li><li>TCP协议的流式协议，数据与水流一样源源不断，粘包现象</li><li>服务端产生508字节 客户端接收431字节 + 508字节</li><li>原因：recv之前，缓冲区已经得到了dir的数据</li></ul><p><img src="/learn-python/20190516-python-socket/%E7%8E%B0%E8%B1%A11.2.png" alt="现象1.2"></p></li></ul><p>现象二：send端可能产生的粘包现象（连续send少量数据发到输出缓冲区，可能在缓冲区不断积压，多次写入的数据一次性发到网络，这取决于当前的网络状态）</p><p><img src="/learn-python/20190516-python-socket/%E7%8E%B0%E8%B1%A12.png" alt="现象1.2"></p><h3 id="系统缓冲区"><a href="#系统缓冲区" class="headerlink" title="系统缓冲区"></a>系统缓冲区</h3><p>缓冲区一般是8k左右</p><h4 id="缓冲区的作用？"><a href="#缓冲区的作用？" class="headerlink" title="缓冲区的作用？"></a>缓冲区的作用？</h4><p>没有缓冲区：如果你的网络出现短暂的异常或者波动，你接收数据就会出现短暂的中断，影响你的下载或上传的效率。</p><p>就像cpu的缓冲区一样，cpu的效率是特别高的，没有缓冲区，cpu的等待时间就会长了，这样效率就会大大降低。 设计缓冲区也是希望减少recv的等待。</p><p>生活上的理解就是输液器的那个小葫芦/蓄水池。</p><p>但是缓冲区虽然解决了效率问题，但也带来了粘包问题。</p><h3 id="什么是黏包"><a href="#什么是黏包" class="headerlink" title="什么是黏包"></a>什么是黏包</h3><ol><li>发送端为了将多个发往接收端的包，更有效的发到对方，使用了优化方法（Nagle算法），将多次间隔较小、数据量小的数据包，合并成一个大的数据包发送(把发送端的缓冲区填满一次性发送)。</li><li>接收端底层会把tcp段整理排序交给缓冲区，这样接收端应用程序从缓冲区取数据就只能得到整体数据而不知道怎么拆分（tcp协议是流式协议，多条消息之间没有边界）</li></ol><h3 id="解决黏包的方案"><a href="#解决黏包的方案" class="headerlink" title="解决黏包的方案"></a>解决黏包的方案</h3><h4 id="错误示例："><a href="#错误示例：" class="headerlink" title="错误示例："></a>错误示例：</h4><ol><li>扩大接收recv的上限 recv(10000000)，这么多的数据会放在内存。不是解决这个问题的根本原因。</li><li>故意延长recv的执行时间。 sleep……….. 效率……</li></ol><h4 id="如何解决："><a href="#如何解决：" class="headerlink" title="如何解决："></a>如何解决：</h4><h5 id="recv的工作原理"><a href="#recv的工作原理" class="headerlink" title="recv的工作原理"></a>recv的工作原理</h5><p>When no data is available, block untilat least one byte is available or until the remote end is closed.<br>当缓冲区没有数据可取时，recv会一直处于阻塞状态，直到缓冲区至少有一个字节数据可取，或者远程端关闭。<br>When the remote end is closed and all data is read, return the empty string.<br>关闭远程端并读取所有数据后，返回空字符串。</p><p>下面进行验证</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># server.py</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">phone = socket.socket()</span><br><span class="line">phone.bind((<span class="string">'127.0.0.1'</span>,<span class="number">8848</span>))</span><br><span class="line">phone.listen()</span><br><span class="line">conn,addr = phone.accept()</span><br><span class="line"><span class="comment"># 连续接收3次</span></span><br><span class="line">ret1 = conn.recv(<span class="number">1024</span>)</span><br><span class="line"><span class="comment"># 这一次显示后，等待了50s后，显示后面两个空字节</span></span><br><span class="line">print(ret1)</span><br><span class="line">ret2 = conn.recv(<span class="number">1024</span>)</span><br><span class="line">ret3 = conn.recv(<span class="number">1024</span>)</span><br><span class="line">print(ret2)</span><br><span class="line">print(ret3)</span><br><span class="line">conn.close()</span><br><span class="line">phone.close()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># client.py</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">phone = socket.socket()</span><br><span class="line">server = (<span class="string">'127.0.0.1'</span>,<span class="number">8848</span>)</span><br><span class="line">phone.connect(server)</span><br><span class="line"><span class="comment"># 两次发送一个比较短的数据</span></span><br><span class="line">phone.send(<span class="string">b'hello'</span>)</span><br><span class="line">time.sleep(<span class="number">50</span>)</span><br><span class="line">phone.close()</span><br></pre></td></tr></table></figure><h5 id="核心思路"><a href="#核心思路" class="headerlink" title="核心思路"></a>核心思路</h5><p>send可以一次，recv可以多次</p><p>目标：发多少，收多少字节</p><ol><li><p>当我第二次给服务器发送命令之前，我应该循环recv直至所有的数据全部取完。</p><p>result 3000bytes recv 3次</p><p>result 5000bytes recv 5次</p><p>result 30000bytes recv ？ —-&gt; 循环次数相关</p></li><li><p>如何限制循环次数？</p><p>当你发送的总bytes个数与接收的总bytes个数相等时，循环结束。</p></li><li><p>如何获取发送的总bytes个数：服务端： len() —&gt; 3400个字节 int</p><p>​ 总数据 result = b’sdfjsoidfjoidsjjio’</p><p>​ 所以：</p><p>​ 服务端要完成:</p><p>​ send（总个数)</p><p>​ send（总数据）</p></li><li><p>总个数是什么类型? int() send 需要发送bytes类型</p><p>​ 将 int 转化成bytes 即可。</p><p>​ 方案一：</p><p>​ str(3400) —&gt; bytes(‘3400’) —&gt; b’3400’ —&gt; 4个字节</p><p>​ 难点：但是由于总个数不同，头部的字节数是不断变化的</p><p>​ 我们需要解决的问题是：无论总字节个数是多少，我们头部是固定的。</p><p>​ 需要将不固定长度的 int 转化成一个固定长度的 bytes类型，方便获取头部信息。</p><p>​ struct模块（将一个类型转换成固定长度的bytes，转换后还可以翻转回来）</p><p>​</p></li></ol><h5 id="low版"><a href="#low版" class="headerlink" title="low版"></a>low版</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># server.py</span></span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sub</span><span class="params">(command)</span>:</span></span><br><span class="line">    obj = subprocess.Popen(</span><br><span class="line">        command,</span><br><span class="line">        shell=<span class="literal">True</span>,</span><br><span class="line">        stdout=subprocess.PIPE,</span><br><span class="line">        stderr=subprocess.PIPE,</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> obj.stdout.read() + obj.stderr.read()</span><br><span class="line"><span class="comment"># print(sub('dir').decode('gbk'))  # 测试函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">so = socket.socket()</span><br><span class="line">server = (<span class="string">'127.0.0.1'</span>,<span class="number">8848</span>)</span><br><span class="line">so.bind(server)</span><br><span class="line"></span><br><span class="line">so.listen()</span><br><span class="line"></span><br><span class="line">conn,addr = so.accept()</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span> :</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        from_client_data = conn.recv(<span class="number">1024</span>).decode(<span class="string">'utf-8'</span>)</span><br><span class="line">        <span class="keyword">if</span> from_client_data == <span class="string">'byebye'</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        to_client = sub(from_client_data)</span><br><span class="line">        print()</span><br><span class="line">        print(<span class="string">f"服务端发送的总字节数: <span class="subst">&#123;len(to_client)&#125;</span>"</span>)          <span class="comment"># gbk形式的</span></span><br><span class="line">        <span class="comment"># 1.制作报头</span></span><br><span class="line">        total_size = len(to_client)</span><br><span class="line">        <span class="comment"># 2.将不固定长度的int转换成固定长度的bytes类型   int  4字节</span></span><br><span class="line">        total_size_bytes = struct.pack(<span class="string">'i'</span>,total_size)</span><br><span class="line">        <span class="comment"># 3. 发送报头</span></span><br><span class="line">        conn.send(total_size_bytes)</span><br><span class="line">        <span class="comment"># 4. 发送原数据</span></span><br><span class="line">        conn.send(to_client)</span><br><span class="line">    <span class="keyword">except</span> (ConnectionResetError):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">print(<span class="string">f'结束与<span class="subst">&#123;addr&#125;</span>的通话'</span>)</span><br><span class="line">conn.close()</span><br><span class="line">so.close()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># client.py</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line">so = socket.socket()</span><br><span class="line">server = (<span class="string">'127.0.0.1'</span>,<span class="number">8848</span>)</span><br><span class="line">so.connect(server)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    to_server = input(<span class="string">'&gt;&gt;&gt;'</span>)</span><br><span class="line">    <span class="keyword">if</span> to_server.upper() == <span class="string">'Q'</span>:</span><br><span class="line">        so.send(<span class="string">b'byebye'</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    so.send(to_server.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">    <span class="comment"># 1.接受报头</span></span><br><span class="line">    head_bytes = so.recv(<span class="number">4</span>)</span><br><span class="line">    <span class="comment"># 2.将报头反转回int类型</span></span><br><span class="line">    total_size = struct.unpack(<span class="string">'i'</span>,head_bytes)[<span class="number">0</span>]</span><br><span class="line">    <span class="comment"># 3.循环接收元数据</span></span><br><span class="line">    total_data = <span class="string">b''</span></span><br><span class="line">    <span class="keyword">while</span> len(total_data) &lt; total_size:</span><br><span class="line">        total_data += so.recv(<span class="number">1024</span>)</span><br><span class="line">    print(total_data.decode(<span class="string">'gbk'</span>))</span><br><span class="line"></span><br><span class="line">so.close()</span><br></pre></td></tr></table></figure><p>问题1：较大的数据，直接用struct会报错</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line">ret = struct.pack(<span class="string">'i'</span>,<span class="number">100000000000</span>)</span><br><span class="line">ret2 = struct.pack(<span class="string">'q'</span>,<span class="number">1000000000000000000000000</span>)</span><br><span class="line"><span class="comment"># struct.error: argument out of range</span></span><br></pre></td></tr></table></figure><p>问题2：报头信息不可能只包含数据总大小，md5，文件名，文件路径。</p><h5 id="旗舰版"><a href="#旗舰版" class="headerlink" title="旗舰版"></a>旗舰版</h5><p>根据发生的问题<strong>自定制报头</strong>（总大小，文件名，md5）</p><p>我们是在报头的基础上加上一层报头</p><p>效果如下<img src="/learn-python/20190516-python-socket/%E4%B8%A4%E4%B8%AA%E7%89%88%E6%9C%AC%E6%AF%94%E8%BE%83.png" alt="两个版本比较"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># server.py</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sub</span><span class="params">(command)</span>:</span></span><br><span class="line">    obj = subprocess.Popen(</span><br><span class="line">        command,</span><br><span class="line">        shell=<span class="literal">True</span>,</span><br><span class="line">        stdout=subprocess.PIPE,</span><br><span class="line">        stderr=subprocess.PIPE,</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> obj.stdout.read() + obj.stderr.read()</span><br><span class="line"><span class="comment"># print(sub('dir').decode('gbk'))  # 测试函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">so = socket.socket()</span><br><span class="line">server = (<span class="string">'127.0.0.1'</span>,<span class="number">8848</span>)</span><br><span class="line">so.bind(server)</span><br><span class="line">so.listen()</span><br><span class="line">conn,addr = so.accept()</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span> :</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        from_client_data = conn.recv(<span class="number">1024</span>).decode(<span class="string">'utf-8'</span>)</span><br><span class="line">        <span class="keyword">if</span> from_client_data == <span class="string">'byebye'</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        to_client = sub(from_client_data).decode(<span class="string">'gbk'</span>).encode(<span class="string">'utf-8'</span>)</span><br><span class="line">        print()</span><br><span class="line">        print(<span class="string">f"服务端发送的总字节数: <span class="subst">&#123;len(to_client)&#125;</span>"</span>)          <span class="comment"># gbk形式的</span></span><br><span class="line">        <span class="comment"># 1.制作报头</span></span><br><span class="line">        head_dict = &#123;</span><br><span class="line">            <span class="string">'MD5'</span>: <span class="string">'sdofijoisjdfo'</span>,</span><br><span class="line">            <span class="string">'file_name'</span>:<span class="string">'婚前视频'</span>,</span><br><span class="line">            <span class="string">'file_size'</span>:len(to_client),</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2.将报头字典序列化转化成json字符串</span></span><br><span class="line">        head_dict_json = json.dumps(head_dict)</span><br><span class="line">        <span class="comment"># 3. 将json字符串转化成bytes</span></span><br><span class="line">        head_dict_json_bytes = head_dict_json.encode(<span class="string">'utf-8'</span>)</span><br><span class="line">            <span class="comment"># 但是，目前这个报头不固定,使用len方法得到报头的长度</span></span><br><span class="line">            <span class="comment"># 再次使用报头的长度用struct模块包装。</span></span><br><span class="line">        <span class="comment"># 4.获取报头的长度</span></span><br><span class="line">        haed_len = len(head_dict_json_bytes)</span><br><span class="line">        <span class="comment"># 5.将长度转化成固定的4个字节</span></span><br><span class="line">        head_len_bytes = struct.pack(<span class="string">'i'</span>,haed_len)</span><br><span class="line">        <span class="comment"># 6. 发送固定的4字节</span></span><br><span class="line">        conn.send(head_len_bytes)</span><br><span class="line">        <span class="comment"># 7. 发送报头</span></span><br><span class="line">        conn.send(head_dict_json_bytes)</span><br><span class="line">        <span class="comment"># 8. 发送原数据</span></span><br><span class="line">        conn.send(to_client)</span><br><span class="line">    <span class="keyword">except</span> (ConnectionResetError):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">print(<span class="string">f'结束与<span class="subst">&#123;addr&#125;</span>的通话'</span>)</span><br><span class="line">conn.close()</span><br><span class="line">so.close()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># client.py</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">so = socket.socket()</span><br><span class="line">server = (<span class="string">'127.0.0.1'</span>,<span class="number">8848</span>)</span><br><span class="line">so.connect(server)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    to_server = input(<span class="string">'&gt;&gt;&gt;'</span>)</span><br><span class="line">    <span class="keyword">if</span> to_server.upper() == <span class="string">'Q'</span>:</span><br><span class="line">        so.send(<span class="string">b'byebye'</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    so.send(to_server.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">    <span class="comment"># 1.接受报头长度</span></span><br><span class="line">    head_len_bytes = so.recv(<span class="number">4</span>)</span><br><span class="line">    <span class="comment"># 2.将报头长度反转回int类型</span></span><br><span class="line">    head_len_size = struct.unpack(<span class="string">'i'</span>,head_len_bytes)[<span class="number">0</span>]</span><br><span class="line">    <span class="comment"># 3.接收报头</span></span><br><span class="line">    head_bytes = so.recv(head_len_size)</span><br><span class="line">    head = json.loads(head_bytes.decode(<span class="string">'utf-8'</span>))</span><br><span class="line">    total_size = head[<span class="string">'file_size'</span>]</span><br><span class="line">    <span class="comment"># 4.循环接收元数据</span></span><br><span class="line">    total_data = <span class="string">b''</span></span><br><span class="line">    <span class="keyword">while</span> len(total_data) &lt; total_size:</span><br><span class="line">        total_data += so.recv(<span class="number">1024</span>)</span><br><span class="line">    print(total_data.decode(<span class="string">'utf-8'</span>))</span><br><span class="line"></span><br><span class="line">so.close()</span><br></pre></td></tr></table></figure><h2 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h2><p>前面都是基于UDP协议，接下来探讨udp。</p><p>当传输层采用无连接的 UDP 协议时，这种逻辑通信信道是一条不可靠信道。 （安全可靠体现在数据能否安全到达。）。面向数据报（无连接）的协议，效率高，速度快。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># server.py</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">udp_server = socket.socket(socket.AF_INET,socket.SOCK_DGRAM)</span><br><span class="line">server = (<span class="string">'127.0.0.1'</span>,<span class="number">9000</span>)</span><br><span class="line">udp_server.bind(server)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    <span class="comment"># 谁先给我发，就给谁先回。</span></span><br><span class="line">    from_client_data,client = udp_server.recvfrom(<span class="number">1024</span>)</span><br><span class="line">    print(from_client_data.decode(<span class="string">'utf-8'</span>))</span><br><span class="line">    to_client_data = input(<span class="string">"&gt;&gt;&gt;"</span>).strip()</span><br><span class="line">    udp_server.sendto(to_client_data.encode(<span class="string">'utf-8'</span>),client)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># client.py</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">udp_client = socket.socket(socket.AF_INET,socket.SOCK_DGRAM)</span><br><span class="line">server = (<span class="string">'127.0.0.1'</span>,<span class="number">9000</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    to_server_data = input(<span class="string">'&gt;&gt;&gt;'</span>).strip()</span><br><span class="line">    udp_client.sendto(to_server_data.encode(<span class="string">'utf-8'</span>),server)</span><br><span class="line">    from_server_data,server = udp_client.recvfrom(<span class="number">1024</span>)</span><br><span class="line">    print(from_server_data.decode(<span class="string">'utf-8'</span>))</span><br></pre></td></tr></table></figure><h2 id="socketserver"><a href="#socketserver" class="headerlink" title="socketserver"></a>socketserver</h2><p>前面我们使用的socket方式是单线程的，接下来使用socketserver开启一个多线程。</p><h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># server.py</span></span><br><span class="line"><span class="keyword">import</span> socketserver</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Myserver</span><span class="params">(socketserver.BaseRequestHandler)</span>:</span> <span class="comment"># 继承的类是固定的</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle</span><span class="params">(self)</span>:</span>      <span class="comment"># 必须定义这个同名方法</span></span><br><span class="line">        <span class="string">'''只有这里是自己写的，其它都是固定写法'''</span></span><br><span class="line">        <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">            from_client_data = self.request.recv(<span class="number">1024</span>).decode(<span class="string">'utf-8'</span>)  <span class="comment"># 相当于conn</span></span><br><span class="line">            print(from_client_data)</span><br><span class="line">            to_client_data = input(<span class="string">'&gt;&gt;&gt;'</span>).strip()</span><br><span class="line">            self.request.send(to_client_data.encode(<span class="string">'utf-8'</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    ip_port = (<span class="string">'127.0.0.1'</span>,<span class="number">8848</span>)</span><br><span class="line">    server = socketserver.ThreadingTCPServer(ip_port,Myserver)</span><br><span class="line">    server.serve_forever()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># client.py</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">client = socket.socket()</span><br><span class="line"></span><br><span class="line">client.connect((<span class="string">'127.0.0.1'</span>,<span class="number">8848</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    to_server = input(<span class="string">'&gt;&gt;&gt;'</span>).strip()</span><br><span class="line">    client.send(<span class="string">f'小黑：<span class="subst">&#123;to_server&#125;</span>'</span>.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">    <span class="comment"># 接收信息</span></span><br><span class="line">    from_server_data = client.recv(<span class="number">1024</span>)</span><br><span class="line">    print(<span class="string">f"来自服务器的消息：<span class="subst">&#123;from_server_data.decode(<span class="string">'utf-8'</span>)&#125;</span>"</span>)</span><br></pre></td></tr></table></figure><h3 id="刨析"><a href="#刨析" class="headerlink" title="刨析"></a>刨析</h3><p>对于一个新出现的模块，要学习它需要有一个入口，实例化对象是一个不错的选择：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.从实例化对象入手</span></span><br><span class="line">server = socketserver.ThreadingTCPServer(ip_port,Myserver)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 2.了解它的继承关系</span></span><br><span class="line">print(socketserver.ThreadingTCPServer.mro())</span><br><span class="line"><span class="comment"># [&lt;class 'socketserver.ThreadingTCPServer'&gt;, &lt;class 'socketserver.ThreadingMixIn'&gt;, &lt;class 'socketserver.TCPServer'&gt;, &lt;class 'socketserver.BaseServer'&gt;, &lt;class 'object'&gt;]</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 3.查看它的__init__方法</span></span><br><span class="line"><span class="comment"># 在TCPServer中写了__init__</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TCPServer</span><span class="params">(BaseServer)</span>:</span></span><br><span class="line">    <span class="string">'''省略一部分常量'''</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, server_address, RequestHandlerClass, bind_and_activate=True)</span>:</span></span><br><span class="line">        <span class="string">"""Constructor.  May be extended, do not override."""</span></span><br><span class="line">        BaseServer.__init__(self, server_address, RequestHandlerClass)</span><br><span class="line">        self.socket = socket.socket(self.address_family,</span><br><span class="line">                                    self.socket_type)</span><br><span class="line">        <span class="keyword">if</span> bind_and_activate:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                self.server_bind()</span><br><span class="line">                self.server_activate()</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                self.server_close()</span><br><span class="line">                <span class="keyword">raise</span></span><br><span class="line"><span class="comment"># 结论：它还调用了BaseServer.__init__()在点击查看。</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 4.在BaseServer查看__init__方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseServer</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, server_address, RequestHandlerClass)</span>:</span></span><br><span class="line">        <span class="string">"""Constructor.  May be extended, do not override."""</span></span><br><span class="line">        self.server_address = server_address</span><br><span class="line">        self.RequestHandlerClass = RequestHandlerClass</span><br><span class="line">        self.__is_shut_down = threading.Event()</span><br><span class="line">        self.__shutdown_request = <span class="literal">False</span></span><br><span class="line"><span class="comment"># 结论：看到这里我们明白了，我们实例化时的参数是以属性的形式被封装。</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 5.继续查看TCPServer中的__init__方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TCPServer</span><span class="params">(BaseServer)</span>:</span></span><br><span class="line">    <span class="string">'''省略一部分常量'''</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, server_address, RequestHandlerClass, bind_and_activate=True)</span>:</span></span><br><span class="line">        <span class="string">"""Constructor.  May be extended, do not override."""</span></span><br><span class="line">        BaseServer.__init__(self, server_address, RequestHandlerClass)        </span><br><span class="line"><span class="comment">#-------------------------------------------------------------        </span></span><br><span class="line">        self.socket = socket.socket(self.address_family,</span><br><span class="line">                                    self.socket_type)</span><br><span class="line">        <span class="keyword">if</span> bind_and_activate:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                self.server_bind()</span><br><span class="line">                self.server_activate()</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                self.server_close()</span><br><span class="line">                <span class="keyword">raise</span></span><br><span class="line"><span class="comment">#-------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># 结论:继续读后面的内容，我们发现，原来底层依旧是使用socket模块来创建socket对象</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 6. 接下来对于 self.server_bind() 找到它的定义</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">server_bind</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""Called by constructor to bind the socket.</span></span><br><span class="line"><span class="string">        May be overridden.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> self.allow_reuse_address:</span><br><span class="line">            self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line">        self.socket.bind(self.server_address)</span><br><span class="line">        self.server_address = self.socket.getsockname()</span><br><span class="line"><span class="comment"># 前面的常量中allow_reuse_address默认是False</span></span><br><span class="line"><span class="comment"># 结论：我们bind方法也是由socket模块实现的，绑定端口，给对象封装地址</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 7. 接下来就到了self.server_activate() 找到它的定义</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">server_activate</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""Called by constructor to activate the server.</span></span><br><span class="line"><span class="string">        May be overridden.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.socket.listen(self.request_queue_size)</span><br><span class="line"><span class="comment"># 结论：只有一句话，就是用socket模块下的listen方法开始监听。</span></span><br></pre></td></tr></table></figure><p>到了这里我们就已经对这个实例化对象有了个大概的了解，它使用了进程方面的模块，也使用了socket模块。</p><p>然后查看代码中server.py的 server.serve_forever()，我们想知道到这个方法做了哪些事儿。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseServer</span>:</span> </span><br><span class="line">    <span class="string">'''上面的内容省略'''</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">serve_forever</span><span class="params">(self, poll_interval=<span class="number">0.5</span>)</span>:</span></span><br><span class="line">        <span class="string">"""Handle one request at a time until shutdown.</span></span><br><span class="line"><span class="string">        Polls for shutdown every poll_interval seconds. Ignores</span></span><br><span class="line"><span class="string">        self.timeout. If you need to do periodic tasks, do them in</span></span><br><span class="line"><span class="string">        another thread.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.__is_shut_down.clear()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># <span class="doctag">XXX:</span> Consider using another file descriptor or connecting to the</span></span><br><span class="line">            <span class="comment"># socket to wake this up instead of polling. Polling reduces our</span></span><br><span class="line">            <span class="comment"># responsiveness to a shutdown request and wastes cpu at all other</span></span><br><span class="line">            <span class="comment"># times.</span></span><br><span class="line">            <span class="keyword">with</span> _ServerSelector() <span class="keyword">as</span> selector:</span><br><span class="line">                selector.register(self, selectors.EVENT_READ)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span> <span class="keyword">not</span> self.__shutdown_request:</span><br><span class="line">                    ready = selector.select(poll_interval)</span><br><span class="line">                    <span class="keyword">if</span> ready:</span><br><span class="line">                        self._handle_request_noblock()</span><br><span class="line"></span><br><span class="line">                    self.service_actions()</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            self.__shutdown_request = <span class="literal">False</span></span><br><span class="line">            self.__is_shut_down.set()</span><br><span class="line"><span class="comment"># emmm这一块代码还看不太懂，未完待续！！！</span></span><br></pre></td></tr></table></figure><hr>]]></content>
      <categories>
        <category>python学习</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>python</tag>
        <tag>socket</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络</title>
    <url>/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/20190515-computer-network.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>第一部分是介绍计算机网络的基本概念和基本原理；第二部分是计算机网络的组成与体系结构、OSI参考模型及TCP/IP模型。第三部分是分层介绍。</p></blockquote><a id="more"></a><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>让我们先看一个实例：假设有一批货物从A地邮寄到B地，How?</p><table><thead><tr><th>事情</th><th>意义</th></tr></thead><tbody><tr><td>1）货物打包，填写发出地和目的地</td><td>——信息编码与封装</td></tr><tr><td>2）可以通过公路，也可通过铁路、水路和航空</td><td>——传输媒介</td></tr><tr><td>3）现假设为公路，有山、川阻隔</td><td>——网络互连</td></tr><tr><td>4）公路分支，设路标</td><td>——路由（如何寻找到达目的地的路径）</td></tr><tr><td>5）要求对方能够接收、识别货物</td><td>——网络通信协议。</td></tr><tr><td>6）对货物运输过程中的丢失等进行检查</td><td>——检错/纠错。</td></tr><tr><td>7）限速、红绿灯标识—</td><td>——流量控制/拥塞控制。</td></tr><tr><td>8）公路维护、管理部门</td><td>——网络管理。</td></tr><tr><td>9）公路巡警</td><td>——网络安全。</td></tr><tr><td>另外：作为司机，应拥有交通地图手册</td><td>——网络拓扑。</td></tr></tbody></table><p>还有哪些交通（海、陆、空）方面的问题可以与网络相对应？</p><p>某条路线暂时戒严，使某个车辆通过 ——RSVP.<br>资源预留协议：预先预留一定的网络资源，比如带宽等等，给相应的流量，通路上所有设备必须都支持rsvp，预留才会成功。对于需要保证带宽和时延的业务，如语音传输，视频会议等具有十分重要的作用。</p><p>救火车、救护车、警车等优先 ——主动网络。</p><h3 id="在计算机网络技术复杂的演变过程中，有三个重要的里程碑："><a href="#在计算机网络技术复杂的演变过程中，有三个重要的里程碑：" class="headerlink" title="在计算机网络技术复杂的演变过程中，有三个重要的里程碑："></a>在计算机网络技术复杂的演变过程中，有三个重要的里程碑：</h3><p>第一个里程碑：以报文（Message）或分组（Packet）交换技术为标志，如1968年美国国防部的高级研究计划局开始建设的以存储转发（store-and-forward）技术为基础的ARPANET。</p><p>第二个里程碑：以1980出现的开放式系统互联参考模型（OSI/RM）为标志。</p><p>第三个里程碑：以Internet的迅速发展与推广为特征。</p><h3 id="计算机网络的类型"><a href="#计算机网络的类型" class="headerlink" title="计算机网络的类型"></a>计算机网络的类型</h3><p>计算机网络有多种分类标准，如按传输技术、通信介质、按数据交换方式、通信速率和使用范围等。</p><ul><li><strong>最普遍的是按地理范围</strong>（广域网，城域网，局域网）</li><li>按传输介质（双绞线，同轴电缆，光纤，无线网）</li><li>使用网络的对象（公用网，专用网）</li><li>按网络传输技术 （广播式，点到点式）</li><li>按传输速度（低速网络和高速网络）</li><li>按逻辑功能可分为（资源子网和通信子网）</li><li>按拓扑结构分（星，环，总线，树，网）</li></ul><h3 id="按地理范围划分："><a href="#按地理范围划分：" class="headerlink" title="按地理范围划分："></a>按地理范围划分：</h3><ul><li>局域网（Local area networks ，LANs)<br>范围：小，＜10KM<br>传输技术：基带，10Mbps-1000Gbps，延迟低，出错率低<br>拓扑结构：总线，环</li><li>广域网（Wide area networks ，WANs)<br>范围：大，＞100KM<br>传输技术：宽带，延迟大，出错率高<br>拓扑结构：不规则，点到点</li><li>城域网（Metropolitan area networks ， MANs)<br>范围：中等，＜100KM<br>传输技术：宽带/基带<br>拓扑结构：总线</li></ul><h3 id="网络的主要性能指标"><a href="#网络的主要性能指标" class="headerlink" title="网络的主要性能指标"></a>网络的主要性能指标</h3><p>计算机网络的最主要的两个性能指标就是<strong>带宽</strong>与<strong>时延</strong></p><p>“<strong>带宽</strong>”(bandwidth) 本来是指信号具有的频带宽度，单位是赫（或千赫、兆赫、吉赫等）。<br>现在“带宽”是<strong>数字信道</strong>所能传送的“<strong>最高数据率</strong>”的同义语，单位是“<strong>比特每秒</strong>”，或 <strong>b/s</strong> (bit/s)。<br><strong>带宽代表数字信号的发送速率，也叫吞吐量</strong>（throughput）</p><p>更常用的带宽单位是<br>千比每秒，即 Kb/s （10^3 b/s）<br>兆比每秒，即 Mb/s（10^6 b/s）<br>吉比每秒，即 Gb/s（10^9 b/s）<br>太比每秒，即 Tb/s（10^12 b/s）</p><p><strong>时延</strong>是指一个报文或分组从一个网络（或一条链路）的一端传送到另一端所需的时间</p><p>总时延 = 处理时延(在队列中产生) + 发送时延(在发送器产生) + 传播时延 (在链路上产生)</p><h3 id="数据交换技术的分类"><a href="#数据交换技术的分类" class="headerlink" title="数据交换技术的分类"></a>数据交换技术的分类</h3><h4 id="电路交换（circuit-switching）"><a href="#电路交换（circuit-switching）" class="headerlink" title="电路交换（circuit switching）"></a><strong>电路交换</strong>（circuit switching）</h4><ul><li>以前的电话局，两步电话是通过一条线连接起来的。</li><li>若要连续传送大量的数据，且其传输时间远远大于连接建立时间，则电路交换具有传输效率较快的优点。</li></ul><h4 id="报文交换（message-switching）"><a href="#报文交换（message-switching）" class="headerlink" title="报文交换（message switching）"></a><strong>报文交换</strong>（message switching）</h4><ul><li>报文交换技术是一种<strong>存储转发(Store And Forword)</strong>技术，它是利用计算机带有大量的外存设备来完成交换的。报文交换方式中，两个站点间无需建立专用通道（不需要呼叫，拆线），交换设备的输入线和输出线之间也不必建立物理连接。</li><li>优点：<strong>线路利用率高</strong>；信道可为多个报文共享；接收端和发送端无需同时工作，在接收方“忙”时，报文可以暂存交换设备处；可同时向多个目的站点发送同一报文；能实现差错控制和纠错处理；</li><li>缺点：<strong>信息延迟长</strong>，从发送到接收之间的延迟为1分钟或更长，因此，<strong>不适用于实时通信</strong>或交互通信，也不适用于交互式的“终端-主机”连接。</li></ul><h4 id="分组交换（packet-switching）"><a href="#分组交换（packet-switching）" class="headerlink" title="分组交换（packet switching）"></a><strong>分组交换</strong>（packet switching）</h4><ul><li>分组交换也称为<strong>包交换</strong>。它把一个报文分成若干个较短的报文分组（或信息包），以分组（包）为单位进行传输。</li><li><u>分组交换又分为无连接的数据报（Datagram）方式和面向连接的虚电路（Virtual Circuit）方式。</u></li><li>分组交换比报文交换的时延小，但其结点交换机必须具有更强的处理能力。</li></ul><h5 id="过程（假定分组在传输过程中没有出现差错，在转发时也没有被丢弃）"><a href="#过程（假定分组在传输过程中没有出现差错，在转发时也没有被丢弃）" class="headerlink" title="过程（假定分组在传输过程中没有出现差错，在转发时也没有被丢弃）"></a>过程（假定分组在传输过程中没有出现差错，在转发时也没有被丢弃）</h5><ul><li>在发送端，先把较长的报文<strong>划分成较短的、固定长度的数据段</strong>。</li><li>每一个数据段前面添加上<strong>首部</strong>构成分组。</li><li>分组交换网以“分组”作为数据传输单元。依次把各分组发送到接收端（假定接收端在左边）。</li><li>最后，在接收端把收到的数据恢复成为原来的报文。</li></ul><p>在网络核心部分起特殊作用的是<strong>路由器</strong>。</p><p>路由器是实现<strong>分组交换</strong>(packet switching)的关键构件，其<strong>任务是转发收到的分组，这是网络核心部分最重要的功能。</strong></p><p>在路由器中的输入和输出端口之间<strong>没有直接连线</strong>。</p><p>路由器处理分组的过程是：</p><ul><li>把收到的分组先放入<strong>缓存（暂时存储）</strong>；</li><li>查找<strong>转发表</strong>，找出到某个目的地址应从哪个端口转发；</li><li>把分组送到适当的<strong>端口</strong>转发出去。</li></ul><h2 id="网络体系结构"><a href="#网络体系结构" class="headerlink" title="网络体系结构"></a>网络体系结构</h2><p>网络功能分层结构与各层协议的统称。</p><h3 id="计算机网络所采用的一般模型为层次模型"><a href="#计算机网络所采用的一般模型为层次模型" class="headerlink" title="计算机网络所采用的一般模型为层次模型"></a>计算机网络所采用的一般模型为层次模型</h3><p><img src="/计算机网络/20190515-computer-network/%E5%B1%82%E6%AC%A1%E6%A8%A1%E5%9E%8B.png" alt="层次模型"></p><h3 id="为什么要分层？"><a href="#为什么要分层？" class="headerlink" title="为什么要分层？"></a>为什么要分层？</h3><p>分层的目的是为了降低复杂性，提高灵活性——“分而治之，各个击破”</p><ul><li>各层之间是独立的。</li><li>灵活性好。</li><li>结构上可分割开。</li><li>易于实现和维护。</li><li>能促进标准化工作。</li></ul><h3 id="若干术语"><a href="#若干术语" class="headerlink" title="若干术语"></a>若干术语</h3><h4 id="源"><a href="#源" class="headerlink" title="源"></a>源</h4><ul><li>通信过程中，数据的发送方</li></ul><h4 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h4><ul><li>通信过程中，数据的接收方</li></ul><h4 id="Entity-实体）"><a href="#Entity-实体）" class="headerlink" title="Entity(实体）"></a>Entity(实体）</h4><ul><li>每一层上的活动元素，包括实现该层功能的所有硬件与软件，表示任何可发送或接收信息的硬件或软件进程。</li></ul><h4 id="Peer-Peer-Entity-对等实体"><a href="#Peer-Peer-Entity-对等实体" class="headerlink" title="Peer-Peer Entity (对等实体)"></a>Peer-Peer Entity (对等实体)</h4><ul><li>相互通信的两个不同机器上的同一层次完成相同功能的实体</li></ul><h4 id="Service-服务）"><a href="#Service-服务）" class="headerlink" title="Service(服务）"></a>Service(服务）</h4><ul><li>每一层为上一层所提供的功能称为服务。<u>N层使用N-1层所提供的服务，向N+1层提供更高的服务</u>。在这种情况下，n层被称为服务提供者，n+1层是服务用户。</li></ul><h4 id="Interface-接口"><a href="#Interface-接口" class="headerlink" title="Interface (接口)"></a>Interface (接口)</h4><ul><li>定义下层向其相邻的上层提供的服务及原语操作，但服务的实现细节对上层是透明的（不可见的）。</li></ul><p>一个（N）实体向上一层（N+1）实体提供的（N）服务由哪几部分组成？</p><ul><li>（N）实体自身提供的某些功能</li><li>由（N-1）层及其以下各层及本地系统环境提供的服务</li><li>处于另一开放系统对等（N）实体的通信而提供的某些服务</li></ul><h4 id="协议（Protocols）和N层协议"><a href="#协议（Protocols）和N层协议" class="headerlink" title="协议（Protocols）和N层协议"></a>协议（Protocols）和N层协议</h4><ul><li>定义: 为网络通信所制定的一组规则、约定和标准。协议可以使通信更有效地进行。协议是控制两个对等实体进行通信的规则的集合。</li><li>在协议的控制下，两个对等实体间的通信使得本层能够<strong>向上一层提供服务</strong>。</li><li>要实现本层协议，还<strong>需要使用下层所提供的服务</strong>。</li><li>网络通信是一种层到层的对等通信，<strong>第N层上的通信规则或约定称为N层协议</strong></li></ul><h4 id="协议数据单元（PDU）"><a href="#协议数据单元（PDU）" class="headerlink" title="协议数据单元（PDU）"></a>协议数据单元（PDU）</h4><ul><li>对等实体间传送信息的数据单元</li><li>按每层协议所采用的数据格式，被对等实体用于执行其相同的协议</li><li>网络中所传送的数据的逻辑组成单元</li><li>从高层到下层，存在数据的<strong>封装</strong>过程</li><li>从下层到高层，存在数据的<strong>拆封</strong>过程</li></ul><h4 id="协议和服务的区别及相互关系"><a href="#协议和服务的区别及相互关系" class="headerlink" title="协议和服务的区别及相互关系"></a>协议和服务的区别及相互关系</h4><ul><li>网络协议——为进行网络中的数据交换而建立的规则、算法或约定，包括语法、语义和语序三要素。（N）协议</li><li>网络服务——（N）实体向相邻的上一层的（N+1）实体提供一种能力，这种能力称为（N）服务。</li></ul><h4 id="实体、协议、服务和服务访问点"><a href="#实体、协议、服务和服务访问点" class="headerlink" title="实体、协议、服务和服务访问点"></a>实体、协议、服务和服务访问点</h4><ul><li>本层的服务用户只能看见服务而无法看见下面的协议。</li><li>下面的协议对上面的服务用户是<strong>透明</strong>的。</li><li>协议是“<strong>水平的</strong>”，即协议是控制对等实体之间通信的规则。</li><li>服务是“<strong>垂直的</strong>”，即服务是由下层向上层通过层间接口提供的。</li><li>同一系统相邻两层的实体进行交互的地方，称为<strong>服务访问点 SAP</strong> (Service Access Point)。</li></ul><p><img src="/计算机网络/20190515-computer-network/%E5%AE%9E%E4%BD%93%E3%80%81%E5%8D%8F%E8%AE%AE%E3%80%81%E6%9C%8D%E5%8A%A1%E3%80%81%E6%9C%8D%E5%8A%A1%E8%AE%BF%E9%97%AE%E7%82%B9.png" alt="实体、协议、服务、服务访问点"></p><h4 id="服务原语"><a href="#服务原语" class="headerlink" title="服务原语"></a>服务原语</h4><p>服务原语（Service Primitive）：指服务用户与服务提供者之间进行交互时所要交换的一些必要信息。OSI/RM规定了四种服务原语类型。</p><ul><li>请求（Request）:一个实体希望得到某种服务</li><li>指示（Indication）：把关于某一事件的信息告诉某一实体</li><li>响应（Response）：一个实体愿意响应某一事件</li><li>证实（Confirm）：把一个实体的服务请求加以确认并告诉它</li></ul><h3 id="OSI-模型"><a href="#OSI-模型" class="headerlink" title="OSI 模型"></a>OSI 模型</h3><p>Open System Interconnecting Reference Model</p><p>一个概念模型（1984），并未确切描述用于各层的协议和服务，所以并不是严格意义上的体系结构的意义。</p><p>应、表、会、传、网、数、物</p><p><img src="/计算机网络/20190515-computer-network/osi%E4%B8%83%E5%B1%82%E5%8D%8F%E8%AE%AE.png" alt="osi七层协议"></p><h3 id="具有五层协议的体系结构"><a href="#具有五层协议的体系结构" class="headerlink" title="具有五层协议的体系结构"></a>具有五层协议的体系结构</h3><p>TCP/IP 是四层的体系结构：应用层、传输层、网际层和网络接口层。但最下面的网络接口层并没有具体内容。因此往往采取折中的办法，即综合 OSI 和 TCP/IP 的优点，采用一种只有五层协议的体系结构 。</p><p><img src="/计算机网络/20190515-computer-network/%E4%BA%94%E5%B1%82%E5%8D%8F%E8%AE%AE%E7%9A%84%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84.png" alt="五层协议的体系结构"></p><h5 id="源——数据封装"><a href="#源——数据封装" class="headerlink" title="源——数据封装:"></a>源——数据封装:</h5><p>PDU -&gt; Segments -&gt; Packet -&gt; Frame -&gt; Bits</p><p>详解:</p><p>应用进程数据先传送到应用层，加上<u>应用层首部</u>,成为<strong>应用层PDU</strong> —-&gt;应用层PDU再传到传输层，加上<u>传输层首部</u>，成为<strong>传输层报文 Segments</strong> —-&gt; 传输层报文在传送到网络层，加上<u>网络层首部</u>，成为<strong>IP数据报（或分组）Packet</strong> —-&gt; IP数据报在传送到数据链路层，加上<u>链路层首部和尾部</u>，成为<strong>数据链路层帧Frame</strong> —-&gt; 数据链路层帧在传送给物理层，最下面的<strong>物理层</strong>把<strong>比特流Bits</strong>传送到物理媒体</p><h5 id="目的——数据的拆封："><a href="#目的——数据的拆封：" class="headerlink" title="目的——数据的拆封："></a>目的——数据的拆封：</h5><p>Bits -&gt; Frame -&gt; Packet -&gt; Segment -&gt; PDU</p><p>详解:</p><p>物理层接收到比特流，上交给数据链路层 —-&gt; 数据链路层<strong>剥去帧首部和帧尾部</strong>取出数据部分，上交给网络层 —-&gt; 网络层<strong>剥去首部</strong>，取出数据部分上交给传输层 —-&gt; <strong>传输层剥去首部</strong>，取出数据部分上交给应用层 —-&gt; <strong>应用层剥去首部</strong>，取出应用程序数据上交给应用进程</p><p><img src="/计算机网络/20190515-computer-network/%E6%95%B0%E6%8D%AE%E5%B0%81%E8%A3%85%E4%B8%8E%E6%8B%86%E5%B0%81.png" alt="数据封装与拆封"></p><h2 id="OSI详解"><a href="#OSI详解" class="headerlink" title="OSI详解"></a>OSI详解</h2><p><img src="/计算机网络/20190515-computer-network/OSI%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B.gif" alt="OSI七层模型"></p><h4 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h4><p>物理层：是O S I 模型的最低层或第一层，该层包括物理连网媒介，如电缆连线、连接器、网卡等。<br>物理层的协议产生并检测电压以便发送和接收携带数据的信号。<br>术语“第一层协议”和“物理层协议”，均是指描述电信号如何被放大及通过电线传输的标准。</p><h4 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h4><p>负责实际或原始的数据“位（BIT）” 传送，通过传输介质将比特流由一个节点传向另一个节点。</p><h4 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h4><p>数据链路层:是O S I 模型的<strong>第二层</strong>，它<strong>控制网络层与物理层之间的通信</strong>。</p><ol><li>主要功能是<strong>将从网络层接收到的数据分割成特定的可被物理层传输的帧</strong>。</li><li>帧(Frame)是<strong>用来移动数据的结构包</strong>，它不仅包括<strong>原始（未加工）数据</strong>，或称“<strong>有效荷载</strong>”，还<strong>包括发送方和接收方的网络地址</strong>以及<strong>纠错和控制信息</strong>。其中的地址确定了帧将发送到何处，而纠错和控制信息则确保帧无差错到达。</li><li>通常发送方的数据链路层将等待来自接收方对数据已正确接收的<u>应答信号</u>。</li><li>数据链路层<u>控制信息流量</u>，以允许网络接口卡正确处理数据。</li><li>数据链路层的<u>功能<strong>独立于</strong>网络和它的节点所采用的<strong>物理层类型</strong></u>。</li></ol><p>Note：有一些连接设备，如<strong><u>网桥</u></strong>或<strong><u>交换机</u></strong>，由于它们要<u>对帧解码并使用帧信息将数据发送到正确的接收方</u>，所以它们是<u>工作在数据链路层的</u>。</p><h4 id="功能-1"><a href="#功能-1" class="headerlink" title="功能"></a>功能</h4><ul><li><strong>实现两个相邻的机器间的无差错的传输</strong>。通过对物理层提供的原始比特流传输服务的加强，向网络层提供服务</li><li><strong>成帧</strong>：规定数据链路层最小的数据传送逻辑单位——帧的类型和格式。将从网络层接收的信息</li><li>分组组成帧后传送给物理层，由物理层传送到对方的数据链路层。</li><li>物理寻址和对网络拓朴的存取</li><li><strong>差错控制</strong>：在信息帧中带有校验字段，当接收方收到帧时，按照选定的差错控制方法进行校验，在发现差错时进行差错处理。</li><li><strong>流量控制</strong>：协调发送方与接收方的数据流量，使发送速率不要超过接收方速率。</li><li>共享介质环境中的介质访问控制</li><li>链路管理：建立、维持与释放数据链路。</li></ul><h4 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h4><p>网络层，O S I 模型的第三层，其主要功能是<strong>将网络地址翻译成对应的物理地址，并决定如何将数据从发送方路由到接收方</strong>。例如：一个计算机有一个网络地址10.34.99.12 （若它使用的是TCP/IP协议）和一个物理地址060973E97F3 。</p><ol><li>网络层通过综合考虑<strong>发送优先权、网络拥塞程度、服务质量以及可选路由的花费</strong>来决定从一个网络中节点Ａ 到另一个网络中节点Ｂ 的<strong>最佳路径</strong>。</li><li>在网络中，“<strong>路由</strong>”是<strong>基于编址方案、使用模式以及可达性</strong>来指引数据的发送。</li></ol><p>Note：由于网络层处理路由，而<strong>路由器</strong>因为连接网络各段，并智能指导数据传送，所以<strong>属于网络层</strong>。</p><h4 id="功能-2"><a href="#功能-2" class="headerlink" title="功能"></a>功能</h4><ul><li>涉及将源端发出的数据（分组）经各种途径送到目的端，从源端到目的端可能要经过许多的中间节点—互连和路径选择（源网络-目标网络）</li><li>通信子网的最高层，但是处理端到端（主机—主机）数据传输的最低层。</li><li>信息分组的类型和格式</li><li>逻辑寻址</li><li>路由和转发</li><li><strong>拥塞控制</strong></li></ul><h4 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h4><p>传输层：主要负责<strong>确保数据可靠、顺序、无错地从Ａ 点到传输到Ｂ 点</strong>（Ａ 、Ｂ 点可能在也可能不在相同的网络段上）。</p><ol><li>因为<strong>如果没有传输层，数据将不能被接受方验证或解释</strong>（收到？对/错？乱序？），所以，<strong>传输层常被认为是O S I 模型中最重要的一层。</strong></li><li>传输协议同时进行<strong>流量控制</strong>（根据接收方可接收数据的快慢程度规定适当的发送速率）。</li><li>传输层按照网络能处理的最大尺寸将较长的数据包进行强制分割并编号。例如：以<strong>太网无法接收大于1 5 0 0 字节的数据包</strong>。发送方节点的传输层将数据分割成较小的数据片，同时<strong>对每一数据片安排一序列号</strong>，以便数据到达接收方节点的传输层时，能<strong>以正确的顺序重组</strong>。该过程即被称为<strong>排序</strong>。</li><li>在网络中，传输层发送一个<strong>A C K （应答）信号</strong>以通知发送方数据已被正确接收。如果<strong>数据有错</strong>或者<strong>数据在一给定时间段未被应答</strong>，传输层将请求发送方重新发送数据。</li></ol><p>NOTE：工作在传输层的一种服务是<strong>TCP/IP协议栈</strong>中的T C P（Transfer Control Protocol <strong>传输控制协议</strong>），另一项传输层服务是<strong>IPX/SPX 协议集</strong>的S P X（ Serial package Exchange <strong>序列包交换</strong>）</p><h4 id="功能-3"><a href="#功能-3" class="headerlink" title="功能"></a>功能</h4><ul><li>为高层数据传输建立、维护与拆除传输连接，实现透明的端到端的传输（主机-主机）</li><li>真正意义上的<strong>从源到目标的“端到端”</strong>层，源端的某程序与源端的“类似”程序进行对等通信</li><li>屏蔽了上三层 (面向应用) 和下三层（面向数据传输）之间的界限，弥补网络所提供的服务质量的不足，提供可靠的网络服务</li><li>信息的分段（源端）和合并（目标端）</li><li><strong>流量控制</strong>和差错恢复</li><li><strong>多路复用</strong></li></ul><h3 id="会话层"><a href="#会话层" class="headerlink" title="会话层"></a>会话层</h3><p>会话层:负责在网络中的两节点之间建立和维持通信。</p><ol><li>会话层的功能包括：<strong>建立</strong>通信链接，<strong>保持</strong>会话过程通信链接的畅通，<strong>同步</strong>两个节点之间的对话，决定通信是否被<strong>中断</strong>以及通信中断时决定从何处重新发送。<pre><code>例如，网络上常常使用的下载工具软件，迅雷支持端点续传功能，就是使用了会话层的这个功能，知道从上次中断的地方继续下载。</code></pre></li><li>会话层通过<strong>决定节点通信的优先级</strong>和<strong>通信时间的长短</strong>来设置<strong>通信期限</strong>。</li></ol><h4 id="功能-4"><a href="#功能-4" class="headerlink" title="功能"></a>功能</h4><ul><li>建立、管理和终结不同机器上的<strong>应用程序或进程间的会话</strong></li><li>为表示层提供服务</li><li>会话(Dialogue)的管理：<pre><code>令牌（Token)</code></pre></li><li>会话的同步<pre><code>检查点（Checkpoint)</code></pre></li></ul><h3 id="表示层"><a href="#表示层" class="headerlink" title="表示层"></a>表示层</h3><p>表示层：充当应用程序和网络之间的“<strong>翻译官</strong>”角色。</p><ol><li>在表示层，数据将<strong>按照网络能理解的方式进行格式化</strong>；这种格式化也<strong>因所使用网络的类型不同而不同</strong>。例如，IBM主机使用EBCDIC编码，而大部分PC机使用的是ASCII码、甚至反码或补码。在这种情况下，为了让采用不同编码方法的计算机能相互理解通信交换后数据的值，便需要会话层来完成这种转换。<br>方法：采用抽象的标准方法来定义数据结构、标准的编码表示形式。</li><li>表示层<strong>管理数据的解密与加密</strong>，如系<strong>统口令的处理</strong>。</li><li>表示层协议还对<strong>图片和文件格式信息进行解码和编码</strong>。GIF、JPEG</li></ol><h4 id="功能-5"><a href="#功能-5" class="headerlink" title="功能"></a>功能</h4><ul><li>表示层以下各层只关心<strong>可靠的数据传输</strong>，而表示层关心的是所传送<strong>数据的语法和语义</strong>。</li><li>完成<strong>语法格式的转换</strong><pre><code>不同的计算机可能有不同的内部数据表示（抽象语法），表示层收到应用层传过来的某种语法形式的数据后，将其转换成适合在网络实体间传送的公共语法（传送语法）表示的数据。包括数据表示格式和转换、数据压缩、加密与解密、协议转换等</code></pre></li><li>与接收方协商所采用的公共语法类型</li><li>表示层对等实体间连接的建立、数据传送与连接释放。</li></ul><h3 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h3><p>应用层：O S I 模型的顶端也即第七层是。应用层负责<strong>对软件提供接口</strong>以使程序能使用网络服务。</p><ol><li>术语“<strong>应用层</strong>”<u>并不是指运行在网络上的某个特别应用程序</u>，而是<strong>提供了一组</strong>方便程序开发者在自己的应用程序中使用网络功能的服务。</li><li>应用层提供的服务包括<strong>文件传输（FTP）</strong>、<strong>文件管理</strong>以及<strong>电子邮件的信息处理（SMTP）</strong>等。</li></ol><p>NOTE：一个A P I （应用程序接口）是使一个程序与操作系统相互作用的例行程序（即一组指令）。<strong>API 属于OSI 模型的应用层</strong>，编程者使用API 在代码与操作系统之间建立链接。</p><h3 id="osi模型各层功能总结"><a href="#osi模型各层功能总结" class="headerlink" title="osi模型各层功能总结"></a>osi模型各层功能总结</h3><ul><li>应用层：网络服务与最终用户的一个接口。<ul><li>协议有：HTTP FTP TFTP SMTP SNMP DNS TELNET HTTPS POP3 DHCP</li></ul></li><li>表示层：数据的表示、安全、压缩。（在五层模型里面已经合并到了应用层）<ul><li>格式有，JPEG、ASCll、DECOIC、加密格式等</li></ul></li><li>会话层：建立、管理、终止会话。（在五层模型里面已经合并到了应用层）<ul><li>对应主机进程，指本地主机与远程主机正在进行的会话</li></ul></li><li>传输层：定义传输数据的协议端口号，以及流控和差错校验。<ul><li>协议有：TCP UDP，数据包一旦离开网卡即进入网络传输层</li></ul></li><li>网络层：进行逻辑地址寻址，实现不同网络之间的路径选择。<ul><li>协议有：ICMP IGMP IP（IPV4 IPV6） ARP RARP</li></ul></li><li>数据链路层：建立逻辑连接、进行硬件地址寻址、差错校验等功能。<ul><li>将比特组合成字节进而组合成帧，用MAC地址访问介质，错误发现但不能纠正。</li></ul></li><li>物理层：建立、维护、断开物理连接。</li><li>OSI/RM七层协议模型上、下大，中间小，这是因为最高层要和各种类型的应用进程接口，而最低层要和各种类型的网络接口，因此上、下两头标准特别多，而中间几层标准就稍简单些。有些层的任务过于繁重，如数据链路层和网络层，有些层的任务又太轻，如会话层和表示层。</li></ul><h2 id="TCP-IP模型"><a href="#TCP-IP模型" class="headerlink" title="TCP/IP模型"></a>TCP/IP模型</h2><p>应用层（Application）、传输层（Transport）、互联网络层（Internet）、网络接口层（Network Access）（数据链路层 + 物理层）</p><p><img src="/计算机网络/20190515-computer-network/TCP,IP%E6%A8%A1%E5%9E%8B.png" alt="TCP,IP模型"></p><h3 id="网络接口层"><a href="#网络接口层" class="headerlink" title="网络接口层"></a>网络接口层</h3><ul><li><strong>网络接口层</strong>似乎与<strong>OSI的数据链路层和物理层</strong>相对应，但实际上TCP/IP并没有真正描述这一部分，<strong>只是指出主机必须使用某种协议与网络连接</strong>，以便能在其上传递IP（互连网络协议）分组。</li><li>具体的<strong>物理网络</strong>可以是各种类型的局域网，如以太网、令牌环网、令牌总线网等，也可以是诸如X.25、帧中继、电话网、DDN等公共数据网络。</li><li><strong>网络接口层</strong>负责从主机或节点接收IP分组，并把它们发送到指定的物理网络上。</li></ul><h3 id="互联网络层"><a href="#互联网络层" class="headerlink" title="互联网络层"></a>互联网络层</h3><ul><li><strong>互连网络层是整个体系结构的关键部分</strong>，功能是<strong>使主机可以把分组发往任何网络，并使分组独立地传向目的地（可能经由不同的物理网络）</strong>。</li><li>这些分组到达的顺序和发送的顺序可能不同，因此如需要按顺序发送及接收时，高层必须对分组<strong>排序</strong>。</li><li>互连网络层定义了标准的分组格式和协议，即<strong>IP协议（Internet protocol）</strong>。互连网络层的功能就是<strong>把IP分组发送到应该去的地方</strong>。选择<strong>分组路由</strong>和<strong>避免阻塞</strong>是主要的设计问题。</li><li>TCP/IP互连网络层和<strong>OSI网络层</strong>在功能上非常相似。</li></ul><h3 id="传输层-1"><a href="#传输层-1" class="headerlink" title="传输层"></a>传输层</h3><ul><li>传输层在TCP/IP模型中位于互连网络层之上，功能是<strong>使源端和目的端主机上的对等实体可以进行会话</strong>（和OSI的传输层一样）。这里定义了两个端到端的协议。</li><li>第一个是<strong>传输控制协议TCP</strong>（Transmission Control Protocol）。</li><li>第二个协议是<strong>用户数据报协议UDP</strong>（User Datagram Protocol）。</li></ul><p><strong>传输控制协议TCP</strong>。TCP是一个<strong>面向连接</strong>的协议，允许从一台机器发出的字节流<strong>无差错</strong>地发往互联网上的其它机器。<br>TCP把输入的字节流分成报文段，并传给互连网络层。在接收端，TCP接收进程把收到的报文再组装成输出流。TCP还要处理<strong>流量控制</strong>，以避免快速发送方向低速接收方发送过多报文而使接收方无法处理。</p><p><strong>用户数据报协议UDP</strong>。它是一个不可靠的、无连接协议，用于不需要TCP的排序和流量控制能力而是自己完成这些功能的应用程序。<br>被广泛地应用于只有一次的<strong>客户—服务器模式</strong>的请求—应答查询，以及快速递交比准确递交更重要的应用程序，如传输语音或影像。自从这个协议体系出现以来，IP已经在很多其它网络上实现了。</p><h3 id="应用层-1"><a href="#应用层-1" class="headerlink" title="应用层"></a>应用层</h3><ul><li>传输层的上面是应用层。它包含所有的高层协议。</li><li>最早引入的是<strong>虚拟终端协议（TELNET）</strong>、<strong>文件传输协议（FTP）</strong>和<strong>电子邮件协议（SMTP）</strong>；</li></ul><p><strong>虚拟终端协议</strong>允许一台机器上的用户登录到远程机器上进行工作；<br><strong>文件传输协议</strong>提供了有效地把数据从一台机器移动到另一台机器的方法；<br><strong>电子邮件</strong>最初仅是一种文件传输，但是后来为它提出了专门的协议。<br><strong>域名系统服务DNS</strong>（domain name service）用于把主机名映射到网络地址；HTTP协议用于在WWW上获取主页等。</p><h3 id="OSI七层和TCP-IP四层的关系"><a href="#OSI七层和TCP-IP四层的关系" class="headerlink" title="OSI七层和TCP/IP四层的关系"></a>OSI七层和TCP/IP四层的关系</h3><ul><li>OSI引入了服务、接口、协议、分层的概念，TCP/IP借鉴了OSI的这些概念建立TCP/IP模型。</li><li>OSI先有模型，后有协议，先有标准，后进行实践；而TCP/IP则相反，先有协议和应用再提出了模型，且是参照的OSI模型。</li><li>OSI是一种理论下的模型，而TCP/IP已被广泛使用，成为网络互联事实上的标准。且<strong>TCP协议</strong>与<strong>IP协议</strong>两者可联合使用，也可单独与其他协议配合使用。</li></ul><h3 id="OSI七层和TCP-IP的区别"><a href="#OSI七层和TCP-IP的区别" class="headerlink" title="OSI七层和TCP/IP的区别"></a>OSI七层和TCP/IP的区别</h3><ul><li>TCP/IP他是一个协议簇；而OSI（开放系统互联）则是一个模型，且TCP/IP的开发时间在OSI之前，所以两者间不存在严格的对应关系。</li><li>TCP/IP由于层次更少显得比OSI更简洁</li><li>TCP/IP将OSI中的<u>上三层</u>合并成了一个<strong>应用层</strong>，<u>下两层</u>合并成了一个<strong>网络接口层</strong>。</li><li>TCP/IP是由一些交互性的模块做成的分层次的协议，其中每个模块提供特定的功能；OSi则指定了哪个功能是属于哪一层的。</li><li>TCP/IP作为从INTERNET上发展起来的协议，已成了网络互连的事实标准目前还没有按OSI实现的网络产品，OSI仅作为理论的参考模型被广泛使用。</li></ul><h2 id="物理层-1"><a href="#物理层-1" class="headerlink" title="物理层"></a>物理层</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>物理层的主要任务描述为<strong>确定与传输媒体的接口的一些特性</strong>，即：</p><ul><li>机械特性:指明接口所用<strong>接线器</strong>的形状和尺寸、引线数目和排列、固定和锁定装置等等。</li><li>电气特性:指明在接口<strong>电缆</strong>的各条线上出现的电压的范围。</li><li>功能特性:指明某条线上出现的某一电平的<strong>电压</strong>表示何种意义。</li><li>过程特性:指明对于不同功能的各种可能事件的出现顺序。</li></ul><h3 id="物理层需要解决的问题"><a href="#物理层需要解决的问题" class="headerlink" title="物理层需要解决的问题"></a>物理层需要解决的问题</h3><p>数据如何用电信号表示？</p><p>信号如何传输？</p><h3 id="物理层的设备与组件"><a href="#物理层的设备与组件" class="headerlink" title="物理层的设备与组件:"></a>物理层的设备与组件:</h3><ul><li>被动(不需要外电源)：线缆、连接头、连接座、接线面板、转换器</li><li>主动 (需要电源)：调制解调器、中继器（对物理信号进行放大与再生，单进单出）、集线器（多端口中继器，对物理信号进行放大与再生）</li></ul><h3 id="数据如何用电信号表示？"><a href="#数据如何用电信号表示？" class="headerlink" title="数据如何用电信号表示？"></a>数据如何用电信号表示？</h3><p>基带传输与数字数据编码<br>频带传输与模拟数据编码</p><h3 id="信号如何传输？"><a href="#信号如何传输？" class="headerlink" title="信号如何传输？"></a>信号如何传输？</h3><p>对信道的要求<br>串行通信与并行通信<br>单工通信、半双工通信、全双工通信<br>多路复用技术<br>异步通信与同步通信</p><h2 id="数据链路层（以太网协议）"><a href="#数据链路层（以太网协议）" class="headerlink" title="数据链路层（以太网协议）"></a>数据链路层（以太网协议）</h2><p>为什么需要数据链路层？<br>物理层所作的工作？传输比特流</p><h3 id="数据链路层需解决的问题"><a href="#数据链路层需解决的问题" class="headerlink" title="数据链路层需解决的问题"></a>数据链路层需解决的问题</h3><p>如何识别相邻的机器？</p><ul><li>编址与寻址</li></ul><p>如何识别数据流的开始与结束？</p><ul><li>成帧和拆帧</li></ul><p>如何实现可靠的数据传输？</p><ul><li>差错控制和流量控制</li></ul><p>如何实现透明传输？</p><ul><li>控制字符实现帧定界</li></ul><p>在这一层，每台计算机与 <strong>以太网交换机</strong> 或者 <strong>集线器</strong> 之类的设备连接，并用 <strong>以太网协议</strong> 进行通信。</p><p>以太网协议：</p><p>主要解决 <strong>寻址</strong>以及 <strong>复用/分用</strong> 两大问题（数据链路层解决了多台共用信道计算机之间的通讯问题）</p><ul><li><p>一组电信号构成一个数据报，叫做 <strong>帧</strong>。</p></li><li><p>每一数据帧分为:包头head 和 数据data两部分</p><p>数据头（header）|data数据</p><p>数据头：固定长度：18字节（6，6，6）</p><p>​ <strong>源地址，目的地址，数据类型</strong></p><p>data数据：最短46字节，最长1500字节</p><p>一帧的数据 = 最短64字节，最长1518字节，超过最大限制就分片发送。</p></li></ul><ol><li>问题1：为什么数据头要固定?<ul><li>固定就是一个标准，统一，为了提取源地址以及目标地址。</li></ul></li><li>问题2：以太网协议中源目标地址如何设置唯一?<ul><li>网线直接接触的硬件就是网卡，网卡上有一个地址，mac地址，确定计算机唯一性的物理地址。</li><li>网卡：12位16进制组成的一串数字：前六位：厂商编号，后六位：流水线号</li></ul></li></ol><p>制作好了信件：head（源地址，目标地址，数据类型）| data（今晚你请我吃饭）</p><p>广播：计算机最原始的通信方式就是吼。</p><p>数据的分组（源地址，目标地址） + 广播：理论上我的计算机就可以通信了。</p><p>数据链路层的局限性：</p><ol><li>广播风暴</li><li>地址表规模(MAC地址分散性)；</li></ol><p>随着接入计算机的不断增加，效率降低，每台计算机都需要接受广播的消息，查看是否是给自己的数据，比广播风暴还要严重。所以，广播它是有范围的，在同一子网，局域网内是通过广播的方式，发消息但不同的局域网之间还无法通信，所以需要网络层。</p><h2 id="网络层（IP协议）"><a href="#网络层（IP协议）" class="headerlink" title="网络层（IP协议）"></a>网络层（IP协议）</h2><p>广播，mac地址 + ip == 可以找到世界上任意一台计算机。</p><p>为了解决数据链路层的局限性，需要引入新的一层，以及新的地址。新的地址就是 <strong>网络层地址</strong> 。 在网络层转发数据的中间节点，称为 <strong>网络层路由</strong> 。 网络层主要职责在于：实现 <strong>全球寻址</strong> 以及 <strong>数据路由</strong> 。</p><p>每台参与网络通讯的计算机分配一个唯一的地址，即 <strong>网络层地址</strong> 。 网络层地址按 <strong>网络拓扑</strong> 分配，保证组织内部的地址是连续的。 例如，给某个公司分配地址 123.58.173.x，只有最后一个数字是不同的。 这样，一条转发配置便可为几百个地址服务。相应地，地址表规模也可下降若干数量级。</p><p><strong>网络层路由</strong> 存有 <strong>路由表</strong> ，规定了目的地址与与下一跳的对应关系。 <strong>路由表</strong> 看起来与数据链路层 MAC地址表 颇为类似，但更加高级：</p><ol><li>支持 <strong>地址段</strong> 。一条记录配置某个区间地址的下一跳，有效降低路由表规模。</li><li>支持 <strong>高级学习算法</strong> 。例如选择一条跳数最少的路径。</li></ol><p>路由接到 <strong>网络层包</strong> 之后，以 <strong>目的地址</strong> 检索路由表决定如何发给下一跳.</p><p>ARP协议:将对方ip地址<strong>获取</strong>对方的MAC地址</p><p>如果两个客户（局域网内）进行第一次通信的时候，你不可能知道对方的mac地址，你必须要知道对方的ip地址。 IP + ARP协议 获取对方的MAC地址。</p><h2 id="传输层（端口协议tcp-udp）"><a href="#传输层（端口协议tcp-udp）" class="headerlink" title="传输层（端口协议tcp/udp）"></a>传输层（端口协议tcp/udp）</h2><p>传输层的功能—提供端到端的可靠传输</p><h3 id="TCP的三次握手与四次握手"><a href="#TCP的三次握手与四次握手" class="headerlink" title="TCP的三次握手与四次握手"></a>TCP的三次握手与四次握手</h3><h4 id="TCP的三次握手"><a href="#TCP的三次握手" class="headerlink" title="TCP的三次握手"></a>TCP的三次握手</h4><p>客户端与服务端第一次建立通信联系，需要三次握手。</p><p><img src="/计算机网络/20190515-computer-network/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B.png" alt="三次握手"></p><ol><li>A 的TCP向 B 发出连接请求报文段，其首部中的同步位 SYN = 1，并选择序号 seq = x，表明传送数据时的第一个数据字节的序号是 x。</li><li>B 的TCP收到连接请求报文段后，如同意，则发回确认。B在确认报文段中应使 SYN = 1，使 ACK = 1，其确认号ack = x + 1，自己选择的序号 seq = y。</li><li>A 收到此报文段后向 B 给出确认，其 ACK = 1，确认号 ack = y + 1。A的TCP通知上层应用进程，连接已经建立。<br>B 的 TCP 收到主机 A 的确认后，也通知其上层应用进程：TCP 连接已经建立。</li></ol><p>进一步的解释：</p><p><img src="/计算机网络/20190515-computer-network/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E8%AF%A6%E8%A7%A3.png" alt="三次握手"></p><p>建立的连接不能一直连接着。</p><p>TCP协议:好人协议，不会拒绝别人</p><p>sys洪水攻击，黑客会整很多的假IP，然后访问你的服务器。半连接池，缓冲</p><h3 id="TCP的四次挥手"><a href="#TCP的四次挥手" class="headerlink" title="TCP的四次挥手"></a>TCP的四次挥手</h3><p><img src="/计算机网络/20190515-computer-network/%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B.png" alt="四次握手"></p><ol><li>A 把连接释放报文段首部的 FIN = 1，其序号seq = u，等待 B 的确认。</li><li>B 发出确认，确认号 ack = u + 1，而这个报文段自己的序号 seq = v。TCP 服务器进程通知高层应用进程。从 A 到 B 这个方向的连接就释放了，TCP 连接处于半关闭状态。B 若发送数据，A 仍要接收。</li><li>若 B 已经没有要向 A 发送的数据，其应用进程就通知 TCP 释放连接。</li><li>A 收到连接释放报文段后，必须发出确认。在确认报文段中 ACK = 1，确认号 ack = w + 1，自己的序号 seq = u + 1 。</li></ol><p>注意：tcp连接必须经过时间2MSL后才能真正释放掉，这因为：</p><ol><li>为了保证 A 发送的最后一个 ACK 报文段能够到达 B。</li><li>防止 “已失效的连接请求报文段”出现在本连接中。A 在发送完最后一个 ACK 报文段后，再经过时间 2MSL，就可以使本连接持续的时间内所产生的所有报文段，都从网络中消失。这样就可以使下一个新的连接中不会出现这种旧的连接请求报文段。</li></ol><p><img src="/计算机网络/20190515-computer-network/%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%E8%AF%A6%E8%A7%A3.png" alt="四次挥手详解"></p><p>TCP协议：流式协议（面向连接）</p><p>​ 优点: 稳定，安全，全双工</p><p>​ 缺点: 效率低</p><p>​ 使用TCP的应用：Web浏览器，文件传输程序。</p><p>UDP协议：（面向报文）</p><p>​ 优点：效率高，传输快。</p><p>​ 缺点: 不安全</p><p>​ 使用UDP的应用: 域名系统dns ， 视频流； ip语音，微信，qq。</p><ol><li>TCP与UDP的区别：<ol><li>TCP面向连接（如打电话要先拨号建立连接）;UDP是无连接的，即发送数据之前不需要建立连接</li><li>TCP提供可靠的服务。也就是说，通过TCP连接传送的数据，无差错，不丢失，不重复，且按序到达;UDP尽最大努力交付，即不保证可靠交付<br>Tcp通过校验和，重传控制，序号标识，滑动窗口、确认应答实现可靠传输。如丢包时的重发控制，还可以对次序乱掉的分包进行顺序控制。</li><li>UDP具有较好的实时性，工作效率比TCP高，适用于对高速传输和实时性有较高的通信或广播通信。</li><li>每一条TCP连接只能是点到点的;UDP支持一对一，一对多，多对一和多对多的交互通信</li><li>TCP对系统资源要求较多，UDP对系统资源要求较少。</li></ol></li></ol><p>2、为什么UDP有时比TCP更有优势?<br>UDP以其简单、传输快的优势，在越来越多场景下取代了TCP,如实时游戏。</p><ol><li>网速的提升给UDP的稳定性提供可靠网络保障，丢包率很低，如果使用应用层重传，能够确保传输的可靠性。</li><li>TCP为了实现网络通信的可靠性，使用了复杂的拥塞控制算法，建立了繁琐的握手过程，由于TCP内置的系统协议栈中，极难对其进行改进。<br>采用TCP，一旦发生丢包，TCP会将后续的包缓存起来，等前面的包重传并接收到后再继续发送，延时会越来越大，基于UDP对实时性要求较为严格的情况下，采用自定义重传机制，能够把丢包产生的延迟降到最低，尽量减少网络问题对游戏性造成影响。</li></ol><h2 id="应用层-2"><a href="#应用层-2" class="headerlink" title="应用层"></a>应用层</h2><h3 id="应用层的功能"><a href="#应用层的功能" class="headerlink" title="应用层的功能"></a>应用层的功能</h3><p>FTP服务<br>HTTP服务<br>DNS服务</p><h3 id="应用层协议的特点"><a href="#应用层协议的特点" class="headerlink" title="应用层协议的特点"></a>应用层协议的特点</h3><p>每个应用层协议都是为了解决某一类应用问题，而问题的解决又往往是通过位于不同主机中的多个应用进程之间的通信和协同工作来完成的。应用层的具体内容就是规定应用进程在通信时所遵循的协议。<br>应用层的许多协议都是基于<strong>客户服务器</strong>（C/S）方式。</p><h3 id="基于TCP的网络服务的实现"><a href="#基于TCP的网络服务的实现" class="headerlink" title="基于TCP的网络服务的实现"></a>基于TCP的网络服务的实现</h3><p>基于TCP的网络服务有两种实现方式：</p><ul><li>为每一次的应用层事务通信建立一次传输层的TCP连接。一旦相应的事务完毕，则连接即被释放　　<br>如：HTTP,Redirector</li><li>维持所建立的连接直到所有的事务处理完毕<br>如：Telnet ,FTP</li></ul><h3 id="基于UDP的网络服务的实现"><a href="#基于UDP的网络服务的实现" class="headerlink" title="基于UDP的网络服务的实现"></a>基于UDP的网络服务的实现</h3><ul><li><p>基于UDP的网络服务通常用于一次数据流量较少的应用</p><p>​ 如：如DNS，SNMP，etc。</p></li><li><p>基于UDP的网络服务要借助于应用层提供或完成端到端的可靠传输或差错控制。</p></li></ul><h3 id="域名服务DNS"><a href="#域名服务DNS" class="headerlink" title="域名服务DNS"></a>域名服务DNS</h3><h3 id="为什么需要DNS服务？"><a href="#为什么需要DNS服务？" class="headerlink" title="为什么需要DNS服务？"></a>为什么需要DNS服务？</h3><p>　　因特网上的主机是由IP地址来标识的，不同的主机具有不同的IP地址（唯一性）。用户在访问相关的站点时，必须提供相应的IP地址。但IP地址很难记忆。</p><h3 id="能否提供与站点服务相关的更易记忆的方式？"><a href="#能否提供与站点服务相关的更易记忆的方式？" class="headerlink" title="能否提供与站点服务相关的更易记忆的方式？"></a>能否提供与站点服务相关的更易记忆的方式？</h3><ul><li>代替二进制网络地址的是主机名方式，即ASCII码表示的字符串。</li></ul><p>DNS提供<strong>域名到主机IP地址</strong>的映射<br>其核心是<strong>分级</strong>的基于域的命名机制以及为了实现该命名机制的分布式数据库系统</p><h3 id="域名服务DNS三大要素"><a href="#域名服务DNS三大要素" class="headerlink" title="域名服务DNS三大要素"></a>域名服务DNS三大要素</h3><ul><li>域（Domain）： 域指由地理位置或业务类型而联系在一起的一组计算机构成。</li><li>域名(Domain name)：任何一个连接在因特网上的主机或路由器，都有一个惟一的层次结构的名字，即域名，域名是由字符或数字组成的名称，用于替代主机的数字化地址（IP地址）。</li><li>域名服务器：提供域名解析服务的主机，通常由其IP地址标识。</li></ul><h3 id="动态主机配置协议-DHCP-Dynamic-Host-Configuration-Protocol"><a href="#动态主机配置协议-DHCP-Dynamic-Host-Configuration-Protocol" class="headerlink" title="动态主机配置协议 DHCP(Dynamic Host Configuration Protocol)"></a>动态主机配置协议 DHCP(Dynamic Host Configuration Protocol)</h3><p>DHCP是一个局域网的网络协议，使用UDP协议工作，主要有两个用途：给内部网络或网络服务供应商<strong>自动分配IP地址</strong>给用户；给内部网络管理员作为对所有计算机作中央<strong>管理的手段</strong>。<br>DHCP 提供了即插即用连网(plug-and-play networking)的机制。这种机制允许一台计算机加入新的网络和获取IP地址而不用手工参与。</p><p>未完待续！！！</p><hr>]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7安装Python3</title>
    <url>/Linux/20190513-Linux-install-python3.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>本篇介绍在CentOS7环境下，编译安装Python3。</p></blockquote><a id="more"></a><h2 id="配置yum源"><a href="#配置yum源" class="headerlink" title="配置yum源"></a>配置yum源</h2><p>这里我更换为阿里源</p><p>①</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">进入到 repo 的目录</span><br><span class="line">	<span class="built_in">cd</span> /etc/yum.repos.d</span><br><span class="line"></span><br><span class="line">接着将该目录下的所有文件放入 backup 中</span><br><span class="line">	mkdir  ../backup </span><br><span class="line">	mv  ./*  ../backup</span><br><span class="line">	mv  ../backup  ./</span><br><span class="line"></span><br><span class="line">下载第一个 yum 仓库</span><br><span class="line">	sudo wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line">note：到这里，虽然有了阿里源，但是 默认是没有那么多包的，需要添加额外的软件包</span><br><span class="line"></span><br><span class="line">下载第二个 epil 仓库</span><br><span class="line">	sudo wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo</span><br><span class="line"></span><br><span class="line">清空缓存</span><br><span class="line">	yum clean all</span><br><span class="line"></span><br><span class="line">重新生成缓存</span><br><span class="line">	yum makecache</span><br></pre></td></tr></table></figure><h2 id="安装库环境"><a href="#安装库环境" class="headerlink" title="安装库环境"></a>安装库环境</h2><p>②</p><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">yum <span class="keyword">install </span>gcc patch libffi-devel python-devel  zlib-devel <span class="keyword">bzip2-devel </span>openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel -y</span><br></pre></td></tr></table></figure><h2 id="下载并解压python3"><a href="#下载并解压python3" class="headerlink" title="下载并解压python3"></a>下载并解压python3</h2><p>我下载的是python3.6版本，链接为：<code>https://www.python.org/ftp/python/3.6.9/Python-3.6.9.tgz</code></p><p>将这个压缩文件，放在/opt/下，然后解压缩：</p><p>③</p><p><code>tar -xzvf Python-3.6.9.tgz</code></p><h2 id="指定安装路径"><a href="#指定安装路径" class="headerlink" title="指定安装路径"></a>指定安装路径</h2><p>进入到解压缩后的文件，找到一个配置的可执行文件（configure）指定安装路径（prefix）并执行它。</p><p>④</p><p><code>./configure --prefix=/opt/python367</code></p><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>⑤</p><p><code>make &amp;&amp; make install</code></p><h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><p>编译完成后，修改环境变量的配置</p><p>方式一：</p><p>为 python3.6 设置软链接</p><p><code>ln -sn /opt/python367/bin/python3.6 /usr/local/sbin</code></p><p>方式二：（推荐）</p><ul><li>/etc/profile，系统全局的配置文件，每个用户在登陆系统的时候，都会加载这个文件</li></ul><p>编辑 profile 文件</p><p><code>vim /etc/profile</code></p><p>在最底层将python3的bin目录的绝对路径写入环境变量。</p><p>​ 写法一：</p><p>​ <code>PATH=&quot;/opt/python367/bin:$PATH&quot;</code></p><p>​ 写法二：推荐： <code>PATH=&quot;/opt/python367/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin&quot;</code></p><p>让系统重新读取这个文件</p><p>​ <code>source /etc/profile</code></p><p>注意：将python3的环境变量放在最前面，source 是从左往右读取的。</p><p>扩展阅读：</p><h2 id="创建虚拟环境"><a href="#创建虚拟环境" class="headerlink" title="创建虚拟环境"></a>创建虚拟环境</h2><p>由于项目存在模块同名，不同版本号的情况，我们需要为不同项目的创建不同的虚拟环境。</p><p>格式：</p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">virtualenv --<span class="keyword">no</span>-site-packages --<span class="keyword">python</span>=<span class="keyword">python</span>解释器的绝对路径 虚拟环境名</span><br></pre></td></tr></table></figure><p><code>--no-site-packages</code> ：指不携带任何模块，纯净的python解释器环境。</p><p><code>--python</code>：指设置python解释器</p><p>例如：创建一个使用 django3 的虚拟环境</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">virtualenv --no-site-packages --python=/opt/python367/bin/python3.6 venv_dango3</span><br></pre></td></tr></table></figure><p>执行上面的命令后，就会在当前目录创建一个 venv_dango3 的虚拟环境。</p><h2 id="使用虚拟环境"><a href="#使用虚拟环境" class="headerlink" title="使用虚拟环境"></a>使用虚拟环境</h2><p>进入虚拟环境的bin目录，执行脚本 <code>activate</code> 即可。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> 虚拟环境名称/bin </span><br><span class="line"><span class="built_in">source</span> activate</span><br></pre></td></tr></table></figure><p>退出虚拟环境只需要输入 <code>deactivate</code></p><h2 id="小试一下"><a href="#小试一下" class="headerlink" title="小试一下"></a>小试一下</h2><p>为了验证，进入了虚拟环境后：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">echo $PATH   <span class="comment"># 我们发现，虚拟环境的bin路径在最左侧</span></span><br><span class="line">which python3<span class="number">.6</span>   <span class="comment"># 结果也表明使用的是虚拟环境的python解释器</span></span><br></pre></td></tr></table></figure><p>小试一下：</p><p>我们安装一个 django3 ，并运行它</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">安装 django3<span class="number">.0</span>a1</span><br><span class="line">	pip3 install django==<span class="number">3.0</span>a1  </span><br><span class="line">查看安装的 django 版本</span><br><span class="line">	pip3 list  					</span><br><span class="line">创建一个django项目</span><br><span class="line">	django-admin startproject eg_django3  </span><br><span class="line">进入django项目，首先修改settings.py</span><br><span class="line">	cd eg_django3/</span><br><span class="line">	cd eg_django3/</span><br><span class="line">	vim settings.py</span><br><span class="line">		修改 ALLOWED_HOSTS = [] 为 ALLOWED_HOSTS = [<span class="string">'*'</span>]</span><br><span class="line">然后回到上一级目录，执行 ：</span><br><span class="line">	python3<span class="number">.6</span> manage.py runserver <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">8001</span></span><br></pre></td></tr></table></figure><p>然后用另一台电脑就可以打开页面了。</p><p>note：如果打不开，关闭并清空一下防火墙规则。</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">iptables</span> <span class="string">-F</span></span><br><span class="line"><span class="attr">systemctl</span> <span class="string">stop firewalld.service</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux学习笔记</title>
    <url>/Linux/20190508-Linux-notes.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>第一部分是环境篇，第二部分是基础知识，第三部分是常用命令。本文参考了《Linux就该这么学》</p></blockquote><a id="more"></a><h2 id="环境篇"><a href="#环境篇" class="headerlink" title="环境篇"></a>环境篇</h2><p>用xshell连接VMware中的centos7</p><p>方式一：设置动态ip：</p><p>①输入：<code>vi /etc/sysconfig/network-scripts/ifcfg-eno16777736</code> 打开配置文件eno16777736。</p><p><img src="/Linux/20190508-Linux-notes/%E8%AE%BE%E7%BD%AE%E5%8A%A8%E6%80%81ip.png" alt="设置动态ip"></p><p>②<strong>设置静态ip</strong></p><p>要想连接上xshell，需要配置IP，将Linux中的IP和虚拟机上的IP在<u>同一个网段中</u>。</p><ul><li>设置linux系统的网络配置类型</li></ul><p><img src="/Linux/20190508-Linux-notes/%E8%AE%BE%E7%BD%AElinux%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE%E7%B1%BB%E5%9E%8B.png" alt="设置linux系统的网络配置类型"></p><ul><li><strong>配置虚拟机的IP</strong></li></ul><p><img src="/Linux/20190508-Linux-notes/%E9%85%8D%E7%BD%AE%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84IP.png" alt="配置虚拟机的IP"></p><p>④使用shell连接</p><p><img src="/Linux/20190508-Linux-notes/%E4%BD%BF%E7%94%A8xshell%E8%BF%9B%E8%A1%8C%E8%BF%9E%E6%8E%A5.png" alt="使用xshell进行连接"></p><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="RPM（红帽软件包管理器）"><a href="#RPM（红帽软件包管理器）" class="headerlink" title="RPM（红帽软件包管理器）"></a>RPM（红帽软件包管理器）</h3><p>RPM 有点像 Windows 系统中的控制面板，会建立统一的数据库文件，详细记录软件信息并能够自动分析依赖关系。RPM已经被 CentOS、Fedora、openSUSE等众多 Linux系统采用，它真的很好用！</p><h3 id="Yum-软件仓库"><a href="#Yum-软件仓库" class="headerlink" title="Yum 软件仓库"></a>Yum 软件仓库</h3><p>尽管 RPM 能够帮助用户查询软件相关的依赖关系，但问题还是要运维人员自己来解决，Yum 软件仓库便是为了进一步降低软件安装难度和复杂度而设计的技术。Yum 软件仓库可以根据用户的要求分析出所需软件包及其相关的依赖关系，然后自动从服务器下载软件包并安装到系统。</p><p>RPM是为了简化安装的复杂度，而Yum软件仓库是为了解决软件包之间的依赖关系。</p><p>配置yum源： 待补充！！！</p><h3 id="systemd-初始化进程"><a href="#systemd-初始化进程" class="headerlink" title="systemd 初始化进程"></a>systemd 初始化进程</h3><p>Linux 操作系统的开机过程：即从 BIOS 开始，然后进入 Boot Loader，再加载系统内核，然后内核进行初始化，最后启动初始化进程。初始化进程作为 Linux 系统的第一个进程，它需要完成 Linux 系统中相关的初始化工作，为用户提供合适的工作环境。</p><h3 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h3><p>计算机硬件是由运算器、控制器、存储器、输入/输出设备等共同组成的，而让各种硬件设备各司其职且又能协同运行的东西就是系统内核。Linux 系统的内核负责完成对硬件资源的分配、调度等管理任务。由此可见，系统内核对计算机的正常运行来讲是太重要 了，因此一般不建议直接去编辑内核中的参数，而是让<u>用户通过基于系统调用接口开发出的程序或服务来管理计算机</u>，以满足日常工作的需要。</p><p><img src="/Linux/20190508-Linux-notes/%E7%94%A8%E6%88%B7%E4%B8%8ELinux.png" alt="用户与Linux"></p><p>Shell 就是这样的一个命令行工具。Shell（也称为<strong>终端</strong>或<strong>壳</strong>）充当的是人与内核（硬件） 之间的翻译官，用户把一些命令“告诉”终端，它就会调用相应的程序服务去完成某些工作。 现在包括红帽系统在内的许多主流 Linux 系统<u>默认使用的终端是 Bash</u>（Bourne-Again SHell）解释器。它的优点是：</p><ol><li>通过上下方向键来调取过往执行过的 Linux 命令；</li><li>命令或参数仅需输入前几位就可以用 Tab 键补全；</li><li>具有强大的批处理脚本；</li><li>具有实用的环境变量功能。</li></ol><h2 id="常用Linux命令"><a href="#常用Linux命令" class="headerlink" title="常用Linux命令"></a>常用Linux命令</h2><p>它们与系统工作、系统状态、 工作目录、文件、目录、打包压缩与搜索等主题相关。</p><h3 id="Linux命令格式"><a href="#Linux命令格式" class="headerlink" title="Linux命令格式"></a>Linux命令格式</h3><blockquote><p>命令名称 [命令参数] [命令对象]</p><p>之间由空格分隔</p></blockquote><table><thead><tr><th align="center">命令参数</th><th align="center">写法</th></tr></thead><tbody><tr><td align="center">长格式</td><td align="center">man –help</td></tr><tr><td align="center">短格式</td><td align="center">man -h</td></tr></tbody></table><p>注意：长格式和长格式之间不能合并，长格式和短格式之间也不能合并，但短格式和短格式之间是可以合并的，合并后仅保留一个-（减号）即可。</p><h3 id="man"><a href="#man" class="headerlink" title="man"></a>man</h3><p>man命令中常用按键以及用途</p><table><thead><tr><th align="center">按键</th><th align="center">用途</th></tr></thead><tbody><tr><td align="center">空格键</td><td align="center">向下翻一页</td></tr><tr><td align="center">PaGe down</td><td align="center">向下翻一页</td></tr><tr><td align="center">PaGe up</td><td align="center">向上翻一页</td></tr><tr><td align="center">home</td><td align="center">直接前往首页</td></tr><tr><td align="center">end</td><td align="center">直接前往尾页</td></tr><tr><td align="center">/</td><td align="center">从上至下搜索某个关键词，如“/linux”</td></tr><tr><td align="center">?</td><td align="center">从下至上搜索某个关键词，如“?linux”</td></tr><tr><td align="center">n</td><td align="center">定位到下一个搜索到的关键词</td></tr><tr><td align="center">N</td><td align="center">定位到上一个搜索到的关键词</td></tr><tr><td align="center">q</td><td align="center">退出帮助文档</td></tr></tbody></table><h3 id="常用系统工作命令"><a href="#常用系统工作命令" class="headerlink" title="常用系统工作命令"></a>常用系统工作命令</h3><p>(echo、date、reboot、poweroff、wget、ps、top、pidof、kill、killall)</p><h4 id="echo命令"><a href="#echo命令" class="headerlink" title="echo命令"></a>echo命令</h4><ul><li>echo 命令用于在终端输出字符串或变量提取后的值</li></ul><p><code>echo [字符串 | $变量]</code></p><p>ex:</p><blockquote><p>把指定字符串“hello”输出到终端屏幕的命令为：</p><p>[root@localhost ~]# echo hello<br>hello</p></blockquote><blockquote><p>使用$变量的方式提取变量 SHELL 的值，并将其输出到屏幕上：</p><p>[root@localhost ~]# echo $SHELL<br>/bin/bash</p></blockquote><h4 id="alias命令"><a href="#alias命令" class="headerlink" title="alias命令"></a>alias命令</h4><ul><li>直接输入，查看当前机器的别名</li></ul><p><code>alias</code></p><p>例子：配置别名，让用户使用rm的时候，提示”你这个ben蛋，求你别用rm了”</p><p><code>alias rm=&quot;echo 你这个ben蛋，求你别用rm了&quot;</code></p><ul><li>改回去</li></ul><p><code>alias rm=&quot;rm -i&quot;</code></p><p><code>unalias</code> 取消别名</p><h4 id="date命令"><a href="#date命令" class="headerlink" title="date命令"></a>date命令</h4><ul><li>date 命令用于显示及设置系统的时间或日期</li></ul><p><code>date [选项] [+指定的格式]</code></p><table><thead><tr><th align="center">参数</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">%t</td><td align="center">跳格[Tab 键]</td></tr><tr><td align="center">%H</td><td align="center">小时（00～23）</td></tr><tr><td align="center">%I</td><td align="center">小时（00～12）</td></tr><tr><td align="center">%M</td><td align="center">分钟（00～59）</td></tr><tr><td align="center">%S</td><td align="center">秒（00～59）</td></tr><tr><td align="center">%j</td><td align="center">今年中的第几天</td></tr></tbody></table><blockquote><p>[root@localhost ~]# date<br>2019年 05月 09日 星期四 17:08:29 CST</p></blockquote><blockquote><p>按照“年-月-日 小时:分钟:秒”的格式查看当前系统时间</p><p>[root@localhost ~]# date “+%Y-%m-%d %H:%M:%S”<br>2019-05-09 17:05:13</p></blockquote><blockquote><p>参数%j 可用来查看今天是当年中的第几天。这个参数能够很好地区分备份时 间的新旧，即数字越大，越靠近当前时间。</p><p>[root@localhost ~]# date “+%j”<br>129</p></blockquote><p>同步服务器时间到ntp.aliyun.com<br>[root@dudu opt]# ntpdate -u ntp.aliyun.com</p><h4 id="reboot命令"><a href="#reboot命令" class="headerlink" title="reboot命令"></a>reboot命令</h4><ul><li><p>reboot 命令用于重启系统</p><p><code>reboot</code></p></li></ul><p>由于重启计算机这种操作会涉及硬件资源的管理权限，因此默认<strong>只能使用 root 管理员</strong>来重启，其命令如下：</p><blockquote><p>[root@localhost ~]# reboot</p></blockquote><h4 id="poweroff命令"><a href="#poweroff命令" class="headerlink" title="poweroff命令"></a>poweroff命令</h4><ul><li><p><code>poweroff</code> 命令用于关闭系统</p><p><code>poweroff</code></p></li></ul><p>该命令与 reboot 命令相同，都会涉及硬件资源的管理权限，因此默认<strong>只有 root 管理员</strong>才 可以关闭电脑，其命令如下：</p><blockquote><p>[root@localhost ~]# poweroff</p></blockquote><h4 id="wget命令"><a href="#wget命令" class="headerlink" title="wget命令"></a>wget命令</h4><ul><li>wget 命令用于在<u>终端中下载网络文件</u></li></ul><p><code>wget [参数] 下载地址</code></p><table><thead><tr><th align="left">参数</th><th align="center">作用</th></tr></thead><tbody><tr><td align="left">-b</td><td align="center">后台下载模式</td></tr><tr><td align="left">-p</td><td align="center">下载到指定目录</td></tr><tr><td align="left">-t</td><td align="center">最大尝试次数</td></tr><tr><td align="left">-c</td><td align="center">断点续传</td></tr><tr><td align="left">-p</td><td align="center">下载页面内所有资源，包括图片、视频等</td></tr><tr><td align="left">-r</td><td align="center">递归下载</td></tr></tbody></table><h4 id="ps命令"><a href="#ps命令" class="headerlink" title="ps命令"></a>ps命令</h4><ul><li>ps 命令用于<u>查看系统中的进程状态</u>，通常与管道符技术搭配使用</li></ul><p><code>ps [参数]</code></p><table><thead><tr><th>参数</th><th align="center">作用</th></tr></thead><tbody><tr><td>-a</td><td align="center">显示所有进程（包括其他用户的进程）</td></tr><tr><td>-u</td><td align="center">用户以及其他详细信息</td></tr><tr><td>-x</td><td align="center">显示没有控制终端的进程</td></tr></tbody></table><p>Linux系统中时刻运行着许多进程，如果能够合理地管理它们，则可以优化系统的性能。在 Linux 系统中，有 5 种常见的进程状态，分别为<strong>运行</strong>、<strong>中断</strong>、<strong>不可中断</strong>、<strong>僵死</strong>与<strong>停止</strong>，其各自 含义如下所示。</p><ul><li>R（运行）：进程正在运行或在运行队列中等待。</li><li>S（中断）：进程处于休眠中，当某个条件形成后或者接收到信号时，则脱离该状态。</li><li>D（不可中断）：进程不响应系统异步信号，即便用 kill 命令也不能将其中断。</li><li>Z（僵死）：进程已经终止，但进程描述符依然存在, 直到父进程调用 wait4()系统函数<br>后将进程释放。</li><li>T（停止）：进程收到停止信号后停止运行。</li></ul><p>进程状态</p><table><thead><tr><th align="center">USER</th><th>PID</th><th>%MEM</th><th>VSZ</th><th>VSZ</th><th>RSS</th><th>TTY</th><th>STAT</th><th>START</th><th>TIME</th><th>COMMAND</th></tr></thead><tbody><tr><td align="center">进程的所有者</td><td>进程 ID 号</td><td>运算器 占用率</td><td>内存占用率</td><td>虚拟内存使用量（单 位KB）</td><td>占用的固定内存量(单位KB）</td><td>所在终端</td><td>进程状态</td><td>被启动的时间</td><td>实际使用CPU的时间</td><td>命令名称与参数</td></tr><tr><td align="center">root S</td><td>8</td><td>0.0</td><td>0.0</td><td>0</td><td>0</td><td>？</td><td>S</td><td>17:13</td><td>0:00</td><td>[rcu_bh]</td></tr></tbody></table><blockquote><p>[root@localhost ~]# ps axu<br>USER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMAND<br>root 1 0.3 0.1 191632 6760 ? Ss 17:13 0:02 /usr/lib/systemd/systemd –switched-root –system<br>2 0.0 0.0 0 0 ? S 17:13 0:00 [kthreadd]<br>root 17:13 0:00 [ksoftirqd/0]<br>root 5 0.0 0.0 0 0 ? S&lt; 17:13 0:00 [kworker/0:0H]<br>root 7 0.0 0.0 0 0 ? S 17:13 0:00 [migration/0]</p></blockquote><p>ps axu 也等同于 ps -ef</p><p>注意：ps命令可允许参数不加减号（-）。</p><h4 id="top命令"><a href="#top命令" class="headerlink" title="top命令"></a>top命令</h4><p>top 命令用于<u>动态地监视进程活动与系统负载等信息</u>，其格式为 <code>top</code></p><p>top 命令相当强大，能够动态地查看系统运维状态，完全将它看作 Linux 中的“强化版的 Windows 任务管理器”。</p><p><img src="/Linux/20190508-Linux-notes/top%E7%9A%84%E7%95%8C%E9%9D%A2.png" alt="top的界面"></p><ul><li>第 1 行：系统时间、运行时间、登录终端数、系统负载（三个数值分别为 1 分钟、5 分钟、15 分钟内的平均值，数值越小意味着负载越低）。</li><li>第 2 行：进程总数、运行中的进程数、睡眠中的进程数、停止的进程数、僵死的进程数。</li><li>第 3 行：用户占用资源百分比、系统内核占用资源百分比、改变过优先级的进程资源百分比、空闲的资源百分比等。</li><li>第 4 行：物理内存总量、内存使用量、内存空闲量、作为内核缓存的内存量。</li><li>第 5 行：虚拟内存总量、虚拟内存使用量、虚拟内存空闲量、已被提前加载的内存量。</li></ul><h4 id="pidof命令"><a href="#pidof命令" class="headerlink" title="pidof命令"></a>pidof命令</h4><ul><li>pidof 命令用于查询某个指定服务进程的 PID 值</li></ul><p><code>pidof [参数] [服务名称]</code></p><p>每个进程的进程号码值（PID）是唯一的，因此可以通过 PID 来区分不同的进程。</p><blockquote><p>查询本机上 sshd 服务程序的 PID：</p><p>[root@localhost ~]# pidof sshd<br>3024 1433</p></blockquote><h4 id="kill命令"><a href="#kill命令" class="headerlink" title="kill命令"></a>kill命令</h4><ul><li>kill 命令用于终止某个指定 PID 的服务进程</li></ul><p><code>kill [参数] [进程 PID]</code></p><blockquote><p>[root@localhost ~]# kill 3024</p></blockquote><ul><li><code>kill -9 [进程 PID]</code> 强制杀死进程，慎重</li></ul><h4 id="killall命令"><a href="#killall命令" class="headerlink" title="killall命令"></a>killall命令</h4><ul><li>killall 命令用于终止某个指定名称的服务所对应的全部进程</li></ul><p><code>killall [参数] [服务名称]</code></p><p>通常来讲，复杂软件的服务程序会有多个进程协同为用户提供服务，如果逐个去结束这 些进程会比较麻烦，此时可以使用 killall 命令来批量结束某个服务程序带有的全部进程。</p><blockquote><p>[root@linuxprobe ~]# pidof httpd</p><p>13581 13580 13579 13578 13577 13576</p><p>[root@linuxprobe ~]# killall httpd</p><p>[root@linuxprobe ~]# pidof httpd</p><p>[root@linuxprobe ~]#</p></blockquote><p>注意：在终端执行一个命令后想立即停止它，可以同时按下Ctrl + C 组合键，这样可以立即终止该命令的进程。或者，如果有些命令在执行时不断地在屏幕上输出信息，影响后续命令的输入，则可以在执行命令时在末尾添加上一个&amp;符号，这样命令将进入系统后台来执行。</p><h3 id="主机名相关"><a href="#主机名相关" class="headerlink" title="主机名相关"></a>主机名相关</h3><p>修改主机名：</p><ul><li>普通用户执行需要有root密码</li><li><code>hostnamectl set-hostname 新的主机名</code></li></ul><p>查看主机名：</p><ul><li><code>hostname</code></li></ul><p>在PATH中寻找 名为python的环境变量：</p><ul><li><code>which python</code></li></ul><p>python在哪？</p><ul><li><code>whereis python</code></li></ul><h3 id="远程传输文件"><a href="#远程传输文件" class="headerlink" title="远程传输文件"></a>远程传输文件</h3><ol><li><p>本地的文件，发送到远端服务器</p><p>scp 你想发送的内容 你想要的放在哪</p><p>scp /tmp/胖子.txt <a href="mailto:root@192.168.13.33" target="_blank" rel="noopener">root@192.168.13.33</a>:/opt/</p><p>scp /tmp/胖哥你好.txt <a href="mailto:root@192.168.13.33" target="_blank" rel="noopener">root@192.168.13.33</a>:/opt/pang.txt 传过去并改名</p></li></ol><ol start="2"><li><p>远端服务器上的资料，发送给自己（此时待在自己的服务器上）</p><p>scp 你想要的内容 你想要的放在哪</p><p>scp <a href="mailto:root@192.168.13.33" target="_blank" rel="noopener">root@192.168.13.33</a>:/tmp/胖哥你好.txt ./tmp</p></li></ol><ol start="3"><li><p>发送当前文件夹所有文件和文件夹</p><p>scp -r ./* <a href="mailto:root@192.168.13.33" target="_blank" rel="noopener">root@192.168.13.33</a>:/opt/test/</p></li></ol><h3 id="Linux和Windows互传文件"><a href="#Linux和Windows互传文件" class="headerlink" title="Linux和Windows互传文件"></a>Linux和Windows互传文件</h3><h4 id="lrzsz"><a href="#lrzsz" class="headerlink" title="lrzsz"></a><code>lrzsz</code></h4><ul><li><p>发送文件： <code>sz 文件名</code></p></li><li><p>接受文件： <code>rz</code></p></li><li><p>从Windows中直接拖拽文件到 <code>xshell</code> 中：</p><ul><li><code>lrzsz</code> 工具包的作用</li><li>xshell 提供的功能</li></ul></li></ul><h4 id="xftp"><a href="#xftp" class="headerlink" title="xftp"></a><code>xftp</code></h4><p>用来传输大文件</p><h3 id="系统状态检测命令"><a href="#系统状态检测命令" class="headerlink" title="系统状态检测命令"></a>系统状态检测命令</h3><p>(ifconfig、uname、uptime、free、who、last、history、sosreport)</p><h4 id="ifconfig命令"><a href="#ifconfig命令" class="headerlink" title="ifconfig命令"></a>ifconfig命令</h4><p>ifconfig命令用于获取网卡配置与网络状态等信息，格式为<code>ifconfig [网络设备] [参数]</code></p><p>主要查看的就是网卡名称、inet 参数后面的 IP 地址、ether 参数后面的网卡物理地址（又称为 MAC 地址）， 以及 RX、TX 的接收数据包与发送数据包的个数及累计流量</p><blockquote><p>[root@localhost ~]# ifconfig<br><strong>eno16777736</strong>: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt; mtu 1500<br><strong>inet 192.168.76.129</strong> netmask 255.255.255.0 broadcast 192.168.76.255<br>inet6 fe80::20c:29ff:fe02:9064 prefixlen 64 scopeid 0x20<link><br><strong>ether 00:0c:29:02:90:64</strong> txqueuelen 1000 (Ethernet)<br><strong>RX packets 18311 bytes 18790832 (17.9 MiB)</strong><br>RX errors 0 dropped 0 overruns 0 frame 0<br><strong>TX packets 6314 bytes 4020291 (3.8 MiB)</strong><br>TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0</p><p>lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt; mtu 65536<br>inet 127.0.0.1 netmask 255.0.0.0<br>inet6 ::1 prefixlen 128 scopeid 0x10<host><br>loop txqueuelen 0 (Local Loopback)<br>RX packets 6 bytes 536 (536.0 B)<br>RX errors 0 dropped 0 overruns 0 frame 0<br>TX packets 6 bytes 536 (536.0 B)<br>TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0</host></p></blockquote><h4 id="uname命令"><a href="#uname命令" class="headerlink" title="uname命令"></a>uname命令</h4><ul><li>uname 命令用于查看系统内核与系统版本等信息</li></ul><p><code>uname [-a]</code></p><p>在使用 uname 命令时，一般会固定搭配上-a 参数来完整地查看当前系统的内核名称、主机名、内核发行版本、节点名、系统时间、硬件名称、硬件平台、处理器类型以及操作系统名称等信息。</p><blockquote><p>[root@localhost ~]# uname<br>Linux</p><p>[root@localhost ~]# uname -a<br>Linux localhost.localdomain 3.10.0-327.el7.x86_64 #1 SMP Thu May 09 22:10:57 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux</p></blockquote><h4 id="uptime命令"><a href="#uptime命令" class="headerlink" title="uptime命令"></a>uptime命令</h4><ul><li><p>uptime 用于查看系统的负载信息</p><p><code>uptime</code></p></li></ul><p>显示当前系统时间、系统已运行时间、启用终端数量以及平均负载值等信息。平均负载值指的是系统在最近 1 分钟、5 分钟、15 分钟内的压力情况（下面加粗的信息部分）；负载值越低越好，尽量不要长期超过 1，在生产环境中不要超过 5。</p><blockquote><p>[root@localhost ~]# uptime<br>22:19:39 up 5:05, 2 users, load average: 0.00, 0.01, 0.05</p></blockquote><h4 id="free命令"><a href="#free命令" class="headerlink" title="free命令"></a>free命令</h4><ul><li>free 用于显示当前系统中内存的使用量信息</li></ul><p><code>free [-h]</code></p><p>为了保证 Linux 系统不会因资源耗尽而突然宕机，运维人员需要时刻关注内存的使用量。 在使用 free 命令时，可以结合使用-h 参数以更人性化的方式输出当前内存的实时使用量信息。</p><table><thead><tr><th></th><th align="center">内存总量</th><th align="center">已用量</th><th align="center">可用量</th><th align="center">进程共享的内存量</th><th align="center">磁盘缓存的内存量</th><th align="center">缓存的内存量</th></tr></thead><tbody><tr><td></td><td align="center">total</td><td align="center">used</td><td align="center">free</td><td align="center">shared</td><td align="center">buffers</td><td align="center">cached</td></tr><tr><td>Mem</td><td align="center">3.7G</td><td align="center">599M</td><td align="center">2.3G</td><td align="center">10M</td><td align="center">795M</td><td align="center">2.9G</td></tr><tr><td>Swap</td><td align="center">2.0G</td><td align="center">0B</td><td align="center">2.0G</td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><h4 id="who命令"><a href="#who命令" class="headerlink" title="who命令"></a>who命令</h4><ul><li>who 用于查看当前登入主机的用户终端信息</li></ul><p><code>who [参数]</code></p><p>这三个简单的字母可以快速显示出所有正在登录本机的用户的名称以及他们正在开启的终端信息。</p><blockquote><p>[root@localhost ~]# who<br>root :0 2019-07-09 17:21 (:0)<br>root pts/0 2019-07-09 18:02 (192.168.76.33)</p></blockquote><table><thead><tr><th align="center">登录的用户名</th><th align="center">终端设备</th><th align="center">登录到系统的时间</th></tr></thead><tbody><tr><td align="center">root</td><td align="center">:0</td><td align="center">2019-07-09 17:21 (:0)</td></tr><tr><td align="center">root</td><td align="center">pts/0</td><td align="center">2019-07-09 18:02 (192.168.76.33)</td></tr></tbody></table><h4 id="whoami命令"><a href="#whoami命令" class="headerlink" title="whoami命令"></a>whoami命令</h4><p>打印与当前生效的用户 ID 关联的用户名</p><h4 id="last命令"><a href="#last命令" class="headerlink" title="last命令"></a>last命令</h4><ul><li>last 命令用于查看所有系统的登录记录</li></ul><p><code>last [参数]</code></p><p>使用 last 命令可以查看本机的登录记录。但是，由于这些信息都是以日志文件的形式保 存在系统中，因此黑客可以很容易地对内容进行篡改。千万不要单纯以该命令的输出信息而判断系统有无被恶意入侵</p><blockquote><p>[root@localhost ~]# last</p></blockquote><h4 id="history命令"><a href="#history命令" class="headerlink" title="history命令"></a>history命令</h4><ul><li>history 命令用于显示历史执行过的命令</li></ul><p><code>history [-c]</code></p><p>在使用 history 命令时，如果使用-c 参数则会清空所有的命令历史记录。 还可以使用“!编码数字”的方式来重复执行某一次的命令。history 命令有很多有趣的玩法等待你去开发。</p><blockquote><p>[root@localhost ~]# history<br>1 systemctl enable nfs-server.service<br>2 ln -s ‘/usr/lib/systemd/system/nfs-server.service’<br>3 ln -s ‘/usr/lib/systemd/system/nfs-server.service’ ‘/etc/‘<br>4 exit<br>5 mount -t nfs 192.168.1.97:/opt/test /mnt<br>6 ping 192.168.1.102<br>7 mount -t nfs 192.168.1.97:/opt/test /mnt</p></blockquote><p>历史命令会被保存到用户家目录中的.bash_history 文件中。Linux 系统中以点（.）开 头的文件均代表隐藏文件，这些文件大多数为系统服务文件，可以用 cat 命令查看其文件内容。</p><blockquote><p>[root@localhost ~]# cat ~/.bash_history<br>systemctl enable nfs-server.service<br>ln -s ‘/usr/lib/systemd/system/nfs-server.service’<br>ln -s ‘/usr/lib/systemd/system/nfs-server.service’ ‘/etc/‘<br>exit<br>mount -t nfs 192.168.1.97:/opt/test /mnt<br>ping 192.168.1.102<br>mount -t nfs 192.168.1.97:/opt/test /mnt<br>mount -t nfs 192.168.1.102:/opt/test /mnt -o proto=tcp -o nolock</p></blockquote><h4 id="ntpdate-命令"><a href="#ntpdate-命令" class="headerlink" title="ntpdate 命令"></a>ntpdate 命令</h4><ul><li>同步时间</li></ul><p><code>ntpdate -u ntp.aliyun.com</code></p><h4 id="sosreport命令"><a href="#sosreport命令" class="headerlink" title="sosreport命令"></a>sosreport命令</h4><p>sosreport 命令用于收集系统配置及架构信息并输出诊断文档，格式为 sosreport。</p><p>当 Linux 系统出现故障需要联系技术支持人员时，大多数时候都要先使用这个命令来简单收集系统的运行状态和服务配置信息，以便让技术支持人员能够远程解决一些小问题，亦或让他们能提前了解某些复杂问题。</p><p><img src="/Linux/20190508-Linux-notes/sosreport.png" alt="sosreport"></p><h3 id="工作目录切换命令"><a href="#工作目录切换命令" class="headerlink" title="工作目录切换命令"></a>工作目录切换命令</h3><p>（pwd、cd、ls）</p><h4 id="pwd命令"><a href="#pwd命令" class="headerlink" title="pwd命令"></a>pwd命令</h4><ul><li>pwd 命令用于显示用户当前所处的工作目录</li></ul><p><code>pwd [选项]</code></p><blockquote><p>[root@localhost tmp]# pwd<br>/tmp</p></blockquote><h4 id="cd命令"><a href="#cd命令" class="headerlink" title="cd命令"></a>cd命令</h4><ul><li>cd 命令用于切换工作路径</li></ul><p><code>cd [目录名称]</code></p><p>除了常见的切换目录方式，</p><p><code>cd -</code>命令返回到上一次所处的目录</p><p><code>cd..</code>命令进入上级目录</p><p><code>cd ~</code>命令切换到当前用户的家目录</p><p><code>cd ~username</code>切换到其他用户的家目录。</p><blockquote><p>[root@localhost tmp]# cd -<br>/root</p></blockquote><h4 id="ls命令"><a href="#ls命令" class="headerlink" title="ls命令"></a>ls命令</h4><ul><li>ls 命令用于显示目录中的文件信息</li></ul><p><code>ls [选项] [文件]</code></p><p><code>-a</code> 参数看 到全部文件（包括隐藏文件）</p><p><code>-l</code> 参数可以查看文件的属性、大小等详细信息。</p><p><code>-h</code> 参数可以以人类方便阅读的形式显示</p><p>将这 两个参数整合之后，再执行 ls 命令即可查看当前目录中的所有文件并输出这些文件的属性信息。</p><blockquote><p>[root@localhost ~]# ls -al<br>总用量 17068<br>dr-xr-x—. 17 root root 4096 5月 10 16:24 .<br>dr-xr-xr-x. 18 root root 4096 1月 7 2018 ..<br>-rw——-. 1 root root 1500 1月 8 2018 anaconda-ks.cfg<br>-rw-r–r–. 1 root root 18 12月 29 2013 .bash_logout<br>-rw-r–r–. 1 root root 176 12月 29 2013 .bash_profile</p></blockquote><p>如果想要查看目录属性信息，则需要额外添加一个-d 参数。例如，可使用如下命令查看 /etc 目录的权限与属性信息。</p><blockquote><p>[root@localhost ~]# ls -ld /etc<br>drwxr-xr-x. 143 root root 8192 5月 10 2019 /etc</p></blockquote><h4 id="du命令"><a href="#du命令" class="headerlink" title="du命令"></a>du命令</h4><ul><li><p><code>du -h 文件</code> （disk usage） 文件占用磁盘</p></li><li><p><code>du -sh 文件夹</code> 整个文件夹多少</p><ul><li>-s 汇总内容，得到一个总大小</li></ul></li></ul><h3 id="文本文件编辑命令"><a href="#文本文件编辑命令" class="headerlink" title="文本文件编辑命令"></a>文本文件编辑命令</h3><p>（cat、more、head、tail、tr、wc、cut、diff）</p><p>Linux 系统中“一切都是文件”，而对服务程序进行配置自然也就是编辑程序的配置文件。如 果不能熟练地查阅系统或服务的配置文件，那以后工作时可就真的要尴尬了。</p><h4 id="cat命令"><a href="#cat命令" class="headerlink" title="cat命令"></a>cat命令</h4><ul><li>cat 命令用于查看纯文本文件（内容较少的）</li></ul><p><code>cat [选项] [文件]</code></p><p>Linux 系统中有多个用于查看文本内容的命令，每个命令都有自己的特点，比如这个 cat 命令就是用于查看内容较少的纯文本文件的。</p><p>-n参数：显示行号</p><blockquote><p>[root@localhost ~]# cat -n initial-setup-ks.cfg<br>1 #version=DEVEL<br>2 # X Window System configuration information<br>3 xconfig –startxonboot<br>4 # License agreement<br>5 eula –agreed<br>6 # System authorization information<br>7 auth –enableshadow –passalgo=sha512<br>8 # Use CDROM installation media<br>9 cdrom<br>10 # Use graphical install<br>11 graphical</p></blockquote><h4 id="more命令"><a href="#more命令" class="headerlink" title="more命令"></a>more命令</h4><ul><li>more 命令用于查看纯文本文件（内容较多的）</li></ul><p><code>more [选项]文件</code></p><p>如果需要阅读长篇小说或者非常长的配置文件，那么“小猫咪”可就真的不适合了。因为一旦使用 cat 命令阅读长篇的文本内容，信息就会在屏幕上快速翻滚，导致自己还没有来得及看到，内容就已经翻篇了。因此对于长篇的文本内容，推荐使用 more 命令来查看。more 命令会在最下面使用百分比的形式来提示您已经阅读了多少内容。您还可以使用空格键或回车键向下翻页：</p><blockquote><p>[root@localhost ~]# more initial-setup-ks.cfg</p><p>#version=DEVEL</p><p>X Window System configuration information</p><p>xconfig –startxonboot</p></blockquote><h4 id="less命令"><a href="#less命令" class="headerlink" title="less命令"></a>less命令</h4><p><strong>less 工具也是对文件或其它输出进行分页显示的工具</strong>，应该说是<strong>linux正统查看文件内容的工具</strong>，功能极其强大。less 的用法比起 more 更加的有弹性。</p><p>在 more 的时候，我们并没有办法向前面翻， 只能往后面看，但若使用了 less 时，就可以使用 [pageup] [pagedown] 等按 键的功能来往前往后翻看文件，更容易用来查看一个文件的内容！除此之外，在 less 里头可以拥有更多的搜索功能，不止可以向下搜，也可以向上搜。</p><h4 id="head命令"><a href="#head命令" class="headerlink" title="head命令"></a>head命令</h4><ul><li>head 命令用于查看纯文本文档的前 N 行，默认显示前10行</li></ul><p><code>head [选项] [文件]</code></p><p>例如：查看文本内容的前20行</p><blockquote><p>[root@localhost ~]# head -20 /etc/passwd</p></blockquote><h4 id="tail命令"><a href="#tail命令" class="headerlink" title="tail命令"></a>tail命令</h4><ul><li>tail 命令用于查看纯文本文档的后 N 行或持续刷新内容，默认显示后10行</li></ul><p><code>tail [选项] [文件]</code></p><p>例如：查看文本内容的最后 20 行</p><p><code>tail -20 文件名</code></p><p>tail 命令最强悍的功能是可以持续刷新一个文件的内容，当想要实时查看最新日志文件时，这特别有用，此时的命令格式为“tail -f 文件名”：</p><blockquote><p>[root@localhost ~]# tail -f /var/log/messages<br>May 10 16:46:20 localhost rsyslogd: [origin software=”rsyslogd” swVersion=”7.4.7” x-pid=”957” x-info=”<a href="http://www.rsyslog.com&quot;]" target="_blank" rel="noopener">http://www.rsyslog.com&quot;]</a> rsyslogd was HUPed<br>May 10 16:50:01 localhost systemd: Started Session 15 of user root.<br>May 10 16:50:01 localhost systemd: Starting Session 15 of user root.</p></blockquote><h4 id="tr命令"><a href="#tr命令" class="headerlink" title="tr命令"></a>tr命令</h4><ul><li>tr 命令用于替换文本文件中的字符</li></ul><p><code>tr [原始字符] [目标字符]</code></p><p>在很多时候，我们想要快速地替换文本中的一些词汇，又或者把整个文本内容都进行替换，如果进行手工替换，难免工作量太大，尤其是需要处理大批量的内容时，进行手工替换更是不现实。这时，就可以先使用 cat 命令读取待处理的文本，然后通过管道符把这些文本内容传递给 tr 命令进行替换操作即可。例如，把某个文本内容中的英文全部替换为大写：</p><blockquote><p>[root@localhost ~]# cat anaconda-ks.cfg | tr [a-z] [A-Z]</p></blockquote><h4 id="wc命令"><a href="#wc命令" class="headerlink" title="wc命令"></a>wc命令</h4><ul><li>wc 命令用于统计指定文本的行数、字数、字节数</li></ul><p><code>wc [参数] 文本</code></p><p>联想：到上厕所时好无聊，无聊到数完了手中的如厕读物上有多少行字。</p><p>-l只显示行数，-w只显示单词书，-c只显示字节数</p><blockquote><p>[root@localhost ~]# wc -lwc anaconda-ks.cfg<br>63 127 1500 anaconda-ks.cfg</p></blockquote><p>passwd 是用于保存系统账户信息的文件，要统计当前系统中有多少个用户，可以使用下面的命令来进行查询</p><blockquote><p>[root@localhost ~]# wc -l /etc/passwd<br>48 /etc/passwd</p></blockquote><h4 id="stat命令"><a href="#stat命令" class="headerlink" title="stat命令"></a>stat命令</h4><p>stat 命令用于查看文件的具体存储信息和时间等信息，格式为<code>stat 文件名称</code></p><p>stat 命令可以用于查看文件的存储信息和时间等信息，命令 <code>stat anaconda-ks.cfg</code> 会显示出文件的三种时间状态（已加粗）：Access、Modify、Change。</p><blockquote><p>[root@localhost ~]# stat anaconda-ks.cfg<br>文件：”anaconda-ks.cfg”<br>大小：1500 块：8 IO 块：4096 普通文件<br>设备：fd00h/64768d Inode：71828008 硬链接：1<br>权限：(0600/-rw——-) Uid：( 0/ root) Gid：( 0/ root)<br>环境：system_u:object_r:admin_home_t:s0<br><strong>最近访问</strong>：2019-05-10 16:16:03.777572925 +0800<br><strong>最近更改</strong>：2018-01-08 04:23:22.893078877 +0800<br><strong>最近改动</strong>：2018-01-08 04:23:22.893078877 +0800<br>创建时间：-</p></blockquote><h4 id="cut命令"><a href="#cut命令" class="headerlink" title="cut命令"></a>cut命令</h4><ul><li>cut 命令用于按“列”提取文本字符</li></ul><p><code>cut [参数] 文本</code></p><p>在Linux系统中，如何准确地提取出最想要的数据，这也是我们应该重点学习的内容。一般而言，按基于“行”的方式来提取数据是比较简单的，只需要设置好要搜索的关键词即可。但是如果按列搜索，不仅要使用-f 参数来设置需要看的列数，还需要使用-d 参数来设置间隔符号。</p><p>例如passwd在保存用户数据信息时，用户信息的每一项值之间是采用冒号来间隔的，使用下述命令尝试提取出 passwd 文件中的用户名信息，即提取以冒号（：）为间隔符号的第一列内容：</p><blockquote><p>[root@localhost ~]# head -n 2 /etc/passwd<br><code>root:x:0:0:root:/root:/bin/bash</code><br><code>bin:x:1:1:bin:/bin:/sbin/nologin</code></p><p>[root@localhost ~]# cut -d: -f1 /etc/passwd<br>root<br>bin<br>daemon</p><p>[root@localhost ~]# cut -d: -f2 /etc/passwd<br>x<br>x</p></blockquote><h4 id="diff命令"><a href="#diff命令" class="headerlink" title="diff命令"></a>diff命令</h4><ul><li>diff 命令用于比较多个文本文件的差异</li></ul><p><code>diff [参数] 文件</code></p><p>在使用 diff 命令时，不仅可以使用–brief 参数来确认两个文件是否不同，还可以使用-c 参数来详细比较出多个文件的差异之处，这绝对是判断文件是否被篡改的有力神器。例如，先使用 cat 命令分别查看 diff_A.txt 和 diff_B.txt 文件的内容，然后进行比较：</p><blockquote><p>[root@localhost ~]# diff –brief diff_A diff_B<br>文件 diff_A 和 diff_B 不同</p></blockquote><h4 id="文件加锁"><a href="#文件加锁" class="headerlink" title="文件加锁"></a>文件加锁</h4><ul><li>查看特殊权限</li></ul><p><code>lsattr 文件名</code></p><ul><li>给文件加锁</li></ul><p><code>chattr +i 文件名</code></p><ul><li>文件减锁</li></ul><p><code>chattr -i 文件名</code></p><h3 id="文件目录管理命令"><a href="#文件目录管理命令" class="headerlink" title="文件目录管理命令"></a>文件目录管理命令</h3><p>(touch、mkdir、cp、mv、rm、dd、file)</p><p>接下来是文件的创建、修改、复制、剪切、更名与删除等操作。</p><h4 id="touch命令"><a href="#touch命令" class="headerlink" title="touch命令"></a>touch命令</h4><ul><li>touch 命令用于创建空白文件或设置文件的时间</li></ul><p><code>touch [选项] [文件]</code></p><p>对 touch 命 令来讲，有难度的操作主要是体现在设置文件内容的修改时间（mtime）、文件权限或属性的更改时间（ctime）与文件的读取时间（atime）上面。-a 仅修改“读取时间”，-m仅修改“修改时间”，-d同时修改“atime与mtime”</p><blockquote><p>[root@localhost ~]# touch -d “2017-05-05 05:05” abcc<br>[root@localhost ~]# ll<br>总用量 17008<br>-rw-r–r–. 1 root root 0 5月 10 22:29 aa<br>-rw-r–r–. 1 root root 0 5月 5 2017 abcc</p></blockquote><h4 id="mkdir命令"><a href="#mkdir命令" class="headerlink" title="mkdir命令"></a>mkdir命令</h4><ul><li>mkdir 命令用于创建空白的目录</li></ul><p><code>mkdir [选项] 目录</code></p><p>除了能创建单个空白目录外，mkdir 命令还可以结合<strong>-p 参数来递归创建</strong>出具有嵌套叠层关系的文件目录。</p><blockquote><p>[root@localhost ~]# mkdir wenjianjia<br>[root@localhost ~]# mkdir -p a/b/c/d/e<br>[root@localhost ~]# ls<br>a wenjianjia</p></blockquote><h4 id="cp命令"><a href="#cp命令" class="headerlink" title="cp命令"></a>cp命令</h4><ul><li>cp 命令用于复制文件或目录</li></ul><p><code>cp [选项] 源文件 目标文件</code></p><ul><li><p>如果目标文件是目录，则会把源文件复制到该目录中；</p></li><li><p>如果目标文件也是普通文件，则会询问是否要覆盖它；</p></li><li><p>如果目标文件不存在，则执行正常的复制操作。</p></li></ul><table><thead><tr><th>参数</th><th align="left">作用</th></tr></thead><tbody><tr><td>-p</td><td align="left">保留原始文件的属性</td></tr><tr><td>-d</td><td align="left">若对象为“链接文件”，则保留该“链接文件”的属性</td></tr><tr><td>-r</td><td align="left">递归持续复制（用于目录）</td></tr><tr><td>-i</td><td align="left">若目标文件存在则询问是否覆盖</td></tr><tr><td>-a</td><td align="left">相当于-pdr（p、d、r 为上述参数）</td></tr></tbody></table><blockquote><p>[root@localhost ~]# cp aa abcc<br>cp：是否覆盖”abcc”？<br>[root@localhost ~]# ll<br>总用量 17008<br>drwxr-xr-x. 3 root root 14 5月 10 22:34 a<br>-rw-r–r–. 1 root root 0 5月 10 22:29 aa<br>-rw-r–r–. 1 root root 0 5月 5 2017 abcc</p></blockquote><h4 id="mv命令"><a href="#mv命令" class="headerlink" title="mv命令"></a>mv命令</h4><ul><li>mv 命令用于剪切文件或将文件重命名</li></ul><p><code>mv [选项] 源文件 [目标路径|目标文件名]</code></p><p>剪切操作不同于复制操作，因为它会默认把源文件删除掉，只保留剪切后的文件。如果在同一个目录中对一个文件进行剪切操作，其实也就是对其进行重命名：</p><blockquote><p>[root@localhost ~]# mv aa ab<br>[root@localhost ~]# ll<br>总用量 17008<br>-rw-r–r–. 1 root root 0 5月 10 22:29 ab</p></blockquote><h4 id="rm命令"><a href="#rm命令" class="headerlink" title="rm命令"></a>rm命令</h4><ul><li>rm 命令用于删除文件或目录</li></ul><p><code>rm [选项] 文件</code></p><p>在 Linux 系统中删除文件时，系统会默认向您询问是否要执行删除操作，如果不想总是 看到这种反复的确认信息，可在 rm 命令后跟上<strong>-f 参数来强制删除</strong>。另外，想要删除一个目录， 需要在 rm 命令后面一个<strong>-r</strong> 参数才可以，否则删除不掉</p><blockquote><p>[root@localhost ~]# rm a<br>rm: 无法删除”a”: 是一个目录<br>[root@localhost ~]# rm -rf a</p></blockquote><h4 id="dd命令"><a href="#dd命令" class="headerlink" title="dd命令"></a>dd命令</h4><ul><li>dd 命令用于按照指定大小和个数的数据块来<strong>复制文件</strong>或<strong>转换文件</strong></li></ul><p><code>dd [参数]</code></p><p>dd 命令是一个比较重要而且比较有特色的一个命令，它能够让用户按照指定大小和个数 的数据块来复制文件的内容。当然如果愿意的话，还可以在复制过程中转换其中的数据。Linux 系统中有一个名为/dev/zero 的设备文件。这个文件不会占用系统存储空间，但却可以提供无穷无尽的数据，因此可以使用它作为 dd 命令的输入文件，来生成一个指定大小的文件</p><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>if</td><td>输入的文件名称</td></tr><tr><td>of</td><td>输出的文件名称</td></tr><tr><td>bs</td><td>设置每个“块”的大小</td></tr><tr><td>count</td><td>设置要复制“块”的个数</td></tr></tbody></table><p>例如我们可以用 dd 命令从/dev/zero 设备文件中取出一个大小为 560MB 的数据块，然后 保存成名为 560_file 的文件。在理解了这个命令后，以后就能随意创建任意大小的文件了</p><blockquote><p>[root@localhost ~]# dd if=/dev/zero of=560_file count=1 bs=560M<br>记录了1+0 的读入<br>记录了1+0 的写出<br>587202560字节(587 MB)已复制，18.8524 秒，31.1 MB/秒</p></blockquote><p>dd 命令的功能也绝不仅限于复制文件这么简单。如果您想把光驱设备中的光盘制作成 iso格 式的镜像文件，在Windows 系统中需要借助于第三方软件才能做到，但在 Linux系统中可以直接 使用 dd 命令来压制出光盘镜像文件，将它变成一个可立即使用的 iso 镜像：</p><blockquote><p>[root@localhost ~]# dd if=/dev/cdrom of=RHEL-server-7.0.iso<br>记录了8456192+0 的读入<br>记录了8456192+0 的写出<br>4329570304字节(4.3 GB)已复制，249.043 秒，17.4 MB/秒</p></blockquote><p>bs 与 count 都是用来指定容量的大小，只要能满足需求，可随意组合搭配方式。</p><h4 id="file命令"><a href="#file命令" class="headerlink" title="file命令"></a>file命令</h4><ul><li>file 命令用于<strong>查看文件的类型</strong></li></ul><p><code>file 文件名</code></p><p>在 Linux 系统中，由于文本、目录、设备等所有这些一切都统称为文件，而我们又不能单凭后缀就知道具体的文件类型，这时就需要使用 file 命令来查看文件类型了。</p><blockquote><p>[root@localhost ~]# file ab<br>ab: empty<br>[root@localhost ~]# file anaconda-ks.cfg<br>anaconda-ks.cfg: ASCII text</p></blockquote><h3 id="打包压缩与搜索命令"><a href="#打包压缩与搜索命令" class="headerlink" title="打包压缩与搜索命令"></a>打包压缩与搜索命令</h3><p>(tar、grep、find)</p><p>Linux 系统中对文件进行打包压缩与解压，以及让用户基于关键词在文本文件中<strong>搜索相匹配的信息</strong>、在整个文件系统中基于指定的名称或属性搜索特定文件。</p><h4 id="tar命令"><a href="#tar命令" class="headerlink" title="tar命令"></a>tar命令</h4><ul><li>tar 命令用于对文件进行<strong>打包压缩或解压</strong></li></ul><p><code>tar [选项] [文件]</code></p><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>-c</td><td>打包</td></tr><tr><td>-x</td><td>解包</td></tr><tr><td>-t</td><td>查看压缩包内有哪些文件</td></tr><tr><td>-z</td><td>用 Gzip 压缩或解压</td></tr><tr><td>-j</td><td>用 bzip2 压缩或解压</td></tr><tr><td>-v</td><td>显示压缩或解压的过程</td></tr><tr><td>-f</td><td>目标文件名</td></tr><tr><td>-p</td><td>保留原始的权限与属性</td></tr><tr><td>-P</td><td>使用绝对路径来压缩</td></tr><tr><td>-C</td><td>指定解压到的目录</td></tr></tbody></table><p>首先， -c 参数用于创建压缩文件， -x 参数用于解压文件，因此这两个参数不能同时使用。 其次，-z 参数指定使用 Gzip 格式来压缩或解压文件，-j 参数指定使用 bzip2 格式来压缩或解压文件。用户使用时则是根据文件的后缀来决定应使用何种格式参数进行解压。在执行某些压缩或解压操作时，可能需要花费数个小时，如果屏幕一直没有输出，您一方面不好判断打包的进度情况，另一方面也会怀疑电脑死机了，因此非常推荐使用-v 参数向用户不断显示压缩或解压的过程。-C 参数用于指定要解压到哪个指定的目录。-f 参数特别重要，它必须放到参数的最后一位，代表要压缩或解压的软件包名称。</p><p>一般使用<code>tar -czvf 压缩包名称.tar.gz 要打包的目录</code>命令把指定的文件进行打包压缩；</p><p>相应的解压命令为<code>tar -xzvf 压缩 包名称.tar.gz</code></p><ul><li><p>将/tmp下所有的内容打包，不节省磁盘空的命令</p><ul><li>tar -cvf alltmp.tar /tmp/*</li></ul></li><li><p>解包的命令 alltmp.tar</p><ul><li>tar -xvf alltmp.tar</li></ul></li><li><p>打包且压缩/tmp下所有内容命名为alltmp.tar.gz alltmp.tgz 且放到 /opt/目录下</p><ul><li>tar -czvf /opt/alltmp.tgz /tmp/*</li></ul></li><li><p>解压缩</p><ul><li>tar -zxvf 压缩包的名字 你要解压到哪</li></ul></li></ul><h4 id="grep命令"><a href="#grep命令" class="headerlink" title="grep命令"></a>grep命令</h4><ul><li>grep 命令用于在文本中执行关键词搜索，并显示匹配的结果</li></ul><p><code>grep [选项] [文件]</code></p><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>-b</td><td>将可执行文件（binary）当作文本文件（text）来搜索</td></tr><tr><td>-c</td><td>仅显示找到的行数</td></tr><tr><td>-i</td><td>忽略大小写</td></tr><tr><td>-n</td><td>显示行号</td></tr><tr><td>-v</td><td>反向选择—仅列出没有“关键词”的行</td></tr></tbody></table><p>-n 参数用来显示搜索到信息的行号</p><p>-v 参数用于反选信息（即没有包含关键词的所有信息行）</p><p>这两个参数几乎能完成您日后 80%的工作需要，至于其他上百个参数， 即使以后在工作期间遇到了，再使用 man grep 命令查询也来得及。</p><p>在 Linux 系统中，/etc/passwd 文件是保存着所有的用户信息，而一旦用户的登录终端被 设置成/sbin/nologin，则不再允许登录系统，因此可以使用 grep 命令来查找出当前系统中不允 许登录系统的所有用户信息：</p><blockquote><p>[root@localhost ~]# grep -i “allow” settings.py</p></blockquote><p>匹配空白行（<code>^$</code>），以及 #号开头的注释内容（<code>^#</code>）</p><p><code>grep -v &quot;^#&quot; pwd.txt | grep -v &quot;^$&quot;</code></p><h4 id="find命令"><a href="#find命令" class="headerlink" title="find命令"></a>find命令</h4><ul><li>find 命令用于按照指定条件来查找文件</li></ul><p><code>find [查找路径] 寻找条件 操作</code></p><p>Linux 系统中的一切都是文件。在 Linux 系统中，搜索工作一般都是通过 find 命令来完成的，它可以使用不同的文件特性作为寻找条件（如文件名、大小、修改时间、权限等信息），一旦匹配成功则默认将信息显示到屏幕上。</p><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>-name</td><td>匹配名称</td></tr><tr><td>-perm</td><td>匹配权限（mode 为完全匹配，-mode 为包含即可）</td></tr><tr><td>-user</td><td>匹配所有者</td></tr><tr><td>-group</td><td>匹配所有组</td></tr><tr><td>-mtime -n +n</td><td>匹配修改内容的时间（-n 指 n 天以内，+n 指 n 天以前）</td></tr><tr><td>-atime -n +n</td><td>匹配访问文件的时间（-n 指 n 天以内，+n 指 n 天以前）</td></tr><tr><td>-ctime -n +n</td><td>匹配修改文件权限的时间（-n 指 n 天以内，+n 指 n 天以前）</td></tr><tr><td>-nouser</td><td>匹配无所有者的文件</td></tr><tr><td>-nogroup</td><td>匹配无所有组的文件</td></tr><tr><td>-newer f1 !f2</td><td>匹配比文件 f1 新但比 f2 旧的文件</td></tr><tr><td>–type<br>b/d/c/p/l/f</td><td>匹配文件类型（后面的字母参数依次表示块设备、目录、字符设备、管 道、链接文件、文本文件）</td></tr><tr><td>-size</td><td>匹配文件的大小（+50KB 为查找超过 50KB 的文件，而-50KB 为查找小 于 50KB 的文件）</td></tr><tr><td>-prune</td><td>忽略某个目录</td></tr><tr><td>-exec…… {};</td><td>后面可跟用于进一步处理搜索结果的命令</td></tr></tbody></table><p>重点讲解一下-exec 参数重要的作用。这个参数用于把 find 命令搜索到的结果交 由紧随其后的命令作进一步处理，它十分类似于管道符技术，并且由于 find 命令对参数的特殊要求，因此虽然 exec 是长格式形式，但依然只需要一个减号（-）。</p><p>查找以host开头的文件或文件夹</p><blockquote><p>[root@localhost ~]# find /etc -name “host*”</p></blockquote><p>查找以python开头的文件夹</p><blockquote><p>[root@localhost ~]# find / -type d -name “python*”</p></blockquote><p>查找以python开头的文件</p><blockquote><p>[root@localhost ~]# find / -type f -name “python*”</p></blockquote><h3 id="计划任务"><a href="#计划任务" class="headerlink" title="计划任务"></a>计划任务</h3><ul><li>后台运行，到了预定的时间就会自动执行的任务</li></ul><p><code>crontab （选项）（参数）</code></p><p><code>-e</code>：编辑该用户的计时器设置；<br><code>-l</code>：列出该用户的计时器设置；<br><code>-r</code>：删除该用户的计时器设置；<br><code>-u&lt;用户名称&gt;</code>：指定要设定计时器的用户名称。</p><p>在编辑中写：</p><p>分 时 日 月 周 命令绝对路径</p><p>例1：</p><p><code>* * * * * /usr/bin/echo &quot;linux真好玩 ，我可不信&quot; &gt;&gt; /tmp/骗谁呢.txt</code></p><p>例2：</p><p>每周一到周五的凌晨1点整，清空/tmp目录的所有文件<br>分 时 日 月 周 命令绝对路径<br><code>0 1 * * 1-5 /usr/bin/rm -rf /tmp/*</code></p><h2 id="管道符、重定向与环境变量"><a href="#管道符、重定向与环境变量" class="headerlink" title="管道符、重定向与环境变量"></a>管道符、重定向与环境变量</h2><p>输入输出重定向； 管道命令符； 命令行的通配符； 常用的转义字符； 重要的环境变量。</p><h3 id="管道符"><a href="#管道符" class="headerlink" title="管道符"></a>管道符</h3><ul><li>二次过滤</li></ul><p>例1：查看网络状态，并过滤出22端口的信息</p><p><code>netstat -tunlp | grep &quot;22&quot;</code></p><p>例2：查看进程信息，并过滤出 python 的信息</p><p><code>ps -ef | grep &quot;python&quot;</code></p><h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><p><code>&gt;</code> 重定向覆盖符</p><p><code>&gt;&gt;</code> 重定向追加符</p><p><code>&lt;</code> 输入重定向到一个程序，如做 MySQL数据导入</p><p><code>&lt;&lt;</code> 重定向追加</p><p>例如：</p><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">"覆盖写入一条信息"</span> &gt; <span class="string">./msg.txt</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"追加一条信息"</span> &gt;&gt; <span class="string">./msg.txt</span></span><br></pre></td></tr></table></figure><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><p>echo $PATH 查看环境变量</p><p>vim /etc/profile 最下面可以添加环境变量</p><h2 id="Vim编辑器与shell命令脚本"><a href="#Vim编辑器与shell命令脚本" class="headerlink" title="Vim编辑器与shell命令脚本"></a>Vim编辑器与shell命令脚本</h2><h2 id="用户身份与文件权限"><a href="#用户身份与文件权限" class="headerlink" title="用户身份与文件权限"></a>用户身份与文件权限</h2><p>用户分为：user、group、other</p><p><code>useradd 用户名</code> 创建用户</p><p><code>userdel -f 用户名</code> 删除用户</p><p><code>userdel -rf 用户名</code> 将用户家目录一并删除</p><p><code>passwd 用户名</code> 给用户修改密码</p><p><code>su - 用户名</code> su是切换用户的命令，中间的-表示环境变量的完全切换</p><p><code>sudo 你想执行的命令</code> 以root身份执行命令</p><p>sudoers file</p><ol><li><p>使用visudo命令，默认是打开 /etc/sudoers 文件，且有语法检测</p></li><li><p>添加 用户 到sudoers</p></li><li><p>然后就可以增删查改，但不能进入到 / 下</p></li></ol><p>权限分为：</p><ul><li><p>第一个 <code>-</code> 表示文件、<code>d</code> 表示文件夹、<code>l</code>表示软链接</p></li><li><p>r 4 可读</p></li><li><p>w 2 可写</p></li><li><p>x 1 可执行</p></li><li><p>后面的 <code>-</code> 表示没有权限</p></li></ul><p><code>chmod</code> （change mode）更改权限</p><p><code>chown</code> （更改属主）</p><p><code>chgrp</code> （更改属组）</p><p><code>usermod</code> （更改用户信息） 可以将用户添加到别的用户组中</p><p><code>id 用户名</code> 查看用户信息</p><p><code>su - 用户名</code> 切换用户</p><h2 id="存储结构与磁盘划分"><a href="#存储结构与磁盘划分" class="headerlink" title="存储结构与磁盘划分"></a>存储结构与磁盘划分</h2><h2 id="使用RAID与LVM磁盘阵列技术"><a href="#使用RAID与LVM磁盘阵列技术" class="headerlink" title="使用RAID与LVM磁盘阵列技术"></a>使用RAID与LVM磁盘阵列技术</h2><hr>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>pygame练习之DIY街机小游戏</title>
    <url>/pygame%E5%AD%A6%E4%B9%A0/20190414-pygame-DIY-banana-and-plumb.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>使用Pygame扩展，编写功能齐备的全屏街机游戏。参考《python基础教程》</p></blockquote><a id="more"></a><hr><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>如何编写计算机游戏呢？游戏的基本设计过程与其他程序类似，但开发对象模型前， 必须先设计游戏本身，如游戏包含的角色、所处的环境以及要实现的目标。</p><p>这里将创建的游戏是从巨蟒剧团推出的著名短剧“Self-Defense Against Fresh Fruit”改编而 来的。在这个短剧中，军士长John Cleese指挥士兵使用防守战术抵御入侵者使用新鲜水果（如石 榴、糖水芒果、青梅和香蕉）发起的进攻。防守战术包括使用枪支、放老虎以及在敌人头顶扔下 重达16吨的铅锤。在这个游戏中，我们将反过来，让玩家控制一支香蕉。这支香蕉要躲开从天而 降的16吨铅锤，尽力在防御战中活下来。我想将这个游戏命名为Squish比较合适。</p><p>这个项目的目标是围绕着游戏设计展开的。这款游戏必须像设计的那样：香蕉能够移动，16 吨的铅锤从天而降。另外，与往常一样，代码必须是模块化的，且易于扩展。一个重要的需求是， 设计应包含一些游戏状态（如游戏简介、关卡和“游戏结束”状态），同时可轻松地添加新状态。</p><h2 id="有用的工具"><a href="#有用的工具" class="headerlink" title="有用的工具"></a>有用的工具</h2><h3 id="pygame"><a href="#pygame" class="headerlink" title="pygame"></a>pygame</h3><p>模块pygame自动导入其他所有的Pygame模块。如pygame.display和pygame.font。</p><p>模块pygame包含函数Surface，它返回一个新的Surface对象。Surface对象其实就是一个指定尺寸的空图像，可用来绘画和传送。传送（调用Surface对象的方法blit）意味着在Surface之间 传输内容。［传送的英文单词blit是从技术术语块传输（block transfer）的简写BLT衍生而来的。］</p><p>函数<strong>init</strong>是Pygame游戏的核心，必须在游戏进入主事件循环前调用。这个函数<u>自动初始化其他所有模块</u>（如font和image）。</p><p>如果要捕获Pygame特有的错误，就需要使用error类。</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">import pygame, sys</span><br><span class="line">from pygame.locals import *</span><br><span class="line"></span><br><span class="line">white = <span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span></span><br><span class="line">black = <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span></span><br><span class="line"></span><br><span class="line">pygame.init()</span><br><span class="line"></span><br><span class="line">screen = pygame.display.set_mode((<span class="number">500</span>, <span class="number">500</span>))</span><br><span class="line">myfront = pygame.font.Font(None,<span class="number">60</span>)</span><br><span class="line">textImage = myfront.render(<span class="string">"Hello Pygame"</span>, True, black)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> True:		<span class="comment"># 死循环确保窗口一直显示</span></span><br><span class="line">    <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():     <span class="comment"># 遍历所有事件</span></span><br><span class="line">        <span class="keyword">if</span> event.type <span class="keyword">in</span> (QUIT, KEYDOWN): <span class="comment"># 单击关闭窗口，或键盘输入就退出</span></span><br><span class="line">            sys.<span class="keyword">exit</span>()</span><br><span class="line">    screen.fill(white)					<span class="comment"># 白色填充</span></span><br><span class="line">    screen.blit(textImage, (<span class="number">100</span>, <span class="number">100</span>))  <span class="comment"># 改变画面，加上字</span></span><br><span class="line">    pygame.display.update() 			<span class="comment"># 更新画面</span></span><br></pre></td></tr></table></figure><h3 id="pygame-locals"><a href="#pygame-locals" class="headerlink" title="pygame.locals"></a>pygame.locals</h3><p>模块pygame.locals包含你可能在自定义模块的作用域内使用的名称（变量），如事件类型、 键、视频模式等的名称。可导入这个模块的所有内容（from pygame.locals import *），但如果知道需要哪些名称，应该做更具体的导入，如from pygame.locals import FULLSCREEN。</p><h3 id="pygame-display"><a href="#pygame-display" class="headerlink" title="pygame.display"></a>pygame.display</h3><p>模块pygame.display包含处理<strong>内容显示</strong>的函数，这些内容可显示在普通窗口中，也可占据整个屏幕。在这个项目中，需要用到如下函数。</p><ul><li>flip：更新显示。一般而言，分两步来修改当前屏幕。首先，对函数get_surface返回 的Surface对象做必要的修改，然后调用pygame.display.flip来更新显示，反映出所做 的修改。</li><li>update：只想更新屏幕的一部分时，使用这个函数，而不是flip。调用这个函数时，可只 提供一个参数，即RenderUpdates类的方法draw返回的矩形列表。</li><li>set_mode：设置显示的尺寸和类型。显示模式有多种，但这里只使用全屏模式和默认模式 “在窗口中显示”。</li><li>set_caption：设置Pygame程序的标题。函数set_caption主要用于游戏在窗口中运行（而不是以全屏模式运行）时，因为标题将用作窗口的标题。</li><li>get_surface：返回一个Surface对象，你可在其中绘制图形，再调用pygame.display.flip 或pygame.display.blit。这个项目只使用了Surface对象的一个方法来绘画，这就是<strong>blit</strong>， <u>它将一个Surface对象中的图形传输到另一个Surface对象的指定位置</u>。另外，还将使用 Group对象的方法draw在Surface上绘制Sprite对象。</li></ul><h3 id="pygame-font"><a href="#pygame-font" class="headerlink" title="pygame.font"></a>pygame.font</h3><p>模块pygame.font包含函数Font。字体对象用于表示不同的字体，可用于将文本渲染为可在 Pygame中作为普通图形使用的图像。</p><h3 id="pygame-sprite-（小精灵）"><a href="#pygame-sprite-（小精灵）" class="headerlink" title="pygame.sprite （小精灵）"></a>pygame.sprite （小精灵）</h3><p>模块pygame.sprite包含两个非常重要的类：Sprite和Group。</p><p>Sprite类是<strong>所有可见游戏对象</strong>（在这个项目中，是香蕉和重16吨的铅锤）的<strong>基类</strong>。要实现自 定义的游戏对象，可从Sprite派生出子类，并重写构造函数以设置其属性image和rect（这些属性 决定了Sprite的外观和位置），同时重写在Sprite可能需要更新时调用的方法update。</p><p>Group及其子类的实例用作<strong>Sprite对象的容器</strong>。一般而言，使用Group是个不错的主意。在简 单的游戏（如本章的项目）中，只需创建一个名为sprites或allsprites之类的Group，并将所有 Sprite都添加到其中。这样，当你调用Group对象的方法update时，将自动调用所有Sprite对象的方法update。另外，Group对象的方法clear用于清除它包含的所有Sprite对象（实际的清理工作是使用一个回调函数完成的），而方法draw可用于绘制所有的Sprite对象。</p><p>在这个项目中，将使用Group的子类RenderUpdates，其方法draw返回列表，其中包含所有受 到影响的矩形。可将这个列表传递给pygame.display.update，以只更新需要更新的部分。通过这 样做，有可能极大地改善游戏的性能。</p><h3 id="pygame-mouse"><a href="#pygame-mouse" class="headerlink" title="pygame.mouse"></a>pygame.mouse</h3><p>在即将开发的游戏Squish中，只使用模块<code>pygame.mouse</code>来做两件事情：隐藏鼠标以及获取鼠标的位置。这两件事分别是使用<code>pygame.mouse.set_visible(False)</code>和<code>pygame.mouse.get_pos()</code> 来完成的。</p><h3 id="pygame-event"><a href="#pygame-event" class="headerlink" title="pygame.event"></a>pygame.event</h3><p>模块<code>pygame.event</code>跟踪各种事件，如鼠标单击、鼠标移动、按下或松开键等。要获取最近发生的事件列表，可使用函数<code>pygame.event.get</code>。</p><p>如果只需要状态信息，如<code>pygame.mouse.get_pos</code>返回的鼠标位置，就无需使用<code>pygame.event.get</code>。 然而，你需要确保<code>Pygame</code>同步地更新，为此可定期调用函数<code>pygame.event.pump</code>。</p><h3 id="pygame-image"><a href="#pygame-image" class="headerlink" title="pygame.image"></a>pygame.image</h3><p>模块pygame.image用于处理图像，如以GIF、PNG、JPEG和其他几种文件格式存储的图像。 在这个项目中，只需要这个模块中的函数load，它读取图像文件并创建一个包含该图像的Surface 对象。</p><h3 id="pygame-Rect"><a href="#pygame-Rect" class="headerlink" title="pygame.Rect"></a>pygame.Rect</h3><p>Rect是用于存储矩形坐标的pygame对象。</p><p>rect对象有一些虚拟属性，比如top.left,bottom.right这些是用来固定矩形的位置的，</p><p>还有size,width,height，这些是描述矩形大小，宽高分别是多大。</p><p>center为矩形的中心点，其实就是关于横纵坐标的二元组，因此又有centerx,centery两个属性。此外，还有x，y。</p><h2 id="初次实现（铅锤下降）"><a href="#初次实现（铅锤下降）" class="headerlink" title="初次实现（铅锤下降）"></a>初次实现（铅锤下降）</h2><p>使用诸如Pygame等新工具开发程序时，应让第一个原型尽可能简单，并将重点放在学习新 工具的基本知识，而不是程序本身的细节上。这样做通常大有裨益。因此，在游戏Squish的第一 个版本中，我们只创建重16吨的铅锤从天而降的动画。制作这个动画需要的步骤如下。</p><h3 id="步骤如下："><a href="#步骤如下：" class="headerlink" title="步骤如下："></a>步骤如下：</h3><p>(1) 使用<code>pygame.init</code>、<code>pygame.display.set_mode</code>和<code>pygame.mouse.set_visible</code>初始化<code>Pygame</code>。 使用<code>pygame.display.get_surface</code>获取屏幕表面，使用方法fill以白色填充屏幕表面，再调用 <code>pygame.display.flip</code>显示所做的修改。</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">white = <span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span></span><br><span class="line">pygame.init()</span><br><span class="line">screen = pygame<span class="selector-class">.display</span><span class="selector-class">.set_mode</span>((<span class="number">500</span>,<span class="number">500</span>))</span><br><span class="line">pygame<span class="selector-class">.mouse</span><span class="selector-class">.set_visible</span>(True)</span><br><span class="line">pygame<span class="selector-class">.display</span><span class="selector-class">.get_surface</span>()</span><br><span class="line">screen.fill(white)</span><br><span class="line">pygame<span class="selector-class">.display</span><span class="selector-class">.flip</span>()</span><br></pre></td></tr></table></figure><p>(2) 加载铅锤图像。</p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">plumb</span> = pygame.image.load(<span class="string">'plumb.png'</span>)</span><br><span class="line"><span class="attr">plumb</span> = plumb.convert()  <span class="comment">#这将根据当前显示量身定制一个Surface对象，从而最大限度地提高其显示速度。</span></span><br></pre></td></tr></table></figure><p>(3) 使用这幅图像创建自定义类Weight（Sprite的子类）的一个实例。将这个对象添加到Render Updates编组sprites中。（处理多个Sprite对象时，这样做很有帮助。）</p><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">sprites = pygame.sprite.<span class="constructor">RenderUpdates()</span></span><br><span class="line">sprites.add(<span class="constructor">Weight(<span class="params">speed</span>)</span>)</span><br></pre></td></tr></table></figure><p>(4) 使用pygame.event.get获取最近发生的所有事件，并依次检查这些事件。如果发现事件QUIT 或因按下Escape键（K_ESCAPE）而触发的KEYDOWN事件，就退出程序。事件类型和键分别存储在事件对象的属性type和key中。诸如QUIT、KEYDOWN和K_ESCAPE等常量可从模块pygame.locals导入。）</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    <span class="comment"># 检查退出事件</span></span><br><span class="line">    <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">        <span class="keyword">if</span> event.type <span class="keyword">in</span> (QUIT, KEYDOWN):</span><br><span class="line">            sys.<span class="keyword">exit</span>()</span><br></pre></td></tr></table></figure><p>(5) 调用编组sprites的方法clear和update。方法clear使用回调函数来清除所有的Sprite对象 （这里是铅锤），而方法update调用Weight实例的方法update（你必须在Weight类中实现方法update）</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self, *args)</span>:</span></span><br><span class="line">        <span class="string">'''更新下一帧中的铅锤'''</span></span><br><span class="line">        self.rect.top += self.speed</span><br><span class="line">        print(self.rect.top)</span><br><span class="line">        <span class="keyword">if</span> self.rect.top &gt; screen_size[<span class="number">1</span>]:</span><br><span class="line">            print(<span class="string">'over'</span>)</span><br><span class="line">            self.reset()</span><br></pre></td></tr></table></figure><p>(6) 调用sprites.draw并将屏幕表面作为参数，以便在当前位置绘制铅锤（每次调用Weight实例 的update方法后，位置都将发生变化）。</p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">updates</span> = sprites.draw(screen)</span><br></pre></td></tr></table></figure><p>(7) 调用pygame.display.update，并将sprites.draw返回的矩形列表作为参数，只更新需要更新的部分。（如果你不在乎性能，可使用pygame.display.flip来更新整个屏幕。）</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">pygame<span class="selector-class">.display</span><span class="selector-class">.update</span>(updates)</span><br></pre></td></tr></table></figure><p>(8) 重复4-7步</p><p>完整代码如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span>  randrange</span><br><span class="line"><span class="keyword">from</span> pygame.locals <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Weight</span><span class="params">(pygame.sprite.Sprite)</span>:</span>  <span class="comment"># sprite 模块下的 Sprite</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,speed)</span>:</span></span><br><span class="line">        <span class="comment"># super().__init__(self)  # 有问题这句话</span></span><br><span class="line">        pygame.sprite.Sprite.__init__(self)</span><br><span class="line">        self.speed = speed</span><br><span class="line">        <span class="comment"># 绘制Sprite对象时要用到图像和矩形：</span></span><br><span class="line">        self.image = plumb</span><br><span class="line">        self.rect = self.image.get_rect()</span><br><span class="line">        self.reset()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reset</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''将铅锤移动到顶端的一个随机位置'''</span></span><br><span class="line">        self.rect.top = -self.rect.height</span><br><span class="line">        self.rect.centerx = randrange(screen_size[<span class="number">0</span>])</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self, *args)</span>:</span></span><br><span class="line">        <span class="string">'''更新下一帧中的铅锤'''</span></span><br><span class="line">        self.rect.top += self.speed</span><br><span class="line">        print(self.rect.top)</span><br><span class="line">        <span class="keyword">if</span> self.rect.top &gt; screen_size[<span class="number">1</span>]:</span><br><span class="line">            print(<span class="string">'over'</span>)</span><br><span class="line">            self.reset()</span><br><span class="line"></span><br><span class="line">white = (<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>)</span><br><span class="line">screen_size = (<span class="number">500</span>,<span class="number">500</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用于清除Sprite对象</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clear_callback</span><span class="params">(surf , rect)</span>:</span></span><br><span class="line">    surf.fill(white , rect)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化</span></span><br><span class="line">pygame.init()</span><br><span class="line">screen = pygame.display.set_mode(screen_size)</span><br><span class="line">pygame.mouse.set_visible(<span class="number">0</span>)</span><br><span class="line">pygame.display.get_surface()</span><br><span class="line">screen.fill(white)</span><br><span class="line">pygame.display.flip()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载铅锤图像</span></span><br><span class="line">plumb = pygame.image.load(<span class="string">'plumb.png'</span>)</span><br><span class="line">plumb = plumb.convert()  <span class="comment"># )# 以便与显示匹配</span></span><br><span class="line">print(<span class="string">'---&gt;'</span>,plumb.get_rect())  <span class="comment"># 矩形</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置速度</span></span><br><span class="line">speed = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个Sprite对象编组，并向其中添加一个Weight实例</span></span><br><span class="line">sprites = pygame.sprite.RenderUpdates()</span><br><span class="line">sprites.add(Weight(speed))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 检查退出事件</span></span><br><span class="line">    <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">        <span class="keyword">if</span> event.type == QUIT:       <span class="comment"># QUIT 在pygame.locals中</span></span><br><span class="line">            sys.exit()</span><br><span class="line">        <span class="keyword">elif</span> event.type == KEYDOWN <span class="keyword">and</span> event.type == K_ESCAPE :</span><br><span class="line">            sys.exit()</span><br><span class="line">    <span class="comment"># 清除以前的位置</span></span><br><span class="line">    sprites.clear(screen,clear_callback)</span><br><span class="line">    <span class="comment"># 更新所有的Sprite对象；</span></span><br><span class="line">    sprites.update()</span><br><span class="line">    <span class="comment"># 绘制所有的Sprite对象</span></span><br><span class="line">    updates = sprites.draw(screen)</span><br><span class="line">    <span class="comment"># 更新必要的显示部分</span></span><br><span class="line">    pygame.display.update(updates)</span><br><span class="line">    pygame.time.delay(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><h3 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h3><ul><li>所有的Sprite对象都有属性image和rect，其中前者应是一个Surface对象（图像），而后者应是一个矩形对象（只需使用self.image.get_rect()初始化它即可）。绘制Sprite对象时，将用到这两个属性。通过修改self.rect，可移动Sprite对象。</li><li>Surface对象包含方法convert，可用于创建使用不同颜色模式的副本。你无需关心细节， 只需在调用convert时不提供任何参数即可。这将根据当前显示量身定制一个Surface对 象，从而最大限度地提高其显示速度。</li><li>颜色是使用RGB元组（红绿蓝，每个值的取值范围都是0~255）指定的，因此元素(255, 255, 255)表示白色。</li><li>要修改矩形（如这里的self.rect），可设置其属性（top、bottom、left、right、topleft、 topright、bottomleft、bottomright、size、width、height、center、centerx、centery、midleft、 midright、midtop和midbottom），也可调用诸如inflate、move等方法。</li></ul><h2 id="游戏实现"><a href="#游戏实现" class="headerlink" title="游戏实现"></a>游戏实现</h2><h3 id="结果预览"><a href="#结果预览" class="headerlink" title="结果预览"></a>结果预览</h3><p><img src="/pygame学习/20190414-pygame-DIY-banana-and-plumb/%E7%95%8C%E9%9D%A2.png" alt="界面"></p><p>这是游戏界面</p><p><img src="/pygame学习/20190414-pygame-DIY-banana-and-plumb/%E6%B8%B8%E6%88%8F%E4%B8%AD.png" alt="游戏中"></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>下图是整个游戏的uml用例图。</p><p><img src="/pygame学习/20190414-pygame-DIY-banana-and-plumb/UML.jpg" alt="UML"></p><ul><li><p>状态类：(<strong>State</strong>)</p><ul><li><p>暂停状态(<strong>Paused</strong>)</p><p><strong>StartUp</strong>（显示启动图像和欢迎消息的暂停状态，后面是<strong>Info</strong>状态）；<strong>Info</strong>（显示游戏信息的暂停状态，后面紧跟第一关） ；<strong>LevelCleard</strong>（已过关的暂停状态）；<strong>GameOver</strong>（游戏已结束的状态，后面是第一关的Level状态）</p></li><li><p>进行状态:</p><p><strong>Level</strong>(游戏关卡)</p></li></ul></li><li><p><strong>Game</strong>（主事件循环）</p></li></ul><p>下图是objects.py的图。</p><p><img src="/pygame学习/20190414-pygame-DIY-banana-and-plumb/UML-objects.jpg" alt="UML-objects"></p><p>总共四个类，Sprite是pygame.sprite模块下的类，我们自定义三个类，其中，SquishSprite是Banana（香蕉）和Weight（铅锤）的父类，它加载香蕉和铅锤的图像，定义了它们的外接矩阵和活动范围。</p><h3 id="config-py"><a href="#config-py" class="headerlink" title="config.py"></a>config.py</h3><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 游戏Squish的配置文件 </span></span><br><span class="line"><span class="comment"># -----------------------------</span></span><br><span class="line"><span class="comment"># 可根据偏好随意修改配置变量 # 如果游戏的节奏太快或太慢，可尝试修改与速度相关的变量</span></span><br><span class="line"><span class="comment"># 要在这个游戏中使用其他图像，可修改这些变量：</span></span><br><span class="line"><span class="attr">banana_image</span> = <span class="string">'banana.jpg'</span></span><br><span class="line"><span class="attr">weight_image</span> = <span class="string">'plumb.jpg'</span></span><br><span class="line"><span class="attr">splash_image</span> = <span class="string">'plumb.jpg'</span></span><br><span class="line"><span class="comment"># 这些配置决定了游戏的总体外观：</span></span><br><span class="line"><span class="attr">screen_size</span> = <span class="number">800</span>, <span class="number">600</span></span><br><span class="line"><span class="attr">background_color</span> = <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>   <span class="comment"># 白色</span></span><br><span class="line"><span class="attr">margin</span> = <span class="number">30</span></span><br><span class="line"><span class="attr">full_screen</span> = <span class="number">0</span></span><br><span class="line"><span class="attr">font_size</span> = <span class="number">40</span></span><br><span class="line"><span class="comment"># 这些设置决定了游戏的行为：</span></span><br><span class="line"><span class="attr">drop_speed</span> = <span class="number">1</span></span><br><span class="line"><span class="attr">banana_speed</span> = <span class="number">10</span></span><br><span class="line"><span class="attr">speed_increase</span> = <span class="number">1</span></span><br><span class="line"><span class="attr">weights_per_level</span> = <span class="number">10</span></span><br><span class="line"><span class="attr">banana_pad_top</span> = <span class="number">4</span></span><br><span class="line"><span class="attr">banana_pad_side</span> = <span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="objects-py"><a href="#objects-py" class="headerlink" title="objects.py"></a>objects.py</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pygame,config,os</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randrange</span><br><span class="line"></span><br><span class="line"><span class="string">"""这个模块包含游戏Squish使用的游戏对象"""</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SquishSprite</span><span class="params">(pygame.sprite.Sprite)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    游戏Squish中所有精灵（sprite）的超类。构造函数加载一张图像，</span></span><br><span class="line"><span class="string">    设置精灵的外接矩形和移动范围。移动范围取决于屏幕尺寸和边距</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,imgae)</span>:</span></span><br><span class="line">        pygame.sprite.Sprite.__init__(self)</span><br><span class="line">        self.image = pygame.image.load(imgae).convert()</span><br><span class="line">        self.rect = self.image.get_rect()</span><br><span class="line">        screen = pygame.display.get_surface()</span><br><span class="line">        shrink = -config.margin * <span class="number">2</span></span><br><span class="line">        <span class="comment"># 定制活动区域</span></span><br><span class="line">        self.area = screen.get_rect().inflate(shrink, shrink)  <span class="comment"># 缩小rect对象的属性。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Weight</span><span class="params">(SquishSprite)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    从天而降的铅锤。使用SquishSprite的构造函数来设置表示铅锤的图像，</span></span><br><span class="line"><span class="string">    并以其构造函数的一个参数指定的速度下降。</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,speed)</span>:</span></span><br><span class="line">        SquishSprite.__init__(self,config.weight_image)</span><br><span class="line">        self.speed = speed</span><br><span class="line">        self.reset()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reset</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""将铅锤移到屏幕顶端（使其刚好看不到），并放在一个随机的水平位置"""</span></span><br><span class="line">        x = randrange(self.area.left, self.area.right)</span><br><span class="line">        self.rect.midbottom = x,<span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        根据据铅锤的速度垂直向下移动相应的距离。</span></span><br><span class="line"><span class="string">        同时，根据铅锤是否已到达屏幕底部相应地设置属性landed</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.rect.top += self.speed</span><br><span class="line">        self.landed = self.rect.top &gt;= self.area.bottom</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Banana</span><span class="params">(SquishSprite)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    使用SquishSprite的构造函数来设置香蕉图像，并停留</span></span><br><span class="line"><span class="string">    在屏幕底部附近，且水平位置由鼠标的当前位置决定（有一定的限制）</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        SquishSprite.__init__(self,config.banana_image)</span><br><span class="line">        self.rect.bottom = self.area.bottom</span><br><span class="line">        <span class="comment"># 这些内边距表示图像中不属于香蕉的部分</span></span><br><span class="line">        <span class="comment">#  如果铅锤进入这些区域，并不认为它砸到了香蕉</span></span><br><span class="line">        self.pad_top = config.banana_pad_top</span><br><span class="line">        self.pad_side = config.banana_pad_side</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        将香蕉中心的x坐标设置为鼠标的当前x坐标，再使用</span></span><br><span class="line"><span class="string">        矩形的方法clamp确保香蕉位于允许的移动范围内</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line"></span><br><span class="line">        self.rect.centerx = pygame.mouse.get_pos()[<span class="number">0</span>]</span><br><span class="line">        self.rect = self.rect.clamp(self.area)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">touches</span><span class="params">(self,other)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">         判断香蕉是否与另一个精灵（如铅锤）发生了碰撞。这里没有直接</span></span><br><span class="line"><span class="string">         使用矩形的方法colliderect，而是先使用矩形的方法inflat以及</span></span><br><span class="line"><span class="string">         pad_side和pad_top计算出一个新的矩形，这个矩形不包含香蕉图</span></span><br><span class="line"><span class="string">         像顶部和两边的“空白”区域</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 通过剔除内边距来计算bounds：</span></span><br><span class="line">        bounds = self.rect.inflate(- self.pad_side, -self.pad_top)</span><br><span class="line">        <span class="comment"># 将bounds移动到与香蕉底部对齐</span></span><br><span class="line">        bounds.bottom = self.rect.bottom</span><br><span class="line">        <span class="comment"># 检查bounds是否与另一个对象的rect重叠</span></span><br><span class="line">        <span class="keyword">return</span> bounds.colliderect(other.rect)</span><br></pre></td></tr></table></figure><h3 id="squish-py"><a href="#squish-py" class="headerlink" title="squish.py"></a>squish.py</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os,sys,pygame</span><br><span class="line"><span class="keyword">from</span> pygame.locals <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> objects, config</span><br><span class="line"></span><br><span class="line"><span class="string">"""本模块包含游戏Squish的主游戏逻辑"""</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">State</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    游戏状态超类，能够处理事件以及指定表明上的自己</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle</span><span class="params">(self, event)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        只处理退出事件的默认事件处理</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> event.type == QUIT:</span><br><span class="line">            sys.exit()</span><br><span class="line">        <span class="keyword">if</span> event.type == KEYDOWN <span class="keyword">and</span> event.key == K_ESCAPE:</span><br><span class="line">            sys.exit()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">first_display</span><span class="params">(self, screen)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        在首次显示状态时使用，它使用背景色填充屏</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        screen.fill(config.background_color)</span><br><span class="line">        <span class="comment"># 调用flip，将修改反映出来</span></span><br><span class="line">        pygame.display.flip()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">display</span><span class="params">(self,screen)</span>:</span></span><br><span class="line">        <span class="string">"""后续显示状态，其默认行为是什么都不做"""</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Level</span><span class="params">(State)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    游戏关卡。它计算落下了多少个铅锤，移动精灵并执行其他与游戏逻辑相关的任务</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,number = <span class="number">1</span>)</span>:</span></span><br><span class="line">        self.number = number</span><br><span class="line">        <span class="comment"># 还需要躲开多少个铅锤才能通过当前关卡？</span></span><br><span class="line">        self.remaining = config.weights_per_level</span><br><span class="line"></span><br><span class="line">        speed = config.drop_speed</span><br><span class="line">        <span class="comment"># 每过一关都将速度提高speed_increase：</span></span><br><span class="line">        speed += (self.number - <span class="number">1</span>) * config.speed_increase</span><br><span class="line">        <span class="comment"># 创建铅锤和香蕉：</span></span><br><span class="line">        self.weight = objects.Weight(speed)</span><br><span class="line">        self.banana = objects.Banana()</span><br><span class="line">        both = self.weight,self.banana <span class="comment"># 可包含更多精灵</span></span><br><span class="line">        self.sprites = pygame.sprite.RenderUpdates(both)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self, game)</span>:</span></span><br><span class="line">        <span class="string">"""更新游戏状态"""</span></span><br><span class="line">        <span class="string">"""更新所有的精灵"""</span></span><br><span class="line">        self.sprites.update()</span><br><span class="line">        <span class="comment"># 如果香蕉和铅锤发生了碰撞，就让游戏切换到GameOver状态：</span></span><br><span class="line">        <span class="keyword">if</span> self.banana.touches(self.weight):</span><br><span class="line">            game.next_state = GameOver()</span><br><span class="line">        <span class="comment"># 否则，如果铅锤已落到地上，就将其复位</span></span><br><span class="line">        <span class="comment"># 如果躲开了当前关卡内的所有铅锤，就让游戏切换到LevelCleared状态：</span></span><br><span class="line">        <span class="keyword">elif</span> self.weight.landed:</span><br><span class="line">            self.weight.reset()</span><br><span class="line">            self.remaining -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> self.remaining == <span class="number">0</span>:</span><br><span class="line">                game.next_state = LevelCleard(self.number)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">display</span><span class="params">(self,screen)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        在第一次显示（清屏）后显示状态。不同于firstDisplay，</span></span><br><span class="line"><span class="string">        这个方法调用pygame.display.update并向它传递一个需要</span></span><br><span class="line"><span class="string">        更新的矩形列表，这个列表是由self.sprites.draw提供的</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        screen.fill(config.background_color)</span><br><span class="line">        updates = self.sprites.draw(screen)</span><br><span class="line">        pygame.display.update(updates)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Paused</span><span class="params">(State)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    简单的游戏暂停状态，用户可通过按任何键盘键或单击鼠标来结束这种状态</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    finished = <span class="number">0</span> <span class="comment"># 用户结束暂停了吗？</span></span><br><span class="line">    image = <span class="literal">None</span> <span class="comment"># 如果需要显示图像，将这个属性设置为一个文件名</span></span><br><span class="line">    text = <span class="string">''</span>    <span class="comment"># 将这个属性设置为一些说明性文本</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle</span><span class="params">(self, event)</span>:</span></span><br><span class="line">        <span class="string">"""这样来处理事件：将这项任务委托给State（它只处理退出事件），</span></span><br><span class="line"><span class="string">        并对按键和鼠标单击做出响应。如果用户按下了键盘键或单击了鼠标，</span></span><br><span class="line"><span class="string">        就将self.finished设置为True</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        State.handle(self, event)</span><br><span class="line">        <span class="keyword">if</span> event.type <span class="keyword">in</span> [MOUSEBUTTONDOWN, KEYDOWN]:</span><br><span class="line">            self.finished = <span class="number">1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self, game)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">         更新关卡。如果用户按下了键盘键或单击了鼠标（即self.finished为True），</span></span><br><span class="line"><span class="string">         就让游戏切换到（由子类实现的方法）self.next_state()返回的状态</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> self.finished:</span><br><span class="line">            game.next_state = self.next_state()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">first_display</span><span class="params">(self, screen)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        在首次显示暂停状态时调用，它绘制图像（如果指定了）并渲染文本</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 首先,通过使用背景色填充屏幕来清屏:</span></span><br><span class="line">        screen.fill(config.background_color)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建一个使用默认外观和指定字号的Font对象:</span></span><br><span class="line">        font = pygame.font.SysFont(<span class="string">'隶书'</span>, config.font_size)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取self.text中的文本行，但忽略开头和末尾的空行：</span></span><br><span class="line">        lines = self.text.strip().splitlines()</span><br><span class="line"></span><br><span class="line">        <span class="comment">#  使用font.get_linesize()获取每行文本的高度，并计算文本的总高度：</span></span><br><span class="line">        height = len(lines) * font.get_linesize()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 计算文本的位置（屏幕上居中）</span></span><br><span class="line">        center, top = screen.get_rect().center</span><br><span class="line">        top -= height // <span class="number">2</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果有图像要显示：</span></span><br><span class="line">        <span class="keyword">if</span> self.image:</span><br><span class="line">            <span class="comment"># 加载该图像：</span></span><br><span class="line">            image = pygame.image.load(self.image).convert()</span><br><span class="line">            <span class="comment"># 获取其rect</span></span><br><span class="line">            r = image.get_rect()</span><br><span class="line">            <span class="comment"># 将文本下移图像高度一半的距离</span></span><br><span class="line">            top += r.height // <span class="number">2</span></span><br><span class="line">            <span class="comment"># 将图像放在文本上方20像素处</span></span><br><span class="line">            r.midbottom = center, top<span class="number">-20</span></span><br><span class="line">            <span class="comment"># 将图像传输到屏幕上</span></span><br><span class="line">            screen.blit(image, r)</span><br><span class="line">        antialia = <span class="number">1</span> <span class="comment"># 消除文本的锯齿</span></span><br><span class="line">        black = <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 从计算得到的top处开始渲染所有的文本行，</span></span><br><span class="line">        <span class="comment"># 每渲染一行都向下移动font.get_linesize()像素</span></span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">            text = font.render(line.strip(),antialia, black)</span><br><span class="line">            r = text.get_rect()</span><br><span class="line">            r.midtop = center, top</span><br><span class="line">            screen.blit(text, r)</span><br><span class="line">            top += font.get_linesize()</span><br><span class="line">        <span class="comment"># 显示所做的所有修改</span></span><br><span class="line">        pygame.display.flip()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Info</span><span class="params">(Paused)</span>:</span></span><br><span class="line">    <span class="string">"""显示一些游戏信息的简单暂停状态，紧跟在这个状态后面的是Level状态（第一关） """</span></span><br><span class="line">    next_state = Level</span><br><span class="line">    text = <span class="string">'''</span></span><br><span class="line"><span class="string">    我是一个香蕉，</span></span><br><span class="line"><span class="string">    尽力躲避铅锤吧！</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StartUp</span><span class="params">(Paused)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    显示启动图像和欢迎消息的暂停状态，紧跟在它后面的是Info状态</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    next_state = Info</span><br><span class="line">    image = config.splash_image</span><br><span class="line">    text = <span class="string">"""</span></span><br><span class="line"><span class="string">    小香蕉躲铅锤!</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LevelCleard</span><span class="params">(Paused)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    指出用户已过关的暂停状态，紧跟在它后面的是表示下一关的Level状态</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,number)</span>:</span></span><br><span class="line">        self.number = number</span><br><span class="line">        self.text = <span class="string">f"""通关第<span class="subst">&#123;self.number&#125;</span>关，</span></span><br><span class="line"><span class="string">        单击继续！</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">next_state</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> Level(self.number + <span class="number">1</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GameOver</span><span class="params">(Paused)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    指出游戏已结束的状态，紧跟在它后面的是表示第一关的Level状态</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    next_state = Level</span><br><span class="line">    text = <span class="string">"""</span></span><br><span class="line"><span class="string">    游戏结束</span></span><br><span class="line"><span class="string">    单击重新开始，Esc退出</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    负责主事件循环（包括在不同游戏状态之间切换）的游戏对象</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,  *args)</span>:</span></span><br><span class="line">        <span class="comment"># 获取游戏和图像所在的目录：</span></span><br><span class="line">        path = os.path.abspath(args[<span class="number">0</span>])</span><br><span class="line">        dir = os.path.split(path)[<span class="number">0</span>]</span><br><span class="line">        <span class="comment"># 切换到这个目录，以便以后能打开图像文件</span></span><br><span class="line">        os.chdir(dir)</span><br><span class="line">        <span class="comment"># 最初不处于任何状态</span></span><br><span class="line">        self.state = <span class="literal">None</span></span><br><span class="line">        <span class="comment"># 在第一次事件循环迭代中切换到StartUp状态</span></span><br><span class="line">        self.next_state = StartUp()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">         这个方法设置一些变量。它执行一些重要的初始化任务，并进入主事件循环</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 初始化所有的Pygame模块</span></span><br><span class="line">        pygame.init()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 决定在窗口还是整个屏幕中显示游戏</span></span><br><span class="line">        flag = <span class="number">0</span>    <span class="comment"># 默认在窗口中显示游戏</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> config.full_screen:</span><br><span class="line">            flag = FULLSCREEN <span class="comment"># 全屏模式</span></span><br><span class="line">        screen_size = config.screen_size</span><br><span class="line">        screen = pygame.display.set_mode(screen_size, flag)</span><br><span class="line"></span><br><span class="line">        pygame.display.set_caption(<span class="string">'香蕉的自救'</span>)</span><br><span class="line">        pygame.mouse.set_visible(<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 主事件循环</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="comment">#  (1)如果nextState被修改，就切换到修改后的状态并显示它（首次）：</span></span><br><span class="line">            <span class="keyword">if</span> self.state != self.next_state:</span><br><span class="line">                self.state = self.next_state</span><br><span class="line">                self.state.first_display(screen)</span><br><span class="line">            <span class="comment"># (2)将事件处理工作委托给当前状态：</span></span><br><span class="line">            <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">                self.state.handle(event)</span><br><span class="line">            <span class="comment"># (3)更新当前状态：</span></span><br><span class="line">            self.state.update(self)</span><br><span class="line">            <span class="comment"># (4)显示当前状态：</span></span><br><span class="line">            self.state.display(screen)</span><br><span class="line">            pygame.time.delay(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    game = Game(*sys.argv)</span><br><span class="line">    game.run()</span><br></pre></td></tr></table></figure><h3 id="出现的问题"><a href="#出现的问题" class="headerlink" title="出现的问题"></a>出现的问题</h3><h4 id="只显示铅锤，香蕉并没有显示"><a href="#只显示铅锤，香蕉并没有显示" class="headerlink" title="只显示铅锤，香蕉并没有显示"></a>只显示铅锤，香蕉并没有显示</h4><p>是因为，精灵的活动范围设置的超过了屏幕的尺寸，而且，香蕉是在底部，就造成它没有显示的现象。</p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">self.area</span> = screen.get_rect().inflate(shrink, shrink)  <span class="comment"># 缩小rect对象的属性。</span></span><br><span class="line"><span class="comment"># 确保：shrink 是一个负数，如果是整数就是放大。</span></span><br></pre></td></tr></table></figure><h4 id="pygame中文乱码问题解决"><a href="#pygame中文乱码问题解决" class="headerlink" title="pygame中文乱码问题解决"></a>pygame中文乱码问题解决</h4><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打印系统支持的字体</span></span><br><span class="line"><span class="builtin-name">print</span>(pygame.font.get_fonts())</span><br><span class="line"><span class="attribute">font</span>=pygame.font.SysFont('隶书',40)</span><br></pre></td></tr></table></figure><hr>]]></content>
      <categories>
        <category>pygame学习</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>python</tag>
        <tag>pygame</tag>
      </tags>
  </entry>
  <entry>
    <title>Python中的反射</title>
    <url>/learn-python/20190412-python-reflection.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>首先介绍什么是反射，然后是反射的四大方法，这其中我们最常用的是hasattr,getattr；然后从四个角度来演示如何使用反射，最后是总结。</p></blockquote><a id="more"></a><h2 id="什么是反射"><a href="#什么是反射" class="headerlink" title="什么是反射"></a>什么是反射</h2><p>通过字符串去操作一个对象</p><ul><li>字符串：字符串类型</li><li>对象：实例，类，当前文件（模块），其它模块</li></ul><h2 id="四大方法"><a href="#四大方法" class="headerlink" title="四大方法"></a>四大方法</h2><h3 id="hasattr-object-name"><a href="#hasattr-object-name" class="headerlink" title="hasattr(object, name)"></a>hasattr(object, name)</h3><p>参数是一个对象和一个字符串。如果字符串是对象属性之一的名称，返回True，否则返回False 。（查）</p><p>（这 是 通 过 调 用 并 观 察 它 是 否 引 发 一 个 实 现 的 。 ）</p><h3 id="getattr-object-name-default"><a href="#getattr-object-name-default" class="headerlink" title="getattr(object, name [, default ])"></a>getattr(object, name [, default ])</h3><p>返回对象(object)的指定属性的值。 名称(name)必须是字符串。如果字符串是对象属性之一的名称，则结 果是该属性的值。如果指定的属性不存在，则返回默认值（default）， 否则返回异常。（拿来使用）</p><h3 id="setattr-object-name-value"><a href="#setattr-object-name-value" class="headerlink" title="setattr(object, name, value)"></a>setattr(object, name, value)</h3><p>它与getattr()方法相对应。参数是一个对象(object)，一个字符串(name)和一个任意值(value)。该字符串可以命名现有的属性或新的属性。如果该对象允许，该函数将该值分配给该属性。（修改/增加）</p><h3 id="delattr-object-name"><a href="#delattr-object-name" class="headerlink" title="delattr(object, name)"></a>delattr(object, name)</h3><p>它与setattr()方法相关，参数是一个对象(object)和一个字符串(name),该字符串必须是对象属性/方法的名字，然后这个函数会删除以name命名的属性。</p><h2 id="四个角度"><a href="#四个角度" class="headerlink" title="四个角度"></a>四个角度</h2><h3 id="从实例的角度研究反射"><a href="#从实例的角度研究反射" class="headerlink" title="从实例的角度研究反射"></a>从实例的角度研究反射</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    static_field = <span class="string">'静态属性'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,age)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">f'in A func'</span>)</span><br><span class="line"></span><br><span class="line">obj = A(<span class="string">'小黑'</span>,<span class="number">18</span>)</span><br><span class="line">print(obj.name)</span><br><span class="line"><span class="comment"># 类属性的增删查改</span></span><br><span class="line">print(hasattr(obj,<span class="string">'name'</span>))</span><br><span class="line">print(getattr(obj,<span class="string">'name'</span>,<span class="literal">None</span>))</span><br><span class="line">print(getattr(obj,<span class="string">'name1'</span>,<span class="literal">None</span>))</span><br><span class="line"><span class="comment"># 给对象封装属性</span></span><br><span class="line">setattr(obj,<span class="string">'hobby'</span>,<span class="string">'玩'</span>)</span><br><span class="line">print(getattr(obj,<span class="string">'hobby'</span>,<span class="literal">None</span>))</span><br><span class="line"><span class="comment"># 删除对象的某个属性</span></span><br><span class="line">delattr(obj,<span class="string">'name'</span>)</span><br><span class="line">print(hasattr(obj,<span class="string">'name'</span>))</span><br><span class="line"><span class="comment"># 查看静态属性</span></span><br><span class="line"><span class="keyword">if</span> hasattr(obj,<span class="string">'static_field'</span>):</span><br><span class="line">    print(getattr(obj,<span class="string">'static_field'</span>))</span><br><span class="line"><span class="comment"># 调用方法</span></span><br><span class="line"><span class="keyword">if</span> hasattr(obj,<span class="string">'func'</span>):</span><br><span class="line">    print(getattr(obj,<span class="string">'func'</span>))</span><br><span class="line">    getattr(obj,<span class="string">'func'</span>)()</span><br></pre></td></tr></table></figure><h3 id="从类的角度研究反射"><a href="#从类的角度研究反射" class="headerlink" title="从类的角度研究反射"></a>从类的角度研究反射</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    static_field = <span class="string">'静态属性'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>,name,age)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>.name = name</span><br><span class="line">        <span class="keyword">self</span>.age = age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        print(f<span class="string">'in A func'</span>)</span><br><span class="line"></span><br><span class="line">print(hasattr(A,<span class="string">'static_field'</span>))</span><br><span class="line">print(getattr(A,<span class="string">'static_field'</span>))</span><br><span class="line">print(getattr(A,<span class="string">'func'</span>))</span><br><span class="line">obj = A(<span class="string">'小黑'</span>,<span class="number">18</span>)</span><br><span class="line">getattr(A,<span class="string">'func'</span>)(obj)</span><br></pre></td></tr></table></figure><h3 id="从当前脚本研究反射"><a href="#从当前脚本研究反射" class="headerlink" title="从当前脚本研究反射"></a>从当前脚本研究反射</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'in func1'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func2</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'in func2'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func3</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'in func3'</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span></span><br><span class="line">    static = <span class="string">'静态'</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(sys.modules)  					<span class="comment"># 字典</span></span><br><span class="line">print(sys.modules[__name__])  			<span class="comment"># 当前模块这个对象(module)  </span></span><br><span class="line">print(__name__)   <span class="comment"># __main__</span></span><br><span class="line">this_modules = sys.modules[__name__]	<span class="comment"># 从这个字典中获取模块这个对象</span></span><br><span class="line">print(hasattr(this_modules,<span class="string">'func1'</span>))</span><br><span class="line">getattr(this_modules,<span class="string">'func1'</span>)()</span><br><span class="line">cls = getattr(this_modules,<span class="string">'B'</span>)</span><br><span class="line">obj = cls()</span><br><span class="line">print(obj.static)</span><br></pre></td></tr></table></figure><ul><li>sys.modules是一个字典，它的键是模块名，值是对象。</li><li><code>__name__</code>这个变量引用的是当前的模块名.(以脚本运行时值为 <code>__main__</code>)</li></ul><h3 id="在其它模块研究反射"><a href="#在其它模块研究反射" class="headerlink" title="在其它模块研究反射"></a>在其它模块研究反射</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">other_modules.py</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'in func'</span>)</span><br><span class="line"></span><br><span class="line">本模块</span><br><span class="line"><span class="keyword">import</span> other_modules <span class="keyword">as</span> om</span><br><span class="line">getattr(om,<span class="string">'func'</span>)()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python学习</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python异常处理</title>
    <url>/learn-python/20190411-python-Exception-handling.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>异常事件可能是错误，也可能是通常不会发生的事情。为了处理这些异常事件，我们曾今的做法是在发生这些事件的地方都使用条件语句。例如，我们希望用户输入的全是数字，所以需要对用户输入的字符进行检测，因为有不输入数字的可能存在。当我们判断的条件更加苛刻后，判断的层数也将增加，这样做不仅效率低下、缺乏灵活性，还可能导致程序难以卒读。所以我们需要一种新的替代方案——异常处理机制。</p></blockquote><a id="more"></a><h2 id="异常是什么？"><a href="#异常是什么？" class="headerlink" title="异常是什么？"></a>异常是什么？</h2><p>Python使用<strong>异常对象</strong>来表示异常状态，并在遇到错误时引发异常。异常对象未被处理（或捕获）时，程序将终止并显示一条错误消息（traceback）</p><blockquote><p>Traceback (most recent call last):<br>File “xxx.py”, line 84, in<module><br>int(‘E’)<br>ValueError: invalid literal for int() with base 10: ‘E’</module></p></blockquote><p>我们查看ValueError这个类，发现这个类继承于Exception，继续探索，发现所有的错误都是由BaseException派生的。</p><p><img src="/learn-python/20190411-python-Exception-handling/BaseException.png" alt="BaseException"></p><p>接下来我们要用各种方式引发和捕获这些实例，从而逮住错误并采取措施，并不是让整个程序失败。</p><p>我们平常遇到的错误可以分为：</p><ul><li><p>语法错误</p></li><li><p>如缩进，等不该犯的错误（这部分是我们去避免的）</p></li><li><p>逻辑错误</p><ul><li>这是异常处理所做的。</li></ul></li></ul><h2 id="让事情沿你指定的轨道出错"><a href="#让事情沿你指定的轨道出错" class="headerlink" title="让事情沿你指定的轨道出错"></a>让事情沿你指定的轨道出错</h2><p>出现错误时，会引发异常，先来看看如何自主的引发异常，创建异常，然后是学习如何处理这些异常。</p><h3 id="raise语句"><a href="#raise语句" class="headerlink" title="raise语句"></a>raise语句</h3><p>主动抛出异常：可以使用raise语句，并将一个类（必须是Exception的子类）或实例作为参数。将类作为参数是，将自动创建一个实例。下面的示例使用的是内置异常类Exception：</p><p><code>raise Exception(&#39;xxxError&#39;)</code></p><blockquote><p>Traceback (most recent call last):<br>File “xxx.py”, line 87, in<module><br>raise Exception(‘xxxError’)<br>Exception: xxxError</module></p></blockquote><h3 id="自定义的异常类"><a href="#自定义的异常类" class="headerlink" title="自定义的异常类"></a>自定义的异常类</h3><p>有时你想自己创建异常类，该怎么做呢？？就像创建其他类一样，但务必直接或间接地继承Exception（这意味着从任何内置异常类派生都可以）。</p><p>下面的示例是自定义的一个ConnectionError，</p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConnectionError</span>(<span class="title">BaseException</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>,msg)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>.msg = msg</span><br><span class="line">    </span><br><span class="line">raise  ConnectionError(<span class="string">'触发了连接异常'</span>)</span><br></pre></td></tr></table></figure><h2 id="捕获异常"><a href="#捕获异常" class="headerlink" title="捕获异常"></a>捕获异常</h2><p>当我们明白了异常是怎么产生后，了解了解如何处理异常（通常称之为捕获异常）。如下面这个例子是一个最简单的异常处理，这里面包含两个错误，一个是IndexError，一个是KeyError。</p><h4 id="单分支（一个except）"><a href="#单分支（一个except）" class="headerlink" title="单分支（一个except）"></a>单分支（一个except）</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    l1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">    print(l1[<span class="number">100</span>])  <span class="comment"># 出错了下面就不执行了</span></span><br><span class="line">    </span><br><span class="line">    dic = &#123;<span class="number">1</span>:<span class="string">'a'</span>&#125;</span><br><span class="line">    print(dic[<span class="number">3</span>])    </span><br><span class="line"><span class="keyword">except</span> IndexError:</span><br><span class="line">    print(<span class="string">'处理了索引错误'</span>)</span><br></pre></td></tr></table></figure><p><strong>try语句中出现一个异常后，后面的语句不会执行，从而捕获except处开始执行。</strong></p><h3 id="多分支（多个except）"><a href="#多分支（多个except）" class="headerlink" title="多分支（多个except）"></a>多分支（多个except）</h3><p>如果你运行的这一节程序有多种错误的可能时，使用except 。如下面例子，假设dic字典里，键是用户输入的选项，字典的值对应的是菜单，那对于输入可能产生多种错误，所以使用多分支（多个except子句）进行分流。</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">dic = &#123;</span><br><span class="line">    <span class="number">1</span>:<span class="number">666</span>,</span><br><span class="line">    <span class="number">2</span>:<span class="number">333</span>,</span><br><span class="line">    <span class="number">3</span>:<span class="number">555</span>,</span><br><span class="line">&#125;    # 对应三个函数名</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">num</span> = input(<span class="string">'请输入序号'</span>)</span><br><span class="line">        <span class="built_in">int</span>(<span class="built_in">num</span>)</span><br><span class="line">        <span class="built_in">print</span>(dic[<span class="built_in">int</span>(<span class="built_in">num</span>)])</span><br><span class="line">    except KeyError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'选项超出范围，请重新输入'</span>)</span><br><span class="line">    except ValueError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'只能输入数字'</span>)</span><br></pre></td></tr></table></figure><h3 id="单分支捕获多种异常（使用元组）"><a href="#单分支捕获多种异常（使用元组）" class="headerlink" title="单分支捕获多种异常（使用元组）"></a>单分支捕获多种异常（使用元组）</h3><p>如果要是一个except子句捕获多种异常，可在一个元组中指定这些异常，如下所示</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">dic = &#123;</span><br><span class="line">    <span class="number">1</span>:<span class="number">666</span>,</span><br><span class="line">    <span class="number">2</span>:<span class="number">333</span>,</span><br><span class="line">    <span class="number">3</span>:<span class="number">555</span>,</span><br><span class="line">&#125;    # 对应三个函数名</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">num</span> = input(<span class="string">'请输入序号'</span>)</span><br><span class="line">        <span class="built_in">int</span>(<span class="built_in">num</span>)</span><br><span class="line">        <span class="built_in">print</span>(dic[<span class="built_in">int</span>(<span class="built_in">num</span>)])</span><br><span class="line">    except (KeyError,ValueError,Exception) <span class="keyword">as</span> e :</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'出现问题了'</span>)</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br></pre></td></tr></table></figure><h3 id="万能异常"><a href="#万能异常" class="headerlink" title="万能异常"></a>万能异常</h3><p>当except语句中不指定任何异常类，它可以捕获所有异常，但这种行为很危险，因为这不仅会隐藏你有心理准备的错误，还会隐藏你没有考虑过的错误。</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">dic = &#123;</span><br><span class="line">    <span class="number">1</span>:<span class="number">666</span>,</span><br><span class="line">    <span class="number">2</span>:<span class="number">333</span>,</span><br><span class="line">    <span class="number">3</span>:<span class="number">555</span>,</span><br><span class="line">&#125;    # 对应三个函数名</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        num = input(<span class="string">'请输入序号'</span>)</span><br><span class="line">        <span class="built_in">int</span>(num)</span><br><span class="line">        print(dic[<span class="built_in">int</span>(num)])</span><br><span class="line">    except :</span><br><span class="line">        print(<span class="string">'出现问题了'</span>)</span><br></pre></td></tr></table></figure><p>更多情况我们使用<code>except Exception as e</code>来对异常对象进行检查，因为上面将会让不是从Exception派生而来的异常成为漏网之鱼，其中包括SystemExit和 KeyboardInterrupt（ctrl + c），因为它们是从BaseException（Exception的超类）派生而来的。</p><h3 id="else"><a href="#else" class="headerlink" title="else"></a>else</h3><p>如果无异常执行else语句，否则不执行else语句。如下面这个例子，只有当我们输入正确计算出结果才能中止循坏。（else不能单独与try使用，必须是try,except,else）</p><figure class="highlight isbl"><table><tr><td class="code"><pre><span class="line"><span class="variable"><span class="keyword">while</span></span> <span class="variable"><span class="literal">True</span></span>:</span><br><span class="line">    <span class="variable"><span class="keyword">try</span></span>:</span><br><span class="line">        <span class="variable">x</span> = <span class="function"><span class="title">int</span>(<span class="title">input</span>(<span class="string">'请输入一个数字：'</span>))</span></span><br><span class="line">        <span class="variable">y</span> = <span class="function"><span class="title">int</span>(<span class="title">input</span>(<span class="string">'请输入一个数字：'</span>))</span></span><br><span class="line">        <span class="function"><span class="title">print</span>(<span class="variable">x</span>/<span class="variable">y</span>)</span></span><br><span class="line">    <span class="variable"><span class="keyword">except</span></span> <span class="variable">Exception</span> <span class="variable">as</span> <span class="variable">e</span>:</span><br><span class="line">        <span class="function"><span class="title">print</span>(<span class="string">'输入有误，请重新尝试'</span>)</span></span><br><span class="line">    <span class="variable"><span class="keyword">else</span></span>:</span><br><span class="line">        <span class="variable">break</span></span><br></pre></td></tr></table></figure><h3 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h3><p>用于在发生异常时执行清理工作。这个子句是与try子句配套的。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="literal">None</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    x = <span class="number">1</span>/ <span class="number">0</span></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    print(<span class="string">'清理工作'</span>)</span><br><span class="line">    <span class="keyword">del</span> x</span><br></pre></td></tr></table></figure><p>在上述示例中，不管try子句中发生什么异常，都将执行finally子句。为何在try子句之前初始化x呢？因为如果不这样做，ZeroDivisionError将导致根本没有机会给它赋值，进而导致在 finally子句中对其执行del时引发未捕获的异常。</p><p>虽然使用del来删除变量是相当愚蠢的清理措施，但finally子句非常适合用于<strong>确保文件或网络套接字等得以关闭</strong>。</p><h2 id="异常和函数"><a href="#异常和函数" class="headerlink" title="异常和函数"></a>异常和函数</h2><p>异常和函数有着天然的联系。如果不处理函数中引发的异常，它将向上传播到调用函数的地 方。如果在那里也未得到处理，异常将继续传播，直至到达主程序（全局作用域）。</p><p><img src="/learn-python/20190411-python-Exception-handling/%E5%BC%82%E5%B8%B8%E4%BC%9A%E8%BF%9B%E8%A1%8C%E4%BC%A0%E9%80%92.png" alt="异常会进行传递"></p><p>上面示例中，在调用的时候，首先引发一个异常，然后由handle_exception函数中的try/except语句处理。</p><h2 id="异常之禅"><a href="#异常之禅" class="headerlink" title="异常之禅"></a>异常之禅</h2><p>有时候，可使用条件语句来达成异常处理实现的目标，但这样编写出来的代码可能不那么自 然，可读性也没那么高。另一方面，有些任务使用if/else完成时看似很自然，但实际上使用 try/except来完成要好得多。</p><p>异常处理并不是很复杂。如果你知道代码可能引发某种异常，且不希望出现这种异常时程序终止并显示栈跟踪消息，可添加必要的try/except或try/finally语句（或结合使用）来处理它。</p><h2 id="不那么异常的情况"><a href="#不那么异常的情况" class="headerlink" title="不那么异常的情况"></a>不那么异常的情况</h2><p>运行程序时，除了异常信息，我们还可能看到一些warning信息。如果你只想发出警告，指出情况偏离了正轨，可使用模块warnings中的函数warn。</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">from</span> warnings import <span class="literal">warn</span></span><br><span class="line"><span class="literal">warn</span>(<span class="string">'这里要注意以下'</span>)</span><br></pre></td></tr></table></figure><p>只会显示一下警告，其它什么事情都不会发生。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li><p><strong>异常对象</strong>：异常情况（如发生错误）是用异常对象表示的。对于异常情况，有多种处理方式；如果忽略，将导致程序终止。 所有异常都是由BaseException产生的。</p></li><li><p><strong>引发异常</strong>：可使用raise语句来引发异常。它将一个异常类或异常实例作为参数，但你也可提供两个参数（异常和错误消息）。如果在except子句中调用raise时没有提供任何参数， 它将重新引发该子句捕获的异常。</p></li><li><p><strong>自定义的异常类</strong>：你可通过从Exception派生来创建自定义的异常。</p></li><li><p><strong>捕获异常</strong>：单分支，多分支，等等。</p></li><li><p><strong>else子句</strong>：在主try块没有引发异常时执行。</p></li><li><p><strong>finally</strong>：要确保代码块（如清理代码）无论是否引发异常都将执行，可使用try/finally， 并将代码块放在finally子句中。</p></li><li><p><strong>异常和函数</strong>：在函数中引发异常时，异常将传播到调用函数的地方</p></li><li><p><strong>警告</strong>：：警告类似于异常，但（通常）只打印一条错误消息。</p></li><li><p>不要在try else里写返回值。如果没有finally，就写在最后，或者只写在finally里。</p></li><li><p>try except else里都是<strong>做某事</strong> 而不是处理返回。</p></li><li><p><strong>优点</strong>：增强程序的健壮性与容错性</p></li><li><p><strong>异常处理不能经常使用</strong>：异常处理耗费性能，有些错误是需要进行分流使用，代码可读性变差。我们要在关键的节点使用，如对输入信息进行处理。</p></li></ul>]]></content>
      <categories>
        <category>python学习</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python之面向对象</title>
    <url>/learn-python/20190410-python-OOP.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>文章第一部分介绍了什么对象，对象有什么优点（多态，封装，继承）以及什么时候要使用对象；第二部分从类的结构入手，说明它的语法规则；第三部分介绍了类与对象的名称空间；第四部分介绍类与类之间的关系；第五部分再次谈到继承涉及多继承的顺序、抽象类等规范化开发；第六部分谈谈类中的双下划线方法和用到的一些内置函数；最后一部分是对概念，面向对象设计的总结。本文参考了《Python基础教程》《Python核心编程》。</p></blockquote><a id="more"></a><h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><p>创建自定义对象（尤其是对象类型或类）是一个Python核心概念，这个概念非常重要，以至于Python与Smalltalk、C++、Java等众多语言一样，被视为一种面向对象的语言。</p><h2 id="对象魔法"><a href="#对象魔法" class="headerlink" title="对象魔法"></a>对象魔法</h2><ul><li>在面向对象编程中，术语<strong>对象</strong>大致意味着一系列<strong>数据（属性）</strong>以及一套访问和操作这些数据的<strong>方法</strong>。</li><li>使用对象的最重要的好处。：<ol><li>多态：可对<strong>不同类型的对象执行相同</strong>的操作，而这些操作就像“被施了魔法”一样能够正常运行。</li><li>封装：<strong>对外部隐藏</strong>有关对象工作原理的细节。</li><li>继承：可基于通用类创建出专用类。</li></ol></li></ul><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><ul><li><p>术语多态（polymorphism）源自希腊语，意思是“有多种形态”。这大致意味着即便你不知道变量指向的是哪种对象，也能够对其执行操作，且操作的行为将随对象所属的类型（类）而异。</p></li><li><p>例子：假设你要为一个销售食品的电子商务网站创建在线支付系统，程序将接收来自系统另一部分（或之后设计的类似系统）的购物车。因此你只需计算总价并从信用卡扣除费用即可。</p><p>​ 你首先想到的可能是，指定程序收到商品时必须如何表示。例如，你可能要求用元组表示收到的商品，如下所示：</p><p><code>(&#39;SPAM&#39;, 2.50)</code></p><p>​ 但当价格可能存在一个变动的时候（打折），简单的元组就不够用了，再来一个神奇的网络方法吧，它可以得到变动后的价格。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 不要像下面这样做： </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_price</span><span class="params">(object)</span>:</span>  </span><br><span class="line">    <span class="keyword">if</span> isinstance(object, tuple):     </span><br><span class="line">		<span class="keyword">return</span> object[<span class="number">1</span>]    </span><br><span class="line">	<span class="keyword">else</span>:  </span><br><span class="line">		<span class="keyword">return</span> magic_network_method(object)</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>注意：这里使用<code>isinstance</code>来执行类型/类检查旨在说明：使用类型检查通常是馊主意，应尽可能避免。</p><p>补充：①要破坏多态，唯一的办法是使用诸如type、issubclass、isinstance等函数显式地执行类型检查，但你应尽可能避免以这种方式破坏多态。我们的<strong>目标</strong>是：<u>对象按你希望的那样行事，而非它是否是正确的类型（类）</u>。</p><p>​ ②这里讨论的多态形式是Python编程方式的核心，有时称为<strong>鸭子类型</strong>。这个术语源自如下说法：“<u>如果走起来像鸭子，叫起来像鸭子，那么它就是鸭子。</u>”</p></blockquote><blockquote><p>鸭子类型：<u>所有的类型制定了规范</u>（如不同的类有相同的方法名，如len方法的本质，含有 <code>__len__</code>方法的类，这样我们使用len(对象)就可以得到不同类型对象的长度）。</p><p>（另一种多态是从继承表现出来的）</p></blockquote><p>​ 前面的代码使用函数<code>isinstance</code>来检查object是否是元组。如果是，就返回其第二个元素， 否则调用一个神奇的网络方法。</p><p>​ 如果网络方法已就绪，问题就暂时解决了。但这种解决方案还是不太灵活。如果有位程序员很聪明，决定用十六进制的字符串表示价格，并将其存储在字典的’price’键下呢？没问题，你<u>只需更新相应的函数</u>。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 不要像下面这样做： </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_price</span><span class="params">(object)</span>:</span>  </span><br><span class="line">	<span class="keyword">if</span> isinstance(object, tuple):     </span><br><span class="line">		<span class="keyword">return</span> object[<span class="number">1</span>]    </span><br><span class="line">	<span class="keyword">elif</span> isinstance(object, dict):     </span><br><span class="line"><span class="keyword">return</span> int(object[<span class="string">'price'</span>])    </span><br><span class="line">	<span class="keyword">else</span>:  </span><br><span class="line"><span class="keyword">return</span> magic_network_method(object)</span><br></pre></td></tr></table></figure><p>​ 你确定现在考虑到了所有的可能性吗？①平时的想法就是那我就继续增加分支呗。</p><p>​ 假设有人决定添加一种新字典，并在其中将价格存储在另一个键下，你该如何办呢？当然，可再次更新get_price，每当有人以不同的方式实现对象时，②你都需要重新实现你的模块。</p><ul><li><p><strong>小结</strong>：面向过程处理这种情况需要：</p><p>① 当有新的类型的数据时可以增加分支</p><p>② 当这个类型的数据发生变化时，更改原来对于这个类型数据的处理方法（get_price）</p></li><li><p><strong>解决方法</strong>：让对象自己去处理这种操作，每种新对象都能够获取或计算其价格并返回结果，而你只需向它们询问价格即可。这正是多态（从某种程度上说还有封装）的用武之地。</p></li></ul><h2 id="多态和方法"><a href="#多态和方法" class="headerlink" title="多态和方法"></a>多态和方法</h2><ul><li><p>你收到一个对象，却根本不知道它是如何实现的——它可能是众多“形态”中的任何一种。 你只知道可以询问其价格，但这就够了。至于询问价格的方式，你应该很熟悉。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">object.get_price()</span><br></pre></td></tr></table></figure><p>像这样<u>与对象属性相关联的函数称为方法</u>。</p></li><li><p>抛开这个例子回顾以前，我们以前也见到很多多态的例子：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'abc'</span>.count(<span class="string">'a'</span>) </span><br><span class="line"><span class="number">1</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">1</span>, <span class="number">2</span>, <span class="string">'a'</span>].count(<span class="string">'a'</span>) </span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>​ 如果有一个变量x，你无需知道它是字符串还是列表就能调用方法count：只要你向这个方法提供一个字符作为参数，它就能正常运行。</p></li><li><p>多态形式多样 （处处皆多态）</p><p>每当无需知道对象是什么样的就能对其执行操作时，都是多态在起作用。这不仅仅适用于<u>方法</u>，我们还通过<u>内置运算符和函数</u>大量使用了多态。请看下面的代码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span> + <span class="number">2</span> </span><br><span class="line"><span class="number">3</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'Fish'</span> + <span class="string">'license'</span> </span><br><span class="line"><span class="string">'Fishlicense'</span></span><br></pre></td></tr></table></figure><p>上述代码表明，加法运算符（+）既可用于数（这里是整数），也可用于字符串（以及其他类 型的序列）。 本质上是因为再int类，str类中定义了<code>__add__</code>方法。</p><p>​ 我们通常定义的函数：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span>     </span><br><span class="line">	<span class="keyword">return</span> x + y </span><br><span class="line"><span class="comment"># 当然这里有一个小细节就是x和y应该是相同的类。如 1 + '1'就会报错</span></span><br></pre></td></tr></table></figure><p>​ 这也许有点傻，但重点在于参数可以是<u>任何支持加法的对象</u>。很多函数和运算符都是多态的，你编写的大多数函数也可能如此，即便你不是有意为之。每当你使用多态的函数和运算符时，多态都将发挥作用，这也体现了<strong>处处是多态</strong>。</p></li><li><p>小结：</p><ul><li>以上讨论的多态形式是Python编程方式的核心，有时称为鸭子类型。为了遵守某种规则/协议，我们定义了xx方法。</li><li>多态让你<u>无需知道对象所属的类（对象的类型）就能调用其方法</u>，这也是我们在面向对象思考的一个套路。</li></ul></li></ul><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><ul><li><p><strong>封装（encapsulation）</strong>指的是向外部隐藏不必要的细节。这听起来有点像多态（无需知道对象的内部细节就可使用它）。这两个概念很像，因为它们都是<strong>抽象的原则</strong>。它们都像函数一样， 可帮助你处理程序的组成部分，让你无需关心不必要的细节。</p><p>​ 但封装不同于多态。多态让你无需知道对象所属的类（对象的类型）就能调用其方法，而封装让你无需知道对象的构造就能使用它。听起来还是有点像？下面来看一个使用了多态但没有使用封装的示例。假设你有一个名为OpenObject的类</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>o = OpenObject() <span class="comment"># 对象就是这样创建的 </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>o.set_name(<span class="string">'Sir Lancelot'</span>) </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>o.get_name() </span><br><span class="line"><span class="string">'Sir Lancelot'</span></span><br></pre></td></tr></table></figure><p>​ 你（通过像调用函数一样调用类）创建一个对象，并将其关联到变量o，然后就可以使用方法set_name和get_name了（假设OpenObject支持这些方法）。一切都看起来完美无缺。然而，如果 o将其名称存储在全局变量global_name中呢？</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>global_name </span><br><span class="line"><span class="string">'Sir Lancelot'</span></span><br></pre></td></tr></table></figure><p>​ 这意味着使用OpenObject类的实例（对象）时，你需要考虑global_name的内容。事实上，必 须确保无人能修改它。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>global_name = <span class="string">'Sir Gumby'</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>o.get_name() </span><br><span class="line"><span class="string">'Sir Gumby'</span></span><br></pre></td></tr></table></figure><p>​ 如果尝试创建多个OpenObject对象，将出现问题，因为它们共用同一个变量。 （全局变量/类中的静态变量）</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>o1 = OpenObject() </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>o2 = OpenObject() </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>o1.set_name(<span class="string">'Robin Hood'</span>) </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>o2.get_name() </span><br><span class="line"><span class="string">'Robin Hood'</span></span><br></pre></td></tr></table></figure><p>​ 如你所见，设置一个对象的名称时，将自动设置另一个对象的名称。这可不是你想要的结果。<br>基本上，你希望对象是抽象的：当调用方法时，无需操心其他的事情，如避免干扰全局变量。 如何将名称“<strong>封装</strong>”在对象中呢？没问题，将其作为一个<strong>属性</strong>即可。</p><ul><li><p>小结：上面提到的是类的静态变量出现的问题，为了避免共用，我们使用<strong>封装</strong>的思想，将其作为对象的属性。</p></li><li><p><strong>封装：将一些东西内容封装到一个地方，你还可以取出来使用</strong>。</p><p>这样的话：</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>o1 = ClosedObject() </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>o2 = ClosedObject() </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>o1.set_name(<span class="string">'小白'</span>) </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>o2.set_name(<span class="string">'小黑'</span>) </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>o1.get_name() </span><br><span class="line"><span class="string">'小白'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>o2.get_name() </span><br><span class="line"><span class="string">'小黑'</span></span><br></pre></td></tr></table></figure><p>​ ‘小白’这个名称还在！因为对象有了自己的<strong>状态</strong>。对象的的状态由其属性（如名称）描述。对象的方法可能修改这些属性，因此对象将一系列函数（方法）组合起来，并赋予它们访问一些变量（属 性）的权限，而属性可用于在两次函数调用之间存储值。</p></li><li><p>小结：当我们只使用多态而不是用封装，我们会出现问题（全局变量/类的静态变量，共用，一改都改）。封装的思想可以做的真正的隔离，如对象的属性。</p></li></ul><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>继承是另一种偷懒的方式（这里是褒义）。程序员总是想避免多次输入同样的代码。可以通过创建函数来达成这个目标，但现在要解决一个更微妙的问题。如果你已经有了一个类，并要创建一个与之很像的类（可能只是新增了几个方法），该如何办呢？创建这个新类时，你不想复制旧类的代码，将其粘贴到新类中。所以我们使用继承。</p><h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><h2 id="类到底是什么？"><a href="#类到底是什么？" class="headerlink" title="类到底是什么？"></a>类到底是什么？</h2><ul><li><p>类/类型——一种对象。每个对象都属于特定的类，并被称为该类的<strong>实例</strong>。</p><p>例如，如果你在窗外看到一只鸟，这只鸟就是“鸟类”的一个实例。鸟类是一个非常通用（抽 象）的类，它有多个子类：你看到的那只鸟可能属于子类“云雀”。你可将“鸟类”视为由所有鸟组成的集合，而“云雀”是其一个子集。一个类的对象为另一个类的对象的子集时，前者就是后者的子类。因此“云雀”为“鸟类”的<strong>子类</strong>，而“鸟类”为“云雀”的<strong>超类</strong>。</p></li></ul><blockquote><p>注意 在英语日常交谈中，使用复数来表示类，如birds（鸟类）和larks（云雀）。在Python中， 约定使用单数并将首字母大写，如Bird和Lark。</p></blockquote><blockquote><p>注意 在较旧的Python版本中，类型和类之间泾渭分明：内置对象是基于类型的，而自定义对象是基于类的。因此，你可以创建类，但不能创建类型。在较新的Python 2版本中，这种差别不那么明显。在Python 3中，已不再区分类和类型了。</p></blockquote><h2 id="创建自定义类"><a href="#创建自定义类" class="headerlink" title="创建自定义类"></a>创建自定义类</h2><p>创建自定义类</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建一个类，里面拥有完整的结构：静态变量，动态变量，私有变量，类方法，绑定方法，静态方法，property属性。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age,height,weight)</span>:</span></span><br><span class="line">        self.name = name   <span class="comment"># 属性： 动态变量</span></span><br><span class="line">        self.age = age</span><br><span class="line">        self.height = height</span><br><span class="line">        self.weight = weight</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">f'我叫<span class="subst">&#123;self.name&#125;</span>,今年<span class="subst">&#123;self.age&#125;</span>,身高<span class="subst">&#123;self.height&#125;</span>,体重<span class="subst">&#123;self.weight&#125;</span>'</span>)</span><br><span class="line"><span class="meta">    @property              # property属性</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bmi</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''bmi指数（体脂） = kg / m ^ 2'''</span></span><br><span class="line">        <span class="keyword">return</span> self.weight / (self.height**<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(Person)</span>:</span></span><br><span class="line">    daily = <span class="string">'学习'</span>  		   </span><br><span class="line">    __num = <span class="number">0</span>			    <span class="comment"># 属性： 私有变量 </span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age,height,weight, grade)</span>:</span></span><br><span class="line">        Person.__init__(self,name,age,height,weight)     <span class="comment"># 在子类的方法中调用父类的方法 :父类名.方法名(self,)</span></span><br><span class="line">        self.grade = grade</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(self)</span>:</span>          <span class="comment"># 方法:动态方法</span></span><br><span class="line">        print(<span class="string">f'<span class="subst">&#123;self.name&#125;</span>今年<span class="subst">&#123;self.age&#125;</span>岁，是<span class="subst">&#123;self.grade&#125;</span>的一名学生'</span>)</span><br><span class="line"><span class="meta">    @classmethod			 # 类方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addNum</span><span class="params">(cls)</span>:</span>  		</span><br><span class="line">        cls.__num += <span class="number">1</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getNum</span><span class="params">(cls)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> cls.__num</span><br><span class="line"><span class="meta">    @staticmethod            # 静态方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">homework</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">'学生得做家庭作业'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s1 = Student(<span class="string">'小白'</span>,<span class="number">18</span>,<span class="number">1.8</span>,<span class="number">60</span>,<span class="string">'高三'</span>)   <span class="comment"># 实例/对象</span></span><br><span class="line">print(s1.__dict__)          <span class="comment"># 打印s1对象的所有属性</span></span><br><span class="line">s1.show()                   <span class="comment"># 对象s1调用show方法</span></span><br><span class="line">print(s1.bmi)               <span class="comment"># 使用property装饰器使这个方法变成特殊的属性</span></span><br><span class="line">Student.addNum()            <span class="comment"># 类调用addNum方法。由于类成为调用者会更符合逻辑，使用classmethod装饰器装饰，使之成为类方法。</span></span><br><span class="line">print(Student.getNum())     <span class="comment"># 得到班级人数，因为__num是私有变量，所以需要定义getNum类方法。</span></span><br><span class="line">Student.homework()          <span class="comment"># 使用staticmethod装饰器装饰，使之成为静态方法，静态方法是一个独立的，单纯的函数。</span></span><br></pre></td></tr></table></figure><p>​ 这个例子包含静态变量，动态变量，私有变量，类方法，绑定方法，静态方法，property属性等全部语法。</p><p>​ 不要慌，虽然是这么多，但总体分为两类，一类是属性，一类是方法。接下来就是对属性与方法的详细阐述，但始终是这两大类，只不过角度略有不同。</p><h3 id="从类名的角度使用类"><a href="#从类名的角度使用类" class="headerlink" title="从类名的角度使用类"></a>从类名的角度使用类</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age,height,weight)</span>:</span></span><br><span class="line">        self.name = name   <span class="comment"># 属性： 动态变量</span></span><br><span class="line">        self.age = age</span><br><span class="line">        self.height = height</span><br><span class="line">        self.weight = weight</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">f'我叫<span class="subst">&#123;self.name&#125;</span>,今年<span class="subst">&#123;self.age&#125;</span>,身高<span class="subst">&#123;self.height&#125;</span>,体重<span class="subst">&#123;self.weight&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(Person)</span>:</span></span><br><span class="line">    daily = <span class="string">'学习'</span></span><br><span class="line">    __num = <span class="number">0</span>			    <span class="comment"># 属性： 私有变量</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age,height,weight, grade)</span>:</span></span><br><span class="line">        Person.__init__(self,name,age,height,weight)     <span class="comment"># 在子类的方法中调用父类的方法 :父类名.方法名(self,)</span></span><br><span class="line">        self.grade = grade</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(self)</span>:</span>          <span class="comment"># 方法:动态方法</span></span><br><span class="line">        print(<span class="string">f'<span class="subst">&#123;self.name&#125;</span>今年<span class="subst">&#123;self.age&#125;</span>岁，是<span class="subst">&#123;self.grade&#125;</span>的一名学生'</span>)</span><br><span class="line"><span class="meta">    @classmethod			 # 类方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addNum</span><span class="params">(cls)</span>:</span></span><br><span class="line">        cls.__num += <span class="number">1</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getNum</span><span class="params">(cls)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> cls.__num</span><br><span class="line"><span class="meta">    @staticmethod            # 静态方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">homework</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">'学生得做家庭作业'</span>)</span><br><span class="line">s1 = Student(<span class="string">'小白'</span>,<span class="number">18</span>,<span class="number">1.8</span>,<span class="number">60</span>,<span class="string">'高三'</span>)   <span class="comment"># 实例/对象</span></span><br><span class="line">print(s1.__dict__)          <span class="comment"># 打印s1对象的所有属性</span></span><br><span class="line">s1.show()                   <span class="comment"># 对象s1调用show方法</span></span><br><span class="line">Student.addNum()            <span class="comment"># 类调用addNum方法。由于类成为调用者会更符合逻辑，使用classmethod装饰器装饰，使之成为类方法。</span></span><br><span class="line">print(Student.getNum())     <span class="comment"># 得到班级人数，因为__num是私有变量，所以需要定义getNum类方法。</span></span><br><span class="line">Student.homework()          <span class="comment"># 使用staticmethod装饰器装饰，使之成为静态方法，静态方法是一个独立的，单纯的函数。</span></span><br></pre></td></tr></table></figure><h3 id="类名调用类中的属性-类名-属性"><a href="#类名调用类中的属性-类名-属性" class="headerlink" title="类名调用类中的属性(类名.属性)"></a>类名调用类中的属性(类名.属性)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(Student.daily)</span><br><span class="line"><span class="comment"># 学习</span></span><br></pre></td></tr></table></figure><h4 id="特殊的类属性"><a href="#特殊的类属性" class="headerlink" title="特殊的类属性"></a>特殊的类属性</h4><p>对任何类C，下表显示了类C的所有特殊属性：</p><table><thead><tr><th align="center">类属性</th><th align="center">解释</th></tr></thead><tbody><tr><td align="center"><code>C.__name__</code></td><td align="center">类C的名字（字符串）</td></tr><tr><td align="center"><code>C.__doc__</code></td><td align="center">类C的文档字符串</td></tr><tr><td align="center"><code>C.__base__</code></td><td align="center">类C的所有父类构成的元组</td></tr><tr><td align="center"><code>C.__dict__</code></td><td align="center">类C的属性</td></tr><tr><td align="center"><code>C.__module__</code></td><td align="center">类C定义所在的模块</td></tr><tr><td align="center"><code>C.__class__</code></td><td align="center">实例C对应的类（仅新式类中）</td></tr></tbody></table><h3 id="类名调用对象方法"><a href="#类名调用对象方法" class="headerlink" title="类名调用对象方法"></a>类名调用对象方法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p = Person(<span class="string">'小白'</span>，<span class="number">23</span>，<span class="number">180</span>，<span class="number">65</span>)</span><br><span class="line">Person.show(p)</span><br></pre></td></tr></table></figure><p>它体现了一种<strong>绑定（binding）</strong>的效果，没有实例，方法不能够被调用。</p><p>①方法必须绑定(到一个实例)才能直接被调用（对象.方法）</p><p>②非绑定的方法可能可以被调用，但<strong>实例对象</strong>一定要<strong>明确给出</strong>，才能调用成功。</p><h3 id="类方法（类名-类方法）"><a href="#类方法（类名-类方法）" class="headerlink" title="类方法（类名.类方法）"></a>类方法（类名.类方法）</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Student.addNum()</span><br><span class="line">print(Student.getNum())</span><br><span class="line"><span class="comment"># 1</span></span><br></pre></td></tr></table></figure><ul><li><code>__num</code>是一个私有变量，只能在类的内部访问，设置它是为了统计班级的人数，所以将其设置为类的一个属性，接着通过类调用<code>addNum</code>方法，实现班级人数加一，然后通过<code>getNum()</code>打印班级人数。</li></ul><h4 id="what"><a href="#what" class="headerlink" title="what"></a>what</h4><ul><li>使用<code>classmethod</code><strong>装饰器</strong>装饰的，第一个参数<code>cls</code>表示<strong>类对象</strong>。</li></ul><h4 id="how"><a href="#how" class="headerlink" title="how"></a>how</h4><ul><li>类方法是通过装饰器<code>classmethod</code>装饰实现的，没有这个装饰器，类是不能调用绑定方法的，只能对象去调用绑定方法。</li></ul><h4 id="where"><a href="#where" class="headerlink" title="where"></a>where</h4><p>①类方法的存在是为了更有逻辑（有时候类名比对象名更适合作为主体，如上面的student的人数，比个体更合适）。</p><p>②不需要实例化，类方法通常用来对类属性的引用或修改。</p><p>③ <code>__new__</code>方法中，第一个参数就是cls</p><p>④ 使用@classmethod多态性构造对象 （effective-python中）</p><p>​ 也就是怎么可以不通过<code>__init__</code>方法来实现类似于重载的构造方法的体现。</p><h3 id="静态方法（类名-静态方法）"><a href="#静态方法（类名-静态方法）" class="headerlink" title="静态方法（类名.静态方法）"></a>静态方法（类名.静态方法）</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Student.homework() </span><br><span class="line"><span class="comment"># 学生得做家庭作业</span></span><br></pre></td></tr></table></figure><h4 id="what-1"><a href="#what-1" class="headerlink" title="what"></a>what</h4><ul><li>静态方法就是一个<u>普通的函数</u>，只是碰巧在类的定义体中，而不是在模块层定义。</li></ul><h4 id="how："><a href="#how：" class="headerlink" title="how："></a>how：</h4><ul><li>使用<code>staticmethod</code>装饰器进行装饰，且不需要第一位置参数。</li></ul><h4 id="where-1"><a href="#where-1" class="headerlink" title="where"></a>where</h4><p>①不必实例化的时候可以考虑。</p><p>②在没有继承的情况下是可以与<code>classmethod</code>互换使用的，当这个类被继承了成为基类，然后基类因为某些原因被删除了，那么它们就不能互换使用了，而且类方法会比静态方法更合适，静态方法可能报错。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">p</span>:</span></span><br><span class="line">    name = <span class="string">'小白'</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cl</span><span class="params">(cls)</span>:</span></span><br><span class="line">        print(cls.name)</span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sta</span><span class="params">()</span>:</span></span><br><span class="line">        print(p.name)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">p1</span><span class="params">(p)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">p1.cl()</span><br><span class="line">p1.sta()</span><br><span class="line"><span class="keyword">del</span> p</span><br><span class="line">p1.cl()     <span class="comment">#  小白</span></span><br><span class="line">p1.sta()    <span class="comment"># 报错     NameError: name 'p' is not defined</span></span><br></pre></td></tr></table></figure><p>注意：静态方法本质上是函数：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> types <span class="keyword">import</span> MethodType</span><br><span class="line">print(isinstance(obj.func1,MethodType))  <span class="comment"># True</span></span><br></pre></td></tr></table></figure><h3 id="函数与方法的区别"><a href="#函数与方法的区别" class="headerlink" title="函数与方法的区别"></a>函数与方法的区别</h3><p>判断一：</p><ul><li>函数：全都是显性传参</li><li>方法：<strong>隐性传参</strong></li></ul><p>判断二:</p><p>利用types模块类中的FunctionType类和MethodType类</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> types <span class="keyword">import</span> FunctionType</span><br><span class="line"><span class="keyword">from</span> types <span class="keyword">import</span> MethodType</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(self)</span>:</span><span class="keyword">pass</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">()</span>:</span><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 类名调用类的静态方法就是一个函数</span></span><br><span class="line">print(isinstance(A.func1,FunctionType))  <span class="comment"># True</span></span><br><span class="line">obj = A()</span><br><span class="line"><span class="comment"># 对象调用静态方法， 实际上成为静态函数</span></span><br><span class="line">print(isinstance(obj.func1,FunctionType))  <span class="comment"># True</span></span><br></pre></td></tr></table></figure><h1 id="实例化对象"><a href="#实例化对象" class="headerlink" title="实例化对象"></a>实例化对象</h1><h2 id="实例化对象发生了三件事"><a href="#实例化对象发生了三件事" class="headerlink" title="实例化对象发生了三件事"></a>实例化对象发生了三件事</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">obj = Student() <span class="comment"># 实例化一个对象</span></span><br><span class="line"><span class="comment"># obj称为对象，实例</span></span><br></pre></td></tr></table></figure><ol><li>调用 <code>__new__</code>方法在内存中创建一个对象空间，并返回地址。</li><li>将对象空间传给self参数，自动执行 <code>__init__</code>方法。</li><li>执行 <code>__init__</code>方法时，给对象空间封装其属性。</li></ol><h2 id="对象调用对象的属性（对象-属性）"><a href="#对象调用对象的属性（对象-属性）" class="headerlink" title="对象调用对象的属性（对象.属性）"></a>对象调用对象的属性（对象.属性）</h2><p>增、删、查、改</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>:</span></span><br><span class="line">    <span class="string">'''此类是构建学生类'''</span></span><br><span class="line">    daily = <span class="string">'学习'</span>     <span class="comment"># 属性：静态属性</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,sex)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.sex = sex</span><br><span class="line"></span><br><span class="line">s1 = Student(<span class="string">'小黑'</span>,<span class="string">'未知'</span>)</span><br><span class="line"><span class="comment"># 查询</span></span><br><span class="line">print(s1.name)</span><br><span class="line"><span class="comment"># 删</span></span><br><span class="line"><span class="keyword">del</span> s1.sex</span><br><span class="line">print(s1.__dict__)</span><br><span class="line"><span class="comment"># 增</span></span><br><span class="line">s1.sex = <span class="string">'男'</span></span><br><span class="line"><span class="comment"># 改</span></span><br><span class="line">s1.sex = <span class="string">'女'</span></span><br></pre></td></tr></table></figure><p>注意：如果<u>删的这个属性在对象空间中不存在则会报错</u>，它不会去操作类空间中的属性。</p><h2 id="对象调用类中的属性"><a href="#对象调用类中的属性" class="headerlink" title="对象调用类中的属性"></a>对象调用类中的属性</h2><ol><li><p>一边情况下，对象可以引用类中的属性（类中不存在同名属性），但是不可以修改，因为修改相当于在对象的属性中进行增加。</p></li><li><p>特殊情况：</p><ul><li>当属性变量是可变数据类型，才能在类中间接的改变。</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>:</span></span><br><span class="line">    <span class="string">'''此类是构建学生类'''</span></span><br><span class="line">    daily = <span class="string">'学习'</span>     <span class="comment"># 属性：静态属性</span></span><br><span class="line">    examination = <span class="string">'考试'</span></span><br><span class="line">    li = []</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,sex)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">s1.li.append(<span class="number">2</span>)</span><br><span class="line">print(s1.li)   		<span class="comment"># [2]</span></span><br><span class="line">print(s1.__dict__)	<span class="comment"># &#123;'name': '小黑', 'sex': '女'&#125;</span></span><br><span class="line">print(Student.li)	<span class="comment"># [2]</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="对象调用类中的方法（对象-绑定方法）"><a href="#对象调用类中的方法（对象-绑定方法）" class="headerlink" title="对象调用类中的方法（对象.绑定方法）"></a>对象调用类中的方法（对象.绑定方法）</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = Student(<span class="string">'小白'</span>,<span class="number">18</span>,<span class="number">1.8</span>,<span class="number">60</span>,<span class="string">'高三'</span>)   <span class="comment"># 实例/对象</span></span><br><span class="line">print(s1.__dict__)          <span class="comment"># 打印s1对象的所有属性</span></span><br><span class="line">s1.show()                   <span class="comment"># 对象s1调用show方法</span></span><br></pre></td></tr></table></figure><ul><li>对象的方法也称绑定方法或方法。为什么称为绑定？因为在定义中，我们给第一个位置参数传对象的空间地址，这样产生了一种绑定关系，所以称之为绑定方法。self是约定俗成的。它只需要占据第一个位置参数就行。</li><li>使用方法可以访问，操作属性。</li></ul><h2 id="property属性"><a href="#property属性" class="headerlink" title="property属性"></a>property属性</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age,height,weight)</span>:</span></span><br><span class="line">        self.name = name   <span class="comment"># 属性： 动态变量</span></span><br><span class="line">        self.age = age</span><br><span class="line">        self.height = height</span><br><span class="line">        self.weight = weight</span><br><span class="line"><span class="meta">    @property              # property属性</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bmi</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''bmi指数（体脂） = kg / m ^ 2'''</span></span><br><span class="line">        <span class="keyword">return</span> self.weight / (self.height**<span class="number">2</span>)</span><br><span class="line">p1 = Person(<span class="string">'小白'</span>,<span class="number">23</span>,<span class="number">1.8</span>,<span class="number">65</span>)</span><br><span class="line">print(p1.bmi)</span><br></pre></td></tr></table></figure><h3 id="why"><a href="#why" class="headerlink" title="why"></a>why</h3><ul><li>像体脂这样的<strong>名词</strong>，我们逻辑上更愿意像使用属性的方式去使用它，所以就产生了这种用法。</li></ul><h3 id="how-1"><a href="#how-1" class="headerlink" title="how"></a>how</h3><ul><li><p>加上@property装饰器后，将方法伪装成属性使用，在调用这个方法的时候就可以不用加括号直接得到返回值。</p></li><li><p>设置属性的另一种写法</p><p>property是一个类，通过实例化对象产生属性。</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_AAA</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'get的时候运行我啊'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_AAA</span><span class="params">(self,value)</span>:</span></span><br><span class="line">        print(<span class="string">'set的时候运行我啊'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete_AAA</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'delete的时候运行我啊'</span>)</span><br><span class="line">    AAA=property(get_AAA,set_AAA,delete_AAA) <span class="comment">#内置property三个参数与get,set,delete一一对应</span></span><br><span class="line"></span><br><span class="line">f1=Foo()</span><br><span class="line">f1.AAA</span><br><span class="line">f1.AAA=<span class="string">'aaa'</span></span><br><span class="line"><span class="keyword">del</span> f1.AAA</span><br></pre></td></tr></table></figure><ul><li>注意：装饰的这个方法，不能有参数。</li></ul><h3 id="where-2"><a href="#where-2" class="headerlink" title="where"></a>where</h3><ul><li>第一个场景：将方法伪装成属性</li><li>第二个场景：和私有属性合作，只能看不能改，用装饰的这种方式，让人只能看不能改。</li><li>第三个场景：能修改，但必须得符合我的逻辑。</li></ul><p>所以property常用来替代私有属性以及访问私有属性的方法。</p><h3 id="方法名-setter"><a href="#方法名-setter" class="headerlink" title="@方法名.setter"></a>@方法名.setter</h3><p>进一步伪装—&gt;可以修改,删除这个属性</p><p>再加一个装饰器 @方法名.setter</p><p>这么做的目的在于，要求符合自己的要求才能改，增加容错能力。</p><p>三部曲：</p><ol><li>必须有这个方法</li><li>@方法名.setter</li><li>再次定义同名方法，它只能接受除self外的一个参数。</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 例子</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">p</span>:</span></span><br><span class="line">    name = <span class="string">'小白'</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cl</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> p.name</span><br><span class="line"><span class="meta">    @cl.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cl</span><span class="params">(self,na)</span>:</span></span><br><span class="line">        p.name = na</span><br><span class="line"><span class="meta">    @cl.deleter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cl</span><span class="params">(self)</span>:</span></span><br><span class="line">    	print(<span class="string">'我执行啦'</span>)</span><br><span class="line">    	<span class="keyword">del</span> p.name</span><br><span class="line"></span><br><span class="line">p1 = p()</span><br><span class="line">print(p1.cl)</span><br><span class="line">p1.cl = <span class="string">'小黑'</span></span><br><span class="line">print(p1.cl)</span><br></pre></td></tr></table></figure><h3 id="方法名-deleter"><a href="#方法名-deleter" class="headerlink" title="@方法名.deleter"></a>@方法名.deleter</h3><p>增加了删除属性的能力：</p><ul><li><p>@方法名.deleter</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">del</span> p1.name</span><br><span class="line">并不能真的删除什么，只是调用了对应的被@price.deleter装饰的方法而已。</span><br></pre></td></tr></table></figure></li></ul><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><ol><li>类就像一个模板，它可以实例化多个对象。</li><li>对于方法和属性来说，它有两个角度，一个是类一个是对象，类可以使用静态属性或私有变量，类可以调用类方法和静态方法；对于对象来说，对象可以使用静态属性，动态属性，私有属性等全部属性。对象也可以调用类方法，静态方法，绑定方法等全部。</li></ol><h1 id="类的名称空间"><a href="#类的名称空间" class="headerlink" title="类的名称空间"></a>类的名称空间</h1><p>下面两条语句大致等价：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x)</span>:</span> <span class="keyword">return</span> x * x </span><br><span class="line"></span><br><span class="line">foo = <span class="keyword">lambda</span> x: x * x</span><br></pre></td></tr></table></figure><p>​ 它们都创建一个返回参数平方的函数，并将这个函数关联到变量foo。可以在全局（模块）作用域内定义名称foo，也可以在函数或方法内定义。定义类时情况亦如此：<u>在class语句中定义的代码都是在一个特殊的命名空间（类的命名空间）内执行的，而类的所有成员都可访问这个命名空间。</u>类定义其实就是要执行的代码段。</p><p>类的命名空间：</p><p>​ 第一部分：静态变量</p><p>​ 第二部分：方法、函数</p><p>对象的空间：</p><p>​ 类指针，存储了类所在的内存地址。</p><p>​ 动态属性</p><p>对象和类的关系:<br>单向作用（类指针）：这个单向是从对象到类是一个单项的过程，不能从类引用对象里的属性。</p><p><img src="/learn-python/20190410-python-OOP/%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%90%8D%E7%A7%B0%E7%A9%BA%E9%97%B4.png" alt="类与对象的名称空间"></p><p>​ <code>__init__()</code>是在解释器为你创建一个实例后调用的第一个方法。</p><p>​ 调用父类的<code>__new__()</code>来创建对象<code>__new__()</code>必须返回一个合法的实例，这样解释器在调用<code>__init__()</code>时，就可以把这个实例作为self参数传给它。</p><p>​</p><h1 id="类与类之间的关系"><a href="#类与类之间的关系" class="headerlink" title="类与类之间的关系"></a>类与类之间的关系</h1><p>​ 一个类被定义后，目标就是要将它当成一个模块来使用，并且把这些对象嵌入到你的代码中去，同其它数据类型及逻辑执行流混合使用。有两种方法可以在你的代码中利用类。第一种是<strong>组合</strong>（composition）。就是让不同的类混合并加入到其他类中来<u>增加功能和代码重用性</u>。另一种方法是通过<strong>派生</strong>。</p><h2 id="组合（合成）"><a href="#组合（合成）" class="headerlink" title="组合（合成）"></a>组合（合成）</h2><p>一个类的对象是另外一个类对象的属性</p><ul><li>对象变成了另一个对象的一个属性 （这就在一个类和其它组成类之间定义了一种“有一个”（has-a）的关系）</li><li>所有的对象关联这个对象，这样可以方便修改。</li></ul><p>例子：基于圆形类实现一个圆环类,要求接收参数是外圆半径和内圆半径。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> pi</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,r)</span>:</span></span><br><span class="line">        self.r = r</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">area</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> pi*self.r**<span class="number">2</span>        <span class="comment"># 面积这个因该是源于Circle的， 而圆环只是利用了圆</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">perimeter</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>*pi*self.r</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circular</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,ci,co)</span>:</span></span><br><span class="line">        ci,co = (co, ci) <span class="keyword">if</span> ci&gt;co <span class="keyword">else</span> (ci ,ci)</span><br><span class="line">        self.c_inner = Circle(ci)</span><br><span class="line">        self.c_outer = Circle(co)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">area</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.c_outer.area() - self.c_inner.area()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">perimeter</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.c_outer.perimeter() + self.c_inner.perimeter()</span><br></pre></td></tr></table></figure><p>本题考察了含有重叠部分的两个类时，我们该如何设计，以及这样设计的优点。</p><ol><li>实例化要放在init里，</li><li>当我们需要，修改圆的公式时，圆环，圆柱都不需要在修改了，同享这些改变。</li><li>同样的方法不要用两次，而使用组合来减少代码的重复率。</li></ol><h3 id="结论-1"><a href="#结论-1" class="headerlink" title="结论"></a>结论</h3><p>拿到了对象就像拿到了一切（就像组合中使用的那样）；</p><p>一个类的方法只能由此类的对象去调用；</p><p>一个类的方法的第一个self只接受此类的对象。</p><p>当对象之间有更接近的关系时，派生的概念可能对你的应用程序来说更有意义，特别是当你需要一些相似的对象，但却有少许不同功能的时候。</p><h2 id="再谈继承"><a href="#再谈继承" class="headerlink" title="再谈继承"></a>再谈继承</h2><p>前面提到使用继承是为了解决代码的重复。接下来谈一下继承的语法。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>上面代码中：B继承A,A是父类,B是子类；A是<strong>父类/基类/超类</strong>B是<strong>子类/派生类</strong>；子类可以使用父类中的: 方法/静态变量。</p><h3 id="调用过程"><a href="#调用过程" class="headerlink" title="调用过程"></a>调用过程</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>,name)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>.name = name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        print(<span class="string">'%s is eating'</span>%<span class="keyword">self</span>.name)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span>(<span class="title">Animal</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">climb_tree</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        print(<span class="string">'%s is climbing'</span>%<span class="keyword">self</span>.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">小白 = Cat(<span class="string">'小白'</span>)</span><br></pre></td></tr></table></figure><p>​ 上述代码中：先开辟空间,空间里有一个类对象指针指向类Cat。接着调用<code>__init__</code>,对象在自己的空间中找<code>__init__</code>没找到,到Cat类中找<code>__init__</code>也没找到，在找父类Animal中的<code>__init__</code>，完成对对象空间属性的封装。</p><p>​ 当子类和父类的方法重名的时候,我们只使用子类的方法,而不会去调用父类的方法了；<u>当子类想调用父类的同名方法</u>时：</p><ul><li><p>方法一：父类名.方法名(self,)</p></li><li><p>方法二：super(子类名,self).方法名()</p></li><li><p>方法二的简写：super().方法名()</p></li><li><p>注意：方法二是在继承的前提下。</p></li></ul><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">例子：</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>,name,food)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>.name = name</span><br><span class="line">        <span class="keyword">self</span>.food = food</span><br><span class="line">        <span class="keyword">self</span>.blood = <span class="number">100</span></span><br><span class="line">        <span class="keyword">self</span>.waise = <span class="number">100</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        print(<span class="string">'%s is eating %s'</span><span class="string">%(self.name,self.food)</span>)</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span>(<span class="title">Animal</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>.blood += <span class="number">100</span></span><br><span class="line">        <span class="comment"># 方法一</span></span><br><span class="line">        Animal.eat(<span class="keyword">self</span>)      <span class="comment"># 子类调用父类的同名方法</span></span><br><span class="line">        <span class="comment"># 方法二：</span></span><br><span class="line">        <span class="keyword">super</span>(Cat,<span class="keyword">self</span>).__init_<span class="number">_</span>()</span><br><span class="line">        <span class="comment"># 简写	**推荐				</span></span><br><span class="line">        <span class="keyword">super</span>().__init_<span class="number">_</span>()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">climb_tree</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        print(<span class="string">'%s is climbing'</span>%<span class="keyword">self</span>.name)</span><br><span class="line">        <span class="keyword">self</span>.drink()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>(<span class="title">Animal</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>.waise += <span class="number">100</span></span><br><span class="line">        <span class="comment"># 方法一:</span></span><br><span class="line">        Animal.eat(<span class="keyword">self</span>)      <span class="comment"># 子类调用父类的同名方法</span></span><br><span class="line">        <span class="comment"># 方法二：</span></span><br><span class="line">        <span class="keyword">super</span>(Dog,<span class="keyword">self</span>).__init_<span class="number">_</span>()</span><br><span class="line">        <span class="comment"># 简写    **推荐</span></span><br><span class="line">        <span class="keyword">super</span>().__init_<span class="number">_</span>()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">house_keep</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        print(<span class="string">'%s is keeping the house'</span>%<span class="keyword">self</span>.name)</span><br><span class="line">        </span><br><span class="line">小白 = Cat(<span class="string">'小白'</span>,<span class="string">'猫粮'</span>)</span><br><span class="line">小黑 = Dog(<span class="string">'小黑'</span>,<span class="string">'狗粮'</span>)</span><br><span class="line">小白.eat()</span><br><span class="line">小黑.eat()</span><br><span class="line">print(小白.__dict_<span class="number">_</span>)</span><br><span class="line">print(小黑.__dict_<span class="number">_</span>)</span><br></pre></td></tr></table></figure><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>上面提到了继承的语法规则；以及父类和子类方法的选择：</p><p>①子类的对象,如果去调用方法，永远优先调用自己的；</p><p>②如果自己有就用自己的方法，自己没有就会用父类的；</p><p>③如果自己有还想用父类的 : 直接在子类方法中调父类的方法：父类名.方法名(self)。</p><h2 id="多继承"><a href="#多继承" class="headerlink" title="多继承"></a>多继承</h2><p>单继承就如前面提到的继承的语法规则。但对于多继承就会存在一个继承顺序。</p><h3 id="知识铺垫："><a href="#知识铺垫：" class="headerlink" title="知识铺垫："></a>知识铺垫：</h3><p>只要继承object类就是新式类；在py3中不存在，在py2中，不主动继承object的类都是经典类。</p><p>在python3 中所有的类都继承object类；python3 中所有的类都是新式类</p><h3 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h3><p>在多继承方面：经典类使用<strong>深度优先</strong>，新式类使用<strong>mro算法</strong>。</p><p>MRO列表</p><ol><li><p>事实上，对于你定义的每一个类，Python 会计算出一个<strong>方法解析顺序（Method Resolution Order, MRO）列表</strong>，<strong>它代表了类继承的顺序</strong>，我们可以通过<code>类名.mro()</code>得到类继承顺序</p></li><li><p>MRO列表是由 <a href="https://www.python.org/download/releases/2.3/mro/" target="_blank" rel="noopener">C3 线性化算法</a>来实现的，一个类的 MRO 列表就是合并所有父类的 MRO 列表.</p></li><li><p>计算公式：</p><p>表头：列表的第一个元素</p><p>表尾：列表中表头以外的元素集合（可以为空）</p><p>表头，表尾</p><p>[A,B,C] : 表头：A 表尾： [B,C]</p><p>[A] : 表头：A 表尾：[]</p><blockquote><p>mro(Child(Base1，Base2)) = [ Child ] + merge( mro(Base1), mro(Base2), [ Base1, Base2] )<br>（其中Child继承自Base1, Base2）</p><p>由公式得到列表，再通过下面的merge合并完成得到结果。</p></blockquote><p>merge合并：</p><figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line">如计算merge( [<span class="keyword">E</span>,<span class="keyword">O</span>], [<span class="keyword">C</span>,<span class="keyword">E</span>,F,<span class="keyword">O</span>], [<span class="keyword">C</span>] )</span><br><span class="line">有三个列表 ：  ①      ②          ③</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> merge不为空，取出第一个列表列表①的表头<span class="keyword">E</span>，进行判断                              </span><br><span class="line">   各个列表的表尾分别是[<span class="keyword">O</span>], [<span class="keyword">E</span>,F,<span class="keyword">O</span>]，<span class="keyword">E</span>在这些表尾的集合中，因而跳过当前当前列表</span><br><span class="line"><span class="number">2</span> 取出列表②的表头<span class="keyword">C</span>，进行判断</span><br><span class="line">   <span class="keyword">C</span>不在各个列表的集合中，因而将<span class="keyword">C</span>拿出到merge外，并从所有表头删除</span><br><span class="line">   merge( [<span class="keyword">E</span>,<span class="keyword">O</span>], [<span class="keyword">C</span>,<span class="keyword">E</span>,F,<span class="keyword">O</span>], [<span class="keyword">C</span>]) = [<span class="keyword">C</span>] + merge( [<span class="keyword">E</span>,<span class="keyword">O</span>], [<span class="keyword">E</span>,F,<span class="keyword">O</span>] )</span><br><span class="line"><span class="number">3</span> 进行下一次新的merge操作 .....</span><br></pre></td></tr></table></figure><p>补充：也可以在拓扑排序的基础上加上从左到右这个规则进行。</p></li></ol><p>对于新式类继承顺序，使用<code>类名.mro()</code>方法进行查看。</p><h3 id="super"><a href="#super" class="headerlink" title="super"></a>super</h3><ul><li><p>super（）严格意义并不是执行父类的方法（单继承是，多继承是有问题的）</p></li><li><p>super是按照self从属类的<strong>mro顺序</strong>，来寻找当前类的下一个类</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">例子：</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'in A'</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(A)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().f1()</span><br><span class="line">        print(<span class="string">'in Foo'</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span><span class="params">(A)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'in Bar'</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">info</span><span class="params">(Foo,Bar)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().f1()</span><br><span class="line">        print(<span class="string">'in Info f1'</span>)</span><br><span class="line">a = info()</span><br><span class="line">print(info.__mro__)     <span class="comment"># [info,Foo,Bar,object]</span></span><br><span class="line">a.f1()</span><br><span class="line"><span class="comment">#(&lt;class '__main__.info'&gt;, &lt;class '__main__.Foo'&gt;, &lt;class '__main__.Bar'&gt;, &lt;class '__main__.A'&gt;, &lt;class 'object'&gt;)</span></span><br><span class="line"><span class="keyword">in</span> Bar</span><br><span class="line"><span class="keyword">in</span> Foo</span><br><span class="line"><span class="keyword">in</span> Info f1</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>在py3中不需要传参数，自动帮我们寻找当前类的mro顺序的下一个类中的同名方法。</p><ul><li>默认super() , （）里面是(当前类名,self)</li></ul></li><li><p>在py2，新式类中，必须得加参数<code>super(子类的名字，子类的对象).函数名()</code>；而且经典类不支持super（因为它都没有mro）</p></li><li><p>例子：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">在<span class="type">D</span>类中找<span class="keyword">super</span>的<span class="function"><span class="keyword">func</span>，那么可以这样写<span class="title">super</span><span class="params">()</span></span>.<span class="keyword">func</span>()</span><br><span class="line">也可以这样写<span class="keyword">super</span>(<span class="type">D</span>,<span class="keyword">self</span>).<span class="keyword">func</span>()(并且在py2中的新式类中必须这样写)</span><br></pre></td></tr></table></figure></li><li><p>在单继承的程序中，super就是找父类。</p></li><li><p>推荐：是用super来调用父类的方法</p><figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">A</span>(<span class="title">object</span>):</span></span><br><span class="line"><span class="class">    def func(<span class="title">self</span>):</span></span><br><span class="line"><span class="class">        print('<span class="title">in</span> <span class="type">A</span>')</span></span><br><span class="line"><span class="class"># <span class="keyword">class</span> <span class="type">B</span>(<span class="type">A</span>):</span></span><br><span class="line"><span class="class">#     super().func()</span></span><br><span class="line"><span class="class"># b = <span class="type">B</span>()</span></span><br><span class="line"><span class="class"># 上面注释部分会报错    # <span class="type">RuntimeError</span>: super(): no arguments</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">B</span>(<span class="type">A</span>):</span></span><br><span class="line"><span class="class">    def func(<span class="title">self</span>):</span></span><br><span class="line"><span class="class">        # super().func() </span></span><br><span class="line"><span class="class">        super(<span class="type">B</span>,<span class="title">self</span>).func()    # 这两句是等价的</span></span><br><span class="line"><span class="class">b = <span class="type">B</span>()</span></span><br><span class="line"><span class="class">b.func()</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="通过继承实现的类的开发规范"><a href="#通过继承实现的类的开发规范" class="headerlink" title="通过继承实现的类的开发规范"></a>通过继承实现的类的开发规范</h3><p><strong>抽象类</strong>：是一个<strong>开发的规范</strong>，<strong>约束它的所有子类必须实现一些和它同名的方法。</strong>（java中的）</p><p>方法一：（在父类建立约束）对于同名方法的规范，定义一个父类，如果子类没有这个方法，调用父类中的这种方法，就会主动引起一个错误</p><ul><li>优点：不依赖于模块</li><li>推荐的！！！</li><li>缺点：约束力不够强，只有在使用这个方法的时候才会报错。</li></ul><p>例子：</p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">支付程序</span><br><span class="line">    微信支付 url连接,告诉你参数什么格式</span><br><span class="line">        &#123;<span class="string">'username'</span><span class="symbol">:<span class="string">'用户名'</span></span>,<span class="string">'money'</span><span class="symbol">:</span><span class="number">200</span>&#125;</span><br><span class="line">    支付宝支付 url连接,告诉你参数什么格式</span><br><span class="line">        &#123;<span class="string">'uname'</span><span class="symbol">:<span class="string">'用户名'</span></span>,<span class="string">'price'</span><span class="symbol">:</span><span class="number">200</span>&#125;</span><br><span class="line">    苹果支付</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Payment</span>:     <span class="comment"># 抽象类</span></span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pay</span><span class="params">(<span class="keyword">self</span>,money)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="string">''</span><span class="string">'只要你见到了项目中有这种类,你要知道你的子类中必须实现和pay同名的方法'</span><span class="string">''</span></span><br><span class="line">        raise NotImplementedError(<span class="string">'请在子类中重写同名pay方法'</span>)</span><br><span class="line">        <span class="comment"># raise Exception("随便写一点")   </span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Alipay</span>(<span class="title">Payment</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>,name)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>.name = name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pay</span><span class="params">(<span class="keyword">self</span>,money)</span></span><span class="symbol">:</span></span><br><span class="line">        dic = &#123;<span class="string">'uname'</span><span class="symbol">:self</span>.name,<span class="string">'price'</span><span class="symbol">:money</span>&#125;</span><br><span class="line">        <span class="comment"># 想办法调用支付宝支付 url连接 把dic传过去</span></span><br><span class="line">        print(<span class="string">'%s通过支付宝支付%s钱成功'</span><span class="string">%(self.name,money)</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeChat</span>(<span class="title">Payment</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>,name)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>.name = name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pay</span><span class="params">(<span class="keyword">self</span>,money)</span></span><span class="symbol">:</span></span><br><span class="line">        dic = &#123;<span class="string">'username'</span><span class="symbol">:self</span>.name,<span class="string">'money'</span><span class="symbol">:money</span>&#125;</span><br><span class="line">        <span class="comment"># 想办法调用微信支付 url连接 把dic传过去</span></span><br><span class="line">        print(<span class="string">'%s通过微信支付%s钱成功'</span><span class="string">%(self.name,money)</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Apple</span>(<span class="title">Payment</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>,name)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>.name = name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pay</span><span class="params">(<span class="keyword">self</span>,money)</span></span><span class="symbol">:</span></span><br><span class="line">        dic = &#123;<span class="string">'name'</span>: <span class="keyword">self</span>.name, <span class="string">'number'</span>: money&#125;</span><br><span class="line">        <span class="comment"># 想办法调用苹果支付 url连接 把dic传过去</span></span><br><span class="line">        print(<span class="string">'%s通过苹果支付%s钱成功'</span> % (<span class="keyword">self</span>.name, money))</span><br><span class="line"></span><br><span class="line"><span class="comment"># aw = WeChat('alex')</span></span><br><span class="line"><span class="comment"># aw.pay(400)</span></span><br><span class="line"><span class="comment"># aa = Alipay('alex')</span></span><br><span class="line"><span class="comment"># aa.pay(400)</span></span><br><span class="line"><span class="comment"># 利用例子类型，实现归一化设计（统一接口）   # 利用反射可以改进</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pay</span><span class="params">(name,price,kind)</span></span><span class="symbol">:</span></span><br><span class="line">    <span class="keyword">if</span> kind == <span class="string">'Wechat'</span><span class="symbol">:</span></span><br><span class="line">        obj = WeChat(name)</span><br><span class="line">    elif kind == <span class="string">'Alipay'</span><span class="symbol">:</span></span><br><span class="line">        obj = Alipay(name)</span><br><span class="line">    elif kind == <span class="string">'Apple'</span><span class="symbol">:</span></span><br><span class="line">        obj = Apple(name)</span><br><span class="line">    obj.pay(price                    </span><br><span class="line"></span><br><span class="line">pay(<span class="string">'alex'</span>,<span class="number">400</span>,<span class="string">'Wechat'</span>)</span><br><span class="line">pay(<span class="string">'alex'</span>,<span class="number">400</span>,<span class="string">'Alipay'</span>)</span><br><span class="line">pay(<span class="string">'alex'</span>,<span class="number">400</span>,<span class="string">'Apple'</span>)</span><br><span class="line"></span><br><span class="line">appa = Apple(<span class="string">'alex'</span>)</span><br><span class="line">appa.fuqian(<span class="number">500</span>)</span><br></pre></td></tr></table></figure><p>补充：在我们查看源码时，很多都写着pass，这是在建议我们继承后要写同名方法。</p><p>方法二：使用<code>abc</code>模块的<code>ABCMeta</code>,<code>abstractmethod</code>来进行<strong>强约束</strong>。</p><ul><li>优点：约束力强，对于没有被<code>@abstractmethod</code>标记的父类方法，如果子类中不存在这个方法就无法创建</li></ul><p>例子：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">实现抽象类的另一种方式,约束力强,依赖abc模块</span><br><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta,abstractmethod</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Payment</span><span class="params">(metaclass=ABCMeta)</span>:</span></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pay</span><span class="params">(self,money)</span>:</span></span><br><span class="line">        <span class="string">'''只要你见到了项目中有这种类,你要知道你的子类中必须实现和pay同名的方法'''</span></span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError(<span class="string">'请在子类中重写同名pay方法'</span>)</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Alipay</span><span class="params">(Payment)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pay</span><span class="params">(self,money)</span>:</span></span><br><span class="line">        dic = &#123;<span class="string">'uname'</span>:self.name,<span class="string">'price'</span>:money&#125;</span><br><span class="line">        <span class="comment"># 想办法调用支付宝支付 url连接 把dic传过去</span></span><br><span class="line">        print(<span class="string">'%s通过支付宝支付%s钱成功'</span>%(self.name,money))</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeChat</span><span class="params">(Payment)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pay</span><span class="params">(self,money)</span>:</span></span><br><span class="line">        dic = &#123;<span class="string">'username'</span>:self.name,<span class="string">'money'</span>:money&#125;</span><br><span class="line">        <span class="comment"># 想办法调用微信支付 url连接 把dic传过去</span></span><br><span class="line">        print(<span class="string">'%s通过微信支付%s钱成功'</span>%(self.name,money))</span><br><span class="line"></span><br><span class="line">WeChat(<span class="string">'alex'</span>) <span class="comment"># 会报错</span></span><br></pre></td></tr></table></figure><h1 id="类中的常用双下划线方法"><a href="#类中的常用双下划线方法" class="headerlink" title="类中的常用双下划线方法"></a>类中的常用双下划线方法</h1><p>双下方法是特殊方法，他是解释器提供的由双下划线加方法名（<code>__方法名__</code>）具有特殊意义的方法,双下方法主要是python源码程序员使用的，我们在开发中尽量不要使用双下方法，但是深入研究双下方法，更有益于我们阅读源码。</p><h2 id="new-构造方法"><a href="#new-构造方法" class="headerlink" title="__new__构造方法"></a><code>__new__</code>构造方法</h2><p>回顾之前实例化的三步走并进行补充：</p><ul><li>先创建一块对象的空间，有一个指针能指向类 ——&gt; 它是由<code>__new__</code>方法完成的。</li><li>在调用init</li></ul><p>该方法需要cls也就是类对象（有了类对象才能开辟对象空间）</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创造并返回一个新对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'in __init__'</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args, **kwargs)</span>:</span>    <span class="comment"># 将类名A给了cls</span></span><br><span class="line">        print(cls)</span><br><span class="line">        print(<span class="string">'in __new__'</span>)</span><br><span class="line">        <span class="comment"># object1 = object.__new__(cls)	  # 两种方法都可以，但一定要显示传cls</span></span><br><span class="line">        object1 = super().__new__(cls)</span><br><span class="line">        <span class="keyword">return</span> object1</span><br><span class="line"></span><br><span class="line">obj = A()</span><br><span class="line"><span class="comment"># 类名（） 先触发__new__并且将类名自动传给cls。</span></span><br><span class="line">print(obj)</span><br></pre></td></tr></table></figure><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p>一个类从头到尾只会实例化一次（只创建一次self的空间）。</p><p>这个类的对象不是个性的，主要是实例化对象之后去执行类中的方法。</p><p>节省内存！</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Baby</span>:</span></span><br><span class="line">    __instance = <span class="literal">None</span>    <span class="comment"># 类似flag  存放的是开的那块空间的地址</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> cls.__instance <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            cls.__instance = super().__new__(cls)</span><br><span class="line">        <span class="keyword">return</span> cls.__instance</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,cloth,pants)</span>:</span></span><br><span class="line">        self.cloth = cloth</span><br><span class="line">        self.pants = pants</span><br><span class="line">b1 = Baby(<span class="string">'红毛服'</span>,<span class="string">'绿皮裤'</span>)</span><br><span class="line">b2 = Baby(<span class="string">'白衬衫'</span>,<span class="string">'黑豹纹'</span>)</span><br><span class="line">print(b1)</span><br><span class="line">print(b2)</span><br></pre></td></tr></table></figure><p>上述代码是一个单例模式，关键在于只需要调用一次 <code>__new__</code>方法，所以我们借助flag完成单例模式的设计。</p><p>另一种单例（模块导入的方式）：</p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">单例.py</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Baby</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>,cloth,pants)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>.cloth = cloth</span><br><span class="line">        <span class="keyword">self</span>.pants = pants</span><br><span class="line">baby = Baby(<span class="string">'红毛服'</span>,<span class="string">'绿皮裤'</span>)</span><br><span class="line"></span><br><span class="line">内容.py</span><br><span class="line">from 单例 import baby</span><br><span class="line">print(baby)   <span class="comment"># 用模块的方式会认为是最简单的。 因为模块的导入是一次性的。</span></span><br></pre></td></tr></table></figure><h2 id="del-析构方法"><a href="#del-析构方法" class="headerlink" title="__del__析构方法"></a><code>__del__</code>析构方法</h2><p>调用del x 不表示调用了 <code>x.__del__()</code>——它只是减少了x的引用计数，当引用计数为0的时候会自动调用 <code>__del__()</code>子类没有就调用父类的。</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="symbol">A:</span></span><br><span class="line">    <span class="symbol">def</span> <span class="symbol">__del__</span>(<span class="symbol">self</span>):</span><br><span class="line">        <span class="symbol">print</span>('执行<span class="symbol">__del__</span>')</span><br><span class="line"><span class="symbol">a1</span> = <span class="symbol">A</span>()</span><br><span class="line"><span class="symbol">a2</span> = <span class="symbol">a1</span></span><br><span class="line"><span class="symbol">a3</span> = <span class="symbol">a1</span></span><br><span class="line"><span class="symbol">del</span> <span class="symbol">a1</span></span><br><span class="line"><span class="symbol">del</span> <span class="symbol">a2</span></span><br><span class="line"><span class="symbol">del</span> <span class="symbol">a3</span></span><br><span class="line"></span><br><span class="line"># <span class="symbol">print</span>结果 </span><br><span class="line">执行<span class="symbol">__del__</span></span><br></pre></td></tr></table></figure><h2 id="call"><a href="#call" class="headerlink" title="__call__"></a><code>__call__</code></h2><p>callable(对象) 用来判断这个对象能不能运行。</p><p>对象（）调用的是 <code>__call__</code>方法下面的逻辑。</p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">		print(<span class="string">'-------'</span>)</span><br><span class="line"><span class="comment">#方式一：</span></span><br><span class="line">A()()</span><br><span class="line"><span class="comment">#方式二：</span></span><br><span class="line">a = A()</span><br><span class="line">a()</span><br></pre></td></tr></table></figure><h2 id="len"><a href="#len" class="headerlink" title="__len__"></a><code>__len__</code></h2><p>len(对象) 能不能计算对象的长度，就看对象里有没有定义 <code>__len__</code>方法。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lst = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">len</span><span class="params">(obj)</span>:</span></span><br><span class="line">	<span class="keyword">return</span> obj.__len__</span><br><span class="line">print(lst.__len__)</span><br><span class="line">print(len(obj))</span><br></pre></td></tr></table></figure><p>len(对象) 需要实现这个类中的 <code>__len__</code>方法。</p><h2 id="str"><a href="#str" class="headerlink" title="__str__"></a><code>__str__</code></h2><ol><li>当你想打印对象，%s拼接对象，str（对象）的时候，必须在类内定义一个 <code>__str__</code>方法，才能在打印对象的时候，打印想要的内容，而不是内存地址。</li></ol><figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line">lst = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">print</span>(lst)   		<span class="meta"># 如果没有这个方法，返回的是内存地址</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span>('你好，再见')   <span class="meta"># 如果没有这个方法，返回的是内存地址</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>只能返回 str数据类型。</p></li><li><p>当打印对象，%s拼接对象，str（对象）的时候,我们总是调用这个对象的 <code>__str__</code>方法，如果找不到就调用 <code>__repr__</code>方法。</p></li></ol><h2 id="repr"><a href="#repr" class="headerlink" title="__repr__"></a><code>__repr__</code></h2><ol><li><p><code>__repr__</code>不仅是 <code>__str__</code>的替代品，还有自己的功能</p></li><li><p>用 %r占位或repr(对象)的时候，总是调用<code>__repr__</code>方法。</p></li><li><p>str与repr的关系：</p><ul><li>帮助我们在打印，展示对象的时候更直观的显示对象的内容</li><li>str打印对象，%s拼接对象，str（对象）的时候使用。</li><li>repr是str的备胎，同时还和%r 和repr 有合作关系。</li><li>str范围更大一些，repr更精准，范围更小</li></ul></li></ol><h2 id="item-系列"><a href="#item-系列" class="headerlink" title="__item__ 系列"></a><code>__item__ 系列</code></h2><p>对对象进行类似于字典的操作</p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>,name)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>.name = name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(<span class="keyword">self</span>, item)</span></span><span class="symbol">:</span></span><br><span class="line">        print(<span class="string">'get时执行我了'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.name     	<span class="comment"># 设置返回值，才能查的到</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setitem__</span><span class="params">(<span class="keyword">self</span>, key, value)</span></span><span class="symbol">:</span></span><br><span class="line">        print(key,type(key))</span><br><span class="line">        setattr(<span class="keyword">self</span>,key,value)	<span class="comment"># 使用反射修改对象的属性</span></span><br><span class="line">        print(<span class="string">'set时执行我'</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__delitem__</span><span class="params">(<span class="keyword">self</span>, key)</span></span><span class="symbol">:</span></span><br><span class="line">        print(<span class="string">'del时执行我'</span>)</span><br><span class="line"></span><br><span class="line">a = Foo(<span class="string">'御姐'</span>)</span><br><span class="line">a[<span class="string">'name'</span>]</span><br><span class="line">a[<span class="string">'name'</span>] = <span class="string">'萝莉'</span></span><br><span class="line">print(a.name)</span><br><span class="line">del a[<span class="string">'name'</span>]</span><br></pre></td></tr></table></figure><h2 id="enter-与-exit"><a href="#enter-与-exit" class="headerlink" title="__enter__与__exit__"></a><code>__enter__与__exit__</code></h2><p>对一个对象类似于进行<strong>with语句上下文管理</strong>的操作，必须在类中定义 <strong>enter</strong> <strong>exit</strong> ， 在<strong>enter</strong>这个方法中必须设置返回值，它将对象返回给obj。</p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>,name)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>.name = name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        print(<span class="string">'执行__enter__'</span>)</span><br><span class="line">        print(<span class="keyword">self</span>.__dict_<span class="number">_</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>    <span class="comment"># 将对象返回给obj</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(<span class="keyword">self</span>, exc_type, exc_val, exc_tb)</span></span><span class="symbol">:</span></span><br><span class="line">        print(<span class="string">'执行__exit__'</span>)</span><br><span class="line"></span><br><span class="line">with A(<span class="string">'小黑'</span>) as <span class="symbol">obj:</span></span><br><span class="line">    print(obj.name)</span><br><span class="line">    <span class="comment"># print(obj)</span></span><br></pre></td></tr></table></figure><h2 id="iter-可迭代对象"><a href="#iter-可迭代对象" class="headerlink" title="__iter__可迭代对象"></a><code>__iter__</code>可迭代对象</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="comment"># 将一个对象设置成一个可迭代对象</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line">obj = A()</span><br><span class="line"><span class="comment"># 1.for内部将可迭代对象转换成迭代器</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> obj:</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.手动将可迭代对象转换成迭代器</span></span><br><span class="line">o = iter(obj)</span><br><span class="line">print(next(o))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.转换成列表</span></span><br><span class="line">print(list(obj))</span><br><span class="line">print(list(obj)[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><h2 id="hash-与-eq"><a href="#hash-与-eq" class="headerlink" title="__hash__与 __eq__"></a><code>__hash__</code>与 <code>__eq__</code></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,count)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.count = count</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__hash__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">f'<span class="subst">&#123;self.name&#125;</span>调用了哈希方法'</span>)</span><br><span class="line">        <span class="comment"># return hash(id(self))</span></span><br><span class="line">        <span class="keyword">return</span> hash(self.count)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__eq__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">        print(<span class="string">f'<span class="subst">&#123;self.name&#125;</span>调用了eq方法'</span>)</span><br><span class="line">        <span class="keyword">if</span> self.__dict__ == other.__dict__:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">a1 = A(<span class="string">'a1'</span>,<span class="number">1</span>)</span><br><span class="line">a2 = A(<span class="string">'a2'</span>,<span class="number">2</span>)</span><br><span class="line">a3 = A(<span class="string">'a2'</span>,<span class="number">2</span>)</span><br><span class="line">a4 = A(<span class="string">'a4'</span>,<span class="number">2</span>)</span><br><span class="line">ls = [a1,a2,a3,a4]</span><br><span class="line">print(set(ls))</span><br></pre></td></tr></table></figure><p>set()函数的实现机制：</p><ul><li>当两个变量的哈希值不相同时，就认为这两个变量是不同的。</li><li>当两个变量哈希值一样时，调用<code>__eq__</code>方法，当返回值为True时认为这两个变量是同一个，应该去除一个。返回FALSE时，不去重。</li></ul><h2 id="使用过的函数"><a href="#使用过的函数" class="headerlink" title="使用过的函数"></a>使用过的函数</h2><table><thead><tr><th align="center">函数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">callable(object)</td><td align="center">判断对象是否是可调用的（如是否是函数或方法）</td></tr><tr><td align="center">getattr(object, name[,default])</td><td align="center">获取属性的值，还可提供默认值</td></tr><tr><td align="center">hasattr(object, name)</td><td align="center">确定对象是否有指定的属性</td></tr><tr><td align="center">isinstance(object, class)</td><td align="center">确定对象是否是指定类的<strong>实例</strong></td></tr><tr><td align="center">issubclass(A, B)</td><td align="center">确定A是否是B的<strong>子类</strong></td></tr><tr><td align="center">setattr(object, name, value)</td><td align="center">将对象的指定属性设置为指定的值</td></tr><tr><td align="center">type(object)</td><td align="center">返回对象的类型</td></tr></tbody></table><h2 id="元类type"><a href="#元类type" class="headerlink" title="元类type"></a>元类type</h2><p>按照Python的一切皆对象理论，类其实也是一个对象，那么类这个对象是从哪里实例化出来的呢？</p><figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">print(<span class="name">type</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]))</span><br><span class="line">print(<span class="name">type</span>(<span class="name">list</span>))</span><br><span class="line"># &lt;class 'list'&gt;</span><br><span class="line"># &lt;class 'type'&gt;</span><br></pre></td></tr></table></figure><p>type元类是获取该对象从属于的类,而type类比较特殊，Python原则是：一切皆对象，其实类也可以理解为’对象’,而type元类又称作构建类，python中大多数内置的类（包括object）以及自己定义的类，都是由type元类创造的。</p><p>而type类与object类之间的关系比较独特：<strong>object是type类的实例，而type类是object类的子类</strong>，这种关系比较神奇无法使用python的代码表述，因为定义其中一个之前另一个必须存在。</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">print(type(object))  				# &lt;<span class="keyword">class</span> '<span class="symbol">type</span>'&gt;   <span class="symbol">object</span>是<span class="symbol">type</span>的实例化对象</span><br><span class="line"><span class="symbol">print</span>(<span class="symbol">isinstance</span>(<span class="symbol">object,<span class="symbol">type</span></span>))		# <span class="symbol">True</span>   </span><br><span class="line"><span class="symbol">print</span>(<span class="symbol">isinstance</span>(<span class="symbol">type,<span class="symbol">object</span></span>))		# <span class="symbol">True</span></span><br><span class="line"><span class="symbol">print</span>(<span class="symbol">issubclass</span>(<span class="symbol">type,<span class="symbol">object</span></span>))		# <span class="symbol">True</span>   <span class="symbol">type</span>是<span class="symbol">object</span>的子类</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p><strong>对象</strong>：对象由属性和方法组成。属性不过是属于对象的变量，而方法是存储在属性中的函数。相比于其他函数，（关联的）方法有一个不同之处，那就是它总是将其所属的对象作为第一个参数，而这个参数通常被命名为self。</p><p><strong>类</strong>：类表示一组（或一类）对象，而每个对象都属于特定的类。类的主要任务是定义其实例将包含的方法。</p><p><strong>多态</strong>：多态指的是能够同样地对待不同类型和类的对象，即无需知道对象属于哪个类就可调用其方法。</p><p>​ 补充：为不同数据类型的实体提供统一的接口（理解：这个人可以接受各种各样的朋友）</p><p><strong>封装</strong>：对象可能隐藏（封装）其内部状态。在有些语言中，这意味着对象的状态（属性） 只能通过其方法来访问。（将一些东西内容封装到一个地方，不受外界干扰，同时你还可以取出来。）</p><p><strong>继承</strong>：一个类可以是一个或多个类的子类，在这种情况下，子类将继承超类的所有方法。 你可指定多个超类，通过这样做可组合正交（独立且不相关）的功能。为此，一种常见的做法是使用一个核心超类以及一个或多个混合超类。</p><p>​ 继承的优点：重载、增强耦合、减少代码重复</p><p>​ 缺点：耦合性增强后、会增加代码难度，牵一发动全身，慎用。</p><p><strong>接口和内省</strong>：一般而言，你无需过于深入地研究对象，而只依赖于多态来调用所需的方 法。然而，如果要确定对象包含哪些方法或属性，有一些函数可供你用来完成这种工作。</p><ul><li>补充：这种手动检查的方法是（hasattr、callable）</li><li>来源：历史上的大部分时间内，Python几乎都只依赖于鸭子类型，即假设所有对象都能完成其工作，同时偶尔使用hasattr来检查所需的方法是否存在。</li></ul><p><strong>抽象基类</strong>：使用模块abc可创建抽象基类。抽象基类用于指定子类必须提供哪些功能，却 不实现这些功能。</p><ul><li>来源：很多其它语言（如Java和Go）都采用引用模块abc提供了官方的解决方案。这个模块为所谓的抽象基类提供了支持。一般而言，抽象类是不能（至少是<strong>不应该</strong>）实例化的类，其职责是定义子类应实现的一组抽象方法。</li></ul><h2 id="面向对象设计"><a href="#面向对象设计" class="headerlink" title="面向对象设计"></a>面向对象设计</h2><p>设计<strong>面向对象模型</strong></p><p>​ (1) 将有关问题的描述（程序需要做什么）记录下来，并给所有的名词、动词和形容词加上标记。</p><p>​ (2) 在名词中找出可能的类。</p><p>​ (3) 在动词中找出可能的方法。</p><p>​ (4) 在形容词中找出可能的属性。</p><p>​ (5) 将找出的方法和属性分配给各个类。</p><p>进一步：</p><p>​ (1) 记录（或设想）一系列用例，即使用程序的场景，并尽力确保这些用例涵盖了所有的功能。</p><p>​ (2) 透彻而仔细地考虑每个场景，确保模型包含了所需的一切。如果有遗漏，就加上；如果 有不太对的地方，就修改。不断地重复这个过程，直到对模型满意为止。</p><p>有了你认为行之有效的模型后，就可以着手编写程序了。</p><h2 id="关于面向对象设计的一些思考"><a href="#关于面向对象设计的一些思考" class="headerlink" title="关于面向对象设计的一些思考"></a>关于面向对象设计的一些思考</h2><ol><li><p>将相关的东西放在一起。如果一个函数操作一个全局变量，最好将它们作为一个类的属 性和方法。</p></li><li><p>不要让对象之间过于亲密。方法应只关心其所属实例的属性，对于其他实例的状态，让它们自己去管理就好了。</p></li><li><p>慎用继承，尤其是多重继承。继承有时很有用，但在有些情况下可能带来不必要的复杂性。要正确地使用多重继承很难，要排除其中的bug更难。</p></li><li><p>保持简单。让方法短小紧凑。一般而言，应确保大多数方法都能在30秒内读完并理解。 对于其余的方法，尽可能将其篇幅控制在一页或一屏内。</p></li></ol><hr>]]></content>
      <categories>
        <category>python学习</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>利用python模拟数据库的增删改查</title>
    <url>/learn-python/20190408-python-simulate-database-operation.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>本篇利用python以及使用re模块来完成数据库中表的增删查改。希望将来可以在进行扩展。以下是要求，以及源码。</p></blockquote><a id="more"></a><hr><p>要求：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">由于只有一个表，所以只能在这个表中进行操作</span><br><span class="line">可以进行对员工信息表的内容进行增、删、查、改</span><br><span class="line">增： <span class="keyword">INSERT</span> <span class="keyword">VALUES</span>(值<span class="number">1</span>，值<span class="number">2</span>，...)</span><br><span class="line">查： <span class="keyword">SELECT</span> * <span class="keyword">WHERE</span> age &gt; <span class="number">20</span></span><br><span class="line">改： <span class="keyword">SET</span> <span class="keyword">name</span> = <span class="string">'sb'</span> <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">1</span></span><br><span class="line">删： <span class="keyword">DELETE</span> <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure><p>使用了re正则模块，进行字符串的匹配，增加容错能力。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">BASE_PATH = os.path.dirname(__file__)</span><br><span class="line">sys.path.append(os.path.dirname(BASE_PATH))</span><br><span class="line"><span class="keyword">from</span> core <span class="keyword">import</span> home_page</span><br><span class="line"><span class="keyword">from</span> config <span class="keyword">import</span> settings</span><br><span class="line"></span><br><span class="line">exp1 = <span class="string">'select name, age where age&gt;22  '</span></span><br><span class="line">exp2 = <span class="string">'select * where job=IT  '</span></span><br><span class="line">exp3 = <span class="string">'select * where phone like 133'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func_title</span><span class="params">(li,r1,title)</span>:</span></span><br><span class="line">    <span class="string">'''为查询结果添加列名'''</span>         <span class="comment"># 重复率太高了</span></span><br><span class="line">    l2 = []</span><br><span class="line">    <span class="keyword">if</span> <span class="string">','</span> <span class="keyword">in</span> r1:  <span class="comment"># 多个列</span></span><br><span class="line">        l1 = r1.strip().split(<span class="string">','</span>)</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> l1:</span><br><span class="line">            l2.append(j)</span><br><span class="line">        li.append(l2)</span><br><span class="line">        <span class="keyword">return</span> li</span><br><span class="line">    <span class="keyword">elif</span> <span class="string">'*'</span> <span class="keyword">in</span> r1:  <span class="comment"># 所有列</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> title:</span><br><span class="line">            l2.append(j.strip())</span><br><span class="line">        li.append(l2)</span><br><span class="line">        <span class="keyword">return</span> li</span><br><span class="line">    <span class="keyword">else</span>:   <span class="comment"># 一个列</span></span><br><span class="line">        l2.append(r1)</span><br><span class="line">        li.append(l2)</span><br><span class="line">        <span class="keyword">return</span> li</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">filter_sub</span><span class="params">(li,r1,dic_f)</span>:</span></span><br><span class="line">    <span class="string">'''对于列名的处理有三种情况：单个列名，多个列名，所有列名'''</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">','</span> <span class="keyword">in</span> r1:</span><br><span class="line">        l1 = r1.strip().split(<span class="string">','</span>)</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> l1:</span><br><span class="line">            li.append(dic_f[j.strip()])</span><br><span class="line">        <span class="keyword">return</span> li</span><br><span class="line">    <span class="keyword">elif</span> <span class="string">'*'</span> <span class="keyword">in</span> r1:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> dic_f.values():</span><br><span class="line">            li.append(j.strip())</span><br><span class="line">        <span class="keyword">return</span> li</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        li.append(dic_f[r1])</span><br><span class="line">        <span class="keyword">return</span> li</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func_filter</span><span class="params">(li,dic_f,r1,r2,r3,r4)</span>:</span></span><br><span class="line">    <span class="string">'''where条件后的判断方式 &gt; &lt; , = '''</span></span><br><span class="line">    <span class="keyword">if</span> r3 == <span class="string">'&gt;'</span>:</span><br><span class="line">        <span class="keyword">if</span> float(dic_f[r2]) &gt; float(r4):</span><br><span class="line">            <span class="keyword">return</span> filter_sub(li, r1, dic_f)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> li</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> r3 == <span class="string">'&lt;'</span>:</span><br><span class="line">        <span class="keyword">if</span> float(dic_f[r2]) &lt; float(r4):</span><br><span class="line">            <span class="keyword">return</span> filter_sub(li, r1, dic_f)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> li</span><br><span class="line">    <span class="keyword">elif</span> r3 == <span class="string">'='</span>:</span><br><span class="line">        <span class="comment">#     # 先确定 where条件后的判断方式 &gt; &lt; =  ，接下来确定 该项留不留下,做成函数，返回True or False，   第三步：该项输出的内容</span></span><br><span class="line">        <span class="keyword">if</span> dic_f[r2] == r4:</span><br><span class="line">            <span class="keyword">return</span> filter_sub(li,r1,dic_f)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> li</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> r3 == <span class="string">'like'</span>:</span><br><span class="line">        <span class="keyword">if</span> r4 <span class="keyword">in</span> dic_f[r2] :</span><br><span class="line">            <span class="keyword">return</span> filter_sub(li, r1, dic_f)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> li</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func_select</span><span class="params">(exp)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    模拟数据库查询select操作，支持：大于小于等于，还要支持模糊查找。</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    exp = exp.strip()</span><br><span class="line">    pa = <span class="string">'[sS][eE][lL][eE][cC][tT]\s+(\w+(?:,\s*\w+)*|[*])\s+(?:from\s+\d+\s+)?[wW][hH][eE][rR][eE]\s+(\w+)(?:\s*([&gt;&lt;])\s*|\s*([=])\s*|\s+([lL][iI][kK][eE])\s+)(\w+)\s*$'</span></span><br><span class="line">    ret = re.match(pa, exp)</span><br><span class="line">    <span class="keyword">if</span> ret:</span><br><span class="line">        r1 = ret.group(<span class="number">1</span>).strip()        <span class="comment"># name, age   # 最终显示的项</span></span><br><span class="line">        r2 = ret.group(<span class="number">2</span>).strip()        <span class="comment"># 比较的条件1</span></span><br><span class="line">        r3 = list(filter(<span class="keyword">lambda</span> x:x,[ret.group(<span class="number">3</span>),ret.group(<span class="number">4</span>),ret.group(<span class="number">5</span>)]))[<span class="number">0</span>].strip()   <span class="comment">#ret.group(3) ，4，5 分别为 &gt;&lt; , = , like。从中选一个当作r3</span></span><br><span class="line">        r4 = ret.group(<span class="number">6</span>).strip()        <span class="comment">## 比较的条件2</span></span><br><span class="line">        <span class="keyword">with</span> open(settings.USER_INFO_PATH, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            title = f.readline().strip().split(<span class="string">','</span>)</span><br><span class="line">            li = []</span><br><span class="line">            li = func_title(li,r1,title)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> f:</span><br><span class="line">                l1 = []</span><br><span class="line">                dic_f = &#123;k: <span class="string">''</span> <span class="keyword">for</span> k <span class="keyword">in</span> title&#125;</span><br><span class="line">                lis_f = i.strip().split(<span class="string">','</span>)</span><br><span class="line">                <span class="keyword">for</span> j, k <span class="keyword">in</span> zip(dic_f, lis_f):</span><br><span class="line">                    dic_f[j] = k</span><br><span class="line">                <span class="comment"># print(dic_f)</span></span><br><span class="line">                l1 = func_filter(l1,dic_f,r1,r2,r3,r4)</span><br><span class="line">                <span class="keyword">if</span> l1:li.append(l1)</span><br><span class="line">        <span class="keyword">if</span> li:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> li:</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> i:</span><br><span class="line">                    print(<span class="string">'\t'</span>+ j+ <span class="string">'\t'</span>,end=<span class="string">''</span>)</span><br><span class="line">                print()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'信息不存在！'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'查询语句有误'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_sub</span><span class="params">(l1)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(settings.USER_INFO_PATH, encoding=<span class="string">'utf-8'</span>, mode=<span class="string">'r+'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        title = f.readline().strip().split(<span class="string">','</span>)</span><br><span class="line">        <span class="comment"># print(title)</span></span><br><span class="line">        <span class="keyword">if</span> len(title)&gt;<span class="number">2</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> f:</span><br><span class="line">                l2 = i.strip()</span><br><span class="line">            l2 = l2.split(<span class="string">','</span>)  <span class="comment"># 使用最后一次的id</span></span><br><span class="line">            <span class="keyword">if</span> len(l1) + <span class="number">1</span> == len(title):</span><br><span class="line">                content = <span class="string">'\n'</span> + str(int(l2[<span class="number">0</span>])+<span class="number">1</span>) + <span class="string">','</span></span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> l1:</span><br><span class="line">                    content = content + i.strip() + <span class="string">','</span></span><br><span class="line">                content = content.strip(<span class="string">','</span>)</span><br><span class="line">                f.write(content)</span><br><span class="line">                print(<span class="string">'添加成功！'</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">'输入的值的数量不对应'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'输入的值的数量不对应'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func_insert</span><span class="params">(exp)</span>:</span></span><br><span class="line">    <span class="string">'''模拟数据库inset操作'''</span></span><br><span class="line">    exp = exp.strip()</span><br><span class="line">    pa = <span class="string">'[iI][nN][sS][eE][rR][tT]\s+(?:into\s+\w+\s+)?values\s*[(]\s*(\w+\s*(?:[,，]\s*\w+\s*)*)[)]$'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 支持两种方式：INSERT INTO 表名称 VALUES (值1, 值2,....)   INSERT INTO table_name (列1, 列2,...) VALUES (值1, 值2,....)</span></span><br><span class="line">    ret = re.match(pa, exp)</span><br><span class="line">    <span class="keyword">if</span> ret:</span><br><span class="line">        print(ret.group(<span class="number">0</span>))</span><br><span class="line">        print(ret.group(<span class="number">1</span>))</span><br><span class="line">        r1 = ret.group(<span class="number">1</span>).strip()</span><br><span class="line">        <span class="keyword">if</span> <span class="string">','</span> <span class="keyword">in</span> r1:</span><br><span class="line">            l1 = r1.split(<span class="string">','</span>)</span><br><span class="line">            <span class="comment"># print(l1)</span></span><br><span class="line">            <span class="comment"># 多个元素</span></span><br><span class="line">            insert_sub(l1)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 单个元素</span></span><br><span class="line">            insert_sub(r1)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'增加语句有误'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func_modify</span><span class="params">(exp)</span>:</span></span><br><span class="line">    <span class="string">'''模拟数据库的改操作set'''</span></span><br><span class="line">    exp = exp.strip()</span><br><span class="line">    pa = <span class="string">"[sS][eE][tT]\s+((?:(?:\w+)\s*=\s*'?(?:\w+)\s+'?)+)\s*[wW][hH][eE][rR][eE]\s+(id)\s*(=)\s*(\d+)"</span></span><br><span class="line">    ret = re.match(pa,exp)</span><br><span class="line">    <span class="keyword">if</span> ret:</span><br><span class="line">        <span class="comment"># print(ret.group(1))</span></span><br><span class="line">        <span class="comment"># print(ret.group(2))</span></span><br><span class="line">        <span class="comment"># print(ret.group(3))</span></span><br><span class="line">        <span class="comment"># print(ret.group(4))</span></span><br><span class="line">        r1 = ret.group(<span class="number">1</span>)       <span class="comment"># name = atlas job = ce phone = 1345        name=atlas job=ce phone=1345</span></span><br><span class="line">        r2 = ret.group(<span class="number">2</span>)       <span class="comment"># id</span></span><br><span class="line">        r3 = ret.group(<span class="number">3</span>)       <span class="comment"># =</span></span><br><span class="line">        r4 = ret.group(<span class="number">4</span>)       <span class="comment"># 4</span></span><br><span class="line">        pa2 = <span class="string">'\s*(\w+)\s*=\s*(\w+)\s*'</span></span><br><span class="line">        r5 = re.findall(pa2,r1)</span><br><span class="line">        print(r5)</span><br><span class="line">        <span class="keyword">with</span> open(settings.USER_INFO_PATH, encoding=<span class="string">'utf-8'</span>)<span class="keyword">as</span> f1 ,\</span><br><span class="line">             open(settings.USER_INFO_PATH+<span class="string">'.swap'</span>,encoding=<span class="string">'utf-8'</span>,mode=<span class="string">'w'</span>) <span class="keyword">as</span>  f2 :</span><br><span class="line">                title = f1.readline().strip().split(<span class="string">','</span>)</span><br><span class="line">                f2.write(<span class="string">','</span>.join(title)+<span class="string">'\n'</span>)</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> f1:</span><br><span class="line">                    dic_f = &#123;k: <span class="string">''</span> <span class="keyword">for</span> k <span class="keyword">in</span> title&#125;</span><br><span class="line">                    lis_f = i.strip().split(<span class="string">','</span>)</span><br><span class="line">                    <span class="keyword">for</span> j, k <span class="keyword">in</span> zip(dic_f, lis_f):</span><br><span class="line">                        dic_f[j] = k</span><br><span class="line">                    <span class="keyword">if</span> dic_f[<span class="string">'id'</span>] == r4:</span><br><span class="line">                        <span class="keyword">for</span> j <span class="keyword">in</span> r5:</span><br><span class="line">                            dic_f[j[<span class="number">0</span>]] = j[<span class="number">1</span>]</span><br><span class="line">                        cont = <span class="string">''</span></span><br><span class="line">                        <span class="keyword">for</span> k <span class="keyword">in</span> dic_f.values():</span><br><span class="line">                            cont = cont + k + <span class="string">','</span></span><br><span class="line">                        cont = cont.strip(<span class="string">','</span>)</span><br><span class="line">                        f2.write(cont+<span class="string">'\n'</span>)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        f2.write(i)</span><br><span class="line">                print(<span class="string">'修改成功！'</span>)</span><br><span class="line">        os.remove(settings.USER_INFO_PATH)</span><br><span class="line">        os.rename(settings.USER_INFO_PATH+<span class="string">'.swap'</span>,settings.USER_INFO_PATH)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'SQL语句输入错误！'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func_del</span><span class="params">(exp)</span>:</span></span><br><span class="line">    <span class="string">'''模拟数据库的删除操作delete'''</span></span><br><span class="line">    exp = exp.strip()</span><br><span class="line">    pa = <span class="string">'\s*[dD][eE][lL][eE][tT][eE]\s+[wW][hH][eE][rR][eE]\s+id\s*=\s*(\d+)'</span></span><br><span class="line">    ret = re.match(pa, exp)</span><br><span class="line">    <span class="keyword">if</span> ret:</span><br><span class="line">        r1 = ret.group(<span class="number">1</span>)  <span class="comment"># id = (6) 因为只有一个表，而id是这个表的主键，所以我们把主键默认为id去进行匹配</span></span><br><span class="line">        print(r1)</span><br><span class="line">        <span class="keyword">with</span> open(settings.USER_INFO_PATH, encoding=<span class="string">'utf-8'</span>)<span class="keyword">as</span> f1, \</span><br><span class="line">                open(settings.USER_INFO_PATH+<span class="string">'.swap'</span>, encoding=<span class="string">'utf-8'</span>, mode=<span class="string">'w'</span>) <span class="keyword">as</span>  f2:</span><br><span class="line">            title = f1.readline().strip().split(<span class="string">','</span>)</span><br><span class="line">            f2.write(<span class="string">','</span>.join(title) + <span class="string">'\n'</span>)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> f1:</span><br><span class="line">                dic_f = &#123;k: <span class="string">''</span> <span class="keyword">for</span> k <span class="keyword">in</span> title&#125;</span><br><span class="line">                lis_f = i.strip().split(<span class="string">','</span>)</span><br><span class="line">                <span class="keyword">for</span> j, k <span class="keyword">in</span> zip(dic_f, lis_f):</span><br><span class="line">                    dic_f[j] = k</span><br><span class="line">                <span class="keyword">if</span> dic_f[<span class="string">'id'</span>] == r1:</span><br><span class="line">                    <span class="keyword">pass</span>  <span class="comment"># 找到待删除的id，就把这条记录丢下。</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    f2.write(i)</span><br><span class="line">            print(<span class="string">'修改成功！'</span>)</span><br><span class="line">        os.remove(settings.USER_INFO_PATH)</span><br><span class="line">        os.rename(settings.USER_INFO_PATH+<span class="string">'.swap'</span>, settings.USER_INFO_PATH)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'SQL语句输入错误！'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">'''程序入口'''</span></span><br><span class="line">    home_page.home()</span><br><span class="line">    flag = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">while</span> flag:</span><br><span class="line">        choose = input(<span class="string">' 请输入SQL语句&gt;&gt;&gt; '</span>)</span><br><span class="line">        pat2 = <span class="string">'[iI][nN][sS][eE][rR][tT]'</span></span><br><span class="line">        <span class="keyword">if</span> re.findall(<span class="string">'[sS][eE][lL][eE][cC][tT]'</span>,choose):</span><br><span class="line">            <span class="comment"># 执行查询操作</span></span><br><span class="line">            func_select(choose)</span><br><span class="line">        <span class="keyword">elif</span> re.findall(<span class="string">'[iI][nN][sS][eE][rR][tT]'</span>,choose):</span><br><span class="line">            <span class="comment"># 执行增加操作</span></span><br><span class="line">            func_insert(choose)</span><br><span class="line">        <span class="keyword">elif</span> re.findall(<span class="string">'[sS][eE][tT]'</span>,choose):</span><br><span class="line">            <span class="comment"># 执行修改操作</span></span><br><span class="line">            func_modify(choose)</span><br><span class="line">        <span class="keyword">elif</span> re.findall(<span class="string">'[dD][eE][lL][eE][tT][eE]'</span>,choose):</span><br><span class="line">            <span class="comment"># 执行删除操作</span></span><br><span class="line">            func_del(choose)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'输入的SQL语句有误'</span>)</span><br><span class="line">        conti = input(<span class="string">'Q/q退出,其他键继续 '</span>)</span><br><span class="line">        print()</span><br><span class="line">        <span class="keyword">if</span> conti.upper() == <span class="string">'Q'</span>:flag = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    run()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python学习</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>正则匹配与Re模块</title>
    <url>/learn-python/20190407-Regular_Expression_and_Python_Re_module.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>本篇介绍正则匹配规则与如何在python中利用Re模块进行正则匹配。</p></blockquote><a id="more"></a><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><h2 id="re模块和正则表达式的关系"><a href="#re模块和正则表达式的关系" class="headerlink" title="re模块和正则表达式的关系"></a>re模块和正则表达式的关系</h2><ul><li><p>正则表达式 和 re 模块没有关系</p></li><li><p>有了re模块就可以在python语言中操作正则表达式</p></li><li><p>re 模块本身不提供规则，它只是能让python可以使用正则表达式</p></li></ul><h2 id="什么是正则表达式？"><a href="#什么是正则表达式？" class="headerlink" title="什么是正则表达式？"></a>什么是正则表达式？</h2><p>一套规则，用来匹配字符串</p><h2 id="能做什么？"><a href="#能做什么？" class="headerlink" title="能做什么？"></a>能做什么？</h2><ul><li><p>检测一个输入的字符串是否合法（场景1）（web开发项目 表单验证）</p><pre><code>用户输入一个内容的时候，我们要提前做检测，这样能提高程序的效率和减少服务器的压力</code></pre></li><li><p>从一个大文件当中找到所有符合规则的内容（场景2）（日志分析，爬虫）<br>能够高效的从一大段文字中快速找到符合规则的内容。</p></li></ul><p>这两个场景的差别在于：</p><ul><li>场景一，我们常用^ $ 限制字符串为想要的内容；场景二，要尽可能匹配符合规则地字符串。</li></ul><h2 id="正则规则"><a href="#正则规则" class="headerlink" title="正则规则"></a>正则规则</h2><p>所有的规则中的字符就可以刚好匹配到字符串的内容</p><h1 id="正则规则-第一部分"><a href="#正则规则-第一部分" class="headerlink" title="正则规则-第一部分"></a>正则规则-第一部分</h1><h2 id="字符组"><a href="#字符组" class="headerlink" title="字符组[]"></a>字符组<code>[]</code></h2><p>字符组：描述的是一个位置上能出现的所有可能性</p><p>接受范围：可以描述多个范围，连着写就行</p><ul><li><p>[abc] 一个中括号只表示一个字符位置</p></li><li><p>意思是匹配a或b或c</p></li><li><p>[匹配一个数字]</p><ul><li>[0-9] 根据ASCII码进行范围的比对</li><li>（0的ascii到9的ascii之间的所有；这个范围只能从小到大） 如[0-7]可以 但[7-0]不行</li><li>[a-zA-z] 表示大小写</li><li>记忆：</li></ul><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">A <span class="number">65</span> - Z <span class="number">90</span>      a <span class="number">97</span> - z <span class="number">122</span></span><br><span class="line">中文的 unicode 编码范围 主要在 [\u4e00-\u9fa5]</span><br></pre></td></tr></table></figure></li></ul><h2 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h2><p>元字符：在正则表达式中能够帮助我们表示匹配的内容的符号</p><figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">铺垫：</span><br><span class="line">[0-9]         --&gt;  <span class="symbol">\d</span>  表示匹配一位任意数字              digit</span><br><span class="line">[0-9a-zA-Z_]  --&gt;  <span class="symbol">\w</span>  匹配所有的数字字母下划线           word</span><br><span class="line">空白符（空格 <span class="symbol">\t</span>ab <span class="symbol">\e</span>nter）--&gt; 空格|<span class="symbol">\t</span>|<span class="symbol">\n</span>   ---&gt;   <span class="symbol">\s</span>  表示所有空白包括空格，tab和回车</span><br><span class="line"></span><br><span class="line">元字符：  -- 匹配内容的规则</span><br><span class="line">[]   [^]</span><br><span class="line"><span class="symbol">\d</span>  任意数字</span><br><span class="line"><span class="symbol">\w</span>  数字字母下划线</span><br><span class="line"><span class="symbol">\s</span>  空白符</span><br><span class="line"><span class="symbol">\t</span></span><br><span class="line"><span class="symbol">\n</span></span><br><span class="line"></span><br><span class="line">取反</span><br><span class="line"><span class="symbol">\W</span>    # 非数字字母下划线</span><br><span class="line"><span class="symbol">\D</span>    # 只要不是数字就能匹配    非数字</span><br><span class="line"><span class="symbol">\S</span>    # 只要不是空白符就能匹配   非空白</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[<span class="symbol">\d</span><span class="symbol">\D</span>]  [<span class="symbol">\w</span><span class="symbol">\W</span>]  [<span class="symbol">\s</span><span class="symbol">\W</span>] 表示能够匹配所有   近似---&gt; .</span><br><span class="line">.  表示匹配除了换行符之外的所有的一个字符, 但是可以设置.匹配所有</span><br><span class="line">加上re.DOTALL 这样就可以把换行也可以进行匹配。 re.findall(pat,st,re.DOTALL)</span><br><span class="line"></span><br><span class="line">[^] 非字符组 必须放首位  (不在这个字符组中的都可以匹配)</span><br><span class="line">    [^<span class="symbol">\d</span>] 匹配所有的非数字</span><br><span class="line">    [^1]</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">^  匹配一个字符串的开始 （一定放开头（在字符组中有些不同(表示非字符组)））</span><br><span class="line">$  匹配一个字符串的结尾 （一定放结尾）</span><br><span class="line">        送命题：  ^a.$   匹配abacad中的什么？</span><br><span class="line">        ^ 和 $ 约束了字符串的开头、结尾以及长度。 圈死了字符串的内容</span><br><span class="line">a表达式| b表达式   匹配a或者b表达式中的内容，如果a匹配成功，不会继续向右</span><br><span class="line">                    所以，如果两个规则有重叠部分，总会把长的放在前面。</span><br><span class="line">        小坑  ab|abc    正则是从左到右，如果先遇到ab 就不会对后面的进行检测</span><br><span class="line">             abc|ab</span><br><span class="line">()  约束元字符的作用域   约束 | 描述的内容的范围</span><br><span class="line">	www<span class="symbol">\.</span>oldboy<span class="symbol">\.</span>com|www<span class="symbol">\.</span>baidu<span class="symbol">\.</span>com|www<span class="symbol">\.</span>taobao<span class="symbol">\.</span>com  </span><br><span class="line">	---&gt; www<span class="symbol">\.</span>(taobao|baidu|oldboy)<span class="symbol">\.</span>com</span><br><span class="line">补充  ：</span><br><span class="line"><span class="symbol">\b</span>   对于边界的处理    ing<span class="symbol">\b</span>  匹配ing结尾地词</span><br><span class="line"></span><br><span class="line">小结：记忆元字符：  都是表示能匹配哪些内容，一个元字符总是表示一个字符位置上的内容。</span><br><span class="line"><span class="symbol">\d</span> <span class="symbol">\w</span> <span class="symbol">\s</span> <span class="symbol">\t</span> <span class="symbol">\n</span>  <span class="symbol">\D</span>  <span class="symbol">\W</span>  <span class="symbol">\S</span></span><br><span class="line">[]  [^]  .</span><br><span class="line">^  $</span><br><span class="line">| ()</span><br><span class="line"></span><br><span class="line">例子： 两位整数</span><br><span class="line">            [1-9]<span class="symbol">\d</span></span><br><span class="line">            字符组是最细腻的。  约束更强</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>如果匹配成功：光标移动到匹配成功的最后一个字符</li><li>如果匹配失败，就从匹配开始字符的下一个字符开始</li><li>例子</li></ul><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">print</span>(re.<span class="keyword">findall</span>(<span class="string">'a.b'</span>,<span class="string">'aaab'</span>))   # [<span class="string">'aab'</span>]</span><br><span class="line"><span class="keyword">print</span>(re.<span class="keyword">findall</span>(<span class="string">'a.b'</span>,<span class="string">'aabbb'</span>))  # [<span class="string">'aab'</span>]</span><br></pre></td></tr></table></figure><h2 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h2><p>量词 ：必须跟在<strong>元字符后面</strong>，只能约束前面元字符的出现的<strong>次数</strong></p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">&#123;n&#125; 表示匹配n次</span><br><span class="line">&#123;n,&#125; 表示匹配至少n次</span><br><span class="line">&#123;n,m&#125; 表示至少匹配n次，至多m次    </span><br><span class="line"></span><br><span class="line"> ?  表示匹配<span class="number">0</span>次或<span class="number">1</span>次:  要么出现要么不出现</span><br><span class="line"> +  表示<span class="number">1</span>次或多次 ：   至少得出现一次</span><br><span class="line"> *  表示<span class="number">0</span>次或多次：    任意次 </span><br><span class="line">            理解: 从坐标轴上  ？是（<span class="number">0</span>，<span class="number">1</span>）  + 是（<span class="number">1</span>，正无穷） * 是所有</span><br><span class="line">                                    &#123;<span class="number">0</span>,<span class="number">1</span>&#125;         &#123;<span class="number">1</span>,&#125;        &#123;<span class="number">0</span>,&#125;                                    </span><br><span class="line">匹配<span class="number">0</span>次：  <span class="number">0</span>表示可不出现</span><br><span class="line">    例 匹配任意整数：  \d+</span><br><span class="line">    例 匹配小数 \d+\.\d+</span><br><span class="line">    整数或小数：  \d+\.?\d*  这个有个漏洞：<span class="number">123.</span>    </span><br><span class="line">         分组的作用: \d+(\.\d+)?</span><br><span class="line">            疑问：为什么\d+(\.\d*) 不能用?  它只能匹配小数，整数匹配不了</span><br></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">练习： 匹配手机号码</span><br><span class="line">		<span class="number">1</span> <span class="number">3</span><span class="number">-9</span>  <span class="number">11</span>位</span><br><span class="line">      <span class="number">1</span>[<span class="number">3</span><span class="number">-9</span>]\d&#123;<span class="number">9</span>&#125;</span><br><span class="line">    判断用户输入的内容是否合法，如果输入的对就能查到结果，如果输入的不对就不能查到结果</span><br><span class="line">        我们需要限制开头结尾了</span><br><span class="line">        ^<span class="number">1</span>[<span class="number">3</span><span class="number">-9</span>]\d&#123;<span class="number">9</span>&#125;$</span><br><span class="line">        场景一小结： 约束用户输入必须和规定的一样</span><br><span class="line">    从一个大文件中找到所有符合规则的内容</span><br><span class="line">        <span class="number">1</span>[<span class="number">3</span><span class="number">-9</span>]\d&#123;<span class="number">9</span>&#125;</span><br><span class="line">        场景二小结：匹配符合规则的所有内容</span><br><span class="line"></span><br><span class="line">    场景一二的区别在于：是否限制开头结尾</span><br></pre></td></tr></table></figure><h2 id="贪婪匹配"><a href="#贪婪匹配" class="headerlink" title="贪婪匹配"></a>贪婪匹配</h2><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"> 贪婪匹配    ---&gt; 往右走是贪心算法，往左返回是回溯算法</span><br><span class="line">\d&#123;<span class="number">3</span>,<span class="number">9</span>&#125;  为什么匹配<span class="number">9</span></span><br><span class="line">   在量词范围允许的情况下，尽可能地匹配多的。</span><br><span class="line">   \d&#123;<span class="number">3</span>,<span class="number">9</span>&#125;<span class="number">6</span></span><br><span class="line"> </span><br><span class="line"> 非贪婪（或惰性）匹配</span><br><span class="line">     \d&#123;<span class="number">3</span>,<span class="number">9</span>&#125;?<span class="number">6</span>   在量词后面加？就变成非贪婪了</span><br><span class="line">     元字符  量词  ？   （注意与元字符 ？区分） （元字符？？x 表示直接匹配x）</span><br><span class="line">                 <span class="number">1</span>\d?<span class="number">3</span>       <span class="number">1</span>\d??<span class="number">3</span>      <span class="number">133</span></span><br><span class="line">     .*?x 表示匹配任意字符，任意多次数，但是一旦遇到x就停下来。</span><br><span class="line">     .*x 表示匹配任意字符，任意多次数，遇到最后一个x就停下来。</span><br></pre></td></tr></table></figure><h3 id="转义符"><a href="#转义符" class="headerlink" title="转义符"></a>转义符</h3><figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line">原本有特殊意义地字符，到了表达她本身地意义地时候，需要转义</span><br><span class="line">有一些有特殊意义的内容，放在字符组中，会取消它地特殊意义。</span><br><span class="line">        <span class="string">[.]</span></span><br><span class="line">        <span class="string">[().*+?]</span></span><br><span class="line">        <span class="string">[-c]</span>或<span class="string">[a-]</span>  # 只表示减号</span><br><span class="line"><span class="string">[a\-c]</span>  - 在字符组中表示范围，如果不希望它表示范围，需要转义，或者放在最前面或最后面</span><br><span class="line">    只有\- 是表示减号本身。</span><br></pre></td></tr></table></figure><p>小结：</p><figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># 元字符  表示匹配内容地符号</span></span><br><span class="line"> \系列</span><br><span class="line"> []  [^]   .</span><br><span class="line"> ^  $</span><br><span class="line"> ()  |     量词约束范围或整体范围</span><br><span class="line"> </span><br><span class="line"><span class="meta"># 量词</span></span><br><span class="line"> &#123;&#125;  表示任意的次数，任意的次数范围，至多至少多少次。</span><br><span class="line"> ？ + *</span><br><span class="line"></span><br><span class="line"><span class="meta"># 贪婪和非贪婪匹配</span></span><br><span class="line"> 总是在量词范围内多匹配——贪婪</span><br><span class="line"> 总是在量词范围内少匹配——惰性</span><br><span class="line"> .*?x 匹配任意内容任意次数，遇到x停止</span><br><span class="line"> .+?x 匹配任意内容至少一次，遇到x停止</span><br><span class="line">    </span><br><span class="line"><span class="meta"># 转义符问题</span></span><br><span class="line"> .有特殊地意义，取消特殊的意义：\.</span><br><span class="line"> 取消一个元字符地特殊意义有两种方法：</span><br><span class="line">         在这个元字符前加\</span><br><span class="line">         对一部分字符生效，把这个元字符放在字符组里</span><br><span class="line">            [.()+?*]   但一定要注意 -</span><br></pre></td></tr></table></figure><p>练习</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">匹配<span class="number">18</span>/<span class="number">15</span>位地身份证号</span><br><span class="line">   #<span class="number">15</span>位</span><br><span class="line">       # <span class="number">1</span><span class="number">-9</span></span><br><span class="line">       # [<span class="number">1</span><span class="number">-9</span>]\d&#123;<span class="number">14</span>&#125;</span><br><span class="line">   # <span class="number">18</span>位</span><br><span class="line">       # <span class="number">1</span><span class="number">-9</span></span><br><span class="line">       # <span class="number">16</span>个数字</span><br><span class="line">       # <span class="number">0</span><span class="number">-9</span>/x</span><br><span class="line">       # [<span class="number">1</span><span class="number">-9</span>]\d&#123;<span class="number">16</span>&#125;[<span class="number">0</span><span class="number">-9</span>x]</span><br><span class="line">   # 小坑: ^([<span class="number">1</span><span class="number">-9</span>]\d&#123;<span class="number">16</span>&#125;[<span class="number">0</span><span class="number">-9</span>x]|[<span class="number">1</span><span class="number">-9</span>]\d&#123;<span class="number">14</span>&#125;)$   或 ^([<span class="number">1</span><span class="number">-9</span>]\d&#123;<span class="number">16</span>&#125;[<span class="number">0</span><span class="number">-9</span>x]$|^[<span class="number">1</span><span class="number">-9</span>]\d&#123;<span class="number">14</span>&#125;)$</span><br><span class="line">   </span><br><span class="line">   # 法<span class="number">2</span>： ^[<span class="number">1</span><span class="number">-9</span>]\d&#123;<span class="number">14</span>&#125;(\d&#123;<span class="number">2</span>&#125;[\dx])?$</span><br></pre></td></tr></table></figure><h1 id="Re模块"><a href="#Re模块" class="headerlink" title="Re模块"></a>Re模块</h1><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">import re</span><br><span class="line">   <span class="keyword">ret</span> = re.findall(<span class="string">'\d+'</span>,<span class="string">'sfkoidf3423434'</span>)</span><br><span class="line">      # 所有都匹配出来，返回列表</span><br><span class="line">   <span class="keyword">print</span>(<span class="keyword">ret</span>)</span><br><span class="line">      ret2 = re.<span class="built_in">search</span>(<span class="string">'\d+1'</span>,<span class="string">'sfkoidf3423434'</span>)</span><br></pre></td></tr></table></figure><h2 id="findall"><a href="#findall" class="headerlink" title="findall"></a><code>findall</code></h2><p>如果我们要查找的内容在一个复杂的环境中，我们要查的内容并没有一个突出的，与众不同的特点，甚至会和不需要的杂乱数据混合在一起，这个时候我们就需要把所有的数据都统计出来，然后对这个数据进行筛选，把我们真正需要的数据对应的正则表达式用（）圈起来，这样我们就可以筛选出来想要的东西。(?:可以不让它优先显示)</p><h2 id="search"><a href="#search" class="headerlink" title="search"></a><code>search</code></h2><p>search 只取第一个符合条件的，没有优先显示这件事儿</p><ul><li>还是按照完整的正则进行匹配，显示匹配到第一个内容，但是我们可以通过group方法传参数</li><li>变量.group()的结果 完全和 变量.group(0)的结果一致</li></ul><h2 id="match"><a href="#match" class="headerlink" title="match"></a><code>match</code></h2><p>相当于在\d+ 前面人为的加上^ , 除此之外和search一摸一样。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ret4 = re.match(<span class="string">'\d+'</span>,<span class="string">'小白123小黑456'</span>)</span><br><span class="line">print(ret4)			<span class="comment"># None</span></span><br><span class="line">ret5 = re.match(<span class="string">'\d+'</span>,<span class="string">'1小白123小黑456'</span>)</span><br><span class="line">print(ret5)			<span class="comment"># &lt;_sre.SRE_Match object; span=(0, 1), match='1'&gt;</span></span><br></pre></td></tr></table></figure><p>没有match也可以，是用search 正则中’^\d+’</p><p>应用场景： 用户输入的内容匹配的时候，要求用户输入11位手机号码，<code>^手机号码正则$</code></p><p>match与search的态度/思路不同：</p><ul><li>match 用来规定这个字符串必须是怎么样的。</li><li>search 用来寻找这个字符串中符合规则的子串。</li></ul><h2 id="split"><a href="#split" class="headerlink" title="split"></a><code>split</code></h2><p>切割字符串，返回数组</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ret = re.split(<span class="string">'\d+'</span>,<span class="string">'小白222xiaohong'</span>)</span><br><span class="line">print(ret)   <span class="comment"># ['小白', 'xiaohong']</span></span><br><span class="line">ret2 = re.split(<span class="string">'(\d+)'</span>,<span class="string">'小白222xiaohong'</span>)     <span class="comment"># 使用分组可以保留下来这部分内容。</span></span><br><span class="line">print(ret2)  <span class="comment"># ['小白', '222', 'xiaohong']</span></span><br></pre></td></tr></table></figure><p>问题：字符串也有切割，但字符串不提供保留切掉的内容，从逻辑的角度想想为什么它会什么是这样？</p><h2 id="sub"><a href="#sub" class="headerlink" title="sub"></a><code>sub</code></h2><p>替换</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ret3 = re.sub(<span class="string">'\d+'</span>,<span class="string">'H'</span>,<span class="string">'小白123xiaohong456'</span>,<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 指定替换的次数</span></span><br><span class="line">print(ret3)    <span class="comment"># 小白Hxiaohong456</span></span><br></pre></td></tr></table></figure><h2 id="subn"><a href="#subn" class="headerlink" title="subn"></a><code>subn</code></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ret3 = re.subn(<span class="string">'\d+'</span>,<span class="string">'H'</span>,<span class="string">'小白123xiaohong456'</span>)     </span><br><span class="line"><span class="comment"># 返回的元组， 替换后的内容 和 次数</span></span><br><span class="line">print(ret3)    <span class="comment"># ('小白HxiaohongH', 2)</span></span><br></pre></td></tr></table></figure><h2 id="解决效率问题"><a href="#解决效率问题" class="headerlink" title="解决效率问题"></a>解决效率问题</h2><h3 id="compile"><a href="#compile" class="headerlink" title="compile"></a><code>compile</code></h3><p>compile —— <strong>节省代码时间</strong>的工具</p><p>背景：当我们<strong>重复</strong>使用一个正则表达式的时候，我们可以利用compile对正则表达式进行编译。使用compile后，节省了多次解析同一个正则表达式的时间。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">reg = re.compile(<span class="string">'\d+'</span>)</span><br><span class="line">res1 = reg.search(<span class="string">'2343sfdsdf'</span>)</span><br><span class="line">res2 = reg.findall(<span class="string">'2343sfdsdf'</span>)</span><br><span class="line">print(res1)   <span class="comment"># &lt;_sre.SRE_Match object; span=(0, 4), match='2343'&gt;</span></span><br><span class="line">print(res2)   <span class="comment"># ['2343']</span></span><br></pre></td></tr></table></figure><h3 id="finditer"><a href="#finditer" class="headerlink" title="finditer"></a><code>finditer</code></h3><p>finditer —— 节省空间</p><p>背景：从大文件中找子串,结果特别多。这样找到的结果越多越占用内存 所以我们把返回的列表改成一个<strong>迭代器</strong>。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ret = re.finditer(<span class="string">'\d+'</span>,<span class="string">'fosaidj234ij'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ret:</span><br><span class="line">    print(i)  			<span class="comment"># 返回对象</span></span><br><span class="line">    print(i.group()) 	<span class="comment"># 通过group方法来取值</span></span><br></pre></td></tr></table></figure><h3 id="compile-与-finditer-组合使用"><a href="#compile-与-finditer-组合使用" class="headerlink" title="compile 与 finditer 组合使用"></a><code>compile</code> 与 <code>finditer</code> 组合使用</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">reg = re.compile(<span class="string">'\d+'</span>)</span><br><span class="line">res = reg.finditer(<span class="string">'fosaidj234ij'</span>)</span><br><span class="line"><span class="keyword">for</span> r <span class="keyword">in</span> res:</span><br><span class="line">    print(r.group())</span><br></pre></td></tr></table></figure><h2 id="分组命名"><a href="#分组命名" class="headerlink" title="分组命名"></a>分组命名</h2><p>分组命名 <code>(?P&lt;名字&gt;正则)</code> <code>ret.group(&#39;名字&#39;)</code></p><p>分组命名的引用 <code>(?P=名字)</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">ret = re.search(<span class="string">'\d(\d)\d(\w+?)(\d)(\w)\d(\d)\d(\w+?)(\d)(\w)\d(\d)\d(?P&lt;name&gt;\w+?)(\d)(\w)'</span>,<span class="string">'123abc45678agsf_123abc45678agsf_123abc45678agsf_'</span>)</span><br><span class="line">print(ret.group(<span class="number">10</span>))       <span class="comment"># agsf_  索引太过繁琐，所以产生命名</span></span><br><span class="line">print(ret.group(<span class="string">'name'</span>))   <span class="comment"># agsf_  </span></span><br><span class="line"></span><br><span class="line">print(re.search(<span class="string">'&lt;(?P&lt;tag&gt;\w+)&gt;.*?&lt;/(?P=tag)&gt;'</span>,<span class="string">'&lt;abc&gt;sdiofjosafdgj&lt;/abc&gt;'</span>))</span><br></pre></td></tr></table></figure><h3 id="分组的索引去引用"><a href="#分组的索引去引用" class="headerlink" title="分组的索引去引用"></a>分组的索引去引用</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(re.search(<span class="string">r'&lt;(\w+)&gt;.*?&lt;/\1&gt;'</span>,<span class="string">'&lt;abc&gt;sdiofjosaj&lt;/abc&gt;'</span>))</span><br><span class="line">print([<span class="string">r'\1'</span>]) 	<span class="comment"># \1是有意义的, 加上r 就会取消特殊的意义</span></span><br></pre></td></tr></table></figure><h2 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h2><p>待补充！！！</p><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><ul><li><p><code>findall</code> 和 <code>search</code> 可以解决80%的问题。</p></li><li><p>有的时候要匹配的内容是包含在不想要的内容之中的，这种情况先把不想要的匹配匹配出来，然后再想办法从结果中去掉。</p></li></ul><h1 id="须知"><a href="#须知" class="headerlink" title="须知"></a>须知</h1>]]></content>
      <categories>
        <category>python学习</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python日志模块</title>
    <url>/learn-python/20190405-python-logging-module.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>首先介绍日志，接着介绍三个版本的logging日志，推荐旗舰版本，直接套用就可以。</p></blockquote><a id="more"></a><hr><h2 id="logging日志"><a href="#logging日志" class="headerlink" title="logging日志"></a>logging日志</h2><ul><li>工作日志分四个大类<ol><li>系统日志：记录服务器的一些重要信息（监控系统，cpu温度，网卡流量，重要硬件的一些指标。运维人员经常使用的，记录操作的一些指令）</li><li>网站日志：访问异常，卡顿，网站的一些板块的受欢迎程度，访问量，点击率等等。蜘蛛爬取的次数。</li><li>辅助开发日志：开发人员在开发项目中，利用日志进行排错，排除一些避免不了的错误（记录），辅助开发。</li><li>记录用户信息日志：用户的消费习惯，新闻偏好，等等（数据库解决）。</li></ol></li><li>日志：是谁使用的？一般都是开发者使用的。</li></ul><h2 id="low版（简易版）"><a href="#low版（简易版）" class="headerlink" title="low版（简易版）"></a>low版（简易版）</h2><ol><li><p>缺点：文件和屏幕只能选择一个输出。</p></li><li><p>优点：比print，open，write快的多。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"><span class="comment"># logging.basicConfig(level=logging.DEBUG)</span></span><br><span class="line">logging.basicConfig(</span><br><span class="line">    level=<span class="number">10</span>,</span><br><span class="line">format = <span class="string">'%(asctime)s %(filename)s[line:%(lineno)d] %(levelname)s %(message)s'</span>,</span><br><span class="line">filename=<span class="string">r'test.log'</span>,</span><br><span class="line">filemode=<span class="string">'a'</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">logging.debug(<span class="string">'debug message'</span>)            <span class="comment"># 10</span></span><br><span class="line">logging.info(<span class="string">'info message'</span>)  <span class="comment"># 正常信息  # 20</span></span><br><span class="line">logging.warning(<span class="string">'warning message'</span>)        <span class="comment"># 30</span></span><br><span class="line">logging.error(<span class="string">'error message'</span>)            <span class="comment"># 40</span></span><br><span class="line">logging.critical(<span class="string">'critical message'</span>)      <span class="comment"># 50</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="标配版（标准版）"><a href="#标配版（标准版）" class="headerlink" title="标配版（标准版）"></a>标配版（标准版）</h2><ol><li><p>增加了屏幕和文件同时输出。</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">import</span> logging</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个logging对象</span></span><br><span class="line">logger = logging.getLogger()</span><br><span class="line"><span class="comment"># 创建一个文件对象</span></span><br><span class="line">fh = logging.FileHandler(<span class="string">'标配版.log'</span>,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line"><span class="comment"># 创建一个屏幕对象</span></span><br><span class="line">sh = logging.StreamHandler()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置显示格式</span></span><br><span class="line">formatter = logging.Formatter(<span class="string">'%(asctime)s %(filename)s[line:%(lineno)d] %(levelname)s %(message)s'</span>)</span><br><span class="line">formatter2 = logging.Formatter(<span class="string">'[line:%(lineno)d] %(message)s'</span>)</span><br><span class="line"><span class="comment"># 绑定</span></span><br><span class="line">fh.setFormatter(formatter)</span><br><span class="line">sh.setFormatter(formatter2)</span><br><span class="line"></span><br><span class="line">logger.addHandler(fh)</span><br><span class="line">logger.addHandler(sh)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 先设置总开关</span></span><br><span class="line">logger.setLevel(<span class="number">30</span>) <span class="comment"># 默认设置为10</span></span><br><span class="line"><span class="comment"># 如果默认设置为30 则，下面分别设置的如果低于30则仍然不会输出。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分别设置</span></span><br><span class="line">fh.setLevel(<span class="number">10</span>)</span><br><span class="line">sh.setLevel(<span class="number">40</span>)</span><br><span class="line"></span><br><span class="line">logging.<span class="literal">debug</span>(<span class="string">'debug message'</span>)            <span class="comment"># 10</span></span><br><span class="line">logging.<span class="literal">info</span>(<span class="string">'info message'</span>)  <span class="comment"># 正常信息   # 20</span></span><br><span class="line">logging.warning(<span class="string">'warning message'</span>)        <span class="comment"># 30</span></span><br><span class="line">logging.<span class="literal">error</span>(<span class="string">'error message'</span>)            <span class="comment"># 40</span></span><br><span class="line">logging.critical(<span class="string">'critical message'</span>)      <span class="comment"># 50</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="旗舰版（项目中使用的，Django项目）"><a href="#旗舰版（项目中使用的，Django项目）" class="headerlink" title="旗舰版（项目中使用的，Django项目）"></a>旗舰版（项目中使用的，Django项目）</h3><ol><li>优点：自定制日志(通过字典的方式)（前两个是系统固定的）</li><li>轮转日志：按内存，按时间</li><li>可以同时输出多个文件。</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">logging配置</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> logging.config</span><br><span class="line"><span class="comment"># 注意 这里的logging.config 与 直接用logging.config.xxx 不同</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义三种日志输出格式 开始</span></span><br><span class="line"></span><br><span class="line">standard_format = <span class="string">'[%(asctime)s][%(threadName)s:%(thread)d][task_id:%(name)s][%(filename)s:%(lineno)d]'</span> \</span><br><span class="line">                  <span class="string">'[%(levelname)s][%(message)s]'</span> <span class="comment">#其中name为getlogger指定的名字</span></span><br><span class="line">simple_format = <span class="string">'[%(levelname)s][%(asctime)s][%(filename)s:%(lineno)d]%(message)s'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义日志输出格式 结束</span></span><br><span class="line"></span><br><span class="line">logfile_path = <span class="string">r'C:\Users\ATLAS\PycharmProjects\oldboy23期\day19\日志模块\旗舰版日志文件夹\log1.log'</span>  <span class="comment"># log文件的目录</span></span><br><span class="line">logfile_name = <span class="string">'log1.log'</span>  <span class="comment"># log文件名</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># log配置字典 （6个键值对）</span></span><br><span class="line"><span class="comment"># LOGGING_DIC 第一层所有的键不能改变</span></span><br><span class="line">LOGGING_DIC = &#123;</span><br><span class="line">    <span class="string">'version'</span>: <span class="number">1</span>,  <span class="comment"># 版本号</span></span><br><span class="line">    <span class="string">'disable_existing_loggers'</span>: <span class="literal">False</span>,   <span class="comment"># 固定写法</span></span><br><span class="line">    <span class="string">'formatters'</span>: &#123;</span><br><span class="line">        <span class="string">'standard'</span>: &#123;</span><br><span class="line">            <span class="string">'format'</span>: standard_format</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">'simple'</span>: &#123;</span><br><span class="line">            <span class="string">'format'</span>: simple_format</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'filters'</span>: &#123;&#125;,  <span class="comment"># 后面补充</span></span><br><span class="line">    <span class="string">'handlers'</span>: &#123;</span><br><span class="line">        <span class="comment">#打印到终端的日志</span></span><br><span class="line">        <span class="string">'console'</span>: &#123;</span><br><span class="line">            <span class="string">'level'</span>: <span class="string">'DEBUG'</span>,</span><br><span class="line">            <span class="string">'class'</span>: <span class="string">'logging.StreamHandler'</span>,  <span class="comment"># 打印到屏幕</span></span><br><span class="line">            <span class="string">'formatter'</span>: <span class="string">'simple'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">#打印到文件的日志,收集info及以上的日志</span></span><br><span class="line">        <span class="string">'default'</span>: &#123;</span><br><span class="line">            <span class="string">'level'</span>: <span class="string">'DEBUG'</span>,</span><br><span class="line">            <span class="string">'class'</span>: <span class="string">'logging.handlers.RotatingFileHandler'</span>,  <span class="comment"># 保存到文件</span></span><br><span class="line">            <span class="string">'formatter'</span>: <span class="string">'standard'</span>,</span><br><span class="line">            <span class="string">'filename'</span>: logfile_path,  <span class="comment"># 日志文件</span></span><br><span class="line">            <span class="string">'maxBytes'</span>: <span class="number">1024</span>*<span class="number">1024</span>*<span class="number">5</span>,  <span class="comment"># 日志大小 5M</span></span><br><span class="line">            <span class="string">'backupCount'</span>: <span class="number">5</span>,</span><br><span class="line">            <span class="string">'encoding'</span>: <span class="string">'utf-8'</span>,  <span class="comment"># 日志文件的编码，再也不用担心中文log乱码了</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'loggers'</span>: &#123;</span><br><span class="line">        <span class="comment">#logging.getLogger(__name__)拿到的logger配置</span></span><br><span class="line">        <span class="string">''</span>: &#123;</span><br><span class="line">            <span class="string">'handlers'</span>: [<span class="string">'default'</span>, <span class="string">'console'</span>],  <span class="comment"># 这里把上面定义的两个handler都加上，即log数据既写入文件又打印到屏幕</span></span><br><span class="line">            <span class="string">'level'</span>: <span class="string">'DEBUG'</span>,</span><br><span class="line">            <span class="string">'propagate'</span>: <span class="literal">True</span>,  <span class="comment"># 向上（更高level的logger）传递</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">md_logger</span><span class="params">(a)</span>:</span></span><br><span class="line">	<span class="comment"># 1.从字典加载配置</span></span><br><span class="line">    logging.config.dictConfig(LOGGING_DIC)  <span class="comment"># 导入上面定义的logging配置</span></span><br><span class="line">    <span class="comment"># 2.拿到logger对象来产生日志</span></span><br><span class="line">    logger = logging.getLogger(a)  <span class="comment"># 生成一个log实例    #task_id:%(name)s</span></span><br><span class="line">    <span class="comment"># return logger</span></span><br><span class="line">    logger.debug(<span class="string">'xxx登录了'</span>)  <span class="comment"># 记录该文件的运行状态</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'登陆成功'</span>)</span><br><span class="line">    md_logger(<span class="string">'登录日志'</span>)   <span class="comment"># task_id</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">login()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python学习</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>编写自定义类实现json和pickle文件的多行写入，多行读取</title>
    <url>/learn-python/20190405-python-json-and-pickle.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>首先是json与pickle的介绍，然后是对于json不能多次dump的解决办法。</p></blockquote><a id="more"></a><hr><ul><li><p>json与pickle</p><ul><li>序列化（serialization）：将内存中的结构化数据转换成字节串。</li><li>反序列化（deserialization）：从文件中或网络中获取的数据转换成内存中原来的数据类型</li><li>具体方法：dump、dumps、load、loads<ul><li>dump与load是对文件进行操作（序列化与反序列化）</li><li>dumps与loads时对内存中的数据进行操作（序列化与反序列化）</li></ul></li></ul></li><li><p>pickle 写入多个对象，读取多个对象</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pickle支持多次dump，但对于读取文件，我们再不清楚内容（load多少次）时，使用<span class="keyword">try</span> <span class="keyword">except</span> EOFError</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.li = []</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.li = []</span><br><span class="line">a = A()</span><br><span class="line">a.li.append(<span class="number">1</span>)</span><br><span class="line">b = B()</span><br><span class="line">b.li.append(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">My_pickle</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,path)</span>:</span></span><br><span class="line">        self.path = path</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dump</span><span class="params">(self,*args)</span>:</span></span><br><span class="line">        <span class="keyword">with</span> open(self.path,mode=<span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> args:</span><br><span class="line">                pickle.dump(i,f)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">load</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">with</span> open(self.path,mode=<span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    <span class="keyword">yield</span> pickle.load(f)</span><br><span class="line">                <span class="keyword">except</span> EOFError:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">             </span><br><span class="line">p1 = My_pickle(<span class="string">'test.pikle'</span>)</span><br><span class="line">p1.dump(a,b)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> p1.load():</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure></li><li><p>json写入多行</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">方式一： </span><br><span class="line">将待写入的多种数据（列表，元组，字典）放到一个列表中写入，读取时，将列表反序列化到内存，在逐个返回。</span><br><span class="line">缺点：一次性取出所有，内存占用大。</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">My_json</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,file)</span>:</span></span><br><span class="line">        self.file = file</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dump</span><span class="params">(self,*args)</span>:</span></span><br><span class="line">        <span class="keyword">with</span> open(self.file,mode=<span class="string">'w'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            li = []</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> args:</span><br><span class="line">                li.append(i)</span><br><span class="line">            json.dump(li,f)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">load</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">with</span> open(self.file,mode=<span class="string">'r'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            ret = json.load(f)</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> ret:</span><br><span class="line">                <span class="keyword">yield</span> j</span><br><span class="line">j = My_json(<span class="string">'test.json'</span>)</span><br><span class="line">j.dump([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,],<span class="string">'ssss'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> j.load():</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">方式二:   推荐</span><br><span class="line">    将待写入的多种数据（列表，元组，字典）写入一种数据的同时写入一个\n，这样读取文件的时候，使用<span class="keyword">for</span>遍历文件句柄，对于得到的字符串使用json.loads()方法进行反序列化。</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">My_json</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,file)</span>:</span></span><br><span class="line">        self.file = file</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dump</span><span class="params">(self,*args)</span>:</span></span><br><span class="line">        <span class="keyword">with</span> open(self.file,mode=<span class="string">'w'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> args:</span><br><span class="line">                json.dump(i,f)</span><br><span class="line">                f.write(<span class="string">'\n'</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">load</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">with</span> open(self.file,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">                ret = json.loads(line)</span><br><span class="line">                print(ret)</span><br><span class="line">j = My_json(<span class="string">'test.json'</span>)</span><br><span class="line">j.dump([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,],<span class="string">'ssss'</span>)</span><br><span class="line">j.load()</span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">方式三:   </span><br><span class="line">   	在方式二的基础上进行的小改，除了先dump(i)在<span class="built_in">write</span>(<span class="string">'\n'</span>),我们还可以先用 dumps(i)序列化数据，然后再<span class="built_in">write</span>(序列化数据 + <span class="string">'\n'</span>)</span><br><span class="line">import json</span><br><span class="line">class My_json():</span><br><span class="line">    def __init__(self,<span class="built_in">file</span>):</span><br><span class="line">        self.<span class="built_in">file</span> = <span class="built_in">file</span></span><br><span class="line">    def dump(self,*args):</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(self.<span class="built_in">file</span>,mode=<span class="string">'w'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> args:                </span><br><span class="line">                f.<span class="built_in">write</span>(json.dumps(i) + <span class="string">'\n'</span>)</span><br><span class="line">    def <span class="built_in">load</span>(self):</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(self.<span class="built_in">file</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> <span class="built_in">line</span> <span class="keyword">in</span> f:</span><br><span class="line">                ret = json.loads(<span class="built_in">line</span>)</span><br><span class="line">                print(ret)</span><br><span class="line">j = My_json(<span class="string">'test.json'</span>)</span><br><span class="line">j.dump([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,],<span class="string">'ssss'</span>)</span><br><span class="line">j.<span class="built_in">load</span>()</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>pickle和json在对多行写入，写出的区别：</p><ul><li>pickle 支持多次dump，所以对应着就可以多次load来取这个数据，但当我们不知道文件中有多少个或者不知道该load几次的时候，我们可以使用try except EOFError 来让它停止。</li><li>json 不支持多次dump，所以在dump一次后，在写入一个换行。 这样在读文件的时候，我们循环遍历文件句柄，读一行，用loads （注意这里的loads是因为，已经对内存的字符串进行处理/而不是文件）</li></ul></li></ul><hr>]]></content>
      <categories>
        <category>python学习</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>开箱即用的模块</title>
    <url>/learn-python/20190404-python-modules.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>本篇介绍Python中的常用模块。</p></blockquote><a id="more"></a><p>常用模块的介绍:</p><ul><li>time,datetime</li><li>os,sys</li><li>hashlib,json,pickle,collections</li></ul><h1 id="time"><a href="#time" class="headerlink" title="time"></a>time</h1><p>封装了获取时间戳和字符串形式的时间的一些方法。</p><h2 id="time模块的三大对象"><a href="#time模块的三大对象" class="headerlink" title="time模块的三大对象"></a>time模块的三大对象</h2><h3 id="时间戳"><a href="#时间戳" class="headerlink" title="时间戳"></a>时间戳</h3><p>时间戳：从时间元年开始的<strong>秒数</strong>（1970 1 1 00：00：00）（python中获取的秒数，java是毫秒）</p><figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">print</span>(<span class="built_in">time</span>.<span class="built_in">time</span>())</span><br></pre></td></tr></table></figure><h3 id="结构化时间对象"><a href="#结构化时间对象" class="headerlink" title="结构化时间对象"></a>结构化时间对象</h3><ul><li>结构化时间对象（class time.struct_time）：像一个元组，拥有9个属性字段，可以单独使用其中的属性（index/attribute name）</li><li>它就像一个中介，供不同地区的计算机相互使用。</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">obj =  time.gmtime()      </span><br><span class="line"><span class="comment"># 默认参数是当前系统时间的时间戳，背后调用了time()方法</span></span><br><span class="line">print(obj)</span><br><span class="line"><span class="comment"># time.struct_time(tm_year=2019, tm_mon=4, tm_mday=4, tm_hour=12, tm_min=28, tm_sec=1, tm_wday=0, tm_yday=140, tm_isdst=0)</span></span><br></pre></td></tr></table></figure><p>time.gmtime() 与 time.localtime() 类似，作用是格式化时间戳为本地的时间。<br>如果sec参数未输入，则以当前时间为转换标准。 DST (Daylight Savings Time) flag (-1, 0 or 1) 是否是夏令时。也就是说，如果没有参数，它们的结果是相同的。</p><p><img src="/learn-python/20190404-python-modules/gmtime.png" alt="gmtime"></p><p>note：月和日期是从1开始的，小时，分钟，秒，星期都是从0开始的</p><h3 id="时间字符串"><a href="#时间字符串" class="headerlink" title="时间字符串"></a>时间字符串</h3><ul><li>1和2利于在不同的时区之间进行传播(即:国际化),但是不利于阅读。</li><li>字符串便于阅读.但是不利于国际化.</li></ul><h2 id="time三大对象之间的转换"><a href="#time三大对象之间的转换" class="headerlink" title="time三大对象之间的转换"></a>time三大对象之间的转换</h2><ul><li>时间戳 —&gt; 格式化时间对象 ：time.gmtime localtime() mktime()</li><li>格式化时间对象 —&gt; 时间字符串： time.strftime(format,时间对象)</li><li>时间字符串 —&gt; 格式化时间对象：time.strptime(str,format)</li></ul><p><img src="/learn-python/20190404-python-modules/time%E4%B8%89%E5%A4%A7%E5%AF%B9%E8%B1%A1%E4%B9%8B%E9%97%B4%E7%9A%84%E8%BD%AC%E6%8D%A2.jpg" alt="time三大对象之间的转换"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 时间对象 ---&gt; 时间戳</span></span><br><span class="line">t = time.localtime()   <span class="comment"># 获取结构化时间对象</span></span><br><span class="line">print(time.mktime(t))  <span class="comment"># 获取对应的时间戳</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#格式化时间对象和字符串之间的转换  （计算机传输，人类阅读）</span></span><br><span class="line">s = time.strftime(<span class="string">"year:%Y %m %d %H:%M:%S"</span>)</span><br><span class="line">print(s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 时间字符串转换成事件对象</span></span><br><span class="line">time_obj = time.strptime(<span class="string">'2010 10 10'</span>,<span class="string">"%Y %m %d"</span>)  <span class="comment">#时，分，秒 默认为0</span></span><br><span class="line">time_obj = time.strptime(<span class="string">'2010'</span>,<span class="string">"%Y"</span>) <span class="comment">#月份日期 默认为1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#time_obj = time.strptime('0',"%Y") #月份日期 默认为1       #ValueError: time data '0' does not match format '%Y'</span></span><br><span class="line"><span class="comment"># print(time_obj)</span></span><br></pre></td></tr></table></figure><h2 id="日期格式化符号"><a href="#日期格式化符号" class="headerlink" title="日期格式化符号"></a>日期格式化符号</h2><ul><li><p>%y 两位数的年份表示（00-99）</p></li><li><p>%Y 四位数的年份表示（000-9999）</p></li><li><p>%m 月份（01-12）</p></li><li><p>%d 月内中的一天（0-31）</p></li><li><p>%H 24小时制小时数（0-23）</p></li><li><p>%I 12小时制小时数（01-12）</p></li><li><p>%M 分钟数（00=59）</p></li><li><p>%S 秒（00-59）</p></li></ul><ul><li><p>%a 本地简化星期名称</p></li><li><p>%A 本地完整星期名称</p></li><li><p>%b 本地简化的月份名称</p></li><li><p>%B 本地完整的月份名称</p></li><li><p>%c 本地相应的日期表示和时间表示</p></li></ul><ul><li><p>%j 年内的一天（001-366）</p></li><li><p>%p 本地A.M.或P.M.的等价符</p></li><li><p>%U 一年中的星期数（00-53）星期天为星期的开始</p></li><li><p>%w 星期（0-6），星期天为星期的开始</p></li><li><p>%W 一年中的星期数（00-53）星期一为星期的开始</p></li><li><p>%x 本地相应的日期表示</p></li><li><p>%X 本地相应的时间表示</p></li><li><p>%Z 当前时区的名称</p></li><li><p>%% %号本身</p></li></ul><h1 id="datetime"><a href="#datetime" class="headerlink" title="datetime"></a>datetime</h1><p>同time模块相比，它的主要功能在于对属性值的抽取和计算上。</p><h2 id="模块中的四大类"><a href="#模块中的四大类" class="headerlink" title="模块中的四大类"></a>模块中的四大类</h2><ul><li>date：日期,包含year,month,day三个属性</li><li>time：时间,包含hour,minute,second,microsecond,tzinfo属性</li><li>datetime：前两者的混合体</li><li>timedelta：时间增量</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="comment"># date 类: 年月日</span></span><br><span class="line">d = datetime.date(<span class="number">2010</span>,<span class="number">10</span>,<span class="number">10</span>)</span><br><span class="line">print(d)    <span class="comment">#2010-10-10</span></span><br><span class="line"><span class="comment"># 获取date对象的各个属性 property</span></span><br><span class="line">print(d.year)</span><br><span class="line">print(d.month)</span><br><span class="line">print(d.day)</span><br><span class="line"></span><br><span class="line"><span class="comment"># time类： 时分秒</span></span><br><span class="line">t = datetime.time(<span class="number">10</span>,<span class="number">24</span>,<span class="number">59</span>)</span><br><span class="line">print(t)	<span class="comment">#10:24:59</span></span><br><span class="line">print(t.hour)</span><br><span class="line">print(t.minute)</span><br><span class="line">print(t.second)</span><br><span class="line"></span><br><span class="line"><span class="comment"># datetime</span></span><br><span class="line">dt = datetime.datetime(<span class="number">2010</span>,<span class="number">11</span>,<span class="number">11</span>,<span class="number">11</span>,<span class="number">11</span>,<span class="number">11</span>)</span><br><span class="line">print(dt)</span><br><span class="line"></span><br><span class="line"><span class="comment"># datetime中的类，主要用于数学计算</span></span><br><span class="line"><span class="comment"># timedelta ：时间的变化量    (delta表示的是变化量/差值)</span></span><br><span class="line">td = datetime.timedelta(days=<span class="number">1</span>)</span><br><span class="line">print(td)</span><br><span class="line"><span class="comment"># 参与数学运算：</span></span><br><span class="line"><span class="comment"># 1.创建时间对象：</span></span><br><span class="line"><span class="comment">#  #只能和这三类做运算：date,datetime,timedelta</span></span><br><span class="line">d = datetime.date(<span class="number">2010</span>,<span class="number">10</span>,<span class="number">10</span>)</span><br><span class="line">res = d + td</span><br><span class="line">res = d + td * <span class="number">50</span></span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line"><span class="comment">#  时间变化量的计算是否会产生进位?</span></span><br><span class="line">t = datetime.datetime(<span class="number">2010</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">59</span>)</span><br><span class="line">td = datetime.timedelta(seconds=<span class="number">3</span>)</span><br><span class="line">res = t + td</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line">例子：判断某一年是否是闰年</span><br><span class="line">year = <span class="number">1970</span></span><br><span class="line">obj = datetime.date(year,<span class="number">3</span>,<span class="number">1</span>)</span><br><span class="line">de = datetime.timedelta(days = <span class="number">1</span>)</span><br><span class="line">res = obj-de</span><br><span class="line">print(res.day)</span><br></pre></td></tr></table></figure><p>note：time不能参与运算</p><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">o = datetime.<span class="built_in">time</span>(<span class="number">21</span>,<span class="number">20</span>,<span class="number">5</span>)</span><br><span class="line">d = datetime.timedelta(seconds=<span class="number">50</span>)</span><br><span class="line"><span class="built_in">print</span>(d + o)</span><br><span class="line">TypeError: unsupported operand <span class="built_in">type</span>(s) <span class="keyword">for</span> +: <span class="string">'datetime.timedelta'</span> <span class="keyword">and</span> <span class="string">'datetime.time'</span></span><br></pre></td></tr></table></figure><p>练习：</p><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">练习<span class="number">2</span>：计算三天前的日期</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> <span class="type">time</span></span><br><span class="line"></span><br><span class="line"># obj1 = datetime.date(<span class="type">time</span>.<span class="built_in">localtime</span>().tm_year,<span class="type">time</span>.<span class="built_in">localtime</span>().tm_mon,<span class="type">time</span>.<span class="built_in">localtime</span>().tm_mday)      #这个方法有些繁杂</span><br><span class="line">obj1 = datetime.datetime.now()     #只有datetime下有now方法。</span><br><span class="line">print(obj1)</span><br><span class="line">de = datetime.timedelta(days=<span class="number">3</span>)</span><br><span class="line">obj2 = obj1 - de</span><br><span class="line">print(obj2)</span><br><span class="line">print(obj2.strftime("%Y %m %d"))</span><br></pre></td></tr></table></figure><h1 id="os"><a href="#os" class="headerlink" title="os"></a>os</h1><h1 id="sys"><a href="#sys" class="headerlink" title="sys"></a>sys</h1><h1 id="hashlib"><a href="#hashlib" class="headerlink" title="hashlib"></a>hashlib</h1><ul><li><p>该模块封装一些用于加密的类。</p></li><li><p>包含很多的加密算法：MD5，sha1，sha256，sha512</p></li></ul><h2 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h2><ol><li>密码加密，不能以明文的形式存储密码，密文的形式。</li><li>文件的校验</li></ol><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li><p>将bytes类型字节转化成固定长度数字组成的字符串。</p></li><li><p>把一个大的数据切分成不同的小块，分别对不同的块进行加密，在汇总的结果，和直接对整体数据加密的结果一致。</p></li><li><p>单向加密，不可逆。</p></li><li><p>原始数据的一点小的变化，将导致结果的非常大的差异，“雪崩”效应。</p></li></ul><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li><p>获取一个加密对象</p><p><code>m = hashlib.md5()</code></p></li><li><p>使用对象的update，进行加密</p><p><code>m.update(b&#39;abc&#39;)</code></p></li><li><p>通过hexdigest获取加密结果</p><p><code>ret = m.hexdigest()</code></p></li></ol><p>note：其中1，2也可以合在一起写为：</p><p>​ <code>m = hashlib.md5(b&#39;abc&#39;)</code></p><h2 id="加盐"><a href="#加盐" class="headerlink" title="加盐"></a>加盐</h2><h3 id="为什么要加盐"><a href="#为什么要加盐" class="headerlink" title="为什么要加盐?"></a>为什么要加盐?</h3><p>如果一个用户的用户名 abc 密码 123，另一个用户的用户名 ab 密码 c123 这样容易撞在一起，所以加盐。另外也是为了增加破解的难度。</p><h3 id="让结果更复杂一些"><a href="#让结果更复杂一些" class="headerlink" title="让结果更复杂一些"></a>让结果更复杂一些</h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">在基础上加密后，在加密一次</span><br><span class="line">m =  hashlib.md5()</span><br><span class="line">m.<span class="keyword">update</span>(<span class="keyword">password</span>.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">m.<span class="keyword">update</span>(<span class="string">'salt'</span>.encode(<span class="string">'utf-8'</span>))</span><br></pre></td></tr></table></figure><p>动态的盐</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">加的盐要不断变化</span><br></pre></td></tr></table></figure><p>sha系列 金融类，安全类，用这个级别。</p><ul><li>随着sha系列数字越高，加密越复杂，越不易破解，但耗时越长。</li></ul><h2 id="文件的校验"><a href="#文件的校验" class="headerlink" title="文件的校验"></a>文件的校验</h2><p>linux中一切皆文件：文本，非文本文件，音频，视频，图片…</p><p>无论下载的视频，还是软件（国外的软件），往往都会有一个md5值。</p><p>版本一：</p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">file</span> = <span class="string">'pycharm-professional-2019.1.2.exe'</span></span><br><span class="line"><span class="keyword">m</span> = hashlib.<span class="built_in">sha256</span>()</span><br><span class="line">with <span class="keyword">open</span>(<span class="keyword">file</span>, <span class="keyword">mode</span>=<span class="string">'rb'</span>) <span class="keyword">as</span> <span class="keyword">f</span>:</span><br><span class="line">    <span class="keyword">con</span> = <span class="keyword">f</span>.<span class="keyword">read</span>()</span><br><span class="line"><span class="keyword">m</span>.<span class="keyword">update</span>(<span class="keyword">con</span>)</span><br><span class="line"><span class="keyword">print</span>(<span class="keyword">m</span>.hexdigest())</span><br></pre></td></tr></table></figure><p>版本二： read(1024) 没有行的区分。</p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">#read(<span class="number">1024</span>) 表示最大读<span class="number">1024</span>个字节。</span><br><span class="line">#为什么把 打开文件 放在 循环里面就出错了， 因为在循环中，会不断重复<span class="keyword">open</span>操作这样会出bug！</span><br><span class="line"># 错误版</span><br><span class="line"><span class="keyword">file</span> = <span class="string">'pycharm-professional-2019.1.2.exe'</span></span><br><span class="line"><span class="keyword">m</span> = hashlib.<span class="built_in">sha256</span>()</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    with <span class="keyword">open</span>(<span class="keyword">file</span>, <span class="keyword">mode</span>=<span class="string">'rb'</span>) <span class="keyword">as</span> <span class="keyword">f</span>:</span><br><span class="line">        <span class="keyword">con</span> = <span class="keyword">f</span>.<span class="keyword">read</span>(<span class="number">1024</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">con</span>:</span><br><span class="line">            <span class="keyword">print</span>(<span class="keyword">con</span>)</span><br><span class="line">            <span class="keyword">m</span>.<span class="keyword">update</span>(<span class="keyword">con</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="keyword">print</span>(<span class="keyword">m</span>.hexdigest())</span><br><span class="line"></span><br><span class="line"># 正确版：</span><br><span class="line"><span class="keyword">file</span> = <span class="string">'pycharm-professional-2019.1.2.exe'</span></span><br><span class="line"><span class="keyword">m</span> = hashlib.<span class="built_in">sha256</span>()</span><br><span class="line">with <span class="keyword">open</span>(<span class="keyword">file</span>, <span class="keyword">mode</span>=<span class="string">'rb'</span>) <span class="keyword">as</span> <span class="keyword">f</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">con</span> = <span class="keyword">f</span>.<span class="keyword">read</span>(<span class="number">1024</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">con</span>:</span><br><span class="line">            <span class="keyword">print</span>(<span class="keyword">con</span>)</span><br><span class="line">            <span class="keyword">m</span>.<span class="keyword">update</span>(<span class="keyword">con</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="keyword">print</span>(<span class="keyword">m</span>.hexdigest())</span><br></pre></td></tr></table></figure><h1 id="json"><a href="#json" class="headerlink" title="json"></a>json</h1><h1 id="pickle"><a href="#pickle" class="headerlink" title="pickle"></a>pickle</h1><h1 id="collections模块"><a href="#collections模块" class="headerlink" title="collections模块"></a>collections模块</h1><p>给我们提供一些python的数据类型，比较特殊的数据类型。</p><h2 id="namedtuple：命名元组"><a href="#namedtuple：命名元组" class="headerlink" title="namedtuple：命名元组"></a>namedtuple：命名元组</h2><h2 id="deque：双端队列"><a href="#deque：双端队列" class="headerlink" title="deque：双端队列"></a>deque：双端队列</h2><p>类似于列表的一种容器型数据，高效实现插入和删除操作。</p><h2 id="Counter：计数器"><a href="#Counter：计数器" class="headerlink" title="Counter：计数器"></a>Counter：计数器</h2><p>主要用来计数</p><h2 id="OrderedDict：有序字典"><a href="#OrderedDict：有序字典" class="headerlink" title="OrderedDict：有序字典"></a>OrderedDict：有序字典</h2><p>（3.6后面的版本很少用了）</p><h2 id="defaultdict：带有默认值的字典"><a href="#defaultdict：带有默认值的字典" class="headerlink" title="defaultdict：带有默认值的字典"></a>defaultdict：带有<u>默认值</u>的字典</h2><p>因为可以设置值的默认值，所以，相对于字典可以少一部初始化。</p><p>例子：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>,<span class="number">66</span>,<span class="number">77</span>,<span class="number">88</span>]</span><br><span class="line"><span class="comment"># 问：小于66的添加到一个字典的一个键中，大于等于66的添加到该字典的另一个键。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进阶：</span></span><br><span class="line">dic7 = defaultdict(list)</span><br><span class="line">[dic7[<span class="string">'key1'</span>].append(i) <span class="keyword">for</span> i <span class="keyword">in</span> l <span class="keyword">if</span> i &lt; <span class="number">66</span>] <span class="keyword">and</span> [dic7[<span class="string">'key2'</span>].append(j) <span class="keyword">for</span> j <span class="keyword">in</span> l <span class="keyword">if</span> j &gt;= <span class="number">66</span>]</span><br><span class="line">print(dic7)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python学习</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 函数</title>
    <url>/learn-python/20190403-python-function.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>python函数部分的总结。重要的知识点：参数，作用域，三大器，递归。</p></blockquote><a id="more"></a><h2 id="懒惰是一种美德"><a href="#懒惰是一种美德" class="headerlink" title="懒惰是一种美德"></a>懒惰是一种美德</h2><p>​ 我们首先接触的代码组织工具，就是函数（function）。通过把一大段程序分成几个小部分，使每个小部分都简单一些，这样做可以令代码更加易读，也更便于使用。函数为<strong>复用</strong>和<strong>重构</strong>提供了契机。例如：对于计算斐波那契数列。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fibs = [<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">    fibs.append(fibs[<span class="number">-2</span>] + fibs[<span class="number">-1</span>])</span><br><span class="line">print(fibs)</span><br></pre></td></tr></table></figure><p>​ 运行代码后，fibs包含10个斐波那契数。但当我们想要一个包含20个数的该怎么办呢？ 简单呀，修改for循环不就可以了。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fibs = [<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line">num = int(input(<span class="string">'请输入数量：'</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(num - <span class="number">2</span>):</span><br><span class="line">    fibs.append(fibs[<span class="number">-2</span>] + fibs[<span class="number">-1</span>])</span><br><span class="line">print(fibs)</span><br></pre></td></tr></table></figure><p>​ 那我如果还想用这些数做其它事情呢? 简单呀，哪儿用在哪儿写不就可以了。 但实际中我们很懒，我们不想重新编写。我们希望按照下面这样来使用。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 函数是一种抽象。</span></span><br><span class="line">num = input(<span class="string">'How many numbers do you want? '</span>) </span><br><span class="line">print(fibs(num))</span><br></pre></td></tr></table></figure><p>​ 这里只具体地编写了这个程序独特的部分（读取数字，并打印结果），告诉了计算机要这样做，但没有具体告诉它如何做。你需要创建一个名为fibs的函数，并在需要计算斐波那契数列的时候调用它，如果多个地方需要，这样做节省很多精力。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fibs</span><span class="params">(num)</span>:</span></span><br><span class="line">    fib = [<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num - <span class="number">2</span>):</span><br><span class="line">        fib.append(fib[<span class="number">-2</span>] + fib[<span class="number">-1</span>])</span><br><span class="line">    <span class="keyword">return</span> fib</span><br><span class="line">num = int(input(<span class="string">"请输入数量: "</span>))</span><br><span class="line">print(fibs(num))</span><br></pre></td></tr></table></figure><h2 id="抽象和结构"><a href="#抽象和结构" class="headerlink" title="抽象和结构"></a>抽象和结构</h2><p>​ 抽象可节省人力，但实际上还有个更重要的优点：<strong>抽象是程序能够被人理解的关键所在</strong>（无 论对编写程序还是阅读程序来说，这都至关重要）。计算机本身喜欢具体而明确的指令，但人通常不是这样的。如问路，只要告诉对方沿xx条路走然后看到什么标志物在怎么怎么走就可以了。</p><p>​ 组织计算机程序时，你也采取类似的方式。程序应非常抽象，如下载网页、计算使用频率、 打印每个单词的使用频率。这很容易理解。下面就将前述简单描述转换为一个Python程序。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">page = download_page()</span><br><span class="line">freqs = compute_frequencies(page) </span><br><span class="line"><span class="keyword">for</span> word, freq <span class="keyword">in</span> freqs:</span><br><span class="line">	print(word, freq)</span><br></pre></td></tr></table></figure><p>​ 看到这些代码，任何人都知道这个程序是做什么的。然而，至于具体该如何做，可以查看它的定义。</p><p>​ 函数是结构化编程的核心。</p><h2 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h2><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>​ 以功能（完成一件事儿）为导向；一个函数就是一个功能；函数是一种抽象（隐藏不必要细节的艺术。通过定义处理细节的函数，可让程序更抽象。 ）。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>减少代码的重复性。</li><li>增强了代码的可读性</li></ol><h3 id="函数的结构与调用"><a href="#函数的结构与调用" class="headerlink" title="函数的结构与调用"></a>函数的结构与调用</h3><figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line"># def 关键字，定义函数。 fibs 函数名：与变量设置规则相同，具有可描述性  <span class="built_in">num</span>是参数：通过参数获取要求的斐波那契数列的长度。</span><br><span class="line">def fibs(<span class="built_in">num</span>):</span><br><span class="line">    '计算斐波那契数列'   # 这个函数的文档</span><br><span class="line">    <span class="built_in">fib</span> = [<span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">num</span> - <span class="number">2</span>):</span><br><span class="line">        <span class="built_in">fib</span>.<span class="built_in">append</span>(<span class="built_in">fib</span>[-<span class="number">2</span>] + <span class="built_in">fib</span>[-<span class="number">1</span>])</span><br><span class="line">    <span class="built_in">return</span> <span class="built_in">fib</span></span><br><span class="line"><span class="built_in">num</span> = int(input(<span class="string">"请输入数量: "</span>))</span><br><span class="line"><span class="built_in">print</span>(fibs(<span class="built_in">num</span>))  # 当函数遇到 函数名（）  函数才会执行！！</span><br></pre></td></tr></table></figure><h3 id="给函数编写文档"><a href="#给函数编写文档" class="headerlink" title="给函数编写文档"></a>给函数编写文档</h3><p>在def语句后面（以及模块和类的开头），添加这样的字符串很有用。放在函数开头的字符串称为 文档字符串（docstring），将作为函数的一部分存储起来。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(fibs.__doc__)</span><br><span class="line"><span class="comment"># 计算斐波那契数列</span></span><br></pre></td></tr></table></figure><h3 id="函数名"><a href="#函数名" class="headerlink" title="函数名"></a>函数名</h3><p>函数名指向的是函数的内存地址。</p><ul><li>函数名 + （）就可以执行此函数。</li></ul><p>函数名就是变量。</p><ol><li><p>赋值运算</p></li><li><p>可以作为容器数据类型的元素。</p></li><li><p>函数名可以作为函数的参数。</p></li><li><p>函数名可以作为函数的返回值。</p></li></ol><h3 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h3><ol><li>return : 在函数中遇到return直接结束函数。（终止函数）(所以严格意义上它并非函数，数学意义上的函数总是返回根据参数计算得到的结果。)</li><li>return 可以给函数的执行者（函数名+（））返回值：<ol><li>没有设置返回值的时候，返回None。</li><li>return 单个值 单个值，且数据类型类型与该值数据类型相同仅限关键字参数</li><li>return 多个值 返回多个元素，以元组的形式返回给函数的执行者。一个变量接收元组，多个变量可以拆包。</li></ol></li></ol><h3 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h3><h4 id="形参角度（定义）："><a href="#形参角度（定义）：" class="headerlink" title="形参角度（定义）："></a>形参角度（定义）：</h4><ol><li><p>位置参数：一一对应，不能多也不能少</p></li><li><p>默认值参数：</p><ul><li>设置的意义：普遍经常使用的。例如open(file, mode=’r’ , encoding=None)</li></ul></li><li><p>万能参数：<code>*args</code>，<code>**kwargs</code>。</p><ul><li><code>*args</code>和<code>**kwargs</code>本身不特殊（argument：参数）如果不加<code>*</code>都是位置参数。在形参位置加上一颗 <code>*</code>可以<strong>接收任意数量的位置参数</strong>并将其聚合成一个元组赋值给args；加上 <code>**</code>可以<strong>接收任意数量的关键字参数</strong>并将其聚合成一个字典赋值给kwargs。</li><li>*在形参起到聚合的作用</li><li>函数的调用时，<em>代表打散，用于可迭代对象，成了位置参数。 `*</em>`打散字典，成了关键字参数。</li></ul></li><li><p>仅限关键字参数（Python 3）：</p><ul><li>仅限关键字参数位于<code>*args</code>和 <code>**args</code>的中间，和关键字参数无先后要求。</li></ul></li><li><p>形参的最终顺序：位置参数 —&gt; <code>*args</code> —&gt; 仅限关键字参数/默认值参数 —&gt; <code>**kwargs</code></p><ul><li>排序依据：在位置参数和关键字参数的基础上添加，b影响a，所以将a放在前面。</li></ul></li></ol><h4 id="实参角度（执行-调用）："><a href="#实参角度（执行-调用）：" class="headerlink" title="实参角度（执行/调用）："></a>实参角度（执行/调用）：</h4><ol><li>位置参数：必须一一对应：不能多也不能少。</li><li>关键字参数：位置可以不对应。<ul><li>注意：关键字参数不带引号</li></ul></li><li>混合传参：位置参数必须在关键字参数的前面。</li></ol><h3 id="我能修改参数吗？"><a href="#我能修改参数吗？" class="headerlink" title="我能修改参数吗？"></a>我能修改参数吗？</h3><p>​ 对于不可变数据类型（immutable）（字符串，数，元组），这些意味着你不能修改它们（即只能替换为新值，新值是局部变量，它在局部作用域内）。因此这些类型作为参数没什么可说的。但如果参数为可变的数据结构（如列表）呢？</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">li = [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(lis)</span>:</span></span><br><span class="line">    lis[<span class="number">0</span>] = <span class="number">666</span></span><br><span class="line">func(li)</span><br><span class="line">print(li)    <span class="comment"># [666, 2]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 补充: 可以在局部修改全局的可变数据类型。</span></span><br><span class="line">li = [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    li[<span class="number">0</span>] = <span class="number">666</span></span><br><span class="line">func()</span><br><span class="line">print(li)    <span class="comment"># [666, 2]</span></span><br></pre></td></tr></table></figure><p>​ 在这个例子中，在函数内修改了参数，函数外面这个列表的值也发生了变化。</p><p>注意：参数存储在局部作用域内。</p><p>​ 那么如何避免这种影响呢？<strong>传递的实参是一个副本</strong>，对序列执行切片操作时，返回的切片都是副本。 <strong>如创建覆盖整个列表的切片，得到的将是列表的副本。</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">li = [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(lis)</span>:</span></span><br><span class="line">    lis[<span class="number">0</span>] = <span class="number">666</span></span><br><span class="line">func(li[:])</span><br><span class="line">print(li)	<span class="comment"># [1,2]</span></span><br></pre></td></tr></table></figure><p>上面是对于可变数据类型的修改，以及维持不变的方法。</p><h3 id="名称空间"><a href="#名称空间" class="headerlink" title="名称空间"></a>名称空间</h3><p>变量到底是什么呢?可将其视为指向值的名称。</p><p>​ 名称空间分为：内置名称空间（builtins.py），全局名称空间(当前py文件)，局部名称空间（函数，函数执行时才开辟）</p><ol><li>全局名称空间：记录了整个文件的变量与值的对应关系。</li><li>局部/临时名称空间：临时存放了函数中的变量与值的关系。</li><li>内置名称空间：python源码给你提供的一些内置的函数，print，input。</li></ol><figure class="highlight d"><table><tr><td class="code"><pre><span class="line">x = <span class="number">1</span></span><br><span class="line"><span class="keyword">scope</span> = vars()</span><br><span class="line">print(<span class="keyword">scope</span>)</span><br><span class="line"><span class="keyword">scope</span>[<span class="string">'x'</span>] = <span class="number">2</span></span><br><span class="line"># 修改变量的指向</span><br><span class="line">print(<span class="keyword">scope</span>[<span class="string">'x'</span>])</span><br></pre></td></tr></table></figure><p>​ 执行赋值语句x = 1后，名称x指向值 1。这几乎与使用字典时一样（字典中的键指向值），只是你使用的是“看不见”的字典。有一个名为<strong>vars的内置函数</strong>，它返回这个<strong>不可见的字典</strong>。</p><p>加载顺序：内置名称空间 —&gt; 全局名称空间 —&gt; 局部名称空间 （函数执行时才加载）</p><ul><li>啥也不写，光一个print(666)，证明先加载内置名称空间。</li></ul><p>取值顺序: <strong>就近原则</strong> LEGB（local eclose global Builtin）原则 单向不可逆</p><ol><li><p>调用函数时：局部名称空间 —&gt; 全局名称空间 —&gt; 内置名称空间</p></li><li><p>验证： 证明内置名称空间是最后调用的。</p><figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">input = <span class="string">'小黑'</span></span><br><span class="line">def <span class="function"><span class="keyword">func</span><span class="params">()</span>:</span></span><br><span class="line">	input = <span class="string">'小白'</span></span><br><span class="line">	print(input)</span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure></li></ol><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>全局作用域：内置名称空间 + 全局名称空间</p><p>局部作用域：局部名称空间</p><p>全局作用域与局部作用域的联系（***）</p><ol><li><p>局部作用域可以<strong>引用</strong>全局的变量。</p></li><li><p>全局作用域不能<strong>引用</strong>局部的变量。</p></li><li><p>局部作用域不能改变全局作用域的变量。</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="built_in">count</span> = <span class="number">1</span></span><br><span class="line">def <span class="function"><span class="keyword">func</span><span class="params">()</span></span>:</span><br><span class="line">	<span class="built_in">count</span> += <span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">()</span></span></span><br><span class="line">问：为什么会报错？</span><br><span class="line"></span><br><span class="line">#当python解释器读取到局部作用域时，发现了对一个变量进行修改的操作。解释器会认为你在局部已经定义过这个局部变量了，它就从局部找这个变量，所以报错。（面试题）</span><br></pre></td></tr></table></figure></li></ol><p>关键字 global 与 nonlocal：</p><ol><li>global可以声明/创建全局变量；它还可以修改全局变量</li><li>nonlocal不可以修改全局变量，它可以修改外层的非全局变量</li></ol><p>内置函数 globals(),locals():</p><ol><li>globals() 返回字典：字典里面的键值对：全局作用域的所有内容（全局名称空间和内置名称空间 ）</li><li>globals这个函数类似于vars，返回一个包含全局变量的字典。（locals返回一个包含局部变量的字典。）</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过globals()查看当前作用域的全局变量，它是一个字典（全局名称空间）</span></span><br><span class="line">print(globals(),type(globals()))</span><br><span class="line">lis = [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line"><span class="comment"># 在globals中查看lis这个列表</span></span><br><span class="line">print(globals()[<span class="string">'lis'</span>])</span><br><span class="line"><span class="comment"># 在globals中修改lis这个列表</span></span><br><span class="line">globals()[<span class="string">'lis'</span>][<span class="number">0</span>] = <span class="number">2</span></span><br><span class="line"><span class="comment"># 修改后这个列表变了。</span></span><br><span class="line">print(globals()[<span class="string">'lis'</span>])</span><br><span class="line"><span class="comment"># 修改这个字典，会影响当前全局作用域中变量的查找</span></span><br><span class="line">globals()[<span class="string">'aaa'</span>] = <span class="number">666</span></span><br><span class="line">print(aaa)</span><br></pre></td></tr></table></figure><ol start="2"><li>locals()返回字典：字典里面的键值对：当前作用域的所有内容，如果在全局作用域使用和globals的效果一样。</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    aaa = <span class="number">666</span></span><br><span class="line">    print(locals()[<span class="string">'aaa'</span>])</span><br><span class="line">    locals()[<span class="string">'aaa'</span>] = <span class="number">777</span></span><br><span class="line">    <span class="comment"># locals 是局部名称空间的一个拷贝，改变它并不会改变局部名称空间</span></span><br><span class="line">    print(locals()[<span class="string">'aaa'</span>])   <span class="comment"># 666</span></span><br><span class="line"></span><br><span class="line">func()</span><br></pre></td></tr></table></figure><h3 id="作用域嵌套"><a href="#作用域嵌套" class="headerlink" title="作用域嵌套"></a>作用域嵌套</h3><p>Python函数可以嵌套，即可将一个函数放在另一个函数内，如下所示：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">'老铁双击666'</span>)</span><br><span class="line">    bar()</span><br><span class="line">foo()</span><br></pre></td></tr></table></figure><p>嵌套通常用处不大，但有一个很突出的用途：使用一个函数来创建另一个函数。这意味着可像下面这样编写函数：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func2</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">f'老铁双击<span class="subst">&#123;num&#125;</span>'</span>)</span><br><span class="line">    <span class="keyword">return</span> func2</span><br><span class="line">f = func1(<span class="number">666</span>)</span><br><span class="line">f()		<span class="comment"># 老铁双击666</span></span><br><span class="line">f1 = func1(<span class="number">999</span>)</span><br><span class="line">f1()	<span class="comment"># 老铁双击999</span></span><br></pre></td></tr></table></figure><p>​ 在这里，一个函数位于另一个函数中，且外面的函数<strong>返回里面的函数</strong>。也就是返回一个函数，而不是调用它。重要的是，<u>返回的函数能够访问其定义所在的作用域</u>。换而言之，它携带着自己所在的环境（和相关的局部变量）！</p><p>​ 每当外部函数被调用时，都将重新定义内部的函数，而变量num的值也可能不同。由于Python的嵌套作用域，可在<u>内部函数中访问这个来自外部局部作用域（multiplier）的变量</u>。像num这样存在所在作用域的函数成为闭包。</p><p>​ 一句话概括就是：存在于嵌套函数中的，内层函数对外层非全局变量的访问。</p><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ol><li>字面意思：可更新迭代的工具。</li><li>专业角度：内部含有 <code>__iter__</code>方法并含有 <code>__next__</code>方法的对象就是迭代器。</li><li>An <strong>iterator</strong> is an object that implements <code>next</code>, which is expected to return the next element of the iterable object that returned it, and raise a <code>StopIteration</code> exception when no more elements are available.</li></ol><h3 id="判断一个对象是否是迭代器"><a href="#判断一个对象是否是迭代器" class="headerlink" title="判断一个对象是否是迭代器"></a>判断一个对象是否是迭代器</h3><figure class="highlight isbl"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">print</span>(<span class="string">'__iter__'</span><span class="variable"><span class="keyword">in</span></span> <span class="title">dir</span>(<span class="variable">obj</span>) <span class="variable"><span class="keyword">and</span></span> <span class="string">'__next__'</span> <span class="variable"><span class="keyword">in</span></span> <span class="title">dir</span>(<span class="variable">obj</span>))</span></span><br></pre></td></tr></table></figure><h3 id="迭代器的取值"><a href="#迭代器的取值" class="headerlink" title="迭代器的取值"></a>迭代器的取值</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">l1 = [11,22,33,44,55,66]</span><br><span class="line"><span class="comment">#转化为迭代器的三种方式</span></span><br><span class="line">obj3 = l1.__iter__()</span><br><span class="line">obj4 = iter(l1)     </span><br><span class="line"></span><br><span class="line"><span class="comment">#迭代器取值的三种方式。</span></span><br><span class="line"><span class="builtin-name">print</span>(next(obj3))</span><br><span class="line"><span class="builtin-name">print</span>(obj4.__next__())</span><br><span class="line"><span class="comment">#一个next对应一个值，超出元素个数就会报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用for循环会在内部将可迭代对象转成迭代器</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> l1:</span><br><span class="line">	<span class="builtin-name">print</span>(i)</span><br></pre></td></tr></table></figure><h4 id="可迭代对象与迭代器的相互转化"><a href="#可迭代对象与迭代器的相互转化" class="headerlink" title="可迭代对象与迭代器的相互转化"></a>可迭代对象与迭代器的相互转化</h4><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">a</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="attr">b</span> = iter(a)</span><br><span class="line"><span class="attr">c</span> = list(b)</span><br></pre></td></tr></table></figure><h4 id="while循环模拟for循环机制（面试）"><a href="#while循环模拟for循环机制（面试）" class="headerlink" title="while循环模拟for循环机制（面试）"></a>while循环模拟for循环机制（<strong>面试</strong>）</h4><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"># <span class="number">1.</span>将可迭代对象转化成迭代器</span><br><span class="line">l1 = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>,<span class="number">66</span>]</span><br><span class="line">obj = iter(l1)</span><br><span class="line"># <span class="number">2.</span>利用next对迭代器进行取值</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line"># <span class="number">3.</span>利用<span class="keyword">try</span> except捕获错误，并退出。</span><br><span class="line">    <span class="keyword">try</span> :</span><br><span class="line">        print(next(obj))</span><br><span class="line">    except StopIteration:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> li： #这里的li默认帮我们执行了li.__iter__(),并且程序自动帮我们捕捉了StopIteration这个错误，不用手工写进去。</span><br><span class="line">	print(i)</span><br><span class="line">在源码中：</span><br><span class="line"><span class="keyword">if</span> (f==NULL || f-&gt;f_stacktop == NULL) &#123; <span class="comment">// 如果代码块为空或调用栈为空，</span></span><br><span class="line"><span class="comment">//则抛出StopIteration异常</span></span><br></pre></td></tr></table></figure><h3 id="迭代器的优点"><a href="#迭代器的优点" class="headerlink" title="迭代器的优点"></a>迭代器的优点</h3><h4 id="节省内存。"><a href="#节省内存。" class="headerlink" title="节省内存。"></a>节省内存。</h4><ul><li>迭代器在内存中只占一条。迭代时，上一条在内存中消失了。</li></ul><h4 id="惰性机制。"><a href="#惰性机制。" class="headerlink" title="惰性机制。"></a>惰性机制。</h4><ul><li>next一下，取一个值，绝不多取值。</li></ul><h3 id="迭代器的缺点"><a href="#迭代器的缺点" class="headerlink" title="迭代器的缺点"></a>迭代器的缺点</h3><ol><li>不直观</li><li>速度慢（以时间换空间）</li></ol><h3 id="迭代器总结"><a href="#迭代器总结" class="headerlink" title="迭代器总结"></a>迭代器总结</h3><ol><li>Python的Iterator对象表示的是一个数据流，Iterator对象可以被next()函数调用并不断返回下一个数据，直到没有数据时抛出StopIteration异常。可以把这个数据流看做是一个有序序列，但我们却不能提前知道序列的长度，只能不断通过next()函数实现按需计算下一个数据，所以Iterator的计算是惰性的，只有在需要返回下一个数据时它才会计算。Iterator甚至可以表示一个无限大的数据流，例如全体自然数。而使用list是永远不可能存储全体自然数的。</li></ol><h2 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h2><h3 id="什么是生成器？"><a href="#什么是生成器？" class="headerlink" title="什么是生成器？"></a>什么是生成器？</h3><ol><li>python社区与迭代器看成一种，生成器的本质就是迭代器。</li><li>生成器是构造新的可遍历对象的一种非常简洁的方式。普通函数执行并一次返回单个结果，而生成器则’惰性’地返回一个多结果序列，在每一个元素产生之后暂停，直到下一个请求。</li><li>区别：生成器是我们自己用python代码构建的数据结构。迭代器都是提供的，或者转化得来的。</li><li>生成器的特点是并没有立即执行,而是记住’生产方式’,等被调用时再执行.</li></ol><h3 id="获取生成器的三种方式："><a href="#获取生成器的三种方式：" class="headerlink" title="获取生成器的三种方式："></a>获取生成器的三种方式：</h3><ol><li>生成器函数。（自己写的）</li><li>生成器表达式。（自己写的）</li><li>python内部提供的一些。</li></ol><h3 id="生成器函数获取生成器"><a href="#生成器函数获取生成器" class="headerlink" title="生成器函数获取生成器"></a>生成器函数获取生成器</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#普通函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="number">111</span>)</span><br><span class="line">    print(<span class="number">222</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span></span><br><span class="line">ret = func()</span><br><span class="line">print(ret)</span><br><span class="line"><span class="comment">#生成器函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">()</span>:</span></span><br><span class="line">	print(<span class="number">111</span>)</span><br><span class="line">	print(<span class="number">222</span>)</span><br><span class="line">	<span class="keyword">yield</span> <span class="number">3</span></span><br><span class="line">	<span class="keyword">yield</span> <span class="number">4</span></span><br><span class="line">ret1 = func1()     <span class="comment">#当你实际调用生成器时，代码不会立即执行；</span></span><br><span class="line">print(next(ret1))	<span class="comment">#直到你请求生成器中的元素时，它才会执行它地代码</span></span><br><span class="line">print(next(ret1))   <span class="comment">#当next地数量超过 yield 就会报错</span></span><br></pre></td></tr></table></figure><p>yield return</p><ul><li>return：函数中只存在一个return结束函数，并且给函数地执行者返回值。</li><li>yield：只要函数中有yield（不论有没有return）那么它就是生成器函数。生成器函数可以存在多个yield，yield不会结束生成器函数，一个yield对应一个next</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">吃包子练习：</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">	li = []</span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">5001</span>):</span><br><span class="line">		li.append(<span class="string">f'<span class="subst">&#123;i&#125;</span>号包子'</span>)</span><br><span class="line">	<span class="keyword">return</span> li</span><br><span class="line">ret = func()</span><br><span class="line">print(ret)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">()</span>:</span></span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">5001</span>)</span><br><span class="line">		<span class="keyword">yield</span> <span class="string">f'<span class="subst">&#123;i&#125;</span>号包子'</span></span><br><span class="line">ret1 = func1()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">300</span>):</span><br><span class="line">	print(next(ret1))</span><br><span class="line"></span><br><span class="line"><span class="comment">#疑惑，使用ret1 = func1() 后用for循环是1~...号包子。但是如果直接用func1()就只有1号包子</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_func2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">5001</span>):</span><br><span class="line">        <span class="keyword">yield</span> <span class="string">f'<span class="subst">&#123;i&#125;</span>号包子'</span></span><br><span class="line"></span><br><span class="line">print(id(gen_func2()))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">200</span>):</span><br><span class="line">    print(next(gen_func2()),id(gen_func2()))</span><br><span class="line"><span class="comment">#1号包子 2323676793936</span></span><br><span class="line"><span class="comment">#1号包子 2323676793936</span></span><br><span class="line"><span class="comment">#1号包子 2323676793936         ？？？</span></span><br></pre></td></tr></table></figure><p>yield from</p><p>进阶拔高：</p><p>问题1：</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">g=(i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">10</span>]:</span><br><span class="line">    g=(i+j <span class="keyword">for</span> j <span class="keyword">in</span> g) </span><br><span class="line">print(list(g))</span><br><span class="line">#这个会输出什么呢？</span><br><span class="line"></span><br><span class="line">g=(i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">10</span>]:</span><br><span class="line">    g=(i+j <span class="keyword">for</span> j <span class="keyword">in</span> g)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> g:</span><br><span class="line">    print(i) </span><br><span class="line">#这个会输出什么呢？</span><br><span class="line"></span><br><span class="line">&lt;i + j <span class="keyword">for</span> j <span class="keyword">in</span> &lt;i + j <span class="keyword">for</span> j <span class="keyword">in</span> &lt;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&gt;&gt;&gt;</span><br><span class="line">&lt;i + i + j <span class="keyword">for</span> j <span class="keyword">in</span> &lt;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&gt;&gt;</span><br><span class="line">&lt;<span class="number">2</span>i+j <span class="keyword">for</span> j <span class="keyword">in</span> &lt;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&gt;&gt;</span><br><span class="line"></span><br><span class="line">#记住这种生产方式 </span><br><span class="line">&lt;i+j <span class="keyword">for</span> j <span class="keyword">in</span> &lt;i+j j <span class="keyword">in</span>&lt;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&gt;&gt;&gt;      </span><br><span class="line">&lt; <span class="number">2</span>i + &lt;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&gt; &gt; </span><br><span class="line"># 调用的时候开始执行</span><br></pre></td></tr></table></figure><p>总结：这样的生成器会产生嵌套的效果，<strong>从里向外去理解</strong></p><ol><li><p>生成器的特点是并没有立即执行，而是’记住<strong>生产方式</strong>‘，等<u>被调用</u>（如list（））时在执行</p></li><li><p>推导式中地变量是临时变量，不会影响其它地变量。</p></li><li><p>生成器中的 i 是受保护地，与外部地 i 无关，它地取值一定是0，1，2，3</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">g = (<span class="selector-tag">i</span> <span class="keyword">for</span> <span class="selector-tag">i</span> <span class="keyword">in</span> range(<span class="number">4</span>))</span><br><span class="line"><span class="selector-tag">i</span> = <span class="number">8</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(list(g)</span></span>)</span><br><span class="line"></span><br><span class="line">#在看一个</span><br><span class="line"><span class="selector-tag">a</span> = <span class="number">1</span></span><br><span class="line">   g = (<span class="selector-tag">a</span> + <span class="selector-tag">i</span> <span class="keyword">for</span> <span class="selector-tag">i</span> <span class="keyword">in</span> range(<span class="number">4</span>))</span><br><span class="line">   <span class="selector-tag">a</span> = <span class="number">5</span></span><br><span class="line">   print(list(g))</span><br></pre></td></tr></table></figure></li><li><p>这里i是受保护地，而a并没有，由于后续a地值是5，所以打印语句中生成器应该是 <code>&lt;gen 5+0, 5+1 ,...&gt;</code>的存在。</p></li><li><p>分析题目：</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">第一行的 g = (i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>))中，i是受保护的，所以它的迭代永远都是<span class="number">0</span>~<span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">10</span>]:</span><br><span class="line">	g = (i + j <span class="keyword">for</span> j <span class="keyword">in</span> g)</span><br><span class="line">这里的j也属于受保护的，在第一次循环中，它的值就是g初始时产出的<span class="number">0</span>~<span class="number">3</span>。而这里的i不受保护，只是进行变量绑定，在生成器生成数据时才获取其值</span><br><span class="line"></span><br><span class="line">第一次循环后g的值：</span><br><span class="line">&lt;gen i+<span class="number">0</span>,i+<span class="number">1</span>,i+<span class="number">2</span>,i+<span class="number">3</span>&gt;</span><br><span class="line"></span><br><span class="line">第二次循环，推导式中j就是生产的值，虽然此时i=<span class="number">10</span>，但i是后续绑定的，所以生产为 i+<span class="number">0</span>,i+<span class="number">1</span>,i+<span class="number">2</span>,i+<span class="number">3</span> 第二次循环后g的值：</span><br><span class="line">&lt;gen i+i+<span class="number">0</span>, i+i+<span class="number">1</span>,i+i+<span class="number">2</span>,i+i+<span class="number">3</span>&gt;</span><br><span class="line"></span><br><span class="line">最后打印语句时，i的值是循环体最后一次的值（<span class="number">10</span>），所以打印输出<span class="number">20</span>，<span class="number">21</span>，<span class="number">22</span>，<span class="number">23</span></span><br><span class="line"></span><br><span class="line">如果是</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> g:</span><br><span class="line">    print(i) </span><br><span class="line">这样         #<span class="number">20</span>，<span class="number">41</span>，<span class="number">84</span>，<span class="number">171</span>  </span><br><span class="line">&lt;gen i+i+<span class="number">0</span>,i+i+<span class="number">1</span>,i+i+<span class="number">2</span>,i+i+<span class="number">3</span>&gt;</span><br><span class="line"><span class="number">20</span> <span class="number">20</span>+<span class="number">20</span>+<span class="number">1</span> <span class="number">41</span>+<span class="number">41</span>+<span class="number">2</span> <span class="number">84</span>+<span class="number">84</span>+<span class="number">3</span></span><br><span class="line">   #因为生成器中变量 i一直存在，并没有被释放和回收，在使用变量i去循环g，i的值就产生混乱了。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">如果是</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> g：</span><br><span class="line">	print(k)</span><br></pre></td></tr></table></figure></li></ol><h3 id="生成器表达式，列表推导式"><a href="#生成器表达式，列表推导式" class="headerlink" title="生成器表达式，列表推导式"></a>生成器表达式，列表推导式</h3><p>列表推导式：用一行代码去构建一个比较复杂有规律的列表。</p><p>推导式分类：</p><ol><li>循环模式：[变量（加工后的变量）for 变量 in iterable]</li><li>筛选模式：[变量（加工后的变量）for 变量 in iterable if 条件]</li><li>[ f(x) for x in S if P(x)] (多维对象转换成一维列表)</li></ol><p>循环模式：</p><ol><li><p>单层：</p></li><li><p>嵌套：从外层到内层,顺序写下来</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">names = [[<span class="string">'Tom'</span>, <span class="string">'Billy'</span>, <span class="string">'Jefferson'</span>, <span class="string">'Andrew'</span>, <span class="string">'Wesley'</span>, <span class="string">'Steven'</span>, <span class="string">'Joe'</span>],</span><br><span class="line">         [<span class="string">'Alice'</span>, <span class="string">'Jill'</span>, <span class="string">'Ana'</span>, <span class="string">'Wendy'</span>, <span class="string">'Jennifer'</span>, <span class="string">'Sherry'</span>, <span class="string">'Evan'</span>]]</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">li</span> = []</span><br><span class="line"><span class="keyword">for</span> <span class="selector-tag">i</span> <span class="keyword">in</span> names:</span><br><span class="line">	<span class="keyword">for</span> j <span class="keyword">in</span> <span class="selector-tag">i</span>:</span><br><span class="line">		<span class="keyword">if</span> j.count(<span class="string">'e'</span>)&gt;=<span class="number">2</span>:</span><br><span class="line">			<span class="selector-tag">li</span>.append(j)</span><br><span class="line">#改成一句话</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">([j for i in names for j in i if j.count(<span class="string">'e'</span>)</span></span>&gt;=<span class="number">2</span>])</span><br></pre></td></tr></table></figure></li></ol><p>练习：一行打印扑克牌</p><figure class="highlight sas"><table><tr><td class="code"><pre><span class="line">p<span class="meta">rint(</span>[i for i <span class="meta">in</span><span class="meta"> range(</span>2,10)]+<span class="meta">list</span>(<span class="string">'JQKA'</span>))</span><br></pre></td></tr></table></figure><h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><h3 id="开放封闭原则"><a href="#开放封闭原则" class="headerlink" title="开放封闭原则"></a>开放封闭原则</h3><p>开放: 对代码的拓展开放的；</p><p>封闭：对源码的修改是封闭的。</p><h3 id="装饰器-1"><a href="#装饰器-1" class="headerlink" title="装饰器"></a>装饰器</h3><ul><li>完全遵循开放封闭原则。</li><li>在不改变原函数的代码以及调用方式的前提下，为其增加新的功能。</li><li>装饰器就是一个函数。</li></ul><p>现在我们想在登陆博客园函数基础上加一个测试这个函数的执行效率这样一个功能。在遵守开放封闭原则的基础上产生了版本一。</p><h3 id="版本一：简单版本"><a href="#版本一：简单版本" class="headerlink" title="版本一：简单版本"></a>版本一：简单版本</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">'''有很多代码.....'''</span></span><br><span class="line">    time.sleep(<span class="number">2</span>) <span class="comment"># 模拟的网络延迟或者代码效率</span></span><br><span class="line">    print(<span class="string">'欢迎登录博客园首页'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timmer</span><span class="params">(f)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        start_time = time.time()</span><br><span class="line">        f()</span><br><span class="line">        end_time = time.time()</span><br><span class="line">        print(<span class="string">f'测试本函数的执行效率<span class="subst">&#123;end_time-start_time&#125;</span>'</span>)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line">index = timmer(index)</span><br><span class="line">index()</span><br></pre></td></tr></table></figure><h3 id="版本二：加语法糖"><a href="#版本二：加语法糖" class="headerlink" title="版本二：加语法糖"></a>版本二：加语法糖</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timmer</span><span class="params">(f)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        start_time = time.time()</span><br><span class="line">        f()</span><br><span class="line">        end_time = time.time()</span><br><span class="line">        print(<span class="string">f'测试本函数的执行效率<span class="subst">&#123;end_time-start_time&#125;</span>'</span>)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"><span class="meta">@timmer</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">'''有很多代码.....'''</span></span><br><span class="line">    time.sleep(<span class="number">2</span>) <span class="comment"># 模拟的网络延迟或者代码效率</span></span><br><span class="line">    print(<span class="string">'欢迎登录博客园首页'</span>)</span><br><span class="line"></span><br><span class="line">index()</span><br></pre></td></tr></table></figure><h3 id="版本三：被装饰函数带返回值"><a href="#版本三：被装饰函数带返回值" class="headerlink" title="版本三：被装饰函数带返回值"></a>版本三：被装饰函数带返回值</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># timmer装饰器</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timmer</span><span class="params">(f)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        start_time = time.time()</span><br><span class="line">        <span class="comment"># print(f'这是个f():&#123;f()&#125;!!!') # index()</span></span><br><span class="line">        r = f()</span><br><span class="line">        end_time = time.time()</span><br><span class="line">        print(<span class="string">f'测试本函数的执行效率<span class="subst">&#123;end_time-start_time&#125;</span>'</span>)</span><br><span class="line">        <span class="keyword">return</span> r</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="meta">@timmer # index = timmer(index)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">'''有很多代码.....'''</span></span><br><span class="line">    time.sleep(<span class="number">0.6</span>) <span class="comment"># 模拟的网络延迟或者代码效率</span></span><br><span class="line">    print(<span class="string">'欢迎登录博客园首页'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">666</span></span><br><span class="line"><span class="comment"># 加上装饰器不应该改变原函数的返回值，所以666 应该返回给我下面的ret，</span></span><br><span class="line"><span class="comment"># 但是下面的这个ret实际接收的是inner函数的返回值，而666返回给的是装饰器里面的</span></span><br><span class="line"><span class="comment"># f() 也就是 r,我们现在要解决的问题就是将r给inner的返回值。</span></span><br><span class="line">ret = index()  <span class="comment"># inner()</span></span><br><span class="line">print(ret)</span><br></pre></td></tr></table></figure><h3 id="版本四：被装饰函数带参数"><a href="#版本四：被装饰函数带参数" class="headerlink" title="版本四：被装饰函数带参数"></a>版本四：被装饰函数带参数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># timmer装饰器</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timmer</span><span class="params">(f)</span>:</span></span><br><span class="line">    <span class="comment"># f = index</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(*args,**kwargs)</span>:</span></span><br><span class="line">        <span class="comment">#  函数的定义：* 聚合  args = ('小黑',18)</span></span><br><span class="line">        start_time = time.time()</span><br><span class="line">        <span class="comment"># print(f'这是个f():&#123;f()&#125;!!!') # index()</span></span><br><span class="line">        r = f(*args,**kwargs)</span><br><span class="line">        <span class="comment"># 函数的执行：* 打散：f(*args) --&gt; f(*('小黑',18))  --&gt; f('小黑',18)</span></span><br><span class="line">        end_time = time.time()</span><br><span class="line">        print(<span class="string">f'测试本函数的执行效率<span class="subst">&#123;end_time-start_time&#125;</span>'</span>)</span><br><span class="line">        <span class="keyword">return</span> r</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="meta">@timmer # index = timmer(index)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="string">'''有很多代码.....'''</span></span><br><span class="line">    time.sleep(<span class="number">0.6</span>) <span class="comment"># 模拟的网络延迟或者代码效率</span></span><br><span class="line">    print(<span class="string">f'欢迎<span class="subst">&#123;name&#125;</span>登录博客园首页'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">666</span></span><br><span class="line">index(<span class="string">'小白'</span>)  <span class="comment"># inner('小白')</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@timmer</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dariy</span><span class="params">(name,age)</span>:</span></span><br><span class="line">    <span class="string">'''有很多代码.....'''</span></span><br><span class="line">    time.sleep(<span class="number">0.5</span>) <span class="comment"># 模拟的网络延迟或者代码效率</span></span><br><span class="line">    print(<span class="string">f'欢迎<span class="subst">&#123;age&#125;</span>岁<span class="subst">&#123;name&#125;</span>登录日记页面'</span>)</span><br><span class="line">dariy(<span class="string">'小黑'</span>,<span class="number">18</span>)  <span class="comment"># inner('小黑',18)</span></span><br></pre></td></tr></table></figure><h3 id="版本五：标准版装饰器"><a href="#版本五：标准版装饰器" class="headerlink" title="版本五：标准版装饰器"></a>版本五：标准版装饰器</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(f)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(*args,**kwargs)</span>:</span></span><br><span class="line">        <span class="string">'''添加额外的功能：执行被装饰函数之前的操作'''</span></span><br><span class="line">        ret = f(*args,**kwargs)</span><br><span class="line">        <span class="string">''''添加额外的功能：执行被装饰函数之后的操作'''</span></span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line">    <span class="keyword">return</span> inner</span><br></pre></td></tr></table></figure><h3 id="版本六：装饰器的嵌套"><a href="#版本六：装饰器的嵌套" class="headerlink" title="版本六：装饰器的嵌套"></a>版本六：装饰器的嵌套</h3><p>对于这类问题关键的一点在于语法糖：<strong>语法糖默认会向下在读一行</strong>！ 所以是从最下面开始进行转换</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 例1：</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">(f)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner1</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="number">1</span>)</span><br><span class="line">        f()</span><br><span class="line">        print(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> inner1</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func2</span><span class="params">(f)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner2</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="number">2</span>)</span><br><span class="line">        f()</span><br><span class="line">        print(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> inner2</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func3</span><span class="params">(f)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner3</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="number">3</span>)</span><br><span class="line">        f()</span><br><span class="line">        print(<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">return</span> inner3</span><br><span class="line"></span><br><span class="line"><span class="meta">@func3  </span></span><br><span class="line"><span class="meta">@func2   </span></span><br><span class="line"><span class="meta">@func1   </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="number">111</span>)</span><br><span class="line"></span><br><span class="line">func()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 例2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">(f)</span>:</span></span><br><span class="line">    print(<span class="number">1</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        f()</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func2</span><span class="params">(f)</span>:</span></span><br><span class="line">    print(<span class="number">2</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        f()</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func3</span><span class="params">(f)</span>:</span></span><br><span class="line">    print(<span class="number">3</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        f()</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="meta">@func3</span></span><br><span class="line"><span class="meta">@func2</span></span><br><span class="line"><span class="meta">@func1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="number">111</span>)</span><br><span class="line"></span><br><span class="line">func()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 例3</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func3</span><span class="params">(*args)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func2</span><span class="params">(f)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">(*args,**kwargs)</span>:</span></span><br><span class="line">            print(<span class="string">"in func1"</span>)</span><br><span class="line">            ret = f()</span><br><span class="line">            <span class="keyword">return</span> ret</span><br><span class="line">        <span class="keyword">return</span> func1</span><br><span class="line">    <span class="keyword">return</span> func2</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func6</span><span class="params">(f)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func5</span><span class="params">(*args,**kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">'in func5'</span>)</span><br><span class="line">        ret = f(*args,**kwargs)</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line">    <span class="keyword">return</span> func5</span><br><span class="line"></span><br><span class="line"><span class="meta">@func3()       #@func3() == @func2   func5 = func2(func5)  == func1(func5)</span></span><br><span class="line"><span class="meta">@func6          #func7 = func6(func7) == func5</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func7</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'in func7'</span>)</span><br><span class="line">func7()</span><br></pre></td></tr></table></figure><h3 id="版本七：带参数的装饰器"><a href="#版本七：带参数的装饰器" class="headerlink" title="版本七：带参数的装饰器"></a>版本七：带参数的装饰器</h3><ul><li>带参数的装饰器最关键的一点： <strong>我们先执行语法糖后面的</strong>！</li></ul><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">def zhuangshi(*args):</span><br><span class="line">	def <span class="keyword">wrapper</span>(f):</span><br><span class="line">		def <span class="keyword">inner</span>(*args,**kwargs):</span><br><span class="line">			<span class="string">'''被装饰前'''</span></span><br><span class="line">			ret = f(*args,**kwargs)</span><br><span class="line">			<span class="string">'''被装饰后'''</span></span><br><span class="line">			<span class="keyword">return</span> ret</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">inner</span></span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">wrapper</span></span><br><span class="line"></span><br><span class="line">@zhuangshi()</span><br><span class="line">def func1():</span><br><span class="line">	print(<span class="string">'in func1'</span>)</span><br><span class="line">@zhuangshi()</span><br><span class="line">def func2():</span><br><span class="line">	print(<span class="string">'in func2'</span>)</span><br><span class="line">	</span><br><span class="line">这样@zhuangshi() 相当于  @<span class="keyword">wrapper</span>   相当于   func1 = <span class="keyword">wrapper</span>(func1)</span><br></pre></td></tr></table></figure><hr>]]></content>
      <categories>
        <category>python学习</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 字符串相关操作与方法</title>
    <url>/learn-python/20190401-python-string.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>Python字符串相关操作方法：索引，切片，count，startswith，endswith，split，join，format，strip，is系列，find，index，upper，capitalize，center。</p></blockquote><a id="more"></a><hr><h2 id="1-字符串的索引与切片"><a href="#1-字符串的索引与切片" class="headerlink" title="1. 字符串的索引与切片"></a>1. 字符串的索引与切片</h2><ol><li><p>字符串从左至右是有顺序的，我们通过索引来确定它的位置。索引类似C语言中的下标</p><ul><li>s[index]</li></ul></li><li><p>切片是通过索引(索引：索引：步长)截取字符串的一段，<strong>形成新的字符串</strong></p><ul><li>s[start_index : end_index+1 : step]</li><li>顾头不顾腚（结尾得往下取一位）</li><li>倒序，需要使用反向步长s[::-1]</li><li>索引无论使用正数还是负数都仅表示位置。这里是否使用反向步长需要注意一下</li></ul></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(a[<span class="number">-1</span>:<span class="number">0</span>])  <span class="comment">#不能从-1 到 0 </span></span><br><span class="line">print(a[<span class="number">-1</span>:<span class="number">-5</span>]) <span class="comment">#不能从-1 到 -5</span></span><br><span class="line">print(a[<span class="number">-1</span>:<span class="number">-5</span>:<span class="number">-1</span>]) <span class="comment">#以上可以加上步长   #倒序</span></span><br><span class="line">print(a[<span class="number">-5</span>:<span class="number">-1</span>])    <span class="comment">#或从左向右</span></span><br><span class="line"></span><br><span class="line">原因在于默认步长为<span class="number">1</span>，所以不能直接从右向左</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>注意：索引、切片出来的数据与原来是没有联系的。</strong></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s2 = s1[<span class="number">0</span>]</span><br><span class="line">s2 与 s1 没有联系</span><br><span class="line">s2的内容是另开辟的</span><br></pre></td></tr></table></figure><h2 id="2-字符串的常用操作方法"><a href="#2-字符串的常用操作方法" class="headerlink" title="2. 字符串的常用操作方法"></a>2. 字符串的常用操作方法</h2><ol><li><p><strong>注意</strong>： 新字符串与原字符串没有联系，这些操作都是产生一个新的字符串。</p></li><li><p>count</p><ul><li>计算字符串中参数出现的个数</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">res = a.count(<span class="string">"a"</span>)</span><br><span class="line">res = a.count(<span class="string">"a"</span>,<span class="number">4</span>,<span class="number">8</span>)  <span class="comment">#对res的切片内容进行a的计数</span></span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li>startswith 与 endswith 判断以什么为开头，什么为结尾</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">'abcdefghijklmnopqrstuvwxyz'</span></span><br><span class="line">print(a.startswith(<span class="string">"a"</span>))   返回<span class="literal">True</span></span><br><span class="line">print(a.startswith(<span class="string">"d"</span>))   返回<span class="literal">False</span></span><br><span class="line">print(a.startswith(<span class="string">"d"</span>,<span class="number">3</span>,<span class="number">6</span>))  返回<span class="literal">True</span></span><br><span class="line">print(a.endswith(<span class="string">"z"</span>))     返回<span class="literal">True</span></span><br></pre></td></tr></table></figure><ol start="3"><li>split<ul><li>形成一个不包含这个分割元素的列表(默认按照空格分格，返回一个链表)</li><li><strong>str —&gt;list</strong></li></ul></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">'abcdefghijklmnopqrstuvwxyz'</span></span><br><span class="line">b = a.split()</span><br><span class="line">print(b,type(b))</span><br><span class="line"><span class="comment">##['abcdefghijklmnopqrstuvwxyz'] &lt;class 'list'&gt;</span></span><br><span class="line">c = a.split(<span class="string">'f'</span>)</span><br><span class="line">print(c,type(c))</span><br><span class="line"><span class="comment">##['abcde', 'ghijklmnopqrstuvwxyz']</span></span><br></pre></td></tr></table></figure><ol start="4"><li><p>join (iterate)非常好用 联合</p><ul><li>list —&gt; str</li><li>iterate 是可迭代对象</li><li><strong>前提：使用join方法的对象必须是字符串！！！</strong></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = <span class="string">'xiao'</span></span><br><span class="line">s2 = <span class="string">'+'</span>.join(s1)</span><br><span class="line">print(s2)       <span class="comment">#x+i+a+o</span></span><br><span class="line">   </span><br><span class="line">l1 = [<span class="string">'xiaobai'</span>,<span class="string">'xiaohuang'</span>,<span class="string">'xiaohei'</span>] </span><br><span class="line">s3 = <span class="string">':'</span>.join(l1)</span><br><span class="line">print(s3)       <span class="comment">#xiaobai:xiaohuang:xiaohei</span></span><br></pre></td></tr></table></figure></li></ol><ol start="5"><li>format的三种玩法，<strong>格式化输出</strong></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">res = <span class="string">'&#123;&#125;&#123;&#125;&#123;&#125;'</span>.format(<span class="string">'naqin'</span>,<span class="number">18</span>,<span class="string">'male'</span>)</span><br><span class="line">naqin18male</span><br><span class="line"></span><br><span class="line">res = <span class="string">'&#123;1&#125;&#123;0&#125;&#123;1&#125;'</span>.format(<span class="string">'naqin'</span>,<span class="number">18</span>,<span class="string">'male'</span>)</span><br><span class="line"><span class="number">18</span>naqin18</span><br><span class="line"></span><br><span class="line">res = <span class="string">'&#123;name&#125;&#123;age&#125;&#123;sex&#125;'</span>.format(name=<span class="string">'naqin'</span>,age=<span class="number">18</span>,sex=<span class="string">'male'</span>)</span><br><span class="line">naqin18male</span><br></pre></td></tr></table></figure><ol start="6"><li><p>format方法</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 占位填充</span></span><br><span class="line">format(<span class="string">'ab%scd'</span>%<span class="number">5</span>)             <span class="comment"># ab5cd</span></span><br><span class="line"><span class="comment"># 填充</span></span><br><span class="line">format(<span class="string">'aksfhakefhk'</span>,<span class="string">'&lt;20'</span>)    <span class="comment"># 'aksfhakefhk         '</span></span><br><span class="line"><span class="comment"># 填充:</span></span><br><span class="line">format(<span class="string">'aksfhakefhk'</span>,<span class="string">':&lt;20'</span>)   <span class="comment"># 'aksfhakefhk:::::::::'</span></span><br><span class="line"><span class="comment"># 填充*</span></span><br><span class="line">format(<span class="string">'lfajlajl'</span>, <span class="string">'*&gt;30'</span>)     <span class="comment"># '**********************lfajlajl'</span></span><br><span class="line"><span class="comment"># 默认</span></span><br><span class="line">format(<span class="number">2918</span>)                   <span class="comment"># '2918'</span></span><br><span class="line"><span class="comment"># 十六进制的值</span></span><br><span class="line">format(<span class="number">0x500</span>, <span class="string">'X'</span>)             <span class="comment"># '500'</span></span><br><span class="line"><span class="comment"># 在总个数内不填充</span></span><br><span class="line">format(<span class="number">3.14</span>, <span class="string">'0=4'</span>)            <span class="comment"># '3.14'</span></span><br><span class="line"><span class="comment"># 不够5个就用0填充</span></span><br><span class="line">format(<span class="number">3.14</span>, <span class="string">'0=5'</span>)            <span class="comment"># '03.14'</span></span><br><span class="line"><span class="comment"># 小数点后保留 2-1 位</span></span><br><span class="line">format(<span class="number">3.14159</span>, <span class="string">'.2'</span>)          <span class="comment"># '3.1'</span></span><br><span class="line"><span class="comment"># 总数不够就用0 填充</span></span><br><span class="line">format(<span class="number">3.14159</span>, <span class="string">'05.3'</span>)        <span class="comment"># '03.14'</span></span><br><span class="line"><span class="comment"># 科学计数</span></span><br><span class="line">format(<span class="number">3.14159</span>, <span class="string">'E'</span>)           <span class="comment"># '3.141590E+00'</span></span><br></pre></td></tr></table></figure></li></ol><ol start="7"><li><p>strip 移除字符串头尾指定的字符</p><ul><li>默认去除空格，tab，\t,\n</li><li>去除指定的字符 (从前往后从后往前，遇到一个清除一个，若<strong>遇到不含参数内的字符时停止</strong>)</li></ul><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">s4 = 'rre小r白qsd'</span><br><span class="line">s5 = s4.strip('rqsed')</span><br><span class="line">print(s5)  <span class="comment">#小r白</span></span><br></pre></td></tr></table></figure><ul><li>只能删除开头或是结尾的字符，不能删除中间部分的字符。</li></ul></li><li><p>replace</p><ul><li>replace方法不是对原来的字符串做改变，而是新产生一个改变后的字符串，所以依旧需要赋值替换。</li></ul></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">msg = <span class="string">'小白很丑，小白是xx'</span></span><br><span class="line">msg1 = msg.replace(<span class="string">'小白'</span>,<span class="string">'太黑'</span>)</span><br><span class="line"><span class="comment">#小黑很丑，小黑是xx</span></span><br><span class="line">msg1 = msg.replace(<span class="string">'小白'</span>,<span class="string">'太黑'</span>，<span class="number">1</span>)   默认全部替换</span><br></pre></td></tr></table></figure><ol start="8"><li>is系列<ul><li>应用：字符串合法性检查</li></ul></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a.isalnum()  <span class="comment">#字符串由字母或数字组成</span></span><br><span class="line">a.isalpha()  <span class="comment">#只由字母组成</span></span><br><span class="line">a.isdecimal() <span class="comment">#只由十进制组成</span></span><br></pre></td></tr></table></figure><ol start="9"><li><p>find（） 返回找到的元素的索引，找不到返回-1</p></li><li><p>index（）返回找到的元素的索引，找不到报错</p></li><li><p>upper(所有字母大写，中文或数字忽略) 、lower（所有字母小写）</p></li></ol><ul><li>应用：验证码（不区分大小写）</li></ul><ol start="12"><li><p>capitalize（首字母大写）、swapcase(大小写翻转)、title（每个单词大写）</p></li><li><p>center</p></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">st = <span class="string">'runoob'</span></span><br><span class="line">print(st.center(<span class="number">50</span>,<span class="string">'*'</span>))</span><br><span class="line">**********************runoob**********************</span><br></pre></td></tr></table></figure><hr>]]></content>
      <categories>
        <category>python学习</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python集合</title>
    <url>/learn-python/20190326-python-set.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>本章介绍了集合，集合最擅长的地方在于它可以排重，求交集并集和补集。</p></blockquote><a id="more"></a><p>可以使用{} 或者 set（）创建集合，创建空集合必须是set（），因为{}是空字典</p><h2 id="常用函数与方法"><a href="#常用函数与方法" class="headerlink" title="常用函数与方法"></a>常用函数与方法</h2><h3 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h3><ul><li>add</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A = set(<span class="string">'abcd'</span>)</span><br><span class="line">A.add(<span class="string">'e'</span>)</span><br><span class="line">print(A) 			<span class="comment"># &#123;'b', 'c', 'd', 'a', 'e'&#125;</span></span><br></pre></td></tr></table></figure><ul><li>update</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A = set(<span class="string">'abcd'</span>)</span><br><span class="line">A.update(<span class="string">'g'</span>)</span><br><span class="line">print(A)    		<span class="comment"># &#123;'g', 'c', 'd', 'a', 'b'&#125;</span></span><br></pre></td></tr></table></figure><h3 id="移除元素"><a href="#移除元素" class="headerlink" title="移除元素"></a>移除元素</h3><ul><li><p>remove</p><ul><li>元素不存在，则会发生错误。</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A = set(<span class="string">'abcd'</span>)</span><br><span class="line">A.remove(<span class="string">'a'</span>)</span><br><span class="line">print(A)    	<span class="comment"># &#123;'c', 'd', 'b'&#125;</span></span><br><span class="line">A.remove(<span class="string">'g'</span>)	<span class="comment"># KeyError: 'g'</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>discard</p><ul><li>如果元素不存在，不会发生错误。</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A = set(<span class="string">'abcd'</span>)</span><br><span class="line">A.discard(<span class="string">'a'</span>)</span><br><span class="line">A.discard(<span class="string">'g'</span>)</span><br><span class="line">print(A)    <span class="comment"># &#123;'c', 'd', 'b'&#125;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>pop</p><ul><li>随机删除集合中的一个元素</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A = set(<span class="string">'abcd'</span>)</span><br><span class="line">A.pop()</span><br><span class="line">print(A)	<span class="comment"># &#123;'d', 'b', 'a'&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="计算集合元素个数"><a href="#计算集合元素个数" class="headerlink" title="计算集合元素个数"></a>计算集合元素个数</h3><ul><li>len</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A = set(<span class="string">'abcd'</span>)</span><br><span class="line">print(len(A))   <span class="comment"># 4个元素</span></span><br></pre></td></tr></table></figure><h3 id="清空集合"><a href="#清空集合" class="headerlink" title="清空集合"></a>清空集合</h3><ul><li>clear</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A = set(<span class="string">'abcd'</span>)</span><br><span class="line">A.clear()</span><br><span class="line">print(A)          <span class="comment"># 变成了空集合 set()</span></span><br></pre></td></tr></table></figure><ul><li>del 集合名字</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A = set(<span class="string">'abcd'</span>)</span><br><span class="line"><span class="keyword">del</span> A           <span class="comment"># 删除后A 就不存在了</span></span><br><span class="line">print(A)        <span class="comment"># NameError: name 'A' is not defined</span></span><br></pre></td></tr></table></figure><h3 id="判断元素是否在集合中存在"><a href="#判断元素是否在集合中存在" class="headerlink" title="判断元素是否在集合中存在"></a>判断元素是否在集合中存在</h3><ul><li>in 与 not in</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A = set(<span class="string">'abcd'</span>)</span><br><span class="line">print(<span class="string">'e'</span> <span class="keyword">in</span> A)		<span class="comment"># False</span></span><br><span class="line">print(<span class="string">'a'</span> <span class="keyword">in</span> A)		<span class="comment"># True</span></span><br></pre></td></tr></table></figure><h3 id="将集合变为不可变数据类型"><a href="#将集合变为不可变数据类型" class="headerlink" title="将集合变为不可变数据类型"></a>将集合变为不可变数据类型</h3><ul><li>frozenset</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A = set(<span class="string">'abcd'</span>)</span><br><span class="line">B = frozenset(A)</span><br><span class="line">print(B,type(B))        <span class="comment"># frozenset(&#123;'c', 'a', 'b', 'd'&#125;) &lt;class 'frozenset'&gt;</span></span><br><span class="line">print(B.__hash__())     <span class="comment"># -2156020053626062124</span></span><br><span class="line"><span class="comment"># print(A.__hash__())   # 报错  可变数据类型是不可hash的</span></span><br></pre></td></tr></table></figure><h2 id="集合运算-lt-gt-amp"><a href="#集合运算-lt-gt-amp" class="headerlink" title="集合运算    &lt;&gt; &amp; ^ | -"></a>集合运算 &lt;&gt; &amp; ^ | -</h2><h3 id="判断子集与超集-lt-gt-或-issubset-issuperset"><a href="#判断子集与超集-lt-gt-或-issubset-issuperset" class="headerlink" title="判断子集与超集     &lt; &gt;   或  issubset issuperset"></a>判断子集与超集 &lt; &gt; 或 issubset issuperset</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A = set(<span class="string">'abcd'</span>)</span><br><span class="line">B = set(<span class="string">'bd'</span>)</span><br><span class="line">print(A &lt; B)			<span class="comment"># False</span></span><br><span class="line">print(A &gt; B)			<span class="comment"># True</span></span><br><span class="line">print(A.issubset(B))	<span class="comment"># False</span></span><br><span class="line">print(B.issubset(A))	<span class="comment"># True</span></span><br><span class="line">print(A.issuperset(B))	<span class="comment"># True</span></span><br></pre></td></tr></table></figure><h3 id="求交集-amp-或-intersection"><a href="#求交集-amp-或-intersection" class="headerlink" title="求交集    &amp; 或 intersection"></a>求交集 &amp; 或 intersection</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A = &#123;i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>,<span class="number">2</span>)&#125;</span><br><span class="line">print(A)						<span class="comment"># &#123;1, 3, 5, 7, 9&#125;</span></span><br><span class="line">B = &#123;i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>,<span class="number">15</span>,<span class="number">2</span>)&#125;</span><br><span class="line">print(B)						<span class="comment"># &#123;5, 7, 9, 11, 13&#125;</span></span><br><span class="line"></span><br><span class="line">print(A &amp; B)					<span class="comment"># &#123;9, 5, 7&#125;</span></span><br><span class="line">print(A.intersection(B))		<span class="comment"># &#123;9, 5, 7&#125;</span></span><br></pre></td></tr></table></figure><h3 id="求反交集-或者-symmetric-difference"><a href="#求反交集-或者-symmetric-difference" class="headerlink" title="求反交集    ^ 或者  symmetric_difference"></a>求反交集 ^ 或者 symmetric_difference</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A = &#123;i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>,<span class="number">2</span>)&#125;</span><br><span class="line">print(A)						        <span class="comment"># &#123;1, 3, 5, 7, 9&#125;</span></span><br><span class="line">B = &#123;i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>,<span class="number">15</span>,<span class="number">2</span>)&#125;</span><br><span class="line">print(B)						        <span class="comment"># &#123;5, 7, 9, 11, 13&#125;</span></span><br><span class="line"></span><br><span class="line">print(A ^ B)					        <span class="comment"># &#123;1, 3, 11, 13&#125;</span></span><br><span class="line">print(A.symmetric_difference(B))		<span class="comment"># &#123;1, 3, 11, 13&#125;</span></span><br></pre></td></tr></table></figure><h3 id="求并集-或-union"><a href="#求并集-或-union" class="headerlink" title="求并集    | 或 union"></a>求并集 | 或 union</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A = set(<span class="string">'abcde'</span>)</span><br><span class="line">B = set(<span class="string">'defg'</span>)</span><br><span class="line">print(A | B)			<span class="comment"># &#123;'b', 'd', 'a', 'g', 'c', 'e', 'f'&#125;</span></span><br><span class="line">print(A.union(B))		<span class="comment"># &#123;'b', 'd', 'a', 'g', 'c', 'e', 'f'&#125;</span></span><br></pre></td></tr></table></figure><h3 id="求差集-或-difference"><a href="#求差集-或-difference" class="headerlink" title="求差集    - 或 difference"></a>求差集 - 或 difference</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A = set(<span class="string">'abcde'</span>)</span><br><span class="line">B = set(<span class="string">'defg'</span>)</span><br><span class="line"><span class="comment"># A有B没有</span></span><br><span class="line">print(A - B)			<span class="comment"># &#123;'b', 'a', 'c'&#125;</span></span><br><span class="line">print(A.difference(B))	<span class="comment"># &#123;'b', 'a', 'c'&#125;</span></span><br></pre></td></tr></table></figure><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><ul><li>判断一个字典中是否有这些key： ‘AAA’,’BB’,’C’,’DD’,’EEE’(不使用for while)</li></ul><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">利用集合判断交集   <span class="built_in">and</span></span><br><span class="line">dic = &#123;<span class="string">'AAA'</span>:<span class="number">666</span>&#125;</span><br><span class="line">s1 = &#123;<span class="string">'AAA'</span>,<span class="string">'BB'</span>,<span class="string">'C'</span>,<span class="string">'DD'</span>,<span class="string">'EEE'</span>&#125;</span><br><span class="line">s2 = <span class="keyword">set</span>(dic.<span class="built_in">keys</span>())</span><br><span class="line"><span class="keyword">print</span>(s1 <span class="built_in">and</span> s2)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python学习</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python字典</title>
    <url>/learn-python/20190325-python-dict.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>本篇介绍了python中字典的概念、操作（增删查改）、字典的嵌套和字典推导式。</p></blockquote><a id="more"></a><hr><h3 id="字典的初识："><a href="#字典的初识：" class="headerlink" title="字典的初识："></a>字典的初识：</h3><p>why：</p><ul><li>列表可以存储大量的数据，数据之间的<strong>关联型不强</strong>。<ul><li>[‘小白’,18,’男’,’小黑’,30,’男’]</li></ul></li><li>列表的<strong>查询速度比较慢</strong>。</li></ul><p>what：</p><ul><li>容器型数据类型：dict</li></ul><p>how：</p><ul><li>数据类型的分类（可变与不可变）：<ul><li>可变（不可哈希）的数据类型：列表，字典，集合</li><li>不可变（可哈希）的数据类型：str、 bool、int、 tuple</li></ul></li><li>字典：{}括起来，以键值对形式存储的容器型数据类型：</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dic =&#123;<span class="string">'小白'</span>:</span><br><span class="line">     &#123;<span class="string">'name'</span>:<span class="string">'小白'</span>,<span class="string">'age'</span>:<span class="number">18</span>&#125;,</span><br><span class="line">      <span class="string">'aa'</span>:[<span class="string">'bb'</span>,<span class="string">'cc'</span>],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>键必须是<strong>不可变的数据类型</strong>：int、str （bool、tuple几乎不用）</li><li>值可以是<strong>任意</strong>数据类型，对象。</li><li>字典3.5版本之前（包括3.5）是无序的。</li><li>字典在3.6x会按照初次建立字典的顺序排列，学术上不认为是有序的。</li><li>字典3.7x以后都是有序的。</li><li>字典的优点：查询速度快，存储关联型数据</li><li>字典的缺点：以空间换时间。</li></ul><h3 id="字典的创建方式：-掌握任意三种方式"><a href="#字典的创建方式：-掌握任意三种方式" class="headerlink" title="字典的创建方式：(掌握任意三种方式)"></a>字典的创建方式：<strong>(掌握任意三种方式)</strong></h3><ul><li>方式一：拆包</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dic = dict(((<span class="string">'one'</span>,<span class="number">1</span>),(<span class="string">'two'</span>,<span class="number">2</span>),(<span class="string">'three'</span>,<span class="number">3</span>)))</span><br></pre></td></tr></table></figure><ul><li>方式二：</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dic = dict(one=<span class="number">1</span>,two=<span class="number">2</span>,tree=<span class="number">3</span>)</span><br></pre></td></tr></table></figure><ul><li>方式三：官方正规写法</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dic = dict(&#123;<span class="string">'one'</span>: <span class="number">1</span>, <span class="string">'two'</span>: <span class="number">2</span>, <span class="string">'three'</span>: <span class="number">3</span>&#125;)</span><br></pre></td></tr></table></figure><ul><li>验证字典的合法性：</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dic = &#123;[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]:<span class="string">'alex'</span>,<span class="number">1</span>:<span class="number">666</span>&#125;</span><br><span class="line"><span class="comment">#TypeError: unhashable type: 'list'</span></span><br></pre></td></tr></table></figure><ul><li><p>字典的增删改查：</p><ul><li>键值对： 键，唯一：房间号：0~99 值： 房间：里面放什么都可以。 所以我们只能通过键来找值，不能通过值来找键。</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dic = &#123;<span class="number">1</span>:<span class="string">'aa'</span>,<span class="number">1</span>:<span class="string">'cc'</span>,<span class="number">2</span>,<span class="string">"ee"</span>&#125;   前面的直接被覆盖了</span><br><span class="line">print(dic)  <span class="comment">#&#123;1:'cc',2:'ee'&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="增：3种"><a href="#增：3种" class="headerlink" title="增：3种"></a>增：3种</h3><ul><li>方式一：直接增加 （有则改之，无则增加）</li></ul><figure class="highlight vala"><table><tr><td class="code"><pre><span class="line">dic = &#123;<span class="string">'name'</span>:<span class="string">'aa'</span>,<span class="string">'age'</span>:<span class="number">18</span>&#125;</span><br><span class="line"><span class="meta">#若字典中没有sex 则增加一个键值对</span></span><br><span class="line">dic[<span class="string">'sex'</span>] = <span class="string">'男'</span></span><br><span class="line"><span class="meta">#若字典中有sex， 则改掉</span></span><br></pre></td></tr></table></figure><ul><li>方式二：setdefalut (有则不变，无则增加)</li></ul><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">dic</span><span class="selector-class">.setdefault</span>(<span class="string">"hobby"</span>) #增加一个键，值为<span class="selector-tag">None</span></span><br><span class="line"><span class="selector-tag">dic</span><span class="selector-class">.setdefault</span>(<span class="string">"age"</span>,<span class="number">45</span>)</span><br></pre></td></tr></table></figure><ul><li>方式三： update（有则改之，无则增加）</li></ul><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">dic = &#123;<span class="string">'key1'</span>:<span class="number">1</span>&#125;</span><br><span class="line">dic.<span class="keyword">update</span>(key1 = <span class="number">2</span>)  <span class="keyword">mapping</span> 所以关键字不加引号</span><br><span class="line"></span><br><span class="line"># 原因：因为字符串无法作为变量使用，所以不能 <span class="string">'key1'</span> = <span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="删：3"><a href="#删：3" class="headerlink" title="删：3"></a>删：3</h3><ul><li>pop 按照键去删除键值对，返回对应的值</li><li>和列表不同的是，没有默认删除最后一个这个方式。</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(dic.pop(<span class="string">"age"</span>))</span><br></pre></td></tr></table></figure><p>想删除一些键值对，但不确认，又不想找不到报错</p><p><strong>设置第二个参数则无论字典中有无此键都不会报错，且返回第二个参数的内容</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dic.pop(<span class="string">'hoby'</span>) <span class="comment">##KeyError: 'hoby'</span></span><br><span class="line">ret = dic.pop(<span class="string">'sex1'</span>,<span class="string">'没有此键'</span>)</span><br><span class="line">print(ret)    <span class="comment">#没有此键</span></span><br></pre></td></tr></table></figure><ul><li>clear 清空 剩下{}</li><li>del 按照键去删除 没有这个键会报错，所以常用pop</li></ul><h3 id="改：2"><a href="#改：2" class="headerlink" title="改：2"></a>改：2</h3><ul><li>直接改：</li><li>update：无则添加，有则更新</li></ul><h3 id="查：5"><a href="#查：5" class="headerlink" title="查：5"></a>查：5</h3><ul><li>通过键查询值<ul><li>缺点：若没有这个键就会报错 （不建议）</li></ul></li><li>get 推荐 (与pop相似，可以设置第二个参数)</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l1 = dic.get(<span class="string">'hobby'</span>)</span><br><span class="line">ret = dic.get(<span class="string">'hobby1'</span>,<span class="string">'没有此键'</span>)</span><br><span class="line">print(ret)</span><br></pre></td></tr></table></figure><ul><li>keys() values() items()<ul><li>可以转化成列表list(dic.keys())</li><li>遍历循环</li></ul></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(dic.keys())   <span class="comment">#dict_keys(['name', 'age', 'hobby'])</span></span><br><span class="line"></span><br><span class="line">list(dic.keys())</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> dic:</span><br><span class="line">    print(key)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> dic.values():</span><br><span class="line">	print(value)</span><br><span class="line"></span><br><span class="line">print(dic.items())</span><br><span class="line"><span class="comment">#dict_items([('name', 'aa'), ('age', 18), ('hobby', ['排球', '足球'])])</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> dic.items():		</span><br><span class="line">    print(i)			<span class="comment">#输出元组</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> key,values <span class="keyword">in</span> key.items():</span><br><span class="line">	print(key,values)	<span class="comment">#拆包</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">练习：（找菜篮子，放土豆，最后缸里也会有土豆）</span><br><span class="line"><span class="comment"># 请在k3对应的值中追加一个元素 44，输出修改后的字典</span></span><br><span class="line">dic = &#123;<span class="string">'k1'</span>: <span class="string">"v1"</span>, <span class="string">"k2"</span>: <span class="string">"v2"</span>, <span class="string">"k3"</span>: [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>]&#125;</span><br><span class="line"><span class="comment">#法1</span></span><br><span class="line"><span class="comment"># dic['k3'].append(44)</span></span><br><span class="line"><span class="comment"># print(dic)</span></span><br><span class="line">法<span class="number">2</span></span><br><span class="line">l1 = dic[<span class="string">'k3'</span>]</span><br><span class="line">l1.append(<span class="number">44</span>)</span><br><span class="line">print(dic)</span><br><span class="line">法<span class="number">3</span></span><br><span class="line">dic.get(<span class="string">'k3'</span>).append(<span class="number">44</span>)</span><br></pre></td></tr></table></figure><h3 id="字典的嵌套"><a href="#字典的嵌套" class="headerlink" title="字典的嵌套"></a>字典的嵌套</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">练习：</span><br><span class="line">dic = &#123;</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'汪峰'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="number">48</span>,</span><br><span class="line">    <span class="string">'wife'</span>: [&#123;<span class="string">'name'</span>: <span class="string">'国际章'</span>, <span class="string">'age'</span>: <span class="number">38</span>&#125;,],</span><br><span class="line">    <span class="string">'children'</span>: &#123;<span class="string">'girl_first'</span>: <span class="string">'小苹果'</span>,<span class="string">'girl_second'</span>: <span class="string">'小怡'</span>,<span class="string">'girl_three'</span>: <span class="string">'顶顶'</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 获取汪峰的名字。</span></span><br><span class="line">na = dic[<span class="string">'name'</span>]</span><br><span class="line">print(na)</span><br><span class="line"><span class="comment"># 2.获取这个字典：&#123;'name':'国际章','age':38&#125;。</span></span><br><span class="line">dic1 = dic[<span class="string">'wife'</span>][<span class="number">0</span>]</span><br><span class="line">print(dic1)</span><br><span class="line"><span class="comment"># 3. 获取汪峰妻子的名字。</span></span><br><span class="line">na2 = dic[<span class="string">'wife'</span>][<span class="number">0</span>][<span class="string">'name'</span>]</span><br><span class="line">print(na2)</span><br><span class="line"><span class="comment"># 4. 获取汪峰的第三个孩子名字。</span></span><br><span class="line">na3 = dic[<span class="string">'children'</span>][<span class="string">'girl_three'</span>]</span><br><span class="line">print(na3)</span><br></pre></td></tr></table></figure><h3 id="字典推导式"><a href="#字典推导式" class="headerlink" title="字典推导式"></a>字典推导式</h3><p>简单的字典推导式</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">li = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">dic = &#123;key: <span class="string">''</span> <span class="keyword">for</span> key <span class="keyword">in</span> li&#125;</span><br><span class="line">print(dic)    <span class="comment"># &#123;1: '', 2: '', 3: '', 4: '', 5: ''&#125;</span></span><br></pre></td></tr></table></figure><p>双层循环会出现问题，所以利用生成器</p><figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">g = (i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>))</span><br><span class="line">b = [<span class="string">'黑桃'</span>, <span class="string">'红桃'</span>, <span class="string">'梅花'</span>, <span class="string">'方板'</span>]</span><br><span class="line">dic = &#123;<span class="keyword">next</span>(g):i <span class="keyword">for</span> i <span class="keyword">in</span>  b&#125;</span><br><span class="line">print(dic)</span><br><span class="line"><span class="meta"># &#123;1: <span class="string">'黑桃'</span>, 2: <span class="string">'红桃'</span>, 3: <span class="string">'梅花'</span>, 4: <span class="string">'方板'</span>&#125;</span></span><br></pre></td></tr></table></figure><hr>]]></content>
      <categories>
        <category>python学习</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python列表</title>
    <url>/learn-python/20190324-python-list.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>Python列表的介绍，以及列表的常用操作与方法，创建，增：append、insert、extend，删：pop、remove、del、clear，查：索引、切片、sorted，改：按索引、切片。</p></blockquote><a id="more"></a><hr><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><ul><li><p>why：int、bool、str存在缺陷</p><ul><li>str:存储少量的数据；所有的操作获取的内容都是 str类型，存储的数据类型单一。</li></ul></li><li><p>what：</p><ul><li><p>列表可以承载任意数据类型，存储大量的数据。</p></li><li><p>Python常用的容器型数据类型。list 列表，其它语言：Java：数组</p></li><li><p>列表是有序的，可索引，切片（步长）。</p><ul><li>与字符串稍有一点区别（取出来的元素数据类型不同）</li></ul></li><li><p>索引、切片(一切片 就是一个小列表)、步长</p></li></ul><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">li</span> = [100,'taibai',True,[1,2,3]]</span><br><span class="line">#索引</span><br><span class="line"># <span class="keyword">print</span>(<span class="keyword">li</span>[0] , <span class="keyword">type</span>(<span class="keyword">li</span>[0]))</span><br><span class="line"># <span class="keyword">print</span>(<span class="keyword">li</span>[1],<span class="keyword">type</span>(<span class="keyword">li</span>[1]))</span><br><span class="line">#切片  (顾头不顾腚)</span><br><span class="line">#<span class="keyword">print</span>(<span class="keyword">li</span>[:2])</span><br></pre></td></tr></table></figure><ul><li>相关练习题：</li></ul><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">li = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="string">"a"</span>, <span class="number">4</span>, <span class="string">"b"</span>, <span class="number">5</span>,<span class="string">"c"</span>]</span><br><span class="line">通过对li列表的切片形成新的列表l1,l1 = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>]</span><br><span class="line">通过对li列表的切片形成新的列表l2,l2 = [<span class="string">"a"</span>,<span class="number">4</span>,<span class="string">"b"</span>]</span><br><span class="line">通过对li列表的切片形成新的列表l4,l4 = [<span class="number">3</span>,<span class="string">"a"</span>,<span class="string">"b"</span>]</span><br><span class="line">通过对li列表的切片形成新的列表l6,l6 = [<span class="string">"b"</span>,<span class="string">"a"</span>,<span class="number">3</span>]</span><br></pre></td></tr></table></figure></li></ul><h2 id="列表的常用操作与方法"><a href="#列表的常用操作与方法" class="headerlink" title="列表的常用操作与方法"></a>列表的常用操作与方法</h2><p>除了pop有返回值，其它方法都没有返回值</p><h3 id="1-列表的创建"><a href="#1-列表的创建" class="headerlink" title="1. 列表的创建"></a>1. 列表的创建</h3><ul><li>方式一：</li></ul><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">l1</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="string">'abc'</span>]</span><br></pre></td></tr></table></figure><ul><li>方式二：</li></ul><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">l1</span> = list()</span><br><span class="line"><span class="attr">l1</span> = list(<span class="string">'feajoijae'</span>)</span><br></pre></td></tr></table></figure><ul><li>方式三：列表推导式：<ul><li>根据现有元素，和已经确定的推导规则，可以依次推出新的列表的每一项。</li></ul></li></ul><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">lis1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">lis2 = [x**x <span class="keyword">for</span> x <span class="keyword">in</span> lis1]</span><br><span class="line">print(lis2)    #[<span class="number">1</span>, <span class="number">4</span>, <span class="number">27</span>, <span class="number">256</span>, <span class="number">3125</span>, <span class="number">46656</span>]</span><br><span class="line">lis3 = [[x, x*x , x**x] <span class="keyword">for</span> x <span class="keyword">in</span> lis1]</span><br><span class="line">lis4 = [(x, x*x , x**x) <span class="keyword">for</span> x <span class="keyword">in</span> lis1]</span><br><span class="line">lis5 = [&#123;x, x*x , x**x&#125; <span class="keyword">for</span> x <span class="keyword">in</span> lis1]</span><br><span class="line">print(lis3)  #[[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">4</span>, <span class="number">4</span>], [<span class="number">3</span>, <span class="number">9</span>, <span class="number">27</span>], [<span class="number">4</span>, <span class="number">16</span>, <span class="number">256</span>], [<span class="number">5</span>, <span class="number">25</span>, <span class="number">3125</span>], [<span class="number">6</span>, <span class="number">36</span>, <span class="number">46656</span>]]</span><br><span class="line">print(lis4)  #[(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">4</span>, <span class="number">4</span>), (<span class="number">3</span>, <span class="number">9</span>, <span class="number">27</span>), (<span class="number">4</span>, <span class="number">16</span>, <span class="number">256</span>), (<span class="number">5</span>, <span class="number">25</span>, <span class="number">3125</span>), (<span class="number">6</span>, <span class="number">36</span>, <span class="number">46656</span>)]</span><br><span class="line">print(lis5)  #[&#123;<span class="number">1</span>&#125;, &#123;<span class="number">2</span>, <span class="number">4</span>&#125;, &#123;<span class="number">27</span>, <span class="number">9</span>, <span class="number">3</span>&#125;, &#123;<span class="number">16</span>, <span class="number">256</span>, <span class="number">4</span>&#125;, &#123;<span class="number">25</span>, <span class="number">3125</span>, <span class="number">5</span>&#125;, &#123;<span class="number">46656</span>, <span class="number">36</span>, <span class="number">6</span>&#125;]</span><br></pre></td></tr></table></figure><h3 id="2-增"><a href="#2-增" class="headerlink" title="2. 增"></a>2. 增</h3><ol><li>append， 列表最后追加一个元素</li></ol><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">l1 = [<span class="string">'小A'</span>,<span class="string">'小B'</span>,<span class="string">'小C'</span>,<span class="string">'xiao'</span>,<span class="string">'小D'</span>]</span><br><span class="line">l1.append(<span class="string">'xx'</span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(l1)</span></span></span><br><span class="line"></span><br><span class="line">#注意:</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(l1.append(<span class="string">'xx'</span>)</span></span>) #<span class="selector-id">#None</span>  ##打印错了,只是一种追加的方式，没有返回值</span><br></pre></td></tr></table></figure><ol start="2"><li>insert，在列表任意位置插入</li></ol><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">l1 = [<span class="string">'太白'</span>,<span class="string">'女神'</span>,<span class="string">'吴老师'</span>,<span class="string">'xiao'</span>,<span class="string">'阎龙'</span>]</span><br><span class="line">l1.insert(<span class="number">2</span>,<span class="string">'xx'</span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(l1)</span></span></span><br></pre></td></tr></table></figure><ol start="3"><li>extend，列表最后<strong>迭代追加</strong>一组数据(组成对象的最小元素)</li></ol><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">l1</span> = [<span class="string">'小A'</span>,<span class="string">'小B'</span>,<span class="string">'小C'</span>,<span class="string">'小D'</span>]</span><br><span class="line">l1.extend(<span class="string">'abcd'</span>)</span><br><span class="line">l1.extend([<span class="string">'xiao'</span>])  <span class="comment">#组成对象的最小元素</span></span><br></pre></td></tr></table></figure><h3 id="2-删"><a href="#2-删" class="headerlink" title="2. 删"></a>2. 删</h3><ol><li><p>pop 按照索引位置删除,返回删除的元素</p><ol><li>（只有pop操作返回，其它都不返回）</li><li>pop() 默认删除最后一个</li></ol><figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">l<span class="number">1</span> = [<span class="string">'小A'</span>,<span class="string">'小B'</span>,<span class="string">'小C'</span>,<span class="string">'xiao'</span>,<span class="string">'小D'</span>]</span><br><span class="line">l<span class="number">1.</span>pop<span class="comment">(-2)</span></span><br></pre></td></tr></table></figure></li><li><p>remove 删除指定元素</p><ol><li>如果有重名元素呢？默认删除从左数第一个元素</li></ol><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">l1.<span class="built_in">remove</span>(<span class="string">'xiao'</span>)</span><br></pre></td></tr></table></figure></li><li><p>clear() 清空 元素没了，为空列表</p></li><li><p>del</p><ol><li>按照索引删除</li></ol><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">del</span> l1[-<span class="number">1</span>]</span><br></pre></td></tr></table></figure><ol start="2"><li>按照切片删除</li></ol><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">del</span> l1[::<span class="number">2</span>]</span><br></pre></td></tr></table></figure></li></ol><h3 id="3-改"><a href="#3-改" class="headerlink" title="3. 改"></a>3. 改</h3><ol><li>按索引改</li></ol><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">l[0]</span> = <span class="string">'nm'</span></span><br></pre></td></tr></table></figure><ol start="2"><li>按切片改</li></ol><figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">l = [<span class="string">'小A'</span>,<span class="string">'小B'</span>,<span class="string">'小C'</span>,<span class="string">'xiao'</span>,<span class="string">'小D'</span>]</span><br><span class="line">l[<span class="number">1</span>:<span class="number">3</span>] = <span class="string">'abcdefg'</span></span><br><span class="line">print(l) # [<span class="string">'小A'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>, <span class="string">'g'</span>, <span class="string">'xiao'</span>, <span class="string">'小D'</span>]</span><br><span class="line"># <span class="number">1</span>,<span class="number">2</span>被代替，和extend效果相似。</span><br></pre></td></tr></table></figure><ol start="3"><li>按切片（涉及步长（非1）就有了个数要求）（必须一一对应）</li></ol><figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">l = [<span class="string">'小A'</span>,<span class="string">'小B'</span>,<span class="string">'小C'</span>,<span class="string">'xiao'</span>,<span class="string">'小D'</span>]</span><br><span class="line">l[::<span class="number">2</span>] = <span class="string">'对应着'</span></span><br><span class="line">print(l) #[<span class="string">'对'</span>, <span class="string">'小B'</span>, <span class="string">'应'</span>, <span class="string">'xiao'</span>, <span class="string">'着'</span>]</span><br></pre></td></tr></table></figure><p>当步长为默认值1的时候，可以把起点到终点之间元素进行替换，可以增可以减少。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 增</span></span><br><span class="line">lst = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">9</span>]</span><br><span class="line">lst[<span class="number">0</span>:<span class="number">2</span>:<span class="number">1</span>] = <span class="string">'abcdefghi'</span></span><br><span class="line">print(lst)</span><br><span class="line"><span class="comment"># ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 9]</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 减</span></span><br><span class="line">lst = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">9</span>]</span><br><span class="line">lst[<span class="number">0</span>:<span class="number">2</span>:<span class="number">1</span>] = ()</span><br><span class="line">print(lst)</span><br><span class="line"><span class="comment"># [9]</span></span><br></pre></td></tr></table></figure><h3 id="4-查"><a href="#4-查" class="headerlink" title="4. 查"></a>4. 查</h3><ul><li><p>索引、切片</p></li><li><p>循环</p></li><li><p>其它操作：</p><ul><li>sort 排序</li><li>reverse 列表中的元素 反向存放</li></ul></li><li><p>列表可以相加也可以与整数相乘</p></li></ul><h3 id="5-列表的嵌套"><a href="#5-列表的嵌套" class="headerlink" title="5. 列表的嵌套"></a>5. 列表的嵌套</h3><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">lis = [<span class="number">2</span>, <span class="number">3</span>, <span class="string">"k"</span>, [<span class="string">"qwe"</span>, <span class="number">20</span>, [<span class="string">"k1"</span>, [<span class="string">"tt"</span>, <span class="number">3</span>, <span class="string">"1"</span>]], <span class="number">89</span>], <span class="string">"ab"</span>, <span class="string">"adv"</span>]</span><br><span class="line">将列表中的字符串<span class="string">"1"</span>变成数字<span class="number">101</span>（用两种方式）。</span><br><span class="line">#方法<span class="number">1</span>：</span><br><span class="line">del lis[<span class="number">3</span>][<span class="number">2</span>][<span class="number">1</span>][<span class="number">2</span>]</span><br><span class="line">lis[<span class="number">3</span>][<span class="number">2</span>][<span class="number">1</span>].insert(<span class="number">2</span>,<span class="number">101</span>)</span><br><span class="line">#方法<span class="number">2</span>：  ##不知道索引的前提下</span><br><span class="line">def <span class="function"><span class="title">fun</span><span class="params">(lis)</span></span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> lis:</span><br><span class="line">        <span class="keyword">if</span> type(i) <span class="keyword">is</span> list:</span><br><span class="line">        # <span class="keyword">if</span> isinstance(i , list):</span><br><span class="line">            <span class="function"><span class="title">fun</span><span class="params">(i)</span></span></span><br><span class="line">        elif i == <span class="string">'1'</span>:</span><br><span class="line">            a = lis.index(<span class="string">'1'</span>)</span><br><span class="line">            del lis[a]</span><br><span class="line">            lis.insert(a,<span class="number">101</span>)</span><br><span class="line"><span class="function"><span class="title">fun</span><span class="params">(lis)</span></span></span><br><span class="line">print(lis)</span><br></pre></td></tr></table></figure><p>注意：有些函数是针对字符串的 如replace ，有些是针对列表的，注意使用时候区分</p><hr>]]></content>
      <categories>
        <category>python学习</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python列表的相关操作与方法</title>
    <url>/learn-python/20190324-python-list.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>Python列表的介绍，以及列表的常用操作与方法，创建，增：append、insert、extend，删：pop、remove、del、clear，查：索引、切片、sorted，改：按索引、切片。</p></blockquote><a id="more"></a><hr><h2 id="1-列表"><a href="#1-列表" class="headerlink" title="1.列表"></a>1.列表</h2><ul><li><p>why：int、bool、str存在缺陷</p><ul><li>str:存储少量的数据；所有的操作获取的内容都是 str类型，存储的数据类型单一。</li></ul></li><li><p>what：</p><ul><li><p>列表可以承载任意数据类型，存储大量的数据。</p></li><li><p>Python常用的容器型数据类型。list 列表，其它语言：Java：数组</p></li><li><p>列表是有序的，可索引，切片（步长）。</p><ul><li>与字符串稍有一点区别（取出来的元素数据类型不同）</li></ul></li><li><p>索引、切片(一切片 就是一个小列表)、步长</p></li></ul><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">li</span> = [100,'taibai',True,[1,2,3]]</span><br><span class="line">#索引</span><br><span class="line"># <span class="keyword">print</span>(<span class="keyword">li</span>[0] , <span class="keyword">type</span>(<span class="keyword">li</span>[0]))</span><br><span class="line"># <span class="keyword">print</span>(<span class="keyword">li</span>[1],<span class="keyword">type</span>(<span class="keyword">li</span>[1]))</span><br><span class="line">#切片  (顾头不顾腚)</span><br><span class="line">#<span class="keyword">print</span>(<span class="keyword">li</span>[:2])</span><br></pre></td></tr></table></figure><ul><li>相关练习题：</li></ul><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">li = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="string">"a"</span>, <span class="number">4</span>, <span class="string">"b"</span>, <span class="number">5</span>,<span class="string">"c"</span>]</span><br><span class="line">通过对li列表的切片形成新的列表l1,l1 = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>]</span><br><span class="line">通过对li列表的切片形成新的列表l2,l2 = [<span class="string">"a"</span>,<span class="number">4</span>,<span class="string">"b"</span>]</span><br><span class="line">通过对li列表的切片形成新的列表l4,l4 = [<span class="number">3</span>,<span class="string">"a"</span>,<span class="string">"b"</span>]</span><br><span class="line">通过对li列表的切片形成新的列表l6,l6 = [<span class="string">"b"</span>,<span class="string">"a"</span>,<span class="number">3</span>]</span><br></pre></td></tr></table></figure></li></ul><h2 id="2-列表的常用操作与方法"><a href="#2-列表的常用操作与方法" class="headerlink" title="2. 列表的常用操作与方法"></a>2. 列表的常用操作与方法</h2><p>除了pop有返回值，其它方法都没有返回值</p><h3 id="1-列表的创建"><a href="#1-列表的创建" class="headerlink" title="1. 列表的创建"></a>1. 列表的创建</h3><ul><li>方式一：</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="string">'abc'</span>]</span><br></pre></td></tr></table></figure><ul><li>方式二：</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l1 = list()</span><br><span class="line">l1 = list(<span class="string">'feajoijae'</span>)</span><br></pre></td></tr></table></figure><ul><li>方式三：列表推导式：<ul><li>根据现有元素，和已经确定的推导规则，可以依次推出新的列表的每一项。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lis1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">lis2 = [x**x <span class="keyword">for</span> x <span class="keyword">in</span> lis1]</span><br><span class="line">print(lis2)    <span class="comment">#[1, 4, 27, 256, 3125, 46656]</span></span><br><span class="line">lis3 = [[x, x*x , x**x] <span class="keyword">for</span> x <span class="keyword">in</span> lis1]</span><br><span class="line">lis4 = [(x, x*x , x**x) <span class="keyword">for</span> x <span class="keyword">in</span> lis1]</span><br><span class="line">lis5 = [&#123;x, x*x , x**x&#125; <span class="keyword">for</span> x <span class="keyword">in</span> lis1]</span><br><span class="line">print(lis3)  <span class="comment">#[[1, 1, 1], [2, 4, 4], [3, 9, 27], [4, 16, 256], [5, 25, 3125], [6, 36, 46656]]</span></span><br><span class="line">print(lis4)  <span class="comment">#[(1, 1, 1), (2, 4, 4), (3, 9, 27), (4, 16, 256), (5, 25, 3125), (6, 36, 46656)]</span></span><br><span class="line">print(lis5)  <span class="comment">#[&#123;1&#125;, &#123;2, 4&#125;, &#123;27, 9, 3&#125;, &#123;16, 256, 4&#125;, &#123;25, 3125, 5&#125;, &#123;46656, 36, 6&#125;]</span></span><br></pre></td></tr></table></figure><h3 id="2-增"><a href="#2-增" class="headerlink" title="2. 增"></a>2. 增</h3><ol><li>append， 列表最后追加一个元素</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l1 = [<span class="string">'小A'</span>,<span class="string">'小B'</span>,<span class="string">'小C'</span>,<span class="string">'xiao'</span>,<span class="string">'小D'</span>]</span><br><span class="line">l1.append(<span class="string">'xx'</span>)</span><br><span class="line">print(l1)</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意:</span></span><br><span class="line">print(l1.append(<span class="string">'xx'</span>)) <span class="comment">##None  ##打印错了,只是一种追加的方式，没有返回值</span></span><br></pre></td></tr></table></figure><ol start="2"><li>insert，在列表任意位置插入</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l1 = [<span class="string">'太白'</span>,<span class="string">'女神'</span>,<span class="string">'吴老师'</span>,<span class="string">'xiao'</span>,<span class="string">'阎龙'</span>]</span><br><span class="line">l1.insert(<span class="number">2</span>,<span class="string">'xx'</span>)</span><br><span class="line">print(l1)</span><br></pre></td></tr></table></figure><ol start="3"><li>extend，列表最后<strong>迭代追加</strong>一组数据(组成对象的最小元素)</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l1 = [<span class="string">'小A'</span>,<span class="string">'小B'</span>,<span class="string">'小C'</span>,<span class="string">'小D'</span>]</span><br><span class="line">l1.extend(<span class="string">'abcd'</span>)</span><br><span class="line">l1.extend([<span class="string">'xiao'</span>])  <span class="comment">#组成对象的最小元素</span></span><br></pre></td></tr></table></figure><h3 id="2-删"><a href="#2-删" class="headerlink" title="2. 删"></a>2. 删</h3><ol><li><p>pop 按照索引位置删除,返回删除的元素</p><ol><li>（只有pop操作返回，其它都不返回）</li><li>pop() 默认删除最后一个</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l1 = [<span class="string">'小A'</span>,<span class="string">'小B'</span>,<span class="string">'小C'</span>,<span class="string">'xiao'</span>,<span class="string">'小D'</span>]</span><br><span class="line">l1.pop(<span class="number">-2</span>)</span><br></pre></td></tr></table></figure></li><li><p>remove 删除指定元素</p><ol><li>如果有重名元素呢？默认删除从左数第一个元素</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l1.remove(<span class="string">'xiao'</span>)</span><br></pre></td></tr></table></figure></li><li><p>clear() 清空 元素没了，为空列表</p></li><li><p>del</p><ol><li>按照索引删除</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">del</span> l1[<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><ol start="2"><li>按照切片删除</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">del</span> l1[::<span class="number">2</span>]</span><br></pre></td></tr></table></figure></li></ol><p>当我们需要在循环中对循环条件的列表的元素进行删除时，我们可以用 li[:] 做一个浅拷贝，这样的话遍历这个备份，不会丢失元素。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">li=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> li[:]</span><br><span class="line">	<span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">		li.remove(i)</span><br></pre></td></tr></table></figure><h3 id="3-改"><a href="#3-改" class="headerlink" title="3. 改"></a>3. 改</h3><ol><li>按索引改</li></ol><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">l[0]</span> = <span class="string">'nm'</span></span><br></pre></td></tr></table></figure><ol start="2"><li>按切片改</li></ol><figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">l = [<span class="string">'小A'</span>,<span class="string">'小B'</span>,<span class="string">'小C'</span>,<span class="string">'xiao'</span>,<span class="string">'小D'</span>]</span><br><span class="line">l[<span class="number">1</span>:<span class="number">3</span>] = <span class="string">'abcdefg'</span></span><br><span class="line">print(l) # [<span class="string">'小A'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>, <span class="string">'g'</span>, <span class="string">'xiao'</span>, <span class="string">'小D'</span>]</span><br><span class="line"># <span class="number">1</span>,<span class="number">2</span>被代替，和extend效果相似。</span><br></pre></td></tr></table></figure><ol start="3"><li>按切片（涉及步长（非1）就有了个数要求）（必须一一对应）</li></ol><figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">l = [<span class="string">'小A'</span>,<span class="string">'小B'</span>,<span class="string">'小C'</span>,<span class="string">'xiao'</span>,<span class="string">'小D'</span>]</span><br><span class="line">l[::<span class="number">2</span>] = <span class="string">'对应着'</span></span><br><span class="line">print(l) #[<span class="string">'对'</span>, <span class="string">'小B'</span>, <span class="string">'应'</span>, <span class="string">'xiao'</span>, <span class="string">'着'</span>]</span><br></pre></td></tr></table></figure><p>当步长为默认值1的时候，可以把起点到终点之间元素进行替换，可以增可以减少。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 增</span></span><br><span class="line">lst = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">9</span>]</span><br><span class="line">lst[<span class="number">0</span>:<span class="number">2</span>:<span class="number">1</span>] = <span class="string">'abcdefghi'</span></span><br><span class="line">print(lst)</span><br><span class="line"><span class="comment"># ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 9]</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 减</span></span><br><span class="line">lst = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">9</span>]</span><br><span class="line">lst[<span class="number">0</span>:<span class="number">2</span>:<span class="number">1</span>] = ()</span><br><span class="line">print(lst)</span><br><span class="line"><span class="comment"># [9]</span></span><br></pre></td></tr></table></figure><h3 id="4-查"><a href="#4-查" class="headerlink" title="4. 查"></a>4. 查</h3><ul><li><p>索引、切片</p></li><li><p>循环</p></li><li><p>其它操作：</p><ul><li>sort 排序</li><li>reverse 列表中的元素 反向存放</li></ul></li><li><p>列表可以相加也可以与整数相乘</p></li></ul><h3 id="5-列表的嵌套"><a href="#5-列表的嵌套" class="headerlink" title="5. 列表的嵌套"></a>5. 列表的嵌套</h3><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">lis = [<span class="number">2</span>, <span class="number">3</span>, <span class="string">"k"</span>, [<span class="string">"qwe"</span>, <span class="number">20</span>, [<span class="string">"k1"</span>, [<span class="string">"tt"</span>, <span class="number">3</span>, <span class="string">"1"</span>]], <span class="number">89</span>], <span class="string">"ab"</span>, <span class="string">"adv"</span>]</span><br><span class="line">将列表中的字符串<span class="string">"1"</span>变成数字<span class="number">101</span>（用两种方式）。</span><br><span class="line">#方法<span class="number">1</span>：</span><br><span class="line">del lis[<span class="number">3</span>][<span class="number">2</span>][<span class="number">1</span>][<span class="number">2</span>]</span><br><span class="line">lis[<span class="number">3</span>][<span class="number">2</span>][<span class="number">1</span>].insert(<span class="number">2</span>,<span class="number">101</span>)</span><br><span class="line">#方法<span class="number">2</span>：  ##不知道索引的前提下</span><br><span class="line">def <span class="function"><span class="title">fun</span><span class="params">(lis)</span></span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> lis:</span><br><span class="line">        <span class="keyword">if</span> type(i) <span class="keyword">is</span> list:</span><br><span class="line">        # <span class="keyword">if</span> isinstance(i , list):</span><br><span class="line">            <span class="function"><span class="title">fun</span><span class="params">(i)</span></span></span><br><span class="line">        elif i == <span class="string">'1'</span>:</span><br><span class="line">            a = lis.index(<span class="string">'1'</span>)</span><br><span class="line">            del lis[a]</span><br><span class="line">            lis.insert(a,<span class="number">101</span>)</span><br><span class="line"><span class="function"><span class="title">fun</span><span class="params">(lis)</span></span></span><br><span class="line">print(lis)</span><br></pre></td></tr></table></figure><p>注意：有些函数是针对字符串的 如replace ，有些是针对列表的，注意使用时候区分</p><hr>]]></content>
      <categories>
        <category>python学习</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python的基本运算符</title>
    <url>/learn-python/20190322-python-Operator.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>Python的基本运算符以及它们之间的优先级。</p></blockquote><a id="more"></a><hr><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>运算分为算数运算、比较运算、逻辑运算、赋值运算、成员运算、身份运算、位运算。</p><ul><li><p>算术运算 +-<em>/ %求余 *</em>幂 //取整除，返回商的整数部分</p></li><li><p>比较运算：== != &lt;&gt; 不等于（是否不相等） &gt; &lt; &gt;= &lt;=</p></li><li><p>赋值运算 ：= += -= <em>= /= %= *</em>= //=</p></li><li><p>逻辑运算 ：and or not</p><ul><li>优先级 () &gt; not &gt; and &gt; or</li><li>情况1：两边都是比较运算</li><li>情况2：两边都是整数 x or y x为真返回x ，x为假返回y</li><li>x and y 反着记</li></ul><table><thead><tr><th>运算符</th><th>格式</th><th>说明</th></tr></thead><tbody><tr><td>or<br>逻辑或</td><td>x or y</td><td>x为True,则返回True<br>x为False，则返回y</td></tr><tr><td>and<br>逻辑与</td><td>x and y</td><td>x为True，则返回y的值<br>x为False，则返回False</td></tr><tr><td>not<br>逻辑非</td><td>not x</td><td>x为True，返回False<br>x为False，返回True</td></tr></tbody></table></li></ul><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">练习：</span><br><span class="line"><span class="number">1</span>,<span class="number">3</span>&gt;<span class="number">4</span> <span class="keyword">or</span> <span class="number">4</span>&lt;<span class="number">3</span> <span class="keyword">and</span> <span class="number">1</span>==<span class="number">1</span>         </span><br><span class="line"><span class="number">2</span>,<span class="number">1</span> &lt; <span class="number">2</span> <span class="keyword">and</span> <span class="number">3</span> &lt; <span class="number">4</span> <span class="keyword">or</span> <span class="number">1</span>&gt;<span class="number">2</span>       </span><br><span class="line"><span class="number">3</span>,<span class="number">2</span> &gt; <span class="number">1</span> <span class="keyword">and</span> <span class="number">3</span> &lt; <span class="number">4</span> <span class="keyword">or</span> <span class="number">4</span> &gt; <span class="number">5</span> <span class="keyword">and</span> <span class="number">2</span> &lt; <span class="number">1</span>        </span><br><span class="line"><span class="number">4</span>,<span class="number">1</span> &gt; <span class="number">2</span> <span class="keyword">and</span> <span class="number">3</span> &lt; <span class="number">4</span> <span class="keyword">or</span> <span class="number">4</span> &gt; <span class="number">5</span> <span class="keyword">and</span> <span class="number">2</span> &gt; <span class="number">1</span> <span class="keyword">or</span> <span class="number">9</span> &lt; <span class="number">8</span>   </span><br><span class="line"><span class="number">5</span>,<span class="number">1</span> &gt; <span class="number">1</span> <span class="keyword">and</span> <span class="number">3</span> &lt; <span class="number">4</span> <span class="keyword">or</span> <span class="number">4</span> &gt; <span class="number">5</span> <span class="keyword">and</span> <span class="number">2</span> &gt; <span class="number">1</span> <span class="keyword">and</span> <span class="number">9</span> &gt; <span class="number">8</span> <span class="keyword">or</span> <span class="number">7</span> &lt; <span class="number">6</span>                </span><br><span class="line"><span class="number">6</span>,<span class="keyword">not</span> <span class="number">2</span> &gt; <span class="number">1</span> <span class="keyword">and</span> <span class="number">3</span> &lt; <span class="number">4</span> <span class="keyword">or</span> <span class="number">4</span> &gt; <span class="number">5</span> <span class="keyword">and</span> <span class="number">2</span> &gt; <span class="number">1</span> <span class="keyword">and</span> <span class="number">9</span> &gt; <span class="number">8</span> <span class="keyword">or</span> <span class="number">7</span> &lt; <span class="number">6</span></span><br></pre></td></tr></table></figure><ul><li><p>成员运算：</p><ul><li>判断元素是否在元字符串（字典、列表、集合）</li><li>in not in</li><li>通过成员函数的方法，我们不必循环去一一匹配，这也是Python的魅力。</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ditc = &#123;<span class="number">1</span>:<span class="string">'粥'</span>,<span class="number">2</span>:<span class="string">'橘子'</span>,<span class="number">3</span>:<span class="string">'葡萄'</span>,<span class="number">4</span>:<span class="string">'面'</span>,<span class="number">5</span>:<span class="string">'肉'</span>,<span class="number">6</span>:<span class="string">'苹果'</span>,<span class="number">7</span>:<span class="string">'茄子'</span>,<span class="number">8</span>:<span class="string">'西红柿'</span>,<span class="number">9</span>:<span class="string">'土豆'</span>,<span class="number">10</span>:<span class="string">'白菜'</span>,<span class="number">11</span>:<span class="string">'菠菜'</span>,<span class="number">12</span>:<span class="string">'红薯'</span>&#125;</span><br><span class="line">a=<span class="string">'粥'</span></span><br><span class="line">print(a <span class="keyword">in</span> ditc[<span class="number">1</span>])</span><br></pre></td></tr></table></figure></li></ul><h2 id="python运算符优先级"><a href="#python运算符优先级" class="headerlink" title="python运算符优先级"></a>python运算符优先级</h2><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>**</td><td>幂运算</td></tr><tr><td>~ + -</td><td>按位翻转；加号；减号</td></tr><tr><td>* / % //</td><td>乘；除；取余；取整除</td></tr><tr><td>+ -</td><td>加；减</td></tr><tr><td>&gt;&gt; &lt;&lt;</td><td>右移；左移运算符</td></tr><tr><td>&amp;</td><td>位’AND’</td></tr><tr><td>^ |</td><td>位运算符</td></tr><tr><td>&lt;= &lt;&gt; &gt;=</td><td>比较运算符</td></tr><tr><td>&lt;&gt; == !=</td><td>等于运算符</td></tr><tr><td>= %= /= //= += -= <em>= *</em>=</td><td>赋值运算符</td></tr><tr><td>is is not</td><td>身份运算符</td></tr><tr><td>in not in</td><td>成员运算符</td></tr><tr><td>not and or</td><td>逻辑运算符</td></tr></tbody></table><h2 id="好用的三元运算符"><a href="#好用的三元运算符" class="headerlink" title="好用的三元运算符"></a>好用的三元运算符</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ret = 结果<span class="number">1</span> <span class="keyword">if</span> 条件 <span class="keyword">else</span> 结果<span class="number">2</span></span><br><span class="line">条件成立时：ret = 结果<span class="number">1</span></span><br><span class="line">条件不成立时：ret = 结果<span class="number">2</span></span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="string">''</span></span><br><span class="line">ret = name <span class="keyword">if</span> name <span class="keyword">else</span> <span class="string">'暂无'</span></span><br><span class="line">print(ret)    <span class="comment"># '暂无'</span></span><br></pre></td></tr></table></figure><p>当判断条件是否为空时我们可以使用 or 来替代</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="string">''</span></span><br><span class="line">ret = name <span class="keyword">or</span> <span class="string">'暂无'</span></span><br><span class="line">print(ret)  	<span class="comment"># 暂无</span></span><br></pre></td></tr></table></figure><hr>]]></content>
      <categories>
        <category>python学习</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python学习目录</title>
    <url>/learn-python/20190320-python_index.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>Python学习目录</p></blockquote><a id="more"></a><h1 id="Python基础篇"><a href="#Python基础篇" class="headerlink" title="Python基础篇"></a>Python基础篇</h1><ul><li><a href="https://atlasnq.github.io/learn-python/20190320-python-basic-knowledge.html" target="_blank" rel="noopener">初识</a></li></ul><ul><li><a href="https://atlasnq.github.io/learn-python/20190322-python-Operator.html" target="_blank" rel="noopener">基本运算符</a></li></ul><ul><li><a href="https://atlasnq.github.io/learn-python/20190324-python-list.html" target="_blank" rel="noopener">列表</a></li></ul><ul><li><a href="https://atlasnq.github.io/learn-python/20190325-python-dict.html" target="_blank" rel="noopener">字典</a></li></ul><ul><li><a href="https://atlasnq.github.io/learn-python/20190326-python-set.html" target="_blank" rel="noopener">集合</a></li></ul><ul><li><a href="https://atlasnq.github.io/learn-python/20190401-python-string.html" target="_blank" rel="noopener">字符串</a></li></ul><hr><h1 id="Python函数篇"><a href="#Python函数篇" class="headerlink" title="Python函数篇"></a>Python函数篇</h1><ul><li><a href="https://atlasnq.github.io/learn-python/20190403-python-function.html" target="_blank" rel="noopener">函数</a></li></ul><hr><h1 id="Python模块篇"><a href="#Python模块篇" class="headerlink" title="Python模块篇"></a>Python模块篇</h1><ul><li><a href="https://atlasnq.github.io/learn-python/20190404-python-modules.html" target="_blank" rel="noopener">常用模块</a></li></ul><ul><li><a href="https://atlasnq.github.io/learn-python/20190405-python-logging-module.html" target="_blank" rel="noopener">日志模块</a></li></ul><ul><li><a href="https://atlasnq.github.io/categories/learn-python/" target="_blank" rel="noopener">Re模块</a></li></ul><h1 id="Python面向对象篇"><a href="#Python面向对象篇" class="headerlink" title="Python面向对象篇"></a>Python面向对象篇</h1><ul><li><a href="https://atlasnq.github.io/learn-python/20190410-python-OOP.html" target="_blank" rel="noopener">面向对象</a></li></ul><ul><li><a href="https://atlasnq.github.io/learn-python/20190412-python-reflection.html" target="_blank" rel="noopener">反射</a></li></ul><hr><h1 id="Python网络编程篇"><a href="#Python网络编程篇" class="headerlink" title="Python网络编程篇"></a>Python网络编程篇</h1><ul><li><a href="https://atlasnq.github.io/learn-python/20190516-python-socket.html" target="_blank" rel="noopener">socket编程</a></li></ul><hr><h1 id="Python并发编程篇"><a href="#Python并发编程篇" class="headerlink" title="Python并发编程篇"></a>Python并发编程篇</h1><ul><li><a href="https://atlasnq.github.io/learn-python/20190518-python-programming-with-multiprocesses.html" target="_blank" rel="noopener">进程</a></li></ul><ul><li><a href="https://atlasnq.github.io/learn-python/20190519-python-programming-with-threads.html" target="_blank" rel="noopener">线程</a></li></ul><ul><li><a href="https://chennq.com/网络爬虫/20190923-Web_Spider_4.html">协程</a></li></ul><ul><li><a href="https://atlasnq.github.io/categories/learn-python/" target="_blank" rel="noopener">GIL</a></li></ul><ul><li><a href="https://atlasnq.github.io/learn-python/20190521-python-concurrent-programming.html" target="_blank" rel="noopener">并发编程</a></li></ul><hr><h1 id="Python补充"><a href="#Python补充" class="headerlink" title="Python补充"></a>Python补充</h1><ul><li><a href="https://atlasnq.github.io/learn-python/20190411-python-Exception-handling.html" target="_blank" rel="noopener">异常处理</a></li></ul>]]></content>
      <categories>
        <category>python学习</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python初识</title>
    <url>/learn-python/20190320-python-basic-knowledge.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>python的简单介绍，以及一些简单的语法。</p></blockquote><a id="more"></a><h1 id="python介绍"><a href="#python介绍" class="headerlink" title="python介绍"></a>python介绍</h1><p>创始人：Guido van Rossum（龟叔）（终身仁慈独裁者 BDFL）</p><p>主要应用领域：</p><ul><li>云计算：<ul><li>openstack</li></ul></li><li>WEB开发：<ul><li>Django</li></ul></li><li>科学运算、人工智能：<ul><li>Numpy</li><li>SciPy</li><li>Matplotlib</li></ul></li><li>系统运维</li><li>金融<ul><li>建模</li></ul></li><li>图形GUI：<ul><li>PyQT</li><li>WxPython</li><li>TkInter</li></ul></li></ul><h2 id="python是一门什么样的语言-emsp-解释型-强类型"><a href="#python是一门什么样的语言-emsp-解释型-强类型" class="headerlink" title="python是一门什么样的语言:&emsp;解释型 强类型"></a>python是一门什么样的语言:&emsp;解释型 强类型</h2><ul><li><p>编译型与解释型</p><ul><li>编译器把源程序的每一条语句都编译成机器语言，并保存成二进制文件。运行时可以直接以机器语言运行，速度很快。</li><li>执行程序时，一条一条解释成机器语言给计算机执行，运行速度不如编译后的程序运行的快，但在cache的帮助下，可以提高速度。<ul><li>_pycache</li></ul></li></ul></li><li><p>静态语言和动态语言</p><ul><li>动态类型语言：数据类型的检查是在运行时做的。用动态类型语言编程时，不用给变量指定数据类型，该语言会在你第一次赋值给变量时，在内部记录数据类型。</li><li>静态类型语言：数据类型的检查是在运行前（编译阶段）做的。</li></ul></li><li><p>强类型定义语言与弱类型定义语言</p><ul><li>[Why is Python a dynamic language and also a strongly typed languag](<a href="https://wiki.python.org/moin/Why" target="_blank" rel="noopener">https://wiki.python.org/moin/Why</a> is Python a dynamic language and also a strongly typed language)</li><li>强类型定义语言：”1” + 2 报错 ；必须用强制转换</li><li>弱类型定义语言：”1” + 2 得到新的结果</li></ul></li><li><p>编译型VS解释型</p><ul><li><p>编译型</p><ul><li>优点：编译只做一次，运行时不需要编译，执行效率高，脱离语言环境独立运行。</li><li>缺点：编译之后如果<strong>需要修改</strong>则需将<strong>整个模块重新编译</strong>，开发效率低。不支持跨平台</li></ul></li><li><p>解释型</p><ul><li>优点：兼容性良好（提前安装解释器），任何环境都可以运行。开发效率高，修改代码的时候直接修改就可以。</li><li>缺点：每次运行都需要解释一遍，性能上不如解释型语言。</li></ul></li></ul></li></ul><h2 id="python的优缺点"><a href="#python的优缺点" class="headerlink" title="python的优缺点"></a>python的优缺点</h2><ul><li>优点：<ol><li>优雅、明确、简单。</li><li>开发效率高，避免重复造轮子</li><li>高级语言（高级的数据结构以及相应的库函数）</li><li>面向对象</li><li>可移植性</li><li>可扩展性</li><li>可嵌入性</li><li>内存管理器（c/c++的内存是需要程序员管理的，而python中内存管理器是由python解释器负责的）</li></ol></li></ul><ul><li>缺点：<ol><li>速度慢</li><li>代码不能加密</li><li>线程不能利用多CPU<h2 id="python解释器"><a href="#python解释器" class="headerlink" title="python解释器"></a>python解释器</h2></li></ol></li></ul><p>常用的解释器：</p><ul><li>Cpython：官方推荐，可以转成C语言能识别的字节码</li><li>Jpython：可以转成Java语言能识别的字节码</li><li>Ironpython：可以转成.Net语言能识别的字节码</li><li>pypy：动态编译，一次性全部转化（执行效率与开发效率都高）（未来的趋势）</li></ul><h2 id="python发展史"><a href="#python发展史" class="headerlink" title="python发展史"></a>python发展史</h2><ul><li>1989年圣诞节假期，Guido开始写Python语言的编译器</li><li>python2.4 Django诞生</li><li>2008年 python2.6与3.0同时产生</li></ul><h2 id="算法是什么"><a href="#算法是什么" class="headerlink" title="算法是什么"></a>算法是什么</h2><p>计算机编程就是告诉计算机如何做。计算机多才多艺，但不太善于独立思考，我们必须提供详尽的细节，使用它们能够明白的语言将算法提供给它们。<u>算法只不过是流程或菜谱的时髦说法</u>，详尽地描述了如何完成某项任务。</p><h2 id="语句与表达式"><a href="#语句与表达式" class="headerlink" title="语句与表达式"></a>语句与表达式</h2><p>表达式是一些东西（相当于菜谱中的原料），而语句做一些事情（菜谱中的操作说明）。</p><p>如表达式： <code>2*2</code></p><p>语句：<code>print(2*2)</code></p><h1 id="第一个python程序"><a href="#第一个python程序" class="headerlink" title="第一个python程序"></a>第一个python程序</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">"hello word"</span>)</span><br></pre></td></tr></table></figure><p>用来测试我们刚配置好的环境能否使用。</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ul><li><p>why:：简洁，将运算的中间结果暂时存到内存，以便后续程序调用</p></li><li><p>what：代指一些内容或<strong>表示一种指代关系</strong>，<strong>变量可以指向任何数据类型</strong></p></li><li><p>how：</p><ul><li>驼峰： AgeOfOldboy = 73</li><li>下划线： age_of_oldboy</li></ul></li><li><p>where：代指复杂过长的数据</p></li><li><p>变量扩展： 在内存上的细节（贴标签）</p></li><li><p>值并非存储在变量中，而是存储在变量指向的计算机内存中。多个变量可指向同一个值。</p></li><li><p><strong>变量在内存中是唯一命名的</strong></p></li><li><p><strong>变量与数据类型的区分</strong></p></li></ul><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><ul><li>why：生活中存在一直不变的</li><li>what：一直不变的量，python中没有真正不变的常量，为了迎合，全部大写的变量被称为常量</li><li>how：变量名全用大写字母组成来提醒。</li><li>where：BIRTH_OF_CHINA = 1949</li></ul><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><ul><li>why：解释说明，便于理解</li><li>what：注释</li><li>how：<ul><li>单行注释 #</li><li>多行注释’’’ abc’’’ 或”””abc “””</li></ul></li><li>where：函数，类，文件都需要注释；难以理解的代码后面。</li></ul><h2 id="基础数据类型"><a href="#基础数据类型" class="headerlink" title="基础数据类型"></a>基础数据类型</h2><p>why：机器是很傻的，分辨不出，所以人为的划分，我们告诉计算机，他能做它相应的一些操作。</p><p>what：</p><ul><li><p>对数据进行明确的归类划分，便于执行特定的操作。</p></li><li><p>int：100、102 就是数字，数字可以做+-*/</p><ul><li>32位机器：-2^31~2^31-1</li><li>64位机器：-2^63~2^63-1</li></ul></li><li><p>list：[1,2,3,’中国’] （list）</p></li><li><p>str：’china’ 记录信息描述信息(str)</p><p>str(字符型)：’abc’ “abc” ‘’’abc’’’ “””abc”””</p><ul><li><p>‘’’abc’’’用于换行</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">msg=<span class="string">''' </span></span><br><span class="line"><span class="string">今天</span></span><br><span class="line"><span class="string">明天</span></span><br><span class="line"><span class="string">后天</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>单双引号配合使用</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">content=<span class="string">"I'm xiaobai, 18 years old."</span></span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li>字符串可以拼接（相加） 也可以用字符串与数字相乘</li></ol><ul><li><p>bool（布尔型）:True False 判断真假</p><ul><li>判断变量指向的是什么数据类型type()</li></ul><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">type</span>(<span class="keyword">a</span>) <span class="keyword">is</span> <span class="keyword">list</span> :</span><br></pre></td></tr></table></figure></li><li><p>变量与数据类型的区别：</p><ul><li>datatype： a data type or simply type is an attribute of data which tells the compiler or interpreter how the programmer intends to use the data.</li></ul></li></ul><h2 id="用户交互"><a href="#用户交互" class="headerlink" title="用户交互"></a>用户交互</h2><ul><li><p>内容 = input（提示信息）str数据类型</p></li><li><p>练习：用户输入姓名，年龄，性别，并打印’我叫：，今年：，性别：。</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = input(<span class="string">'请输入姓名:'</span>)</span><br><span class="line">sex = input(<span class="string">'请输入性别:'</span>)</span><br><span class="line">age = input(<span class="string">'请输入年龄:'</span>)</span><br><span class="line">msg = <span class="string">'我叫：'</span>+ name +<span class="string">'，性别：'</span> + sex + <span class="string">'，年龄：'</span> + age + <span class="string">'。'</span></span><br><span class="line">print(msg)</span><br></pre></td></tr></table></figure><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><h3 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h3><ol><li>if：</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="number">3</span>&gt;<span class="number">2</span>:</span><br><span class="line">   print(<span class="number">666</span>)</span><br><span class="line">print(<span class="number">222</span>)</span><br></pre></td></tr></table></figure><ol start="2"><li>if else:</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">age = int(input(<span class="string">"请输入年龄"</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> age &gt; <span class="number">18</span> :</span><br><span class="line">	print(<span class="string">"恭喜你成年了！"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">	print(<span class="string">"小屁孩"</span>)</span><br></pre></td></tr></table></figure><ol start="3"><li>if elif elif…else (多选一，<strong>从上到下运行，一旦满足就退出</strong>):</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">score = int(input(<span class="string">"请输入分数"</span>))</span><br><span class="line"><span class="keyword">if</span> score &gt;= <span class="number">80</span> <span class="keyword">and</span> score &lt;= <span class="number">100</span>:</span><br><span class="line">	print(<span class="string">"优秀！"</span>)</span><br><span class="line"><span class="keyword">elif</span> score &gt;= <span class="number">70</span> :	</span><br><span class="line">	print(<span class="string">"良好"</span>)</span><br><span class="line"><span class="keyword">elif</span> score &gt;= <span class="number">60</span> :	</span><br><span class="line">	print(<span class="string">"及格"</span>)	</span><br><span class="line"><span class="keyword">elif</span> score &gt;= <span class="number">0</span> :</span><br><span class="line">	print(<span class="string">"不及格"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">	print(<span class="string">'error'</span>)</span><br></pre></td></tr></table></figure><ol start="4"><li>if if else else:(尽量不要超过3层嵌套)</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">username = input(<span class="string">"请输入用户名:"</span>)</span><br><span class="line">password = input(<span class="string">"请输入密码:"</span>)</span><br><span class="line">your_code = input(<span class="string">"请输入验证码:"</span>)</span><br><span class="line">code = <span class="string">'abc'</span></span><br><span class="line">name = <span class="string">'naqin'</span></span><br><span class="line">pw = <span class="string">'123'</span></span><br><span class="line"><span class="keyword">if</span> code == your_code:</span><br><span class="line">	<span class="keyword">if</span> name == username <span class="keyword">and</span> password == pw:</span><br><span class="line">	print(<span class="string">"成功！"</span>)</span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">	print(<span class="string">"账号或密码错误!"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">print(<span class="string">"验证码错误！"</span>)</span><br></pre></td></tr></table></figure><ol start="5"><li><p>补充：</p><p>在C语言中会出现“悬挂else”的情况，但在python中是不存在的，因为python使用缩进来区分代码块</p></li></ol><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><ul><li>基本循环</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> 条件：</span><br><span class="line">	循环体</span><br></pre></td></tr></table></figure><ul><li>终止循环</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过标志位 flag 终止循环 </span></span><br><span class="line"><span class="comment"># 打印1~100</span></span><br><span class="line">flag = <span class="literal">True</span></span><br><span class="line">num = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> flag :</span><br><span class="line">    <span class="keyword">if</span>(num == <span class="number">100</span>):</span><br><span class="line">        flag = <span class="literal">False</span></span><br><span class="line">    print(num)</span><br><span class="line">    num +=<span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li>break</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">打印<span class="number">1</span>~<span class="number">100</span>之间的偶数</span><br><span class="line">num = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> num :</span><br><span class="line">    <span class="keyword">if</span>(num == <span class="number">101</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">elif</span> num % <span class="number">2</span> ==<span class="number">0</span>:</span><br><span class="line">        print(num)</span><br><span class="line">    num +=<span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li><p>调用系统命令：quit(),exit()</p></li><li><p><strong>continue(终止本次循环)</strong> (出错了)</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">使用<span class="keyword">while</span>循环打印<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#错误代码： 错因： 循环驱动放在了条件判断后面，在一次中止后，循环驱动无法改变，所以后面循环部分都无法执行。</span></span><br><span class="line">num = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> num &lt;= <span class="number">10</span>:</span><br><span class="line">    <span class="keyword">if</span> num == <span class="number">7</span> :</span><br><span class="line">        <span class="keyword">continue</span> </span><br><span class="line">    print(num)</span><br><span class="line">    num += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#正确代码：</span></span><br><span class="line">num = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> num &lt; <span class="number">10</span>:</span><br><span class="line">    num += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> num == <span class="number">7</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    print(num)</span><br></pre></td></tr></table></figure><ul><li>while…else…<ul><li>当while循环正常执行完，中间没有被break中止的话，就会执行else后面的语句。</li></ul></li></ul><h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="selector-tag">i</span> <span class="keyword">in</span> list</span><br></pre></td></tr></table></figure><p>note：虽然python中没有switch语句，我们可以用if-else代替，更优雅的是使用字典来代替。简洁而且查询速度快。</p><hr>]]></content>
      <categories>
        <category>python学习</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构:排序</title>
    <url>/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/20180717-data-struct-sort.html</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>本文介绍了数据结构中常用的排序算法：插入、交换、选择、归并以及基数类排序。</p></blockquote><a id="more"></a><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><p>将无序序列重新排列成有序序列的过程。</p><h3 id="稳定性"><a href="#稳定性" class="headerlink" title="稳定性"></a>稳定性</h3><p>指的是序列中相同的关键字排序后不会改变它们的<strong>相对位置</strong>；如果改变了这个算法就是不稳定的。</p><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><h4 id="插入类排序"><a href="#插入类排序" class="headerlink" title="插入类排序"></a>插入类排序</h4><p><strong>插入</strong>到合适的位置。</p><ul><li>直接插入排序、折半插入排序、希尔排序</li></ul><h4 id="交换类排序"><a href="#交换类排序" class="headerlink" title="交换类排序"></a>交换类排序</h4><p>每一趟排序，都通过一系列的“<strong>交换</strong>”动作，让一个关键字到达它最终的位置。</p><ul><li>起泡排序、快速排序</li></ul><h4 id="选择类排序"><a href="#选择类排序" class="headerlink" title="选择类排序"></a>选择类排序</h4><p>每一趟排序，都选出一个最小（或最大）的关键字，把它和序列中的第一个（或最后一个）关键字交换。</p><ul><li>简单选择排序、堆排序</li></ul><h4 id="归并类排序"><a href="#归并类排序" class="headerlink" title="归并类排序"></a>归并类排序</h4><ul><li>二路归并排序</li></ul><h4 id="基数类排序"><a href="#基数类排序" class="headerlink" title="基数类排序"></a>基数类排序</h4><p>基数类的排序基于<strong>多关键字排序</strong>的思想，把一个逻辑关键字拆分成多个关键字进行排序。如对一副去掉大小王的扑克牌进行排序。</p><ul><li>基数类排序</li></ul><h2 id="插入类排序-1"><a href="#插入类排序-1" class="headerlink" title="插入类排序"></a>插入类排序</h2><h3 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h3><h4 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h4><h4 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h4><h4 id="算法性能"><a href="#算法性能" class="headerlink" title="算法性能"></a>算法性能</h4><h5 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h5><h5 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h5>]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
</search>
